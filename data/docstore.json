{"0":{"pageContent":"--\n\nid: home\n\ntitle: React Docs Beta\n\npermalink: index.html\n\n--\n\n<HomepageHero />\n\n## What is this site? {/*what-is-this-site*/}\n\nWe are rewriting the React documentation with a few differences:\n\nAll explanations are **written using Hooks** rather than classes.\n\nWe've added **interactive examples** and visual diagrams.\n\nGuides include **challenges (with solutions!)** to check your understanding.\n\nThis beta website contains the current draft of the new docs.\n\n## How much content is ready? {/*how-much-content-is-ready*/}\n\n[Learn React](/learn): ~99% finished.\n\n[API Reference](/reference/react): 100% finished.\n\nYou can track our progress [on GitHub.](https://github.com/reactjs/reactjs.org/issues/3308)\n\n## How can I provide feedback? {/*how-can-i-provide-feedback*/}","metadata":{"source":"reactjs.org/beta/src/content/index.md"}},"1":{"pageContent":"You can track our progress [on GitHub.](https://github.com/reactjs/reactjs.org/issues/3308)\n\n## How can I provide feedback? {/*how-can-i-provide-feedback*/}\n\nPlease use [this GitHub issue](https://github.com/reactjs/reactjs.org/issues/3308) or [this anonymous form](https://www.surveymonkey.co.uk/r/PYRPF3X) for high-level feedback. If you spot something that doesn't make sense, please tell us! Additionally, each page has thumbs up/down buttons in the corner.\n\n## Will this site replace the main site? {/*will-this-site-replace-the-main-site*/}\n\nWe aim to switch this site to be the main one once we reach content parity with the [existing React documentation.](https://reactjs.org/) The old React website will be archived at a subdomain so you'll still be able to access it. Old content links will redirect to the archived subdomain, which will have a notice about outdated content.","metadata":{"source":"reactjs.org/beta/src/content/index.md"}},"2":{"pageContent":"--\n\ntitle: Updating Objects in State\n\n--\n\n<Intro>\n\nState can hold any kind of JavaScript value, including objects. But you shouldn't change objects that you hold in the React state directly. Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to correctly update an object in React state\n\nHow to update a nested object without mutating it\n\nWhat immutability is, and how not to break it\n\nHow to make object copying less repetitive with Immer\n\n</YouWillLearn>\n\n## What's a mutation? {/*whats-a-mutation*/}\n\nYou can store any kind of JavaScript value in state.\n\n```js\n\nconst [x, setX] = useState(0);\n\n```\n\nSo far you've been working with numbers, strings, and booleans. These kinds of JavaScript values are \"immutable\", meaning unchangeable or \"read-only\". You can trigger a re-render to _replace_ a value:\n\n```js\n\nsetX(5);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"3":{"pageContent":"```js\n\nsetX(5);\n\n```\n\nThe `x` state changed from `0` to `5`, but the _number `0` itself_ did not change. It's not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.\n\nNow consider an object in state:\n\n```js\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\n```\n\nTechnically, it is possible to change the contents of _the object itself_. **This is called a mutation:**\n\n```js\n\nposition.x = 5;\n\n```\n\nHowever, although objects in React state are technically mutable, you should treat them **as if** they were immutable--like numbers, booleans, and strings. Instead of mutating them, you should always replace them.\n\n## Treat state as read-only {/*treat-state-as-read-only*/}\n\nIn other words, you should **treat any JavaScript object that you put into state as read-only.**","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"4":{"pageContent":"## Treat state as read-only {/*treat-state-as-read-only*/}\n\nIn other words, you should **treat any JavaScript object that you put into state as read-only.**\n\nThis example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n\nconst [position, setPosition] = useState({\n\nx: 0,\n\ny: 0\n\n});\n\nreturn (\n\n<div\n\nonPointerMove={e => {\n\nposition.x = e.clientX;\n\nposition.y = e.clientY;\n\n}}\n\nstyle={{\n\nposition: 'relative',\n\nwidth: '100vw',\n\nheight: '100vh',\n\n}}>\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'red',\n\nborderRadius: '50%',\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\nleft: -10,\n\ntop: -10,\n\nwidth: 20,\n\nheight: 20,\n\n}} />\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n```\n\n</Sandpack>\n\nThe problem is with this bit of code.\n\n```js\n\nonPointerMove={e => {\n\nposition.x = e.clientX;","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"5":{"pageContent":"top: -10,\n\nwidth: 20,\n\nheight: 20,\n\n}} />\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n```\n\n</Sandpack>\n\nThe problem is with this bit of code.\n\n```js\n\nonPointerMove={e => {\n\nposition.x = e.clientX;\n\nposition.y = e.clientY;\n\n}}\n\n```\n\nThis code modifies the object assigned to `position` from [the previous render.](/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time) But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It's like trying to change the order after you've already eaten the meal. While mutating state can work in some cases, we don't recommend it. You should treat the state value you have access to in a render as read-only.\n\nTo actually [trigger a re-render](/learn/state-as-a-snapshot#setting-state-triggers-renders) in this case, **create a *new* object and pass it to the state setting function:**\n\n```js\n\nonPointerMove={e => {\n\nsetPosition({\n\nx: e.clientX,\n\ny: e.clientY\n\n});\n\n}}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"6":{"pageContent":"```js\n\nonPointerMove={e => {\n\nsetPosition({\n\nx: e.clientX,\n\ny: e.clientY\n\n});\n\n}}\n\n```\n\nWith `setPosition`, you're telling React:\n\nReplace `position` with this new object\n\nAnd render this component again\n\nNotice how the red dot now follows your pointer when you touch or hover over the preview area:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n\nconst [position, setPosition] = useState({\n\nx: 0,\n\ny: 0\n\n});\n\nreturn (\n\n<div\n\nonPointerMove={e => {\n\nsetPosition({\n\nx: e.clientX,\n\ny: e.clientY\n\n});\n\n}}\n\nstyle={{\n\nposition: 'relative',\n\nwidth: '100vw',\n\nheight: '100vh',\n\n}}>\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'red',\n\nborderRadius: '50%',\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\nleft: -10,\n\ntop: -10,\n\nwidth: 20,\n\nheight: 20,\n\n}} />\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Local mutation is fine {/*local-mutation-is-fine*/}\n\nCode like this is a problem because it modifies an *existing* object in state:\n\n```js\n\nposition.x = e.clientX;","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"7":{"pageContent":"```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Local mutation is fine {/*local-mutation-is-fine*/}\n\nCode like this is a problem because it modifies an *existing* object in state:\n\n```js\n\nposition.x = e.clientX;\n\nposition.y = e.clientY;\n\n```\n\nBut code like this is **absolutely fine** because you're mutating a fresh object you have *just created*:\n\n```js\n\nconst nextPosition = {};\n\nnextPosition.x = e.clientX;\n\nnextPosition.y = e.clientY;\n\nsetPosition(nextPosition);\n\n````\n\nIn fact, it is completely equivalent to writing this:\n\n```js\n\nsetPosition({\n\nx: e.clientX,\n\ny: e.clientY\n\n});\n\n```\n\nMutation is only a problem when you change *existing* objects that are already in state. Mutating an object you've just created is okay because *no other code references it yet.* Changing it isn't going to accidentally impact something that depends on it. This is called a \"local mutation\". You can even do local mutation [while rendering.](/learn/keeping-components-pure#local-mutation-your-components-little-secret) Very convenient and completely okay!\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"8":{"pageContent":"</DeepDive>\n\n## Copying objects with the spread syntax {/*copying-objects-with-the-spread-syntax*/}\n\nIn the previous example, the `position` object is always created fresh from the current cursor position. But often, you will want to include *existing* data as a part of the new object you're creating. For example, you may want to update *only one* field in a form, but keep the previous values for all other fields.\n\nThese input fields don't work because the `onChange` handlers mutate the state:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nfirstName: 'Barbara',\n\nlastName: 'Hepworth',\n\nemail: 'bhepworth@sculpture.com'\n\n});\n\nfunction handleFirstNameChange(e) {\n\nperson.firstName = e.target.value;\n\n}\n\nfunction handleLastNameChange(e) {\n\nperson.lastName = e.target.value;\n\n}\n\nfunction handleEmailChange(e) {\n\nperson.email = e.target.value;\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={person.firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"9":{"pageContent":"}\n\nfunction handleEmailChange(e) {\n\nperson.email = e.target.value;\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={person.firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:\n\n<input\n\nvalue={person.lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n<label>\n\nEmail:\n\n<input\n\nvalue={person.email}\n\nonChange={handleEmailChange}\n\n/>\n\n</label>\n\n<p>\n\n{person.firstName}{' '}\n\n{person.lastName}{' '}\n\n({person.email})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nFor example, this line mutates the state from a past render:\n\n```js\n\nperson.firstName = e.target.value;\n\n```\n\nThe reliable way to get the behavior you're looking for is to create a new object and pass it to `setPerson`. But here, you want to also **copy the existing data into it** because only one of the fields has changed:\n\n```js\n\nsetPerson({\n\nfirstName: e.target.value, // New first name from the input\n\nlastName: person.lastName,\n\nemail: person.email\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"10":{"pageContent":"```js\n\nsetPerson({\n\nfirstName: e.target.value, // New first name from the input\n\nlastName: person.lastName,\n\nemail: person.email\n\n});\n\n```\n\nYou can use the `...` [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals) syntax so that you don't need to copy every property separately.\n\n```js\n\nsetPerson({\n\n...person, // Copy the old fields\n\nfirstName: e.target.value // But override this one\n\n});\n\n```\n\nNow the form works!\n\nNotice how you didn't declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient--as long as you update it correctly!\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nfirstName: 'Barbara',\n\nlastName: 'Hepworth',\n\nemail: 'bhepworth@sculpture.com'\n\n});\n\nfunction handleFirstNameChange(e) {\n\nsetPerson({\n\n...person,\n\nfirstName: e.target.value\n\n});\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetPerson({\n\n...person,","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"11":{"pageContent":"lastName: 'Hepworth',\n\nemail: 'bhepworth@sculpture.com'\n\n});\n\nfunction handleFirstNameChange(e) {\n\nsetPerson({\n\n...person,\n\nfirstName: e.target.value\n\n});\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetPerson({\n\n...person,\n\nlastName: e.target.value\n\n});\n\n}\n\nfunction handleEmailChange(e) {\n\nsetPerson({\n\n...person,\n\nemail: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={person.firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:\n\n<input\n\nvalue={person.lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n<label>\n\nEmail:\n\n<input\n\nvalue={person.email}\n\nonChange={handleEmailChange}\n\n/>\n\n</label>\n\n<p>\n\n{person.firstName}{' '}\n\n{person.lastName}{' '}\n\n({person.email})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nNote that the `...` spread syntax is \"shallow\"--it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you'll have to use it more than once.\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"12":{"pageContent":"<DeepDive>\n\n#### Using a single event handler for multiple fields {/*using-a-single-event-handler-for-multiple-fields*/}\n\nYou can also use the `[` and `]` braces inside your object definition to specify a property with dynamic name. Here is the same example, but with a single event handler instead of three different ones:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nfirstName: 'Barbara',\n\nlastName: 'Hepworth',\n\nemail: 'bhepworth@sculpture.com'\n\n});\n\nfunction handleChange(e) {\n\nsetPerson({\n\n...person,\n\n[e.target.name]: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input\n\nname=\"firstName\"\n\nvalue={person.firstName}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:\n\n<input\n\nname=\"lastName\"\n\nvalue={person.lastName}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n<label>\n\nEmail:\n\n<input\n\nname=\"email\"\n\nvalue={person.email}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n<p>\n\n{person.firstName}{' '}\n\n{person.lastName}{' '}\n\n({person.email})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"13":{"pageContent":"</label>\n\n<label>\n\nEmail:\n\n<input\n\nname=\"email\"\n\nvalue={person.email}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n<p>\n\n{person.firstName}{' '}\n\n{person.lastName}{' '}\n\n({person.email})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nHere, `e.target.name` refers to the `name` property given to the `<input>` DOM element.\n\n</DeepDive>\n\n## Updating a nested object {/*updating-a-nested-object*/}\n\nConsider a nested object structure like this:\n\n```js\n\nconst [person, setPerson] = useState({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\n```\n\nIf you wanted to update `person.artwork.city`, it's clear how to do it with mutation:\n\n```js\n\nperson.artwork.city = 'New Delhi';\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"14":{"pageContent":"city: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\n```\n\nIf you wanted to update `person.artwork.city`, it's clear how to do it with mutation:\n\n```js\n\nperson.artwork.city = 'New Delhi';\n\n```\n\nBut in React, you treat state as immutable! In order to change `city`, you would first need to produce the new `artwork` object (pre-populated with data from the previous one), and then produce the new `person` object which points at the new `artwork`:\n\n```js\n\nconst nextArtwork = { ...person.artwork, city: 'New Delhi' };\n\nconst nextPerson = { ...person, artwork: nextArtwork };\n\nsetPerson(nextPerson);\n\n```\n\nOr, written as a single function call:\n\n```js\n\nsetPerson({\n\n...person, // Copy other fields\n\nartwork: { // but replace the artwork\n\n...person.artwork, // with the same one\n\ncity: 'New Delhi' // but in New Delhi!\n\n}\n\n});\n\n```\n\nThis gets a bit wordy, but it works fine for many cases:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nname: 'Niki de Saint Phalle',","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"15":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nsetPerson({\n\n...person,\n\nname: e.target.value\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\ntitle: e.target.value\n\n}\n\n});\n\n}\n\nfunction handleCityChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\ncity: e.target.value\n\n}\n\n});\n\n}\n\nfunction handleImageChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\nimage: e.target.value\n\n}\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nName:\n\n<input\n\nvalue={person.name}\n\nonChange={handleNameChange}\n\n/>\n\n</label>\n\n<label>\n\nTitle:\n\n<input\n\nvalue={person.artwork.title}\n\nonChange={handleTitleChange}\n\n/>\n\n</label>\n\n<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"16":{"pageContent":"<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}\n\n{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\nimg { width: 200px; height: 200px; }\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Objects are not really nested {/*objects-are-not-really-nested*/}\n\nAn object like this appears \"nested\" in code:\n\n```js\n\nlet obj = {\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n};\n\n```\n\nHowever, \"nesting\" is an inaccurate way to think about how objects behave. When the code executes, there is no such thing as a \"nested\" object. You are really looking at two different objects:\n\n```js\n\nlet obj1 = {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"17":{"pageContent":"```js\n\nlet obj1 = {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n};\n\nlet obj2 = {\n\nname: 'Niki de Saint Phalle',\n\nartwork: obj1\n\n};\n\n```\n\nThe `obj1` object is not \"inside\" `obj2`. For example, `obj3` could \"point\" at `obj1` too:\n\n```js\n\nlet obj1 = {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n};\n\nlet obj2 = {\n\nname: 'Niki de Saint Phalle',\n\nartwork: obj1\n\n};\n\nlet obj3 = {\n\nname: 'Copycat',\n\nartwork: obj1\n\n};\n\n```\n\nIf you were to mutate `obj3.artwork.city`, it would affect both `obj2.artwork.city` and `obj1.city`. This is because `obj3.artwork`, `obj2.artwork`, and `obj1` are the same object. This is difficult to see when you think of objects as \"nested\". Instead, they are separate objects \"pointing\" at each other with properties.\n\n</DeepDive>\n\n### Write concise update logic with Immer {/*write-concise-update-logic-with-immer*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"18":{"pageContent":"</DeepDive>\n\n### Write concise update logic with Immer {/*write-concise-update-logic-with-immer*/}\n\nIf your state is deeply nested, you might want to consider [flattening it.](/learn/choosing-the-state-structure#avoid-deeply-nested-state) But, if you don't want to change your state structure, you might prefer a shortcut to nested spreads. [Immer](https://github.com/immerjs/use-immer) is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are \"breaking the rules\" and mutating an object:\n\n```js\n\nupdatePerson(draft => {\n\ndraft.artwork.city = 'Lagos';\n\n});\n\n```\n\nBut unlike a regular mutation, it doesn't overwrite the past state!\n\n<DeepDive>\n\n#### How does Immer work? {/*how-does-immer-work*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"19":{"pageContent":"```js\n\nupdatePerson(draft => {\n\ndraft.artwork.city = 'Lagos';\n\n});\n\n```\n\nBut unlike a regular mutation, it doesn't overwrite the past state!\n\n<DeepDive>\n\n#### How does Immer work? {/*how-does-immer-work*/}\n\nThe `draft` provided by Immer is a special type of object, called a [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy), that \"records\" what you do with it. This is why you can mutate it freely as much as you like! Under the hood, Immer figures out which parts of the `draft` have been changed, and produces a completely new object that contains your edits.\n\n</DeepDive>\n\nTo try Immer:\n\n1. Run `npm install use-immer` to add Immer as a dependency\n\n2. Then replace `import { useState } from 'react'` with `import { useImmer } from 'use-immer'`\n\nHere is the above example converted to Immer:\n\n<Sandpack>\n\n```js\n\nimport { useImmer } from 'use-immer';\n\nexport default function Form() {\n\nconst [person, updatePerson] = useImmer({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"20":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useImmer } from 'use-immer';\n\nexport default function Form() {\n\nconst [person, updatePerson] = useImmer({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nupdatePerson(draft => {\n\ndraft.name = e.target.value;\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nupdatePerson(draft => {\n\ndraft.artwork.title = e.target.value;\n\n});\n\n}\n\nfunction handleCityChange(e) {\n\nupdatePerson(draft => {\n\ndraft.artwork.city = e.target.value;\n\n});\n\n}\n\nfunction handleImageChange(e) {\n\nupdatePerson(draft => {\n\ndraft.artwork.image = e.target.value;\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nName:\n\n<input\n\nvalue={person.name}\n\nonChange={handleNameChange}\n\n/>\n\n</label>\n\n<label>\n\nTitle:\n\n<input\n\nvalue={person.artwork.title}\n\nonChange={handleTitleChange}\n\n/>\n\n</label>\n\n<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"21":{"pageContent":"City:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}\n\n{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\nimg { width: 200px; height: 200px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"22":{"pageContent":"\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\nimg { width: 200px; height: 200px; }\n\n```\n\n</Sandpack>\n\nNotice how much more concise the event handlers have become. You can mix and match `useState` and `useImmer` in a single component as much as you like. Immer is a great way to keep the update handlers concise, especially if there's nesting in your state, and copying objects leads to repetitive code.\n\n<DeepDive>\n\n#### Why is mutating state not recommended in React? {/*why-is-mutating-state-not-recommended-in-react*/}\n\nThere are a few reasons:\n\n**Debugging:** If you use `console.log` and don't mutate state, your past logs won't get clobbered by the more recent state changes. So you can clearly see how state has changed between renders.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"23":{"pageContent":"**Debugging:** If you use `console.log` and don't mutate state, your past logs won't get clobbered by the more recent state changes. So you can clearly see how state has changed between renders.\n\n**Optimizations:** Common React [optimization strategies](/reference/react/memo) rely on skipping work if previous props or state are the same as the next ones. If you never mutate state, it is very fast to check whether there were any changes. If `prevObj === obj`, you can be sure that nothing could have changed inside of it.\n\n**New Features:** The new React features we're building rely on state being [treated like a snapshot.](/learn/state-as-a-snapshot) If you're mutating past versions of state, that may prevent you from using the new features.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"24":{"pageContent":"**Requirement Changes:** Some application features, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values, are easier to do when nothing is mutated. This is because you can keep past copies of state in memory, and reuse them when appropriate. If you start with a mutative approach, features like this can be difficult to add later on.\n\n**Simpler Implementation:** Because React does not rely on mutation, it does not need to do anything special with your objects. It does not need to hijack their properties, always wrap them into Proxies, or do other work at initialization as many \"reactive\" solutions do. This is also why React lets you put any object into state--no matter how large--without additional performance or correctness pitfalls.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"25":{"pageContent":"In practice, you can often \"get away\" with mutating state in React, but we strongly advise you not to do that so that you can use new React features developed with this approach in mind. Future contributors and perhaps even your future self will thank you!\n\n</DeepDive>\n\n<Recap>\n\nTreat all state in React as immutable.\n\nWhen you store objects in state, mutating them will not trigger renders and will change the state in previous render \"snapshots\".\n\nInstead of mutating an object, create a *new* version of it, and trigger a re-render by setting state to it.\n\nYou can use the `{...obj, something: 'newValue'}` object spread syntax to create copies of objects.\n\nSpread syntax is shallow: it only copies one level deep.\n\nTo update a nested object, you need to create copies all the way up from the place you're updating.\n\nTo reduce repetitive copying code, use Immer.\n\n</Recap>\n\n<Challenges>\n\n#### Fix incorrect state updates {/*fix-incorrect-state-updates*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"26":{"pageContent":"To reduce repetitive copying code, use Immer.\n\n</Recap>\n\n<Challenges>\n\n#### Fix incorrect state updates {/*fix-incorrect-state-updates*/}\n\nThis form has a few bugs. Click the button that increases the score a few times. Notice that it does not increase. Then edit the first name, and notice that the score has suddenly \"caught up\" with your changes. Finally, edit the last name, and notice that the score has disappeared completely.\n\nYour task is to fix all of these bugs. As you fix them, explain why each of them happens.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n\nconst [player, setPlayer] = useState({\n\nfirstName: 'Ranjani',\n\nlastName: 'Shettar',\n\nscore: 10,\n\n});\n\nfunction handlePlusClick() {\n\nplayer.score++;\n\n}\n\nfunction handleFirstNameChange(e) {\n\nsetPlayer({\n\n...player,\n\nfirstName: e.target.value,\n\n});\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetPlayer({\n\nlastName: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nScore: <b>{player.score}</b>\n\n{' '}\n\n<button onClick={handlePlusClick}>\n\n+1\n\n</button>\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"27":{"pageContent":"});\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetPlayer({\n\nlastName: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nScore: <b>{player.score}</b>\n\n{' '}\n\n<button onClick={handlePlusClick}>\n\n+1\n\n</button>\n\n</label>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={player.firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:\n\n<input\n\nvalue={player.lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHere is a version with both bugs fixed:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n\nconst [player, setPlayer] = useState({\n\nfirstName: 'Ranjani',\n\nlastName: 'Shettar',\n\nscore: 10,\n\n});\n\nfunction handlePlusClick() {\n\nsetPlayer({\n\n...player,\n\nscore: player.score + 1,\n\n});\n\n}\n\nfunction handleFirstNameChange(e) {\n\nsetPlayer({\n\n...player,\n\nfirstName: e.target.value,\n\n});\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetPlayer({\n\n...player,\n\nlastName: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nScore: <b>{player.score}</b>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"28":{"pageContent":"setPlayer({\n\n...player,\n\nfirstName: e.target.value,\n\n});\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetPlayer({\n\n...player,\n\nlastName: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nScore: <b>{player.score}</b>\n\n{' '}\n\n<button onClick={handlePlusClick}>\n\n+1\n\n</button>\n\n</label>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={player.firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:\n\n<input\n\nvalue={player.lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nThe problem with `handlePlusClick` was that it mutated the `player` object. As a result, React did not know that there's a reason to re-render, and did not update the score on the screen. This is why, when you edited the first name, the state got updated, triggering a re-render which _also_ updated the score on the screen.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"29":{"pageContent":"The problem with `handleLastNameChange` was that it did not copy the existing `...player` fields into the new object. This is why the score got lost after you edited the last name.\n\n</Solution>\n\n#### Find and fix the mutation {/*find-and-fix-the-mutation*/}\n\nThere is a draggable box on a static background. You can change the box's color using the select input.\n\nBut there is a bug. If you move the box first, and then change its color, the background (which isn't supposed to move!) will \"jump\" to the box position. But this should not happen: the `Background`'s `position` prop is set to `initialPosition`, which is `{ x: 0, y: 0 }`. Why is the background moving after the color change?\n\nFind the bug and fix it.\n\n<Hint>\n\nIf something unexpected changes, there is a mutation. Find the mutation in `App.js` and fix it.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Background from './Background.js';\n\nimport Box from './Box.js';\n\nconst initialPosition = {\n\nx: 0,\n\ny: 0\n\n};","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"30":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Background from './Background.js';\n\nimport Box from './Box.js';\n\nconst initialPosition = {\n\nx: 0,\n\ny: 0\n\n};\n\nexport default function Canvas() {\n\nconst [shape, setShape] = useState({\n\ncolor: 'orange',\n\nposition: initialPosition\n\n});\n\nfunction handleMove(dx, dy) {\n\nshape.position.x += dx;\n\nshape.position.y += dy;\n\n}\n\nfunction handleColorChange(e) {\n\nsetShape({\n\n...shape,\n\ncolor: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<select\n\nvalue={shape.color}\n\nonChange={handleColorChange}\n\n>\n\n<option value=\"orange\">orange</option>\n\n<option value=\"lightpink\">lightpink</option>\n\n<option value=\"aliceblue\">aliceblue</option>\n\n</select>\n\n<Background\n\nposition={initialPosition}\n\n/>\n\n<Box\n\ncolor={shape.color}\n\nposition={shape.position}\n\nonMove={handleMove}\n\n>\n\nDrag me!\n\n</Box>\n\n</>\n\n);\n\n}\n\n```\n\n```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"31":{"pageContent":"```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {\n\ne.target.setPointerCapture(e.pointerId);\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\n}\n\nfunction handlePointerMove(e) {\n\nif (lastCoordinates) {\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\nconst dx = e.clientX - lastCoordinates.x;\n\nconst dy = e.clientY - lastCoordinates.y;\n\nonMove(dx, dy);\n\n}\n\n}\n\nfunction handlePointerUp(e) {\n\nsetLastCoordinates(null);\n\n}\n\nreturn (\n\n<div\n\nonPointerDown={handlePointerDown}\n\nonPointerMove={handlePointerMove}\n\nonPointerUp={handlePointerUp}\n\nstyle={{\n\nwidth: 100,\n\nheight: 100,\n\ncursor: 'grab',\n\nbackgroundColor: color,\n\nposition: 'absolute',\n\nborder: '1px solid black',\n\ndisplay: 'flex',\n\njustifyContent: 'center',\n\nalignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"32":{"pageContent":"alignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\nwidth: 250,\n\nheight: 250,\n\nbackgroundColor: 'rgba(200, 200, 0, 0.2)',\n\n}} />\n\n);\n\n};\n\n```\n\n```css\n\nbody { height: 280px; }\n\nselect { margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem was in the mutation inside `handleMove`. It mutated `shape.position`, but that's the same object that `initialPosition` points at. This is why both the shape and the background move. (It's a mutation, so the change doesn't reflect on the screen until an unrelated update--the color change--triggers a re-render.)\n\nThe fix is to remove the mutation from `handleMove`, and use the spread syntax to copy the shape. Note that `+=` is a mutation, so you need to rewrite it to use a regular `+` operation.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"33":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Background from './Background.js';\n\nimport Box from './Box.js';\n\nconst initialPosition = {\n\nx: 0,\n\ny: 0\n\n};\n\nexport default function Canvas() {\n\nconst [shape, setShape] = useState({\n\ncolor: 'orange',\n\nposition: initialPosition\n\n});\n\nfunction handleMove(dx, dy) {\n\nsetShape({\n\n...shape,\n\nposition: {\n\nx: shape.position.x + dx,\n\ny: shape.position.y + dy,\n\n}\n\n});\n\n}\n\nfunction handleColorChange(e) {\n\nsetShape({\n\n...shape,\n\ncolor: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<select\n\nvalue={shape.color}\n\nonChange={handleColorChange}\n\n>\n\n<option value=\"orange\">orange</option>\n\n<option value=\"lightpink\">lightpink</option>\n\n<option value=\"aliceblue\">aliceblue</option>\n\n</select>\n\n<Background\n\nposition={initialPosition}\n\n/>\n\n<Box\n\ncolor={shape.color}\n\nposition={shape.position}\n\nonMove={handleMove}\n\n>\n\nDrag me!\n\n</Box>\n\n</>\n\n);\n\n}\n\n```\n\n```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"34":{"pageContent":"```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {\n\ne.target.setPointerCapture(e.pointerId);\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\n}\n\nfunction handlePointerMove(e) {\n\nif (lastCoordinates) {\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\nconst dx = e.clientX - lastCoordinates.x;\n\nconst dy = e.clientY - lastCoordinates.y;\n\nonMove(dx, dy);\n\n}\n\n}\n\nfunction handlePointerUp(e) {\n\nsetLastCoordinates(null);\n\n}\n\nreturn (\n\n<div\n\nonPointerDown={handlePointerDown}\n\nonPointerMove={handlePointerMove}\n\nonPointerUp={handlePointerUp}\n\nstyle={{\n\nwidth: 100,\n\nheight: 100,\n\ncursor: 'grab',\n\nbackgroundColor: color,\n\nposition: 'absolute',\n\nborder: '1px solid black',\n\ndisplay: 'flex',\n\njustifyContent: 'center',\n\nalignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"35":{"pageContent":"alignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\nwidth: 250,\n\nheight: 250,\n\nbackgroundColor: 'rgba(200, 200, 0, 0.2)',\n\n}} />\n\n);\n\n};\n\n```\n\n```css\n\nbody { height: 280px; }\n\nselect { margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Update an object with Immer {/*update-an-object-with-immer*/}\n\nThis is the same buggy example as in the previous challenge. This time, fix the mutation by using Immer. For your convenience, `useImmer` is already imported, so you need to change the `shape` state variable to use it.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nimport Background from './Background.js';\n\nimport Box from './Box.js';\n\nconst initialPosition = {\n\nx: 0,\n\ny: 0\n\n};\n\nexport default function Canvas() {\n\nconst [shape, setShape] = useState({\n\ncolor: 'orange',","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"36":{"pageContent":"import Background from './Background.js';\n\nimport Box from './Box.js';\n\nconst initialPosition = {\n\nx: 0,\n\ny: 0\n\n};\n\nexport default function Canvas() {\n\nconst [shape, setShape] = useState({\n\ncolor: 'orange',\n\nposition: initialPosition\n\n});\n\nfunction handleMove(dx, dy) {\n\nshape.position.x += dx;\n\nshape.position.y += dy;\n\n}\n\nfunction handleColorChange(e) {\n\nsetShape({\n\n...shape,\n\ncolor: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<select\n\nvalue={shape.color}\n\nonChange={handleColorChange}\n\n>\n\n<option value=\"orange\">orange</option>\n\n<option value=\"lightpink\">lightpink</option>\n\n<option value=\"aliceblue\">aliceblue</option>\n\n</select>\n\n<Background\n\nposition={initialPosition}\n\n/>\n\n<Box\n\ncolor={shape.color}\n\nposition={shape.position}\n\nonMove={handleMove}\n\n>\n\nDrag me!\n\n</Box>\n\n</>\n\n);\n\n}\n\n```\n\n```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {\n\ne.target.setPointerCapture(e.pointerId);\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"37":{"pageContent":"position,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {\n\ne.target.setPointerCapture(e.pointerId);\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\n}\n\nfunction handlePointerMove(e) {\n\nif (lastCoordinates) {\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\nconst dx = e.clientX - lastCoordinates.x;\n\nconst dy = e.clientY - lastCoordinates.y;\n\nonMove(dx, dy);\n\n}\n\n}\n\nfunction handlePointerUp(e) {\n\nsetLastCoordinates(null);\n\n}\n\nreturn (\n\n<div\n\nonPointerDown={handlePointerDown}\n\nonPointerMove={handlePointerMove}\n\nonPointerUp={handlePointerUp}\n\nstyle={{\n\nwidth: 100,\n\nheight: 100,\n\ncursor: 'grab',\n\nbackgroundColor: color,\n\nposition: 'absolute',\n\nborder: '1px solid black',\n\ndisplay: 'flex',\n\njustifyContent: 'center',\n\nalignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\nwidth: 250,","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"38":{"pageContent":">{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\nwidth: 250,\n\nheight: 250,\n\nbackgroundColor: 'rgba(200, 200, 0, 0.2)',\n\n}} />\n\n);\n\n};\n\n```\n\n```css\n\nbody { height: 280px; }\n\nselect { margin-bottom: 10px; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThis is the solution rewritten with Immer. Notice how the event handlers are written in a mutating fashion, but the bug does not occur. This is because under the hood, Immer never mutates the existing objects.\n\n<Sandpack>\n\n```js App.js\n\nimport { useImmer } from 'use-immer';\n\nimport Background from './Background.js';\n\nimport Box from './Box.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"39":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useImmer } from 'use-immer';\n\nimport Background from './Background.js';\n\nimport Box from './Box.js';\n\nconst initialPosition = {\n\nx: 0,\n\ny: 0\n\n};\n\nexport default function Canvas() {\n\nconst [shape, updateShape] = useImmer({\n\ncolor: 'orange',\n\nposition: initialPosition\n\n});\n\nfunction handleMove(dx, dy) {\n\nupdateShape(draft => {\n\ndraft.position.x += dx;\n\ndraft.position.y += dy;\n\n});\n\n}\n\nfunction handleColorChange(e) {\n\nupdateShape(draft => {\n\ndraft.color = e.target.value;\n\n});\n\n}\n\nreturn (\n\n<>\n\n<select\n\nvalue={shape.color}\n\nonChange={handleColorChange}\n\n>\n\n<option value=\"orange\">orange</option>\n\n<option value=\"lightpink\">lightpink</option>\n\n<option value=\"aliceblue\">aliceblue</option>\n\n</select>\n\n<Background\n\nposition={initialPosition}\n\n/>\n\n<Box\n\ncolor={shape.color}\n\nposition={shape.position}\n\nonMove={handleMove}\n\n>\n\nDrag me!\n\n</Box>\n\n</>\n\n);\n\n}\n\n```\n\n```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"40":{"pageContent":"```js Box.js\n\nimport { useState } from 'react';\n\nexport default function Box({\n\nchildren,\n\ncolor,\n\nposition,\n\nonMove\n\n}) {\n\nconst [\n\nlastCoordinates,\n\nsetLastCoordinates\n\n] = useState(null);\n\nfunction handlePointerDown(e) {\n\ne.target.setPointerCapture(e.pointerId);\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\n}\n\nfunction handlePointerMove(e) {\n\nif (lastCoordinates) {\n\nsetLastCoordinates({\n\nx: e.clientX,\n\ny: e.clientY,\n\n});\n\nconst dx = e.clientX - lastCoordinates.x;\n\nconst dy = e.clientY - lastCoordinates.y;\n\nonMove(dx, dy);\n\n}\n\n}\n\nfunction handlePointerUp(e) {\n\nsetLastCoordinates(null);\n\n}\n\nreturn (\n\n<div\n\nonPointerDown={handlePointerDown}\n\nonPointerMove={handlePointerMove}\n\nonPointerUp={handlePointerUp}\n\nstyle={{\n\nwidth: 100,\n\nheight: 100,\n\ncursor: 'grab',\n\nbackgroundColor: color,\n\nposition: 'absolute',\n\nborder: '1px solid black',\n\ndisplay: 'flex',\n\njustifyContent: 'center',\n\nalignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"41":{"pageContent":"alignItems: 'center',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\n}}\n\n>{children}</div>\n\n);\n\n}\n\n```\n\n```js Background.js\n\nexport default function Background({\n\nposition\n\n}) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\ntransform: `translate(\n\n${position.x}px,\n\n${position.y}px\n\n)`,\n\nwidth: 250,\n\nheight: 250,\n\nbackgroundColor: 'rgba(200, 200, 0, 0.2)',\n\n}} />\n\n);\n\n};\n\n```\n\n```css\n\nbody { height: 280px; }\n\nselect { margin-bottom: 10px; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-objects-in-state.md"}},"42":{"pageContent":"--\n\ntitle: 'Removing Effect Dependencies'\n\n--\n\n<Intro>\n\nWhen you write an Effect, the linter will verify that you've included every reactive value (like props and state) that the Effect reads in the list of your Effect's dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. Follow this guide to review and remove unnecessary dependencies from your Effects.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to fix infinite Effect dependency loops\n\nWhat to do when you want to remove a dependency\n\nHow to read a value from your Effect without \"reacting\" to it\n\nHow and why to avoid object and function dependencies\n\nWhy suppressing the dependency linter is dangerous, and what to do instead\n\n</YouWillLearn>\n\n## Dependencies should match the code {/*dependencies-should-match-the-code*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"43":{"pageContent":"Why suppressing the dependency linter is dangerous, and what to do instead\n\n</YouWillLearn>\n\n## Dependencies should match the code {/*dependencies-should-match-the-code*/}\n\nWhen you write an Effect, you first specify how to [start and stop](/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect) whatever you want your Effect to be doing:\n\n```js {5-7}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n// ...\n\n}\n\n```\n\nThen, if you leave the Effect dependencies empty (`[]`), the linter will suggest the correct dependencies:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"44":{"pageContent":"function ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // <-- Fix the mistake here!\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"45":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nFill them in according to what the linter says:\n\n```js {6}\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\n[Effects \"react\" to reactive values.](/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values) Since `roomId` is a reactive value (it can change due to a re-render), the linter verifies that you've specified it as a dependency. If `roomId` receives a different value, React will re-synchronize your Effect. This ensures that the chat stays connected to the selected room and \"reacts\" to the dropdown:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"46":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"47":{"pageContent":"// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n### To remove a dependency, prove that it's not a dependency {/*to-remove-a-dependency-prove-that-its-not-a-dependency*/}\n\nNotice that you can't \"choose\" the dependencies of your Effect. Every <CodeStep step={2}>reactive value</CodeStep> used by your Effect's code must be declared in your dependency list. Your Effect's dependency list is determined by the surrounding code:\n\n```js [[2, 3, \"roomId\"], [2, 5, \"roomId\"], [2, 8, \"roomId\"]]\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) { // This is a reactive value\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // This Effect reads that reactive value","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"48":{"pageContent":"function ChatRoom({ roomId }) { // This is a reactive value\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // This Effect reads that reactive value\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ So you must specify that reactive value as a dependency of your Effect\n\n// ...\n\n}\n\n```\n\n[Reactive values](/learn/lifecycle-of-reactive-effects#all-variables-declared-in-the-component-body-are-reactive) include props and all variables and functions declared directly inside of your component. Since `roomId` is a reactive value, you can't remove it from the dependency list. The linter wouldn't allow it:\n\n```js {8}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // 🔴 React Hook useEffect has a missing dependency: 'roomId'\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"49":{"pageContent":"const connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // 🔴 React Hook useEffect has a missing dependency: 'roomId'\n\n// ...\n\n}\n\n```\n\nAnd the linter would be right! Since `roomId` may change over time, this would introduce a bug in your code.\n\n*To remove a dependency, you need to \"prove\" to the linter that it *doesn't need* to be a dependency.** For example, you can move `roomId` out of your component to prove that it's not reactive and won't change on re-renders:\n\n```js {2,9}\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'music'; // Not a reactive value anymore\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nNow that `roomId` is not a reactive value (and can't change on a re-render), it doesn't need to be a dependency:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"50":{"pageContent":"}, []); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nNow that `roomId` is not a reactive value (and can't change on a re-render), it doesn't need to be a dependency:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'music';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"51":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nThis is why you could now specify an [empty (`[]`) dependency list.](/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means) Your Effect *really doesn't* depend on any reactive value anymore, so it *really doesn't* need to re-run when any of the component's props or state change.\n\n### To change the dependencies, change the code {/*to-change-the-dependencies-change-the-code*/}\n\nYou might have noticed a pattern in your workflow:\n\n1. First, you **change the code** of your Effect or how your reactive values are declared.\n\n2. Then, you follow the linter and adjust the dependencies to **match the code you have changed.**\n\n3. If you're not happy with the list of dependencies, you **go back to the first step** (and change the code again).","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"52":{"pageContent":"3. If you're not happy with the list of dependencies, you **go back to the first step** (and change the code again).\n\nThe last part is important. **If you want to change the dependencies, change the surrounding code first.** You can think of the dependency list as [a list of all the reactive values used by your Effect's code.](/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency) You don't intentionally *choose* what to put on that list. The list *describes* your code. To change the dependency list, change the code.\n\nThis might feel like solving an equation. You might start with a goal (for example, to remove a dependency), and you need to \"find\" the exact code matching that goal. Not everyone finds solving equations fun, and the same thing could be said about writing Effects! Luckily, there is a list of common recipes that you can try below.\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"53":{"pageContent":"<Pitfall>\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n```js {3-4}\n\nuseEffect(() => {\n\n// ...\n\n// 🔴 Avoid suppressing the linter like this:\n\n// eslint-ignore-next-line react-hooks/exhaustive-deps\n\n}, []);\n\n```\n\n*When dependencies don't match the code, there is a very high risk of introducing bugs.** By suppressing the linter, you \"lie\" to React about the values your Effect depends on. Instead, use the techniques below.\n\n</Pitfall>\n\n<DeepDive>\n\n#### Why is suppressing the dependency linter so dangerous? {/*why-is-suppressing-the-dependency-linter-so-dangerous*/}\n\nSuppressing the linter leads to very unintuitive bugs that are hard to find and fix. Here's one example:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nfunction onTick() {\n\nsetCount(count + increment);\n\n}\n\nuseEffect(() => {\n\nconst id = setInterval(onTick, 1000);","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"54":{"pageContent":"const [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nfunction onTick() {\n\nsetCount(count + increment);\n\n}\n\nuseEffect(() => {\n\nconst id = setInterval(onTick, 1000);\n\nreturn () => clearInterval(id);\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, []);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nEvery second, increment by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\nLet's say that you wanted to run the Effect \"only on mount\". You've read that [empty (`[]`) dependencies](/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means) do that, so you've decided to ignore the linter, and forcefully specified `[]` as the dependencies.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"55":{"pageContent":"This counter was supposed to increment every second by the amount configurable with the two buttons. However, since you \"lied\" to React that this Effect doesn't depend on anything, React forever keeps using the `onTick` function from the initial render. [During that render,](/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time) `count` was `0` and `increment` was `1`. This is why `onTick` from that render always calls `setCount(0 + 1)` every second, and you always see `1`. Bugs like this are harder to fix when they're spread across multiple components.\n\nThere's always a better solution than ignoring the linter! To fix this code, you need to add `onTick` to the dependency list. (To ensure the interval is only setup once, [make `onTick` an Effect Event.](/learn/separating-events-from-effects#reading-latest-props-and-state-with-effect-events))","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"56":{"pageContent":"*We recommend to treat the dependency lint error as a compilation error. If you don't suppress it, you will never see bugs like this.** The rest of this page documents the alternatives for this and other cases.\n\n</DeepDive>\n\n## Removing unnecessary dependencies {/*removing-unnecessary-dependencies*/}\n\nEvery time you adjust the Effect's dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is \"no\":\n\nSometimes, you want to re-execute *different parts* of your Effect under different conditions.\n\nSometimes, you want to only read the *latest value* of some dependency instead of \"reacting\" to its changes.\n\nSometimes, a dependency may change too often *unintentionally* because it's an object or a function.\n\nTo find the right solution, you'll need to answer a few questions about your Effect. Let's walk through them.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"57":{"pageContent":"To find the right solution, you'll need to answer a few questions about your Effect. Let's walk through them.\n\n### Should this code move to an event handler? {/*should-this-code-move-to-an-event-handler*/}\n\nThe first thing you should think about is whether this code should be an Effect at all.\n\nImagine a form. On submit, you set the `submitted` state variable to `true`. You need to send a POST request and show a notification. You've decided to put this logic inside an Effect that \"reacts\" to `submitted` being `true`:\n\n```js {6-8}\n\nfunction Form() {\n\nconst [submitted, setSubmitted] = useState(false);\n\nuseEffect(() => {\n\nif (submitted) {\n\n// 🔴 Avoid: Event-specific logic inside an Effect\n\npost('/api/register');\n\nshowNotification('Successfully registered!');\n\n}\n\n}, [submitted]);\n\nfunction handleSubmit() {\n\nsetSubmitted(true);\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"58":{"pageContent":"// 🔴 Avoid: Event-specific logic inside an Effect\n\npost('/api/register');\n\nshowNotification('Successfully registered!');\n\n}\n\n}, [submitted]);\n\nfunction handleSubmit() {\n\nsetSubmitted(true);\n\n}\n\n// ...\n\n}\n\n```\n\nLater, you want to style the notification message according to the current theme, so you read the current theme. Since `theme` is declared in the component body, it is a reactive value, and you must declare it as a dependency:\n\n```js {3,9,11}\n\nfunction Form() {\n\nconst [submitted, setSubmitted] = useState(false);\n\nconst theme = useContext(ThemeContext);\n\nuseEffect(() => {\n\nif (submitted) {\n\n// 🔴 Avoid: Event-specific logic inside an Effect\n\npost('/api/register');\n\nshowNotification('Successfully registered!', theme);\n\n}\n\n}, [submitted, theme]); // ✅ All dependencies declared\n\nfunction handleSubmit() {\n\nsetSubmitted(true);\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"59":{"pageContent":"post('/api/register');\n\nshowNotification('Successfully registered!', theme);\n\n}\n\n}, [submitted, theme]); // ✅ All dependencies declared\n\nfunction handleSubmit() {\n\nsetSubmitted(true);\n\n}\n\n// ...\n\n}\n\n```\n\nBut by doing this, you've introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. The `theme` will change, the Effect will re-run, and so it will display the same notification again!\n\n*The problem here is that this shouldn't be an Effect in the first place.** You want to send this POST request and show the notification in response to *submitting the form,* which is a particular interaction. When you want to run some code in response to particular interaction, put that logic directly into the corresponding event handler:\n\n```js {6-7}\n\nfunction Form() {\n\nconst theme = useContext(ThemeContext);\n\nfunction handleSubmit() {\n\n// ✅ Good: Event-specific logic is called from event handlers\n\npost('/api/register');\n\nshowNotification('Successfully registered!', theme);\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"60":{"pageContent":"function handleSubmit() {\n\n// ✅ Good: Event-specific logic is called from event handlers\n\npost('/api/register');\n\nshowNotification('Successfully registered!', theme);\n\n}\n\n// ...\n\n}\n\n```\n\nNow that the code is in an event handler, it's not reactive--so it will only run when the user submits the form. Read more about [choosing between event handlers and Effects](/learn/separating-events-from-effects#reactive-values-and-reactive-logic) and [how to delete unnecessary Effects.](/learn/you-might-not-need-an-effect)\n\n### Is your Effect doing several unrelated things? {/*is-your-effect-doing-several-unrelated-things*/}\n\nThe next question you should ask yourself is whether your Effect is doing several unrelated things.\n\nImagine you're creating a shipping form where the user needs to choose their city and area. You fetch the list of `cities` from the server according to the selected `country` so that you can show them as dropdown options:\n\n```js\n\nfunction ShippingForm({ country }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"61":{"pageContent":"```js\n\nfunction ShippingForm({ country }) {\n\nconst [cities, setCities] = useState(null);\n\nconst [city, setCity] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetch(`/api/cities?country=${country}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetCities(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [country]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThis is a good example of [fetching data in an Effect.](/learn/you-might-not-need-an-effect#fetching-data) You are synchronizing the `cities` state with the network according to the `country` prop. You can't do this in an event handler because you need to fetch as soon as `ShippingForm` is displayed and whenever the `country` changes (no matter which interaction causes it).\n\nNow let's say you're adding a second select box for city areas, which should fetch the `areas` for the currently selected `city`. You might start by adding a second `fetch` call for the list of areas inside the same Effect:\n\n```js {15-24,28}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"62":{"pageContent":"```js {15-24,28}\n\nfunction ShippingForm({ country }) {\n\nconst [cities, setCities] = useState(null);\n\nconst [city, setCity] = useState(null);\n\nconst [areas, setAreas] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetch(`/api/cities?country=${country}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetCities(json);\n\n}\n\n});\n\n// 🔴 Avoid: A single Effect synchronizes two independent processes\n\nif (city) {\n\nfetch(`/api/areas?city=${city}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetAreas(json);\n\n}\n\n});\n\n}\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [country, city]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nHowever, since the Effect now uses the `city` state variable, you've had to add `city` to the list of dependencies. That, in turn, has introduced a problem. Now, whenever the user selects a different city, the Effect will re-run and call `fetchCities(country)`. As a result, you will be unnecessarily refetching the list of cities many times.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"63":{"pageContent":"*The problem with this code is that you're synchronizing two different unrelated things:**\n\n1. You want to synchronize the `cities` state to the network based on the `country` prop.\n\n1. You want to synchronize the `areas` state to the network based on the `city` state.\n\nSplit the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:\n\n```js {19-33}\n\nfunction ShippingForm({ country }) {\n\nconst [cities, setCities] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetch(`/api/cities?country=${country}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetCities(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [country]); // ✅ All dependencies declared\n\nconst [city, setCity] = useState(null);\n\nconst [areas, setAreas] = useState(null);\n\nuseEffect(() => {\n\nif (city) {\n\nlet ignore = false;\n\nfetch(`/api/areas?city=${city}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetAreas(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"64":{"pageContent":"useEffect(() => {\n\nif (city) {\n\nlet ignore = false;\n\nfetch(`/api/areas?city=${city}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetAreas(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}\n\n}, [city]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nNow the first Effect only re-runs if the `country` changes, while the second Effect re-runs when the `city` changes. You've separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they will no longer trigger each other unintentionally.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"65":{"pageContent":"The final code is longer than the original, but splitting these Effects is still correct. [Each Effect should represent an independent synchronization process.](/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process) In this example, deleting one Effect doesn't break the other Effect's logic. This is a good indication that they *synchronize different things,* and it made sense to split them up. If the duplication feels concerning, you can further improve this code by [extracting repetitive logic into a custom Hook.](/learn/reusing-logic-with-custom-hooks#when-to-use-custom-hooks)\n\n### Are you reading some state to calculate the next state? {/*are-you-reading-some-state-to-calculate-the-next-state*/}\n\nThis Effect updates the `messages` state variable with a newly created array every time a new message arrives:\n\n```js {2,6-8}\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"66":{"pageContent":"```js {2,6-8}\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages([...messages, receivedMessage]);\n\n});\n\n// ...\n\n```\n\nIt uses the `messages` variable to [create a new array](/learn/updating-arrays-in-state) starting with all the existing messages and adds the new message at the end. However, since `messages` is a reactive value read by an Effect, it must be a dependency:\n\n```js {7,10}\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages([...messages, receivedMessage]);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, messages]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nAnd making `messages` a dependency introduces a problem.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"67":{"pageContent":"});\n\nreturn () => connection.disconnect();\n\n}, [roomId, messages]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nAnd making `messages` a dependency introduces a problem.\n\nEvery time you receive a message, `setMessages()` causes the component to re-render with a new `messages` array that includes the received message. However, since this Effect now depends on `messages`, this will *also* re-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!\n\nTo fix the issue, don't read `messages` inside the Effect. Instead, pass an [updater function](/reference/react/useState#updating-state-based-on-the-previous-state) to `setMessages`:\n\n```js {7,10}\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages(msgs => [...msgs, receivedMessage]);\n\n});\n\nreturn () => connection.disconnect();","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"68":{"pageContent":"const connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages(msgs => [...msgs, receivedMessage]);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```\n\n*Notice how your Effect does not read the `messages` variable at all now.** You only need to pass an updater function like `msgs => [...msgs, receivedMessage]`. React [puts your updater function in a queue](/learn/queueing-a-series-of-state-updates) and will provide the `msgs` argument to it during the next render. This is why the Effect itself doesn't need to depend on `messages` anymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect.\n\n### Do you want to read a value without \"reacting\" to its changes? {/*do-you-want-to-read-a-value-without-reacting-to-its-changes*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"69":{"pageContent":"<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nSuppose that you want to play a sound when the user receives a new message unless `isMuted` is `true`:\n\n```js {3,10-12}\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nconst [isMuted, setIsMuted] = useState(false);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages(msgs => [...msgs, receivedMessage]);\n\nif (!isMuted) {\n\nplaySound();\n\n}\n\n});\n\n// ...\n\n```\n\nSince your Effect now uses `isMuted` in its code, you have to add it to the dependencies:\n\n```js {10,15}\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nconst [isMuted, setIsMuted] = useState(false);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages(msgs => [...msgs, receivedMessage]);\n\nif (!isMuted) {\n\nplaySound();\n\n}\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"70":{"pageContent":"const connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nsetMessages(msgs => [...msgs, receivedMessage]);\n\nif (!isMuted) {\n\nplaySound();\n\n}\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, isMuted]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThe problem is that every time `isMuted` changes (for example, when the user presses the \"Muted\" toggle), the Effect will re-synchronize, and reconnect to the chat server. This is not the desired user experience! (In this example, even disabling the linter would not work--if you do that, `isMuted` would get \"stuck\" with its old value.)\n\nTo solve this problem, you need to extract the logic that shouldn't be reactive out of the Effect. You don't want this Effect to \"react\" to the changes in `isMuted`. [Move this non-reactive piece of logic into an Effect Event:](/learn/separating-events-from-effects#declaring-an-effect-event)\n\n```js {1,7-12,18,21}\n\nimport { useState, useEffect, useEffectEvent } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"71":{"pageContent":"```js {1,7-12,18,21}\n\nimport { useState, useEffect, useEffectEvent } from 'react';\n\nfunction ChatRoom({ roomId }) {\n\nconst [messages, setMessages] = useState([]);\n\nconst [isMuted, setIsMuted] = useState(false);\n\nconst onMessage = useEffectEvent(receivedMessage => {\n\nsetMessages(msgs => [...msgs, receivedMessage]);\n\nif (!isMuted) {\n\nplaySound();\n\n}\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nonMessage(receivedMessage);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"72":{"pageContent":"connection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nonMessage(receivedMessage);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nEffect Events let you split an Effect into reactive parts (which should \"react\" to reactive values like `roomId` and their changes) and non-reactive parts (which only read their latest values, like `onMessage` reads `isMuted`). **Now that you read `isMuted` inside an Effect Event, it doesn't need to be a dependency of your Effect.** As a result, the chat won't re-connect when you toggle the \"Muted\" setting on and off, solving the original issue!\n\n#### Wrapping an event handler from the props {/*wrapping-an-event-handler-from-the-props*/}\n\nYou might run into a similar problem when your component receives an event handler as a prop:\n\n```js {1,8,11}\n\nfunction ChatRoom({ roomId, onReceiveMessage }) {\n\nconst [messages, setMessages] = useState([]);\n\nuseEffect(() => {\n\nconst connection = createConnection();","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"73":{"pageContent":"```js {1,8,11}\n\nfunction ChatRoom({ roomId, onReceiveMessage }) {\n\nconst [messages, setMessages] = useState([]);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nonReceiveMessage(receivedMessage);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, onReceiveMessage]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nSuppose that the parent component passes a *different* `onReceiveMessage` function on every render:\n\n```js {3-5}\n\n<ChatRoom\n\nroomId={roomId}\n\nonReceiveMessage={receivedMessage => {\n\n// ...\n\n}}\n\n/>\n\n```\n\nSince `onReceiveMessage` is a dependency of your Effect, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:\n\n```js {4-6,12,15}\n\nfunction ChatRoom({ roomId, onReceiveMessage }) {\n\nconst [messages, setMessages] = useState([]);\n\nconst onMessage = useEffectEvent(receivedMessage => {\n\nonReceiveMessage(receivedMessage);\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"74":{"pageContent":"function ChatRoom({ roomId, onReceiveMessage }) {\n\nconst [messages, setMessages] = useState([]);\n\nconst onMessage = useEffectEvent(receivedMessage => {\n\nonReceiveMessage(receivedMessage);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nconnection.on('message', (receivedMessage) => {\n\nonMessage(receivedMessage);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nEffect Events aren't reactive, so you don't need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that's different on every re-render.\n\n#### Separating reactive and non-reactive code {/*separating-reactive-and-non-reactive-code*/}\n\nIn this example, you want to log a visit every time `roomId` changes. You want to include the current `notificationCount` with every log, but you *don't* want a change to `notificationCount` to trigger a log event.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"75":{"pageContent":"The solution is again to split out the non-reactive code into an Effect Event:\n\n```js {2-4,7}\n\nfunction Chat({ roomId, notificationCount }) {\n\nconst onVisit = useEffectEvent(visitedRoomId => {\n\nlogVisit(visitedRoomId, notificationCount);\n\n});\n\nuseEffect(() => {\n\nonVisit(roomId);\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nYou want your logic to be reactive with regards to `roomId`, so you read `roomId` inside of your Effect. However, you don't want a change to `notificationCount` to log an extra visit, so you read `notificationCount` inside of the Effect Event. [Learn more about reading the latest props and state from Effects using Effect Events.](/learn/separating-events-from-effects#reading-latest-props-and-state-with-effect-events)\n\n### Does some reactive value change unintentionally? {/*does-some-reactive-value-change-unintentionally*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"76":{"pageContent":"### Does some reactive value change unintentionally? {/*does-some-reactive-value-change-unintentionally*/}\n\nSometimes, you *do* want your Effect to \"react\" to a certain value, but that value changes more often than you'd like--and might not reflect any actual change from the user's perspective. For example, let's say that you create an `options` object in the body of your component, and then read that object from inside of your Effect:\n\n```js {3-6,9}\n\nfunction ChatRoom({ roomId }) {\n\n// ...\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\n// ...\n\n```\n\nThis object is declared in the component body, so it's a [reactive value.](/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values) When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect \"reacts\" to its changes:\n\n```js {3,6}\n\n// ...\n\nuseEffect(() => {\n\nconst connection = createConnection(options);","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"77":{"pageContent":"```js {3,6}\n\n// ...\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nIt is important to declare it as a dependency! This ensures, for example, that if the `roomId` changes, then your Effect will re-connect to the chat with the new `options`. However, there is also a problem with the code above. To see the problem, try typing into the input in the sandbox below, and watch what happens in the console:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"78":{"pageContent":"roomId: roomId\n\n};\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"79":{"pageContent":"return {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nIn the sandbox above, the input only updates the `message` state variable. From the user's perspective, this should not affect the chat connection. However, every time you update the `message`, your component re-renders. When your component re-renders, the code inside of it runs again from scratch.\n\nThis means that a new `options` object is created from scratch on every re-render of the `ChatRoom` component. React sees that the `options` object is a *different object* from the `options` object created during the last render. This is why it re-synchronizes your Effect (which depends on `options`), and the chat re-connects as you type.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"80":{"pageContent":"*This problem affects objects and functions in particular. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn't matter that the contents inside of them may be the same!**\n\n```js {7-8}\n\n// During the first render\n\nconst options1 = { serverUrl: 'https://localhost:1234', roomId: 'music' };\n\n// During the next render\n\nconst options2 = { serverUrl: 'https://localhost:1234', roomId: 'music' };\n\n// These are two different objects!\n\nconsole.log(Object.is(options1, options2)); // false\n\n````\n\n*Object and function dependencies create a risk that your Effect will re-synchronize more often than you need.**\n\nThis is why, whenever possible, you should try to avoid objects and functions as your Effect's dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.\n\n#### Move static objects and functions outside your component {/*move-static-objects-and-functions-outside-your-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"81":{"pageContent":"#### Move static objects and functions outside your component {/*move-static-objects-and-functions-outside-your-component*/}\n\nIf the object does not depend on any props and state, you can move that object outside your component:\n\n```js {1-4,13}\n\nconst options = {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: 'music'\n\n};\n\nfunction ChatRoom() {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThis way, you *prove* to the linter that it's not reactive. It can't change as a result of a re-render, so it doesn't need to be a dependency of your Effect. Now re-rendering `ChatRoom` won't cause your Effect to re-synchronize.\n\nThis works for functions too:\n\n```js {1-6,12}\n\nfunction createOptions() {\n\nreturn {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: 'music'\n\n};\n\n}\n\nfunction ChatRoom() {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"82":{"pageContent":"```js {1-6,12}\n\nfunction createOptions() {\n\nreturn {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: 'music'\n\n};\n\n}\n\nfunction ChatRoom() {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst options = createOptions();\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n```\n\nSince `createOptions` is declared outside your component, it's not a reactive value. This is why it doesn't need to be specified in your Effect's dependencies, and why it won't ever cause your Effect to re-synchronize.\n\n#### Move dynamic objects and functions inside your Effect {/*move-dynamic-objects-and-functions-inside-your-effect*/}\n\nIf your object depends on some reactive value that may change as a result of a re-render, like a `roomId` prop, you can't pull it *outside* your component. You can, however, move its creation *inside* of your Effect's code:\n\n```js {7-10,11,14}\n\nconst serverUrl = 'https://localhost:1234';","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"83":{"pageContent":"```js {7-10,11,14}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nNow that `options` is declared inside of your Effect, it is no longer a dependency of your Effect. Instead, the only reactive value used by your Effect is `roomId`. Since `roomId` is not an object or function, you can be sure that it won't be *unintentionally* different. In JavaScript, numbers and strings are compared by their content:\n\n```js {7-8}\n\n// During the first render\n\nconst roomId1 = 'music';\n\n// During the next render\n\nconst roomId2 = 'music';\n\n// These two strings are the same!\n\nconsole.log(Object.is(roomId1, roomId2)); // true\n\n````\n\nThanks to this fix, the chat no longer re-connects if you edit the input:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"84":{"pageContent":"const roomId2 = 'music';\n\n// These two strings are the same!\n\nconsole.log(Object.is(roomId1, roomId2)); // true\n\n````\n\nThanks to this fix, the chat no longer re-connects if you edit the input:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"85":{"pageContent":"return (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nHowever, it *does* re-connect when you change the `roomId` dropdown, as you would expect.\n\nThis works for functions, too:\n\n```js {7-12,14}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nfunction createOptions() {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"86":{"pageContent":"```js {7-12,14}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nfunction createOptions() {\n\nreturn {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\n}\n\nconst options = createOptions();\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nYou can write your own functions to group pieces of logic inside your Effect. As long as you also declare them *inside* your Effect, they're not reactive values, and so they don't need to be dependencies of your Effect.\n\n#### Read primitive values from objects {/*read-primitive-values-from-objects*/}\n\nSometimes, you may receive an object from props:\n\n```js {1,5,8}\n\nfunction ChatRoom({ options }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"87":{"pageContent":"function ChatRoom({ options }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThe risk here is that the parent component will create the object during rendering:\n\n```js {3-6}\n\n<ChatRoom\n\nroomId={roomId}\n\noptions={{\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n}}\n\n/>\n\n```\n\nThis would cause your Effect to re-connect every time the parent component re-renders. To fix this, read all the necessary information from the object *outside* the Effect, and avoid having objects and functions dependencies:\n\n```js {4,7-8,12}\n\nfunction ChatRoom({ options }) {\n\nconst [message, setMessage] = useState('');\n\nconst { roomId, serverUrl } = options;\n\nuseEffect(() => {\n\nconst connection = createConnection({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]); // ✅ All dependencies declared\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"88":{"pageContent":"const connection = createConnection({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThe logic gets a little repetitive (you read some values from an object outside an Effect, and then create an object with the same values inside the Effect). But it makes it very explicit what information your Effect *actually* depends on. If an object is re-created unintentionally by the parent component, the chat would not re-connect. However, if `options.roomId` or `options.serverUrl` actually change, the chat would re-connect as you'd expect.\n\n#### Calculate primitive values from functions {/*calculate-primitive-values-from-functions*/}\n\nThe same approach can work for functions. For example, suppose the parent component passes a function:\n\n```js {3-8}\n\n<ChatRoom\n\nroomId={roomId}\n\ngetOptions={() => {\n\nreturn {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\n}}\n\n/>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"89":{"pageContent":"```js {3-8}\n\n<ChatRoom\n\nroomId={roomId}\n\ngetOptions={() => {\n\nreturn {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\n}}\n\n/>\n\n```\n\nTo avoid making it a dependency (and thus causing it to re-connect on re-renders), call it outside the Effect. This gives you the `roomId` and `serverUrl` values that aren't objects, and that you can read from inside your Effect:\n\n```js {1,4}\n\nfunction ChatRoom({ getOptions }) {\n\nconst [message, setMessage] = useState('');\n\nconst { roomId, serverUrl } = getOptions();\n\nuseEffect(() => {\n\nconst connection = createConnection({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThis only works for [pure](/learn/keeping-components-pure) functions because they are safe to call during rendering. If your function is an event handler, but you don't want its changes to re-synchronize your Effect, [wrap it into an Effect Event instead.](#do-you-want-to-read-a-value-without-reacting-to-its-changes)","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"90":{"pageContent":"<Recap>\n\nDependencies should always match the code.\n\nWhen you're not happy with your dependencies, what you need to edit is the code.\n\nSuppressing the linter leads to very confusing bugs, and you should always avoid it.\n\nTo remove a dependency, you need to \"prove\" to the linter that it's not necessary.\n\nIf the code in your Effect should run in response to a specific interaction, move that code to an event handler.\n\nIf different parts of your Effect should re-run for different reasons, split it into several Effects.\n\nIf you want to update some state based on the previous state, pass an updater function.\n\nIf you want to read the latest value without \"reacting\" it, extract an Effect Event from your Effect.\n\nIn JavaScript, objects and functions are considered different if they were created at different times.\n\nTry to avoid object and function dependencies. Move them outside the component or inside the Effect.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a resetting interval {/*fix-a-resetting-interval*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"91":{"pageContent":"Try to avoid object and function dependencies. Move them outside the component or inside the Effect.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a resetting interval {/*fix-a-resetting-interval*/}\n\nThis Effect sets up an interval that ticks every second. You've noticed something strange happening: it seems like the interval gets destroyed and re-created every time it ticks. Fix the code so that the interval doesn't get constantly re-created.\n\n<Hint>\n\nIt seems like this Effect's code depends on `count`. Is there some way to not need this dependency? There should be a way to update the `count` state based on its previous value without adding a dependency on that value.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconsole.log('✅ Creating an interval');\n\nconst id = setInterval(() => {\n\nconsole.log('⏰ Interval tick');\n\nsetCount(count + 1);\n\n}, 1000);\n\nreturn () => {\n\nconsole.log('❌ Clearing an interval');","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"92":{"pageContent":"useEffect(() => {\n\nconsole.log('✅ Creating an interval');\n\nconst id = setInterval(() => {\n\nconsole.log('⏰ Interval tick');\n\nsetCount(count + 1);\n\n}, 1000);\n\nreturn () => {\n\nconsole.log('❌ Clearing an interval');\n\nclearInterval(id);\n\n};\n\n}, [count]);\n\nreturn <h1>Counter: {count}</h1>\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou want to update the `count` state to be `count + 1` from inside the Effect. However, this makes your Effect depend on `count`, which changes with every tick, and that's why your interval gets re-created on every tick.\n\nTo solve this, use the [updater function](/reference/react/useState#updating-state-based-on-the-previous-state) and write `setCount(c => c + 1)` instead of `setCount(count + 1)`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconsole.log('✅ Creating an interval');\n\nconst id = setInterval(() => {\n\nconsole.log('⏰ Interval tick');\n\nsetCount(c => c + 1);\n\n}, 1000);\n\nreturn () => {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"93":{"pageContent":"const [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconsole.log('✅ Creating an interval');\n\nconst id = setInterval(() => {\n\nconsole.log('⏰ Interval tick');\n\nsetCount(c => c + 1);\n\n}, 1000);\n\nreturn () => {\n\nconsole.log('❌ Clearing an interval');\n\nclearInterval(id);\n\n};\n\n}, []);\n\nreturn <h1>Counter: {count}</h1>\n\n}\n\n```\n\n</Sandpack>\n\nInstead of reading `count` inside the Effect, you pass a `c => c + 1` instruction (\"increment this number!\") to React. React will apply it on the next render. And since you don't need to read the value of `count` inside your Effect anymore, so you can keep your Effect's dependencies empty (`[]`). This prevents your Effect from re-creating the interval on every tick.\n\n</Solution>\n\n#### Fix a retriggering animation {/*fix-a-retriggering-animation*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"94":{"pageContent":"</Solution>\n\n#### Fix a retriggering animation {/*fix-a-retriggering-animation*/}\n\nIn this example, when you press \"Show\", a welcome message fades in. The animation takes a second. When you press \"Remove\", the welcome message immediately disappears. The logic for the fade-in animation is implemented in the `animation.js` file as plain JavaScript [animation loop.](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) You don't need to change that logic. You can treat it as a third-party library. Your Effect creates an instance of `FadeInAnimation` for the DOM node, and then calls `start(duration)` or `stop()` to control the animation. The `duration` is controlled by a slider. Adjust the slider and see how the animation changes.","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"95":{"pageContent":"This code already works, but there is something you want to change. Currently, when you move the slider that controls the `duration` state variable, it retriggers the animation. Change the behavior so that the Effect does not \"react\" to the `duration` variable. When you press \"Show\", the Effect should use the current `duration` on the slider. However, moving the slider itself should not by itself retrigger the animation.\n\n<Hint>\n\nIs there a line of code inside the Effect that should not be reactive? How can you move non-reactive code out of the Effect?\n\n</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"96":{"pageContent":"\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { FadeInAnimation } from './animation.js';\n\nfunction Welcome({ duration }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nconst animation = new FadeInAnimation(ref.current);\n\nanimation.start(duration);\n\nreturn () => {\n\nanimation.stop();\n\n};\n\n}, [duration]);\n\nreturn (\n\n<h1\n\nref={ref}\n\nstyle={{\n\nopacity: 0,\n\ncolor: 'white',\n\npadding: 50,\n\ntextAlign: 'center',\n\nfontSize: 50,\n\nbackgroundImage: 'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)'\n\n}}\n\n>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [duration, setDuration] = useState(1000);\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"range\"\n\nmin=\"100\"\n\nmax=\"3000\"\n\nvalue={duration}\n\nonChange={e => setDuration(Number(e.target.value))}\n\n/>\n\n<br />\n\nFade in duration: {duration} ms\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"97":{"pageContent":"value={duration}\n\nonChange={e => setDuration(Number(e.target.value))}\n\n/>\n\n<br />\n\nFade in duration: {duration} ms\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome duration={duration} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js animation.js\n\nexport class FadeInAnimation {\n\nconstructor(node) {\n\nthis.node = node;\n\n}\n\nstart(duration) {\n\nthis.duration = duration;\n\nif (this.duration === 0) {\n\n// Jump to end immediately\n\nthis.onProgress(1);\n\n} else {\n\nthis.onProgress(0);\n\n// Start animating\n\nthis.startTime = performance.now();\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\n}\n\nonFrame() {\n\nconst timePassed = performance.now() - this.startTime;\n\nconst progress = Math.min(timePassed / this.duration, 1);\n\nthis.onProgress(progress);\n\nif (progress < 1) {\n\n// We still have more frames to paint\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\n}\n\nonProgress(progress) {\n\nthis.node.style.opacity = progress;\n\n}\n\nstop() {\n\ncancelAnimationFrame(this.frameId);\n\nthis.startTime = null;\n\nthis.frameId = null;","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"98":{"pageContent":"}\n\n}\n\nonProgress(progress) {\n\nthis.node.style.opacity = progress;\n\n}\n\nstop() {\n\ncancelAnimationFrame(this.frameId);\n\nthis.startTime = null;\n\nthis.frameId = null;\n\nthis.duration = 0;\n\n}\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYour Effect needs to read the latest value of `duration`, but you don't want it to \"react\" to changes in `duration`. You use `duration` to start the animation, but starting animation isn't reactive. Extract the non-reactive line of code into an Effect Event, and call that function from your Effect.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { FadeInAnimation } from './animation.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"99":{"pageContent":"\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { FadeInAnimation } from './animation.js';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nfunction Welcome({ duration }) {\n\nconst ref = useRef(null);\n\nconst onAppear = useEffectEvent(animation => {\n\nanimation.start(duration);\n\n});\n\nuseEffect(() => {\n\nconst animation = new FadeInAnimation(ref.current);\n\nonAppear(animation);\n\nreturn () => {\n\nanimation.stop();\n\n};\n\n}, []);\n\nreturn (\n\n<h1\n\nref={ref}\n\nstyle={{\n\nopacity: 0,\n\ncolor: 'white',\n\npadding: 50,\n\ntextAlign: 'center',\n\nfontSize: 50,\n\nbackgroundImage: 'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)'\n\n}}\n\n>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [duration, setDuration] = useState(1000);\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"range\"\n\nmin=\"100\"\n\nmax=\"3000\"\n\nvalue={duration}\n\nonChange={e => setDuration(Number(e.target.value))}\n\n/>\n\n<br />\n\nFade in duration: {duration} ms","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"100":{"pageContent":"const [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"range\"\n\nmin=\"100\"\n\nmax=\"3000\"\n\nvalue={duration}\n\nonChange={e => setDuration(Number(e.target.value))}\n\n/>\n\n<br />\n\nFade in duration: {duration} ms\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome duration={duration} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js animation.js\n\nexport class FadeInAnimation {\n\nconstructor(node) {\n\nthis.node = node;\n\n}\n\nstart(duration) {\n\nthis.duration = duration;\n\nthis.onProgress(0);\n\nthis.startTime = performance.now();\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\nonFrame() {\n\nconst timePassed = performance.now() - this.startTime;\n\nconst progress = Math.min(timePassed / this.duration, 1);\n\nthis.onProgress(progress);\n\nif (progress < 1) {\n\n// We still have more frames to paint\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\n}\n\nonProgress(progress) {\n\nthis.node.style.opacity = progress;\n\n}\n\nstop() {\n\ncancelAnimationFrame(this.frameId);\n\nthis.startTime = null;\n\nthis.frameId = null;","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"101":{"pageContent":"}\n\n}\n\nonProgress(progress) {\n\nthis.node.style.opacity = progress;\n\n}\n\nstop() {\n\ncancelAnimationFrame(this.frameId);\n\nthis.startTime = null;\n\nthis.frameId = null;\n\nthis.duration = 0;\n\n}\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n```\n\n</Sandpack>\n\nEffect Events like `onAppear` are not reactive, so you can read `duration` inside without retriggering the animation.\n\n</Solution>\n\n#### Fix a reconnecting chat {/*fix-a-reconnecting-chat*/}\n\nIn this example, every time you press \"Toggle theme\", the chat re-connects. Why does this happen? Fix the mistake so that the chat re-connects only when you edit the Server URL or choose a different chat room.\n\nTreat `chat.js` as an external third-party library: you can consult it to check its API, but don't edit it.\n\n<Hint>\n\nThere's more than one way to fix this, but ultimately you want to avoid having an object as your dependency.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"102":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nreturn (\n\n<div className={isDark ? 'dark' : 'light'}>\n\n<button onClick={() => setIsDark(!isDark)}>\n\nToggle theme\n\n</button>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom options={options} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ options }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"103":{"pageContent":"<hr />\n\n<ChatRoom options={options} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ options }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]);\n\nreturn <h1>Welcome to the {options.roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"104":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }\n\n.dark { background: #222; color: #eee; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYour Effect is re-running because it depends on the `options` object. Objects can be re-created unintentionally, you should try to avoid them as dependencies of your Effects whenever possible.\n\nThe least invasive fix is to read `roomId` and `serverUrl` right outside the Effect, and then make the Effect depend on those primitive values (which can't change unintentionally). Inside the Effect, create an object and it pass to `createConnnection`:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"105":{"pageContent":"const [roomId, setRoomId] = useState('general');\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nreturn (\n\n<div className={isDark ? 'dark' : 'light'}>\n\n<button onClick={() => setIsDark(!isDark)}>\n\nToggle theme\n\n</button>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom options={options} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ options }) {\n\nconst { roomId, serverUrl } = options;\n\nuseEffect(() => {\n\nconst connection = createConnection({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"106":{"pageContent":"const { roomId, serverUrl } = options;\n\nuseEffect(() => {\n\nconst connection = createConnection({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\nreturn <h1>Welcome to the {options.roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }\n\n.dark { background: #222; color: #eee; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"107":{"pageContent":"console.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }\n\n.dark { background: #222; color: #eee; }\n\n```\n\n</Sandpack>\n\nIt would be even better to replace the object `options` prop with the more specific `roomId` and `serverUrl` props:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nreturn (\n\n<div className={isDark ? 'dark' : 'light'}>\n\n<button onClick={() => setIsDark(!isDark)}>\n\nToggle theme\n\n</button>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"108":{"pageContent":"/>\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\nserverUrl={serverUrl}\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ roomId, serverUrl }) {\n\nuseEffect(() => {\n\nconst connection = createConnection({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"109":{"pageContent":"if (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }\n\n.dark { background: #222; color: #eee; }\n\n```\n\n</Sandpack>\n\nSticking to primitive props where possible makes it easier to optimize your components later.\n\n</Solution>\n\n#### Fix a reconnecting chat, again {/*fix-a-reconnecting-chat-again*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"110":{"pageContent":"```\n\n</Sandpack>\n\nSticking to primitive props where possible makes it easier to optimize your components later.\n\n</Solution>\n\n#### Fix a reconnecting chat, again {/*fix-a-reconnecting-chat-again*/}\n\nThis example connects to the chat either with or without encryption. Toggle the checkbox and notice the different messages in the console when the encryption is on and off. Try changing the room. Then, try toggling the theme. When you're connected to a chat room, you will receive new messages every few seconds. Verify that their color matches the theme you've picked.\n\nIn this example, the chat re-connects every time you try to change the theme. Fix this. After the fix, changing the theme should not re-connect the chat, but toggling encryption settings or changing the room should re-connect.\n\nDon't change any code in `chat.js`. Other than that, you can change any code as long as it results in the same behavior. For example, you may find it helpful to change which props are being passed down.\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"111":{"pageContent":"<Hint>\n\nYou're passing down two functions: `onMessage` and `createConnection`. Both of them are created from scratch every time `App` re-renders. They are considered to be new values every time, which is why they re-trigger your Effect.\n\nOne of these functions is an event handler. Do you know some way to call an event handler an Effect without \"reacting\" to the new values of the event handler function? That would come in handy!\n\nAnother of these functions only exists to pass some state to an imported API method. Is this function really necessary? What is the essential information that's being passed down? You might need to move some imports from `App.js` to `ChatRoom.js`.\n\n</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"112":{"pageContent":"\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nimport {\n\ncreateEncryptedConnection,\n\ncreateUnencryptedConnection,\n\n} from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isEncrypted, setIsEncrypted] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isEncrypted}\n\nonChange={e => setIsEncrypted(e.target.checked)}\n\n/>\n\nEnable encryption\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"113":{"pageContent":"Enable encryption\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\nonMessage={msg => {\n\nshowNotification('New message: ' + msg, isDark ? 'dark' : 'light');\n\n}}\n\ncreateConnection={() => {\n\nconst options = {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\nif (isEncrypted) {\n\nreturn createEncryptedConnection(options);\n\n} else {\n\nreturn createUnencryptedConnection(options);\n\n}\n\n}}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function ChatRoom({ roomId, createConnection, onMessage }) {\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.on('message', (msg) => onMessage(msg));\n\nconnection.connect();\n\nreturn () => connection.disconnect();","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"114":{"pageContent":"useEffect(() => {\n\nconst connection = createConnection();\n\nconnection.on('message', (msg) => onMessage(msg));\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [createConnection, onMessage]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ 🔐 Connecting to \"' + roomId + '\" room... (encrypted)');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"115":{"pageContent":"if (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\nexport function createUnencryptedConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room (unencrypted)...');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"116":{"pageContent":"let messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room (unencrypted)...');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"117":{"pageContent":"Toastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThere's more than one correct way to solve this, but here is one possible solution.\n\nIn the original example, toggling the theme caused different `onMessage` and `createConnection` functions to be created and passed down. Since the Effect depended on these functions, the chat would re-connect every time you toggle the theme.\n\nTo fix the problem with `onMessage`, you needed to wrap it into an Effect Event:\n\n```js {1,2,6}\n\nexport default function ChatRoom({ roomId, createConnection, onMessage }) {\n\nconst onReceiveMessage = useEffectEvent(onMessage);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.on('message', (msg) => onReceiveMessage(msg));\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"118":{"pageContent":"const onReceiveMessage = useEffectEvent(onMessage);\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.on('message', (msg) => onReceiveMessage(msg));\n\n// ...\n\n```\n\nUnlike the `onMessage` prop, the `onReceiveMessage` Effect Event is not reactive. This is why it doesn't need to be a dependency of your Effect. As a result, changes to `onMessage` won't cause the chat to re-connect.\n\nYou can't do the same with `createConnection` because it *should* be reactive. You *want* the Effect to re-trigger if the user switches between an encrypted and an unencryption connection, or if the user switches the current room. However, because `createConnection` is a function, you can't check whether the information it reads has *actually* changed or not. To solve this, instead of passing `createConnection` down from the `App` component, pass the raw `roomId` and `isEncrypted` values:\n\n```js {2-3}\n\n<ChatRoom\n\nroomId={roomId}\n\nisEncrypted={isEncrypted}\n\nonMessage={msg => {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"119":{"pageContent":"```js {2-3}\n\n<ChatRoom\n\nroomId={roomId}\n\nisEncrypted={isEncrypted}\n\nonMessage={msg => {\n\nshowNotification('New message: ' + msg, isDark ? 'dark' : 'light');\n\n}}\n\n/>\n\n```\n\nNow you can move the `createConnection` function *inside* the Effect instead of passing it down from the `App`:\n\n```js {1-4,6,10-20}\n\nimport {\n\ncreateEncryptedConnection,\n\ncreateUnencryptedConnection,\n\n} from './chat.js';\n\nexport default function ChatRoom({ roomId, isEncrypted, onMessage }) {\n\nconst onReceiveMessage = useEffectEvent(onMessage);\n\nuseEffect(() => {\n\nfunction createConnection() {\n\nconst options = {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\nif (isEncrypted) {\n\nreturn createEncryptedConnection(options);\n\n} else {\n\nreturn createUnencryptedConnection(options);\n\n}\n\n}\n\n// ...\n\n```\n\nAfter these two changes, your Effect no longer depends on any function values:\n\n```js {1,8,10,21}\n\nexport default function ChatRoom({ roomId, isEncrypted, onMessage }) { // Reactive values\n\nconst onReceiveMessage = useEffectEvent(onMessage); // Not reactive\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"120":{"pageContent":"```js {1,8,10,21}\n\nexport default function ChatRoom({ roomId, isEncrypted, onMessage }) { // Reactive values\n\nconst onReceiveMessage = useEffectEvent(onMessage); // Not reactive\n\nuseEffect(() => {\n\nfunction createConnection() {\n\nconst options = {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId // Reading a reactive value\n\n};\n\nif (isEncrypted) { // Reading a reactive value\n\nreturn createEncryptedConnection(options);\n\n} else {\n\nreturn createUnencryptedConnection(options);\n\n}\n\n}\n\nconst connection = createConnection();\n\nconnection.on('message', (msg) => onReceiveMessage(msg));\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, isEncrypted]); // ✅ All dependencies declared\n\n```\n\nAs a result, the chat re-connects only when something meaningful (`roomId` or `isEncrypted`) changes:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"121":{"pageContent":"```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nimport { showNotification } from './notifications.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isEncrypted, setIsEncrypted] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isEncrypted}\n\nonChange={e => setIsEncrypted(e.target.checked)}\n\n/>\n\nEnable encryption\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"122":{"pageContent":"/>\n\nEnable encryption\n\n</label>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\nisEncrypted={isEncrypted}\n\nonMessage={msg => {\n\nshowNotification('New message: ' + msg, isDark ? 'dark' : 'light');\n\n}}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport {\n\ncreateEncryptedConnection,\n\ncreateUnencryptedConnection,\n\n} from './chat.js';\n\nexport default function ChatRoom({ roomId, isEncrypted, onMessage }) {\n\nconst onReceiveMessage = useEffectEvent(onMessage);\n\nuseEffect(() => {\n\nfunction createConnection() {\n\nconst options = {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\nif (isEncrypted) {\n\nreturn createEncryptedConnection(options);\n\n} else {\n\nreturn createUnencryptedConnection(options);\n\n}\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"123":{"pageContent":"const options = {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\nif (isEncrypted) {\n\nreturn createEncryptedConnection(options);\n\n} else {\n\nreturn createUnencryptedConnection(options);\n\n}\n\n}\n\nconst connection = createConnection();\n\nconnection.on('message', (msg) => onReceiveMessage(msg));\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, isEncrypted]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ 🔐 Connecting to \"' + roomId + '\" room... (encrypted)');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"124":{"pageContent":"return {\n\nconnect() {\n\nconsole.log('✅ 🔐 Connecting to \"' + roomId + '\" room... (encrypted)');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\nexport function createUnencryptedConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"125":{"pageContent":"}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room (unencrypted)...');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"126":{"pageContent":"import 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/removing-effect-dependencies.md"}},"127":{"pageContent":"--\n\ntitle: Component\n\n--\n\n<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#alternatives)\n\n</Pitfall>\n\n<Intro>\n\n`Component` is the base class for the React components defined as [JavaScript classes.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) Class components are still supported by React, but we don't recommend using them in new code.\n\n```js\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `Component` {/*component*/}\n\nTo define a React component as a class, extend the built-in `Component` class and define a [`render` method:](#render)\n\n```js\n\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\nOnly the `render` method is required, other methods are optional.\n\n[See more examples below.](#usage)\n\n--\n\n### `context` {/*context*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"128":{"pageContent":"render() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\nOnly the `render` method is required, other methods are optional.\n\n[See more examples below.](#usage)\n\n--\n\n### `context` {/*context*/}\n\nThe [context](/learn/passing-data-deeply-with-context) of a class component is available as `this.context`. It is only available if you specify *which* context you want to receive using [`static contextType`](#static-contexttype) (modern) or [`static contextTypes`](#static-contexttypes) (deprecated).\n\nA class component can only read one context at a time.\n\n```js {2,5}\n\nclass Button extends Component {\n\nstatic contextType = ThemeContext;\n\nrender() {\n\nconst theme = this.context;\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{this.props.children}\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n<Note>\n\nReading `this.context` in class components is equivalent to [`useContext`](/reference/react/useContext) in function components.\n\n[See how to migrate.](#migrating-a-component-with-context-from-a-class-to-a-function)\n\n</Note>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"129":{"pageContent":"[See how to migrate.](#migrating-a-component-with-context-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `props` {/*props*/}\n\nThe props passed to a class component are available as `this.props`.\n\n```js {3}\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n<Greeting name=\"Taylor\" />\n\n```\n\n<Note>\n\nReading `this.props` in class components is equivalent to [declaring props](/learn/passing-props-to-a-component#step-2-read-props-inside-the-child-component) in function components.\n\n[See how to migrate.](#migrating-a-simple-component-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `refs` {/*refs*/}\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [Use `createRef` instead.](/reference/react/createRef)\n\n</Deprecated>\n\nLets you access [legacy string refs](https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs) for this component.\n\n--\n\n### `state` {/*state*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"130":{"pageContent":"</Deprecated>\n\nLets you access [legacy string refs](https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs) for this component.\n\n--\n\n### `state` {/*state*/}\n\nThe state of a class component is available as `this.state`. The `state` field must be an object. Do not mutate the state directly. If you wish to change the state, call `setState` with the new state.\n\n```js {2-4,7-9,18}\n\nclass Counter extends Component {\n\nstate = {\n\nage: 42,\n\n};\n\nhandleAgeChange = () => {\n\nthis.setState({\n\nage: this.state.age + 1\n\n});\n\n};\n\nrender() {\n\nreturn (\n\n<>\n\n<button onClick={this.handleAgeChange}>\n\nIncrement age\n\n</button>\n\n<p>You are {this.state.age}.</p>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n<Note>\n\nDefining `state` in class components is equivalent to calling [`useState`](/reference/react/useState) in function components.\n\n[See how to migrate.](#migrating-a-component-with-state-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `constructor(props)` {/*constructor*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"131":{"pageContent":"[See how to migrate.](#migrating-a-component-with-state-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `constructor(props)` {/*constructor*/}\n\nThe [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor) runs before your class component *mounts* (gets added to the screen). Typically, a constructor is only used for two purposes in React. It lets you declare state and [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind) your class methods to the class instance:\n\n```js {2-6}\n\nclass Counter extends Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = { counter: 0 };\n\nthis.handleClick = this.handleClick.bind(this);\n\n}\n\nhandleClick() {\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"132":{"pageContent":"```js {2-6}\n\nclass Counter extends Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = { counter: 0 };\n\nthis.handleClick = this.handleClick.bind(this);\n\n}\n\nhandleClick() {\n\n// ...\n\n}\n\n```\n\nIf you use modern JavaScript syntax, constructors are rarely needed. Instead, you can rewrite this code above using the [public class field syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) which is supported both by modern browsers and tools like [Babel:](https://babeljs.io/)\n\n```js {2,4}\n\nclass Counter extends Component {\n\nstate = { counter: 0 };\n\nhandleClick = () => {\n\n// ...\n\n}\n\n```\n\nA constructor should not contain any side effects or subscriptions.\n\n#### Parameters {/*constructor-parameters*/}\n\n`props`: The component's initial props.\n\n#### Returns {/*constructor-returns*/}\n\n`constructor` should not return anything.\n\n#### Caveats {/*constructor-caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"133":{"pageContent":"#### Parameters {/*constructor-parameters*/}\n\n`props`: The component's initial props.\n\n#### Returns {/*constructor-returns*/}\n\n`constructor` should not return anything.\n\n#### Caveats {/*constructor-caveats*/}\n\nDo not run any side effects or subscriptions in the constructor. Instead, use [`componentDidMount`](#componentdidmount) for that.\n\nInside a constructor, you need to call `super(props)` before any other statement. If you don't do that, `this.props` will be `undefined` while the constructor runs, which can be confusing and cause bugs.\n\nConstructor is the only place where you can assign [`this.state`](#state) directly. In all other methods, you need to use [`this.setState()`](#setstate) instead. Do not call `setState` in the constructor.\n\nWhen you use [server rendering,](/reference/react-dom/server) the constructor will run on the server too, followed by the [`render`](#render) method. However, lifecycle methods like `componentDidMount` or `componentWillUnmount` will not run on the server.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"134":{"pageContent":"When [Strict Mode](/reference/react/StrictMode) is on, React will call `constructor` twice in development and then throw away one of the instances. This helps you notice the accidental side effects that need to be moved out of the `constructor`.\n\n<Note>\n\nThere is no exact equivalent for `constructor` in function components. To declare state in a function component, call [`useState`.](/reference/react/useState) To avoid recalculating the initial state, [pass a function to `useState`.](/reference/react/useState#avoiding-recreating-the-initial-state)\n\n</Note>\n\n--\n\n### `componentDidCatch(error, info)` {/*componentdidcatch*/}\n\nIf you define `componentDidCatch`, React will call it when some child component (including distant children) throws an error during rendering. This lets you log that error to an error reporting service in production.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"135":{"pageContent":"Typically, it is used together with [`static getDerivedStateFromError`](#static-getderivedstatefromerror) which lets you update state in response to an error and display an error message to the user. A component with these methods is called an *error boundary.*\n\n[See an example.](#catching-rendering-errors-with-an-error-boundary)\n\n#### Parameters {/*componentdidcatch-parameters*/}\n\n`error`: The error that was thrown. In practice, it will usually be an instance of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) but this is not guaranteed because JavaScript allows to [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) any value, including strings or even `null`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"136":{"pageContent":"`info`: An object containing additional information about the error. Its `componentStack` field contains a stack trace with the component that threw, as well as the names and source locations of all its parent components. In production, the component names will be minified. If you set up production error reporting, you can decode the component stack using sourcemaps the same way as you would do for regular JavaScript error stacks.\n\n#### Returns {/*componentdidcatch-returns*/}\n\n`componentDidCatch` should not return anything.\n\n#### Caveats {/*componentdidcatch-caveats*/}\n\nIn the past, it was common to call `setState` inside `componentDidCatch` in order to update the UI and display the fallback error message. This is deprecated in favor of defining [`static getDerivedStateFromError`.](#static-getderivedstatefromerror)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"137":{"pageContent":"Production and development builds of React slightly differ in the way `componentDidCatch` handles errors. In development, the errors will bubble up to `window`, which means that any `window.onerror` or `window.addEventListener('error', callback)` will intercept the errors that have been caught by `componentDidCatch`. In production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught by `componentDidCatch`.\n\n<Note>\n\nThere is no direct equivalent for `componentDidCatch` in function components yet. If you'd like to avoid creating class components, write a single `ErrorBoundary` component like above and use it throughout your app. Alternatively, you can use the [`react-error-boundary`](https://github.com/bvaughn/react-error-boundary) package which does that for you.\n\n</Note>\n\n--\n\n### `componentDidMount()` {/*componentdidmount*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"138":{"pageContent":"</Note>\n\n--\n\n### `componentDidMount()` {/*componentdidmount*/}\n\nIf you define the `componentDidMount` method, React will call it when your component is first added *(mounted)* to the screen. This is a common place to start data fetching, set up subscriptions, or manipulate the DOM nodes.\n\nIf you implement `componentDidMount`, you usually need to implement other lifecycle methods to avoid bugs. For example, if `componentDidMount` reads some state or props, you also have to implement [`componentDidUpdate`](#componentdidupdate) to handle their changes, and [`componentWillUnmount`](#componentwillunmount) to clean up whatever `componentDidMount` was doing.\n\n```js {6-8}\n\nclass ChatRoom extends Component {\n\nstate = {\n\nserverUrl: 'https://localhost:1234'\n\n};\n\ncomponentDidMount() {\n\nthis.setupConnection();\n\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n\nif (\n\nthis.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"139":{"pageContent":"if (\n\nthis.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {\n\nthis.destroyConnection();\n\n}\n\n// ...\n\n}\n\n```\n\n[See more examples.](#adding-lifecycle-methods-to-a-class-component)\n\n#### Parameters {/*componentdidmount-parameters*/}\n\n`componentDidMount` does not take any parameters.\n\n#### Returns {/*componentdidmount-returns*/}\n\n`componentDidMount` should not return anything.\n\n#### Caveats {/*componentdidmount-caveats*/}\n\nWhen [Strict Mode](/reference/react/StrictMode) is on, in development React will call `componentDidMount`, then immediately call [`componentWillUnmount`,](#componentwillunmount) and then call `componentDidMount` again. This helps you notice if you forgot to implement `componentWillUnmount` or if its logic doesn't fully \"mirror\" what `componentDidMount` does.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"140":{"pageContent":"Although you may call [`setState`](#setstate) immediately in `componentDidMount`, it's best to avoid that when you can. It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the [`render`](#render) will be called twice in this case, the user won't see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the [`constructor`](#constructor) instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"141":{"pageContent":"<Note>\n\nFor many use cases, defining `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` together in class components is equivalent to calling [`useEffect`](/reference/react/useEffect) in function components. In the rare cases where it's important for the code to run before browser paint, [`useLayoutEffect`](/reference/react/useLayoutEffect) is a closer match.\n\n[See how to migrate.](#migrating-a-component-with-lifecycle-methods-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `componentDidUpdate(prevProps, prevState, snapshot?)` {/*componentdidupdate*/}\n\nIf you define the `componentDidUpdate` method, React will call it immediately after your component has been re-rendered with updated props or state.  This method is not called for the initial render.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"142":{"pageContent":"If you define the `componentDidUpdate` method, React will call it immediately after your component has been re-rendered with updated props or state.  This method is not called for the initial render.\n\nYou can use it to manipulate the DOM after an update. This is also a common place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed). Typically, you'd use it together with [`componentDidMount`](#componentdidmount) and [`componentWillUnmount`:](#componentwillunmount)\n\n```js {10-18}\n\nclass ChatRoom extends Component {\n\nstate = {\n\nserverUrl: 'https://localhost:1234'\n\n};\n\ncomponentDidMount() {\n\nthis.setupConnection();\n\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n\nif (\n\nthis.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {\n\nthis.destroyConnection();\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"143":{"pageContent":"this.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {\n\nthis.destroyConnection();\n\n}\n\n// ...\n\n}\n\n```\n\n[See more examples.](#adding-lifecycle-methods-to-a-class-component)\n\n#### Parameters {/*componentdidupdate-parameters*/}\n\n`prevProps`: Props before the update. Compare `prevProps` to [`this.props`](#props) to determine what changed.\n\n`prevState`: State before the update. Compare `prevState` to [`this.state`](#state) to determine what changed.\n\n`snapshot`: If you implemented [`getSnapshotBeforeUpdate`](#getsnapshotbeforeupdate), `snapshot` will contain the value you returned from that method. Otherwise, it will be `undefined`.\n\n#### Returns {/*componentdidupdate-returns*/}\n\n`componentDidUpdate` should not return anything.\n\n#### Caveats {/*componentdidupdate-caveats*/}\n\n`componentDidUpdate` will not get called if [`shouldComponentUpdate`](#shouldcomponentupdate) is defined and returns `false`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"144":{"pageContent":"#### Caveats {/*componentdidupdate-caveats*/}\n\n`componentDidUpdate` will not get called if [`shouldComponentUpdate`](#shouldcomponentupdate) is defined and returns `false`.\n\nThe logic inside `componentDidUpdate` should usually be wrapped in conditions comparing `this.props` with `prevProps`, and `this.state` with `prevState`. Otherwise, there's a risk of creating infinite loops.\n\nAlthough you may call [`setState`](#setstate) immediately in `componentDidUpdate`, it's best to avoid that when you can. It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the [`render`](#render) will be called twice in this case, the user won't see the intermediate state. This pattern often causes performance issues, but it may be necessary for rare cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"145":{"pageContent":"<Note>\n\nFor many use cases, defining `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` together in class components is equivalent to calling [`useEffect`](/reference/react/useEffect) in function components. In the rare cases where it's important for the code to run before browser paint, [`useLayoutEffect`](/reference/react/useLayoutEffect) is a closer match.\n\n[See how to migrate.](#migrating-a-component-with-lifecycle-methods-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `componentWillMount()` {/*componentwillmount*/}\n\n<Deprecated>\n\nThis API has been renamed from `componentWillMount` to [`UNSAFE_componentWillMount`.](#unsafe_componentwillmount) The old name has been deprecated. In a future major version of React, only the new name will work.\n\nRun the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n</Deprecated>\n\n--\n\n### `componentWillReceiveProps(nextProps)` {/*componentwillreceiveprops*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"146":{"pageContent":"</Deprecated>\n\n--\n\n### `componentWillReceiveProps(nextProps)` {/*componentwillreceiveprops*/}\n\n<Deprecated>\n\nThis API has been renamed from `componentWillReceiveProps` to [`UNSAFE_componentWillReceiveProps`.](#unsafe_componentwillreceiveprops) The old name has been deprecated. In a future major version of React, only the new name will work.\n\nRun the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n</Deprecated>\n\n--\n\n### `componentWillUpdate(nextProps, nextState)` {/*componentwillupdate*/}\n\n<Deprecated>\n\nThis API has been renamed from `componentWillUpdate` to [`UNSAFE_componentWillUpdate`.](#unsafe_componentwillupdate) The old name has been deprecated. In a future major version of React, only the new name will work.\n\nRun the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n</Deprecated>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"147":{"pageContent":"Run the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n</Deprecated>\n\n--\n\n### `componentWillUnmount()` {/*componentwillunmount*/}\n\nIf you define the `componentWillUnmount` method, React will call it before your component is removed *(unmounted)* from the screen. This is a common place to cancel data fetching or remove subscriptions.\n\nThe logic inside `componentWillUnmount` should \"mirror\" the logic inside [`componentDidMount`.](#componentdidmount) For example, if `componentDidMount` sets up a subscription, `componentWillUnmount` should clean up that subscription. If the cleanup logic your `componentWillUnmount` reads some props or state, you will usually also need to implement [`componentDidUpdate`](#componentdidupdate) to clean up resources (such as subscriptions) corresponding to the old props and state.\n\n```js {20-22}\n\nclass ChatRoom extends Component {\n\nstate = {\n\nserverUrl: 'https://localhost:1234'\n\n};","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"148":{"pageContent":"```js {20-22}\n\nclass ChatRoom extends Component {\n\nstate = {\n\nserverUrl: 'https://localhost:1234'\n\n};\n\ncomponentDidMount() {\n\nthis.setupConnection();\n\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n\nif (\n\nthis.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {\n\nthis.destroyConnection();\n\n}\n\n// ...\n\n}\n\n```\n\n[See more examples.](#adding-lifecycle-methods-to-a-class-component)\n\n#### Parameters {/*componentwillunmount-parameters*/}\n\n`componentWillUnmount` does not take any parameters.\n\n#### Returns {/*componentwillunmount-returns*/}\n\n`componentWillUnmount` should not return anything.\n\n#### Caveats {/*componentwillunmount-caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"149":{"pageContent":"`componentWillUnmount` does not take any parameters.\n\n#### Returns {/*componentwillunmount-returns*/}\n\n`componentWillUnmount` should not return anything.\n\n#### Caveats {/*componentwillunmount-caveats*/}\n\nWhen [Strict Mode](/reference/react/StrictMode) is on, in development React will call [`componentDidMount`,](#componentdidmount) then immediately call `componentWillUnmount`, and then call `componentDidMount` again. This helps you notice if you forgot to implement `componentWillUnmount` or if its logic doesn't fully \"mirror\" what `componentDidMount` does.\n\n<Note>\n\nFor many use cases, defining `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` together in class components is equivalent to calling [`useEffect`](/reference/react/useEffect) in function components. In the rare cases where it's important for the code to run before browser paint, [`useLayoutEffect`](/reference/react/useLayoutEffect) is a closer match.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"150":{"pageContent":"[See how to migrate.](#migrating-a-component-with-lifecycle-methods-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `forceUpdate(callback?)` {/*forceupdate*/}\n\nForces a component to re-render.\n\nUsually, this is not necessary. If your component's [`render`](#render) method only reads from [`this.props`](#props), [`this.state`](#state), or [`this.context`,](#context) it will re-render automatically when you call [`setState`](#setstate) inside your component or one of its parents. However, if your component's `render` method reads directly from an external data source, you have to tell React to update the user interface when that data source changes. That's what `forceUpdate` lets you do.\n\nTry to avoid all uses of `forceUpdate` and only read from `this.props` and `this.state` in `render`.\n\n#### Parameters {/*forceupdate-parameters*/}\n\n**optional** `callback` If specified, React will call the `callback` you've provided after the update is committed.\n\n#### Returns {/*forceupdate-returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"151":{"pageContent":"#### Parameters {/*forceupdate-parameters*/}\n\n**optional** `callback` If specified, React will call the `callback` you've provided after the update is committed.\n\n#### Returns {/*forceupdate-returns*/}\n\n`forceUpdate` does not return anything.\n\n#### Caveats {/*forceupdate-caveats*/}\n\nIf you call `forceUpdate`, React will re-render without calling [`shouldComponentUpdate`.](#shouldcomponentupdate)\n\n<Note>\n\nReading an external data source and forcing class components to re-render in response to its changes with `forceUpdate` has been superseded by [`useSyncExternalStore`](/reference/react/useSyncExternalStore) in function components.\n\n</Note>\n\n--\n\n### `getChildContext()` {/*getchildcontext*/}\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [Use `Context.Provider` instead.](/reference/react/createContext#provider)\n\n</Deprecated>\n\nLets you specify the values for the [legacy context](https://reactjs.org/docs/legacy-context.html) is provided by this component.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"152":{"pageContent":"</Deprecated>\n\nLets you specify the values for the [legacy context](https://reactjs.org/docs/legacy-context.html) is provided by this component.\n\n--\n\n### `getSnapshotBeforeUpdate(prevProps, prevState)` {/*getsnapshotbeforeupdate*/}\n\nIf you implement `getSnapshotBeforeUpdate`, React will call it immediately before React updates the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to [`componentDidUpdate`.](#componentdidupdate)\n\nFor example, you can use it in a UI like a chat thread that needs to preserve its scroll position during updates:\n\n```js {7-15,17}\n\nclass ScrollingList extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.listRef = React.createRef();\n\n}\n\ngetSnapshotBeforeUpdate(prevProps, prevState) {\n\n// Are we adding new items to the list?\n\n// Capture the scroll position so we can adjust scroll later.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"153":{"pageContent":"super(props);\n\nthis.listRef = React.createRef();\n\n}\n\ngetSnapshotBeforeUpdate(prevProps, prevState) {\n\n// Are we adding new items to the list?\n\n// Capture the scroll position so we can adjust scroll later.\n\nif (prevProps.list.length < this.props.list.length) {\n\nconst list = this.listRef.current;\n\nreturn list.scrollHeight - list.scrollTop;\n\n}\n\nreturn null;\n\n}\n\ncomponentDidUpdate(prevProps, prevState, snapshot) {\n\n// If we have a snapshot value, we've just added new items.\n\n// Adjust scroll so these new items don't push the old ones out of view.\n\n// (snapshot here is the value returned from getSnapshotBeforeUpdate)\n\nif (snapshot !== null) {\n\nconst list = this.listRef.current;\n\nlist.scrollTop = list.scrollHeight - snapshot;\n\n}\n\n}\n\nrender() {\n\nreturn (\n\n<div ref={this.listRef}>{/* ...contents... */}</div>\n\n);\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"154":{"pageContent":"if (snapshot !== null) {\n\nconst list = this.listRef.current;\n\nlist.scrollTop = list.scrollHeight - snapshot;\n\n}\n\n}\n\nrender() {\n\nreturn (\n\n<div ref={this.listRef}>{/* ...contents... */}</div>\n\n);\n\n}\n\n}\n\n```\n\nIn the above example, it is important to read the `scrollHeight` property directly in `getSnapshotBeforeUpdate`. It is not safe to read it in [`render`](#render), [`UNSAFE_componentWillReceiveProps`](#unsafe_componentwillreceiveprops), or [`UNSAFE_componentWillUpdate`](#unsafe_componentwillupdate) because there is a potential time gap between these methods getting called and React updating the DOM.\n\n#### Parameters {/*getsnapshotbeforeupdate-parameters*/}\n\n`prevProps`: Props before the update. Compare `prevProps` to [`this.props`](#props) to determine what changed.\n\n`prevState`: State before the update. Compare `prevState` to [`this.state`](#state) to determine what changed.\n\n#### Returns {/*getsnapshotbeforeupdate-returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"155":{"pageContent":"`prevState`: State before the update. Compare `prevState` to [`this.state`](#state) to determine what changed.\n\n#### Returns {/*getsnapshotbeforeupdate-returns*/}\n\nYou should return a snapshot value of any type that you'd like, or `null`. The value you returned will be passed as the third argument to [`componentDidUpdate`.](#componentdidupdate)\n\n#### Caveats {/*getsnapshotbeforeupdate-caveats*/}\n\n`getSnapshotBeforeUpdate` will not get called if [`shouldComponentUpdate`](#shouldcomponentupdate) is defined and returns `false`.\n\n<Note>\n\nAt the moment, there is no equivalent to `getSnapshotBeforeUpdate` for function components. This use case is very uncommon, but if you have the need for it, for now you'll have to write a class component.\n\n</Note>\n\n--\n\n### `render()` {/*render*/}\n\nThe `render` method is the only required method in a class component.\n\nThe `render` method should specify what you want to appear on the screen, for example:\n\n```js {4-6}\n\nimport { Component } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"156":{"pageContent":"The `render` method is the only required method in a class component.\n\nThe `render` method should specify what you want to appear on the screen, for example:\n\n```js {4-6}\n\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\nReact may call `render` at any moment, so you shouldn't assume that it runs at a particular time. Usually, the `render` method should return a piece of [JSX](/learn/writing-markup-with-jsx), but a few [other return types](#render-returns) (like strings) are supported. To calculate the returned JSX, the `render` method can read [`this.props`](#props), [`this.state`](#state), and [`this.context`](#context).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"157":{"pageContent":"You should write the `render` method as a pure function, meaning that it should return the same result if props, state, and context are the same. It also shouldn't contain side effects (like setting up subscriptions) or interact with the browser APIs. Side effects should happen either in event handlers or methods like [`componentDidMount`.](#componentdidmount)\n\n#### Parameters {/*render-parameters*/}\n\n`prevProps`: Props before the update. Compare `prevProps` to [`this.props`](#props) to determine what changed.\n\n`prevState`: State before the update. Compare `prevState` to [`this.state`](#state) to determine what changed.\n\n#### Returns {/*render-returns*/}\n\n`render` can return any valid React node. This includes React elements such as `<div />`, strings, numbers, [portals](/reference/react-dom/createPortal), empty nodes (`null`, `undefined`, `true`, and `false`), and arrays of React nodes.\n\n#### Caveats {/*render-caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"158":{"pageContent":"#### Caveats {/*render-caveats*/}\n\n`render` should be written as a pure function of props, state, and context. It should not have side effects.\n\n`render` will not get called if [`shouldComponentUpdate`](#shouldcomponentupdate) is defined and returns `false`.\n\nWhen [Strict Mode](/reference/react/StrictMode) is on, React will call `render` twice in development and then throw away one of the results. This helps you notice the accidental side effects that need to be moved out of the `render` method.\n\nThere is no one-to-one correspondence between the `render` call and the subsequent `componentDidMount` or `componentDidUpdate` call. Some of the `render` call results may be discarded by React when it's beneficial.\n\n--\n\n### `setState(nextState, callback?)` {/*setstate*/}\n\nCall `setState` to update the state of your React component.\n\n```js {8-10}\n\nclass Form extends Component {\n\nstate = {\n\nname: 'Taylor',\n\n};\n\nhandleNameChange = (e) => {\n\nconst newName = e.target.value;\n\nthis.setState({\n\nname: newName\n\n});\n\n}\n\nrender() {\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"159":{"pageContent":"```js {8-10}\n\nclass Form extends Component {\n\nstate = {\n\nname: 'Taylor',\n\n};\n\nhandleNameChange = (e) => {\n\nconst newName = e.target.value;\n\nthis.setState({\n\nname: newName\n\n});\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<input value={this.state.name} onChange={this.handleNameChange} />\n\n<p>Hello, {this.state.name}.\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n`setState` enqueues changes to the component state. It tells React that this component and its children need to re-render with the new state. This is the main way you'll update the user interface in response to interactions.\n\n<Pitfall>\n\nCalling `setState` **does not** change the current state in the already executing code:\n\n```js {6}\n\nfunction handleClick() {\n\nconsole.log(this.state.name); // \"Taylor\"\n\nthis.setState({\n\nname: 'Robin'\n\n});\n\nconsole.log(this.state.name); // Still \"Taylor\"!\n\n}\n\n```\n\nIt only affects what `this.state` will return starting from the *next* render.\n\n</Pitfall>\n\nYou can also pass a function to `setState`. It lets you update state based on the previous state:\n\n```js {2-6}\n\nhandleIncreaseAge = () => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"160":{"pageContent":"</Pitfall>\n\nYou can also pass a function to `setState`. It lets you update state based on the previous state:\n\n```js {2-6}\n\nhandleIncreaseAge = () => {\n\nthis.setState(prevState => {\n\nreturn {\n\nage: prevState.age + 1\n\n};\n\n});\n\n}\n\n```\n\nYou don't have to do this, but it's handy if you want to update state multiple times during the same event.\n\n#### Parameters {/*setstate-parameters*/}\n\n`nextState`: Either an object or a function.\n\nIf you pass an object as `nextState`, it will be shallowly merged into `this.state`.\n\nIf you pass a function as `nextState`, it will be treated as an _updater function_. It must be pure, should take the pending state and props as arguments, and should return the object to be shallowly merged into `this.state`. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"161":{"pageContent":"**optional** `callback`: If specified, React will call the `callback` you've provided after the update is committed.\n\n#### Returns {/*setstate-returns*/}\n\n`setState` does not return anything.\n\n#### Caveats {/*setstate-caveats*/}\n\nThink of `setState` as a *request* rather than an immediate command to update the component. When multiple components update their state in response to an event, React will batch their updates and re-render them together in a single pass at the end of the event. In the rare case that you need to force a particular state update to be applied synchronously, you may wrap it in [`flushSync`,](/reference/react-dom/flushSync) but this may hurt performance.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"162":{"pageContent":"`setState` does not update `this.state` immediately. This makes reading `this.state` right after calling `setState` a potential pitfall. Instead, use [`componentDidUpdate`](#componentdidupdate) or the setState `callback` argument, either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, you can pass a function to `nextState` as described above.\n\n<Note>\n\nCalling `setState` in class components is similar to calling a [`set` function](/reference/react/useState#setstate) in function components.\n\n[See how to migrate.](#migrating-a-component-with-state-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `shouldComponentUpdate(nextProps, nextState, nextContext)` {/*shouldcomponentupdate*/}\n\nIf you define `shouldComponentUpdate`, React will call it to determine whether a re-render can be skipped.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"163":{"pageContent":"--\n\n### `shouldComponentUpdate(nextProps, nextState, nextContext)` {/*shouldcomponentupdate*/}\n\nIf you define `shouldComponentUpdate`, React will call it to determine whether a re-render can be skipped.\n\nIf you are confident you want to write it by hand, you may compare `this.props` with `nextProps` and `this.state` with `nextState` and return `false` to tell React the update can be skipped.\n\n```js {6-18}\n\nclass Rectangle extends Component {\n\nstate = {\n\nisHovered: false\n\n};\n\nshouldComponentUpdate(nextProps, nextState) {\n\nif (\n\nnextProps.position.x === this.props.position.x &&\n\nnextProps.position.y === this.props.position.y &&\n\nnextProps.size.width === this.props.size.width &&\n\nnextProps.size.height === this.props.size.height &&\n\nnextState.isHovered === this.state.isHovered\n\n) {\n\n// Nothing has changed, so a re-render is unnecessary\n\nreturn false;\n\n}\n\nreturn true;\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"164":{"pageContent":"nextProps.size.height === this.props.size.height &&\n\nnextState.isHovered === this.state.isHovered\n\n) {\n\n// Nothing has changed, so a re-render is unnecessary\n\nreturn false;\n\n}\n\nreturn true;\n\n}\n\n// ...\n\n}\n\n```\n\nReact calls `shouldComponentUpdate` before rendering when new props or state are being received. Defaults to `true`. This method is not called for the initial render or when [`forceUpdate`](#forceupdate) is used.\n\n#### Parameters {/*shouldcomponentupdate-parameters*/}\n\n`nextProps`: The next props that the component is about to render with. Compare `nextProps` to [`this.props`](#props) to determine what changed.\n\n`nextState`: The next props that the component is about to render with. Compare `nextState` to [`this.state`](#props) to determine what changed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"165":{"pageContent":"`nextState`: The next props that the component is about to render with. Compare `nextState` to [`this.state`](#props) to determine what changed.\n\n`nextContext`: The next props that the component is about to render with. Compare `nextContext` to [`this.context`](#context) to determine what changed. Only available if you specify [`static contextType`](#static-contexttype) (modern) or [`static contextTypes`](#static-contexttypes) (legacy).\n\n#### Returns {/*shouldcomponentupdate-returns*/}\n\nReturn `true` if you want the component to re-render. That's the default behavior.\n\nReturn `false` to tell React that re-rendering can be skipped.\n\n#### Caveats {/*shouldcomponentupdate-caveats*/}\n\nThis method *only* exists as a performance optimization. If your component breaks without it, fix that first.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"166":{"pageContent":"#### Caveats {/*shouldcomponentupdate-caveats*/}\n\nThis method *only* exists as a performance optimization. If your component breaks without it, fix that first.\n\nConsider using [`PureComponent`](/reference/react/PureComponent) instead of writing `shouldComponentUpdate` by hand. `PureComponent` shallowly compares props and state, and reduces the chance that you'll skip a necessary update.\n\nWe do not recommend doing deep equality checks or using `JSON.stringify` in `shouldComponentUpdate`. It makes performance unpredictable and dependent on the data structure of every prop and state. In the best case, you risk introducing multi-second stalls to your application, and in the worst case you risk crashing it.\n\nReturning `false` does not prevent child components from re-rendering when *their* state changes.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"167":{"pageContent":"Returning `false` does not prevent child components from re-rendering when *their* state changes.\n\nReturning `false` does not *guarantee* that the component will not re-render. React will use the return value as a hint but it may still choose to re-render your component if it makes sense to do for other reasons.\n\n<Note>\n\nOptimizing class components with `shouldComponentUpdate` is similar to optimizing function components with [`memo`.](/reference/react/memo) Function components also offer more granular optimization with [`useMemo`.](/reference/react/useMemo)\n\n</Note>\n\n--\n\n### `UNSAFE_componentWillMount()` {/*unsafe_componentwillmount*/}\n\nIf you define `UNSAFE_componentWillMount`, React will call it immediately after the [`constructor`.](#constructor) It only exists for historical reasons and should not be used in any new code. Instead, use one of the alternatives:\n\nTo initialize state, declare [`state`](#state) as a class field or set `this.state` inside the [`constructor`.](#constructor)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"168":{"pageContent":"To initialize state, declare [`state`](#state) as a class field or set `this.state` inside the [`constructor`.](#constructor)\n\nIf you need to run a side effect or set up a subscription, move that logic to [`componentDidMount`](#componentdidmount) instead.\n\n[See examples of migrating away from unsafe lifecycles.](/blog/2018/03/27/update-on-async-rendering#examples)\n\n#### Parameters {/*unsafe_componentwillmount-parameters*/}\n\n`UNSAFE_componentWillMount` does not take any parameters.\n\n#### Returns {/*unsafe_componentwillmount-returns*/}\n\n`UNSAFE_componentWillMount` should not return anything.\n\n#### Caveats {/*unsafe_componentwillmount-caveats*/}\n\n`UNSAFE_componentWillMount` will not get called if the component implements [`static getDerivedStateFromProps`](getDerivedStateFromProps) or [`getSnapshotBeforeUpdate`.](#getsnapshotbeforeupdate)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"169":{"pageContent":"`UNSAFE_componentWillMount` will not get called if the component implements [`static getDerivedStateFromProps`](getDerivedStateFromProps) or [`getSnapshotBeforeUpdate`.](#getsnapshotbeforeupdate)\n\nDespite its naming, `UNSAFE_componentWillMount` does not guarantee that the component *will* get mounted if your app uses modern React features like [`Suspense`.](/reference/react/Suspense) If a render attempt is suspended (for example, because the code for some child component has not loaded yet), React will throw the in-progress tree away and attempt to construct the component from scratch during the next attempt. This is why this method is \"unsafe\". Code that relies on mounting (like adding a subscription) should go into [`componentDidMount`.](#componentdidmount)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"170":{"pageContent":"`UNSAFE_componentWillMount` is the only lifecycle method that runs during [server rendering.](/reference/react-dom/server) For all practical purposes, it is identical to [`constructor`,](#constructor) so you should use the `constructor` for this type of logic instead.\n\n<Note>\n\nCalling [`setState`](#setstate) inside `UNSAFE_componentWillMount` in a class component to initialize state is equivalent to passing that state as the initial state to [`useState`](/reference/react/useState) in a function component.\n\n</Note>\n\n--\n\n### `UNSAFE_componentWillReceiveProps(nextProps, nextContext)` {/*unsafe_componentwillreceiveprops*/}\n\nIf you define `UNSAFE_componentWillReceiveProps`, React will call it when the component receives new props. It only exists for historical reasons and should not be used in any new code. Instead, use one of the alternatives:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"171":{"pageContent":"If you need to **run a side effect** (for example, fetch data, run an animation, or reinitialize a subscription) in response to prop changes, move that logic to [`componentDidUpdate`](#componentdidupdate) instead.\n\nIf you need to **avoid re-computing some data only when a prop changes,** use a [memoization helper](/blog/2018/06/07/you-probably-dont-need-derived-state#what-about-memoization) instead.\n\nIf you need to **\"reset\" some state when a prop changes,** consider either making a component [fully controlled](/blog/2018/06/07/you-probably-dont-need-derived-state#recommendation-fully-controlled-component) or [fully uncontrolled with a key](/blog/2018/06/07/you-probably-dont-need-derived-state#recommendation-fully-uncontrolled-component-with-a-key) instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"172":{"pageContent":"If you need to **\"adjust\" some state when a prop changes,** check whether you can compute all the necessary information from props alone during rendering. If you can't, use [`static getDerivedStateFromProps`](/reference/react/Component#static-getderivedstatefromprops) instead.\n\n[See examples of migrating away from unsafe lifecycles.](/blog/2018/03/27/update-on-async-rendering#updating-state-based-on-props)\n\n#### Parameters {/*unsafe_componentwillreceiveprops-parameters*/}\n\n`nextProps`: The next props that the component is about to receive from its parent component. Compare `nextProps` to [`this.props`](#props) to determine what changed.\n\n`nextContext`: The next props that the component is about to receive from the closest provider. Compare `nextContext` to [`this.context`](#context) to determine what changed. Only available if you specify [`static contextType`](#static-contexttype) (modern) or [`static contextTypes`](#static-contexttypes) (legacy).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"173":{"pageContent":"#### Returns {/*unsafe_componentwillreceiveprops-returns*/}\n\n`UNSAFE_componentWillReceiveProps` should not return anything.\n\n#### Caveats {/*unsafe_componentwillreceiveprops-caveats*/}\n\n`UNSAFE_componentWillReceiveProps` will not get called if the component implements [`static getDerivedStateFromProps`](getDerivedStateFromProps) or [`getSnapshotBeforeUpdate`.](#getsnapshotbeforeupdate)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"174":{"pageContent":"Despite its naming, `UNSAFE_componentWillReceiveProps` does not guarantee that the component *will* receive those props if your app uses modern React features like [`Suspense`.](/reference/react/Suspense) If a render attempt is suspended (for example, because the code for some child component has not loaded yet), React will throw the in-progress tree away and attempt to construct the component from scratch during the next attempt. By the time of the next render attempt, the props might be different. This is why this method is \"unsafe\". Code that should run only for committed updates (like resetting a subscription) should go into [`componentDidUpdate`.](#componentdidupdate)\n\n`UNSAFE_componentWillReceiveProps` does not mean that the component has received *different* props than the last time. You need to compare `nextProps` and `this.props` yourself to check if something changed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"175":{"pageContent":"React doesn't call `UNSAFE_componentWillReceiveProps` with initial props during mounting. It only calls this method if some of component's props are going to be updated. For example, calling [`setState`](#setstate) doesn't generally trigger `UNSAFE_componentWillReceiveProps` inside the same component.\n\n<Note>\n\nCalling [`setState`](#setstate) inside `UNSAFE_componentWillReceiveProps` in a class component to \"adjust\" state is equivalent to [calling the `set` function from `useState` during rendering](/reference/react/useState#storing-information-from-previous-renders) in a function component.\n\n</Note>\n\n--\n\n### `UNSAFE_componentWillUpdate(nextProps, nextState)` {/*unsafe_componentwillupdate*/}\n\nIf you define `UNSAFE_componentWillUpdate`, React will call it before rendering with the new props or state. It only exists for historical reasons and should not be used in any new code. Instead, use one of the alternatives:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"176":{"pageContent":"If you need to run a side effect (for example, fetch data, run an animation, or reinitialize a subscription) in response to prop or state changes, move that logic to [`componentDidUpdate`](#componentdidupdate) instead.\n\nIf you need to read some information from the DOM (for example, to save the current scroll position) so that you can use it in [`componentDidUpdate`](#componentdidupdate) later, read it inside [`getSnapshotBeforeUpdate`](#getsnapshotbeforeupdate) instead.\n\n[See examples of migrating away from unsafe lifecycles.](/blog/2018/03/27/update-on-async-rendering#examples)\n\n#### Parameters {/*unsafe_componentwillupdate-parameters*/}\n\n`nextProps`: The next props that the component is about to render with. Compare `nextProps` to [`this.props`](#props) to determine what changed.\n\n`nextState`: The next state that the component is about to render with. Compare `nextState` to [`this.state`](#state) to determine what changed.\n\n#### Returns {/*unsafe_componentwillupdate-returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"177":{"pageContent":"`nextState`: The next state that the component is about to render with. Compare `nextState` to [`this.state`](#state) to determine what changed.\n\n#### Returns {/*unsafe_componentwillupdate-returns*/}\n\n`UNSAFE_componentWillUpdate` should not return anything.\n\n#### Caveats {/*unsafe_componentwillupdate-caveats*/}\n\n`UNSAFE_componentWillUpdate` will not get called if [`shouldComponentUpdate`](#shouldcomponentupdate) is defined and returns `false`.\n\n`UNSAFE_componentWillUpdate` will not get called if the component implements [`static getDerivedStateFromProps`](getDerivedStateFromProps) or [`getSnapshotBeforeUpdate`.](#getsnapshotbeforeupdate)\n\nIt's not supported to call [`setState`](#setstate) (or any method that leads to `setState` being called, like dispatching a Redux action) during `componentWillUpdate`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"178":{"pageContent":"It's not supported to call [`setState`](#setstate) (or any method that leads to `setState` being called, like dispatching a Redux action) during `componentWillUpdate`.\n\nDespite its naming, `UNSAFE_componentWillUpdate` does not guarantee that the component *will* update if your app uses modern React features like [`Suspense`.](/reference/react/Suspense) If a render attempt is suspended (for example, because the code for some child component has not loaded yet), React will throw the in-progress tree away and attempt to construct the component from scratch during the next attempt. By the time of the next render attempt, the props and state might be different. This is why this method is \"unsafe\". Code that should run only for committed updates (like resetting a subscription) should go into [`componentDidUpdate`.](#componentdidupdate)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"179":{"pageContent":"`UNSAFE_componentWillUpdate` does not mean that the component has received *different* props or state than the last time. You need to compare `nextProps` with `this.props` and `nextState` with `this.state` yourself to check if something changed.\n\nReact doesn't call `UNSAFE_componentWillUpdate` with initial props and state during mounting.\n\n<Note>\n\nThere is no direct equivalent to `UNSAFE_componentWillUpdate` in function components.\n\n</Note>\n\n--\n\n### `static childContextTypes` {/*static-childcontexttypes*/}\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [Use `static contextType` instead.](#static-contexttype)\n\n</Deprecated>\n\nLets you specify which [legacy context](https://reactjs.org/docs/legacy-context.html) is provided by this component.\n\n--\n\n### `static contextTypes` {/*static-contexttypes*/}\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [Use `static contextType` instead.](#static-contexttype)\n\n</Deprecated>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"180":{"pageContent":"--\n\n### `static contextTypes` {/*static-contexttypes*/}\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [Use `static contextType` instead.](#static-contexttype)\n\n</Deprecated>\n\nLets you specify which [legacy context](https://reactjs.org/docs/legacy-context.html) is consumed by this component.\n\n--\n\n### `static contextType` {/*static-contexttype*/}\n\nIf you want to read [`this.context`](#context-instance-field) from your class component, you must specify which context it needs to read. The context you specify as the `static contextType` must be a value previously created by [`createContext`.](/reference/react/createContext)\n\n```js {2}\n\nclass Button extends Component {\n\nstatic contextType = ThemeContext;\n\nrender() {\n\nconst theme = this.context;\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{this.props.children}\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n<Note>\n\nReading `this.context` in class components is equivalent to [`useContext`](/reference/react/useContext) in function components.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"181":{"pageContent":"<button className={className}>\n\n{this.props.children}\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n<Note>\n\nReading `this.context` in class components is equivalent to [`useContext`](/reference/react/useContext) in function components.\n\n[See how to migrate.](#migrating-a-component-with-context-from-a-class-to-a-function)\n\n</Note>\n\n--\n\n### `static defaultProps` {/*static-defaultprops*/}\n\nYou can define `static defaultProps` to set the default props for the class. They will be used for `undefined` and missing props, but not for `null` props.\n\nFor example, here is how you define that the `color` prop should default to `'blue'`:\n\n```js {2-4}\n\nclass Button extends Component {\n\nstatic defaultProps = {\n\ncolor: 'blue'\n\n};\n\nrender() {\n\nreturn <button className={this.props.color}>click me</button>;\n\n}\n\n}\n\n```\n\nIf the `color` prop is not provided or is `undefined`, it will be set by default to `'blue'`:\n\n```js\n\n<>\n\n{/* this.props.color is \"blue\" */}\n\n<Button />\n\n{/* this.props.color is \"blue\" */}\n\n<Button color={undefined} />\n\n{/* this.props.color is null */}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"182":{"pageContent":"```js\n\n<>\n\n{/* this.props.color is \"blue\" */}\n\n<Button />\n\n{/* this.props.color is \"blue\" */}\n\n<Button color={undefined} />\n\n{/* this.props.color is null */}\n\n<Button color={null} />\n\n{/* this.props.color is \"red\" */}\n\n<Button color=\"red\" />\n\n</>\n\n```\n\n<Note>\n\nDefining `defaultProps` in class components is similar to using [default values](/learn/passing-props-to-a-component#specifying-a-default-value-for-a-prop) in function components.\n\n</Note>\n\n--\n\n### `static getDerivedStateFromError(error)` {/*static-getderivedstatefromerror*/}\n\nIf you define `static getDerivedStateFromError`, React will call it when a child component (including distant children) throws an error during rendering. This lets you display an error message instead of clearing the UI.\n\nTypically, it is used together with [`componentDidCatch`](#componentDidCatch) which lets you send the error report to some analytics service. A component with these methods is called an *error boundary.*\n\n[See an example.](#catching-rendering-errors-with-an-error-boundary)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"183":{"pageContent":"[See an example.](#catching-rendering-errors-with-an-error-boundary)\n\n#### Parameters {/*static-getderivedstatefromerror-parameters*/}\n\n`error`: The error that was thrown. In practice, it will usually be an instance of [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) but this is not guaranteed because JavaScript allows to [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) any value, including strings or even `null`.\n\n#### Returns {/*static-getderivedstatefromerror-returns*/}\n\n`static getDerivedStateFromError` should return the state telling the component to display the error message.\n\n#### Caveats {/*static-getderivedstatefromerror-caveats*/}\n\n`static getDerivedStateFromError` should be a pure function. If you want to perform a side effect (for example, to call an analytics service), you need to also implement [`componentDidCatch`.](#componentdidcatch)\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"184":{"pageContent":"<Note>\n\nThere is no direct equivalent for `static getDerivedStateFromError` in function components yet. If you'd like to avoid creating class components, write a single `ErrorBoundary` component like above and use it throughout your app. Alternatively, use the [`react-error-boundary`](https://github.com/bvaughn/react-error-boundary) package which does that.\n\n</Note>\n\n--\n\n### `static getDerivedStateFromProps(props, state)` {/*static-getderivedstatefromprops*/}\n\nIf you define `static getDerivedStateFromProps`, React will call it right before calling [`render`,](#render) both on the initial mount and on subsequent updates. It should return an object to update the state, or `null` to update nothing.\n\nThis method exists for [rare use cases](/blog/2018/06/07/you-probably-dont-need-derived-state#when-to-use-derived-state) where the state depends on changes in props over time. For example, this `Form` component resets the `email` state when the `userID` prop changes:\n\n```js {7-18}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"185":{"pageContent":"```js {7-18}\n\nclass Form extends Component {\n\nstate = {\n\nemail: this.props.defaultEmail,\n\nprevUserID: this.props.userID\n\n};\n\nstatic getDerivedStateFromProps(props, state) {\n\n// Any time the current user changes,\n\n// Reset any parts of state that are tied to that user.\n\n// In this simple example, that's just the email.\n\nif (props.userID !== state.prevUserID) {\n\nreturn {\n\nprevUserID: props.userID,\n\nemail: props.defaultEmail\n\n};\n\n}\n\nreturn null;\n\n}\n\n// ...\n\n}\n\n```\n\nNote that this pattern requires you to keep a previous value of the prop (like `userID`) in state (like `prevUserID`).\n\n<Pitfall>\n\nDeriving state leads to verbose code and makes your components difficult to think about. [Make sure you're familiar with simpler alternatives:](/blog/2018/06/07/you-probably-dont-need-derived-state.html)\n\nIf you need to **perform a side effect** (for example, data fetching or an animation) in response to a change in props, use [`componentDidUpdate`](#componentdidupdate) method instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"186":{"pageContent":"If you need to **perform a side effect** (for example, data fetching or an animation) in response to a change in props, use [`componentDidUpdate`](#componentdidupdate) method instead.\n\nIf you want to **re-compute some data only when a prop changes,** [use a memoization helper instead.](/blog/2018/06/07/you-probably-dont-need-derived-state#what-about-memoization)\n\nIf you want to **\"reset\" some state when a prop changes,** consider either making a component [fully controlled](/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component) or [fully uncontrolled with a key](/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) instead.\n\n</Pitfall>\n\n#### Parameters {/*static-getderivedstatefromprops-parameters*/}\n\n`props`: The next props that the component is about to render with.\n\n`state`: The next state that the component is about to render with.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"187":{"pageContent":"#### Parameters {/*static-getderivedstatefromprops-parameters*/}\n\n`props`: The next props that the component is about to render with.\n\n`state`: The next state that the component is about to render with.\n\n#### Returns {/*static-getderivedstatefromprops-returns*/}\n\n`static getDerivedStateFromProps` return an object to update the state, or `null` to update nothing.\n\n#### Caveats {/*static-getderivedstatefromprops-caveats*/}\n\nThis method is fired on *every* render, regardless of the cause. This is different from [`UNSAFE_componentWillReceiveProps`](#unsafe_cmoponentwillreceiveprops), which only fires when the parent causes a re-render and not as a result of a local `setState`.\n\nThis method doesn't have access to the component instance. If you'd like, you can reuse some code between `static getDerivedStateFromProps` and the other class methods by extracting pure functions of the component props and state outside the class definition.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"188":{"pageContent":"<Note>\n\nImplementing `static getDerivedStateFromProps` in a class component is equivalent to [calling the `set` function from `useState` during rendering](/reference/react/useState#storing-information-from-previous-renders) in a function component.\n\n</Note>\n\n--\n\n## Usage {/*usage*/}\n\n### Defining a class component {/*defining-a-class-component*/}\n\nTo define a React component as a class, extend the built-in `Component` class and define a [`render` method:](#render)\n\n```js\n\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\nReact will call your [`render`](#render) method whenever it needs to figure out what to display on the screen. Usually, you will return some [JSX](/learn/writing-markup-with-jsx) from it. Your `render` method should be a [pure function:](https://en.wikipedia.org/wiki/Pure_function) it should only calculate the JSX.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"189":{"pageContent":"Similarly to [function components,](/learn/your-first-component#defining-a-component) a class component can [receive information by props](/learn/your-first-component#defining-a-component) from its parent component. However, the syntax for reading props is different. For example, if the parent component renders `<Greeting name=\"Taylor\" />`, then you can read the `name` prop from [`this.props`](#props), like `this.props.name`:\n\n<Sandpack>\n\n```js\n\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<Greeting name=\"Sara\" />\n\n<Greeting name=\"Cahal\" />\n\n<Greeting name=\"Edite\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNote that Hooks (functions starting with `use`, like [`useState`](/reference/react/useState)) are not supported inside class components.\n\n<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#migrating-a-simple-component-from-a-class-to-a-function)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"190":{"pageContent":"<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#migrating-a-simple-component-from-a-class-to-a-function)\n\n</Pitfall>\n\n--\n\n### Adding state to a class component {/*adding-state-to-a-class-component*/}\n\nTo add [state](/learn/state-a-components-memory) to a class, assign an object to a property called [`state`](#state). To update state, call [`this.setState`](#setstate).\n\n<Sandpack>\n\n```js\n\nimport { Component } from 'react';\n\nexport default class Counter extends Component {\n\nstate = {\n\nname: 'Taylor',\n\nage: 42,\n\n};\n\nhandleNameChange = (e) => {\n\nthis.setState({\n\nname: e.target.value\n\n});\n\n}\n\nhandleAgeChange = () => {\n\nthis.setState({\n\nage: this.state.age + 1\n\n});\n\n};\n\nrender() {\n\nreturn (\n\n<>\n\n<input\n\nvalue={this.state.name}\n\nonChange={this.handleNameChange}\n\n/>\n\n<button onClick={this.handleAgeChange}>\n\nIncrement age\n\n</button>\n\n<p>Hello, {this.state.name}. You are {this.state.age}.</p>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"191":{"pageContent":"Increment age\n\n</button>\n\n<p>Hello, {this.state.name}. You are {this.state.age}.</p>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#migrating-a-component-with-state-from-a-class-to-a-function)\n\n</Pitfall>\n\n--\n\n### Adding lifecycle methods to a class component {/*adding-lifecycle-methods-to-a-class-component*/}\n\nThere are a few special methods you can define on your class.\n\nIf you define the [`componentDidMount`](#componentdidmount) method, React will call it when your component is first added *(mounted)* to the screen. React will call [`componentDidUpdate`](#componentdidupdate) after your component re-renders due to changed props or state. React will call [`componentWillUnmount`](#componentwillunmount) after your component has been removed *(unmounted)* from the screen.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"192":{"pageContent":"If you implement `componentDidMount`, you usually need to implement all three lifecycles to avoid bugs. For example, if `componentDidMount` reads some state or props, you also have to implement `componentDidUpdate` to handle their changes, and `componentWillUnmount` to clean up whatever `componentDidMount` was doing.\n\nFor example, this `ChatRoom` component keeps a chat connection synchronized with props and state:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"193":{"pageContent":"<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { Component } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default class ChatRoom extends Component {\n\nstate = {\n\nserverUrl: 'https://localhost:1234'\n\n};\n\ncomponentDidMount() {\n\nthis.setupConnection();\n\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n\nif (\n\nthis.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {\n\nthis.destroyConnection();\n\n}\n\nsetupConnection() {\n\nthis.connection = createConnection(\n\nthis.state.serverUrl,\n\nthis.props.roomId\n\n);\n\nthis.connection.connect();\n\n}\n\ndestroyConnection() {\n\nthis.connection.disconnect();\n\nthis.connection = null;\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={this.state.serverUrl}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"194":{"pageContent":"this.props.roomId\n\n);\n\nthis.connection.connect();\n\n}\n\ndestroyConnection() {\n\nthis.connection.disconnect();\n\nthis.connection = null;\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={this.state.serverUrl}\n\nonChange={e => {\n\nthis.setState({\n\nserverUrl: e.target.value\n\n});\n\n}}\n\n/>\n\n</label>\n\n<h1>Welcome to the {this.props.roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"195":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNote that in development when [Strict Mode](/reference/react/StrictMode) is on, React will call `componentDidMount`, immediately call `componentWillUnmount`, and then call `componentDidMount` again. This helps you notice if you forgot to implement `componentWillUnmount` or if its logic doesn't fully \"mirror\" what `componentDidMount` does.\n\n<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#migrating-a-component-with-lifecycle-methods-from-a-class-to-a-function)\n\n</Pitfall>\n\n--\n\n### Catching rendering errors with an error boundary {/*catching-rendering-errors-with-an-error-boundary*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"196":{"pageContent":"</Pitfall>\n\n--\n\n### Catching rendering errors with an error boundary {/*catching-rendering-errors-with-an-error-boundary*/}\n\nBy default, if your application throws an error during rendering, React will remove its UI from the screen. To prevent this, you can wrap a part of your UI into an *error boundary*. An error boundary is a special component that lets you display some fallback UI instead of the part that crashed--for example, an error message.\n\nTo implement an error boundary component, you need to provide [`static getDerivedStateFromError`](#static-getderivedstatefromerror) which lets you update state in response to an error and display an error message to the user. You can also optionally implement [`componentDidcatch`](#componentdidcatch) to add some extra logic, for example, to log the error to an analytics service.\n\n```js {7-10,12-19}\n\nclass ErrorBoundary extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = { hasError: false };\n\n}\n\nstatic getDerivedStateFromError(error) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"197":{"pageContent":"```js {7-10,12-19}\n\nclass ErrorBoundary extends React.Component {\n\nconstructor(props) {\n\nsuper(props);\n\nthis.state = { hasError: false };\n\n}\n\nstatic getDerivedStateFromError(error) {\n\n// Update state so the next render will show the fallback UI.\n\nreturn { hasError: true };\n\n}\n\ncomponentDidCatch(error, info) {\n\n// Example \"componentStack\":\n\n//   in ComponentThatThrows (created by App)\n\n//   in ErrorBoundary (created by App)\n\n//   in div (created by App)\n\n//   in App\n\nlogErrorToMyService(error, info.componentStack);\n\n}\n\nrender() {\n\nif (this.state.hasError) {\n\n// You can render any custom fallback UI\n\nreturn this.props.fallback;\n\n}\n\nreturn this.props.children;\n\n}\n\n}\n\n```\n\nThen you can wrap a part of your component tree with it:\n\n```js {1,3}\n\n<ErrorBoundary fallback={<p>Something went wrong</p>}>\n\n<Profile />\n\n</ErrorBoundary>\n\n```\n\nIf `Profile` or its child component throws an error, `ErrorBoundary` will \"catch\" that error, display a fallback UI with the error message you've provided, and send a production error report to your error reporting service.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"198":{"pageContent":"You don't need to wrap every component into a separate error boundary. When you think about the [granularity of error boundaries,](https://aweary.dev/fault-tolerance-react/) consider where it makes sense to display an error message. For example, in a messaging app, it makes sense to place an error boundary around the list of conversations. It also makes sense to place one around every individual message. However, it wouldn't make sense to place a boundary around every avatar.\n\n<Note>\n\nThere is currently no way to write an error boundary as a function component. However, you don't have to write the error boundary class yourself. For example, you can use [`react-error-boundary`](https://github.com/bvaughn/react-error-boundary) instead.\n\n</Note>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Migrating a simple component from a class to a function {/*migrating-a-simple-component-from-a-class-to-a-function*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"199":{"pageContent":"</Note>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Migrating a simple component from a class to a function {/*migrating-a-simple-component-from-a-class-to-a-function*/}\n\nTypically, you will [define components as functions](/learn/your-first-component#defining-a-component) instead.\n\nFor example, suppose you're converting this `Greeting` class component to a function:\n\n<Sandpack>\n\n```js\n\nimport { Component } from 'react';\n\nclass Greeting extends Component {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<Greeting name=\"Sara\" />\n\n<Greeting name=\"Cahal\" />\n\n<Greeting name=\"Edite\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nDefine a function called `Greeting`. This is where you will move the body of your `render` function.\n\n```js\n\nfunction Greeting() {\n\n// ... move the code from the render method here ...\n\n}\n\n```\n\nInstead of `this.props.name`, define the `name` prop [using the destructuring syntax](/learn/passing-props-to-a-component) and read it directly:\n\n```js\n\nfunction Greeting({ name }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"200":{"pageContent":"}\n\n```\n\nInstead of `this.props.name`, define the `name` prop [using the destructuring syntax](/learn/passing-props-to-a-component) and read it directly:\n\n```js\n\nfunction Greeting({ name }) {\n\nreturn <h1>Hello, {name}!</h1>;\n\n}\n\n```\n\nHere is a complete example:\n\n<Sandpack>\n\n```js\n\nfunction Greeting({ name }) {\n\nreturn <h1>Hello, {name}!</h1>;\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<Greeting name=\"Sara\" />\n\n<Greeting name=\"Cahal\" />\n\n<Greeting name=\"Edite\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Migrating a component with state from a class to a function {/*migrating-a-component-with-state-from-a-class-to-a-function*/}\n\nSuppose you're converting this `Counter` class component to a function:\n\n<Sandpack>\n\n```js\n\nimport { Component } from 'react';\n\nexport default class Counter extends Component {\n\nstate = {\n\nname: 'Taylor',\n\nage: 42,\n\n};\n\nhandleNameChange = (e) => {\n\nthis.setState({\n\nname: e.target.value\n\n});\n\n}\n\nhandleAgeChange = (e) => {\n\nthis.setState({\n\nage: this.state.age + 1\n\n});\n\n};\n\nrender() {\n\nreturn (\n\n<>\n\n<input\n\nvalue={this.state.name}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"201":{"pageContent":"age: 42,\n\n};\n\nhandleNameChange = (e) => {\n\nthis.setState({\n\nname: e.target.value\n\n});\n\n}\n\nhandleAgeChange = (e) => {\n\nthis.setState({\n\nage: this.state.age + 1\n\n});\n\n};\n\nrender() {\n\nreturn (\n\n<>\n\n<input\n\nvalue={this.state.name}\n\nonChange={this.handleNameChange}\n\n/>\n\n<button onClick={this.handleAgeChange}>\n\nIncrement age\n\n</button>\n\n<p>Hello, {this.state.name}. You are {this.state.age}.</p>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nStart by declaring a function with the necessary [state variables:](/reference/react/useState#adding-state-to-a-component)\n\n```js {4-5}\n\nimport { useState } from 'react';\n\nfunction Counter() {\n\nconst [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\n// ...\n\n```\n\nNext, convert the event handlers:\n\n```js {5-7,9-11}\n\nfunction Counter() {\n\nconst [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\nfunction handleNameChange(e) {\n\nsetName(e.target.value);\n\n}\n\nfunction handleAgeChange() {\n\nsetAge(age + 1);\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"202":{"pageContent":"const [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\nfunction handleNameChange(e) {\n\nsetName(e.target.value);\n\n}\n\nfunction handleAgeChange() {\n\nsetAge(age + 1);\n\n}\n\n// ...\n\n```\n\nFinally, replace all references starting with `this` with the variables and functions you defined in your component. For example, replace `this.state.age` with `age`, and replace `this.handleNameChange` with `handleNameChange`.\n\nHere is a fully converted component:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\nfunction handleNameChange(e) {\n\nsetName(e.target.value);\n\n}\n\nfunction handleAgeChange() {\n\nsetAge(age + 1);\n\n}\n\nreturn (\n\n<>\n\n<input\n\nvalue={name}\n\nonChange={handleNameChange}\n\n/>\n\n<button onClick={handleAgeChange}>\n\nIncrement age\n\n</button>\n\n<p>Hello, {name}. You are {age}.</p>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"203":{"pageContent":"onChange={handleNameChange}\n\n/>\n\n<button onClick={handleAgeChange}>\n\nIncrement age\n\n</button>\n\n<p>Hello, {name}. You are {age}.</p>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Migrating a component with lifecycle methods from a class to a function {/*migrating-a-component-with-lifecycle-methods-from-a-class-to-a-function*/}\n\nSuppose you're converting this `ChatRoom` class component with lifecycle methods to a function:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"204":{"pageContent":"<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { Component } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default class ChatRoom extends Component {\n\nstate = {\n\nserverUrl: 'https://localhost:1234'\n\n};\n\ncomponentDidMount() {\n\nthis.setupConnection();\n\n}\n\ncomponentDidUpdate(prevProps, prevState) {\n\nif (\n\nthis.props.roomId !== prevProps.roomId ||\n\nthis.state.serverUrl !== prevState.serverUrl\n\n) {\n\nthis.destroyConnection();\n\nthis.setupConnection();\n\n}\n\n}\n\ncomponentWillUnmount() {\n\nthis.destroyConnection();\n\n}\n\nsetupConnection() {\n\nthis.connection = createConnection(\n\nthis.state.serverUrl,\n\nthis.props.roomId\n\n);\n\nthis.connection.connect();\n\n}\n\ndestroyConnection() {\n\nthis.connection.disconnect();\n\nthis.connection = null;\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={this.state.serverUrl}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"205":{"pageContent":"this.props.roomId\n\n);\n\nthis.connection.connect();\n\n}\n\ndestroyConnection() {\n\nthis.connection.disconnect();\n\nthis.connection = null;\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={this.state.serverUrl}\n\nonChange={e => {\n\nthis.setState({\n\nserverUrl: e.target.value\n\n});\n\n}}\n\n/>\n\n</label>\n\n<h1>Welcome to the {this.props.roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"206":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nFirst, verify that your [`componentWillUnmount`](#componentwillunmount) does the opposite of [`componentDidMount`.](#componentdidmount) In the above example, that's true: it disconnects the connection that `componentDidMount` sets up. If such logic is missing, add it first.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"207":{"pageContent":"Next, verify that your [`componentDidUpdate`](#componentdidupdate) method handles changes to any props and state you're using in `componentDidMount`. In the above example, `componentDidMount` calls `setupConnection` which reads `this.state.serverUrl` and `this.props.roomId`. This is why `componentDidUpdate` checks whether `this.state.serverUrl` and `this.props.roomId` have changed, and resets the connection if they did. If your `componentDidUpdate` logic is missing or doesn't handle changes to all relevant props and state, fix that first.\n\nIn the above example, the logic inside the lifecycle methods connects the component to a system outside of React (a chat server). To connect a component to an external system, [describe this logic as a single Effect:](/reference/react/useEffect#connecting-to-an-external-system)\n\n```js {6-12}\n\nimport { useState, useEffect } from 'react';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"208":{"pageContent":"```js {6-12}\n\nimport { useState, useEffect } from 'react';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\n// ...\n\n}\n\n```\n\nThis [`useEffect`](/api/useEffect) call is equivalent to the logic in the lifecycle methods above. If your lifecycle methods do multiple unrelated things, [split them into multiple independent Effects.](/learn/removing-effect-dependencies#is-your-effect-doing-several-unrelated-things) Here is a complete example you can play with:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"209":{"pageContent":"const [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId, serverUrl]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"210":{"pageContent":"connection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId, serverUrl]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n<Note>\n\nIf your component does not synchronize with any external systems, [you might not need an Effect.](/learn/you-might-not-need-an-effect)\n\n</Note>\n\n--\n\n### Migrating a component with context from a class to a function {/*migrating-a-component-with-context-from-a-class-to-a-function*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"211":{"pageContent":"</Note>\n\n--\n\n### Migrating a component with context from a class to a function {/*migrating-a-component-with-context-from-a-class-to-a-function*/}\n\nIn this example, the `Panel` and `Button` class components read [context](/learn/passing-data-deeply-with-context) from [`this.context`:](#context)\n\n<Sandpack>\n\n```js\n\nimport { createContext, Component } from 'react';\n\nconst ThemeContext = createContext(null);\n\nclass Panel extends Component {\n\nstatic contextType = ThemeContext;\n\nrender() {\n\nconst theme = this.context;\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{this.props.title}</h1>\n\n{this.props.children}\n\n</section>\n\n);\n\n}\n\n}\n\nclass Button extends Component {\n\nstatic contextType = ThemeContext;\n\nrender() {\n\nconst theme = this.context;\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{this.props.children}\n\n</button>\n\n);\n\n}\n\n}\n\nfunction Form() {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nexport default function MyApp() {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"212":{"pageContent":"{this.props.children}\n\n</button>\n\n);\n\n}\n\n}\n\nfunction Form() {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nexport default function MyApp() {\n\nreturn (\n\n<ThemeContext.Provider value=\"dark\">\n\n<Form />\n\n</ThemeContext.Provider>\n\n)\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\nWhen you convert them to function components, replace `this.context` with [`useContext`](/reference/react/useContext) calls:\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"213":{"pageContent":"const ThemeContext = createContext(null);\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nfunction Form() {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nexport default function MyApp() {\n\nreturn (\n\n<ThemeContext.Provider value=\"dark\">\n\n<Form />\n\n</ThemeContext.Provider>\n\n)\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"214":{"pageContent":"}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Component.md"}},"215":{"pageContent":"--\n\ntitle: lazy\n\n--\n\n<Intro>\n\n`lazy` lets you defer loading component's code until it is rendered for the first time.\n\n```js\n\nconst SomeComponent = lazy(load)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `lazy(load)` {/*lazy*/}\n\nCall `lazy` outside your components to declare a lazy-loaded React component:\n\n```js\n\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"216":{"pageContent":"```js\n\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`load`: A function that returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) or some other *thenable* (a Promise-like object with a `then` method). React will not call `load` until the first time you attempt to render the returned component. After React first calls `load`, it will wait for it to resolve, and then render the resolved value as a React component. Both the returned Promise and the Promise's resolved value will be cached, so React will not call `load` more than once. If the Promise rejects, React will `throw` the rejection reason to let the closest Error Boundary above handle it.\n\n#### Returns {/*returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"217":{"pageContent":"#### Returns {/*returns*/}\n\n`lazy` returns a React component that you can render in your tree. While the code for the lazy component is still loading, attempting to render it will *suspend.* Use [`<Suspense>`](/reference/react/Suspense) to display a loading indicator while it's loading.\n\n--\n\n### `load` function {/*load*/}\n\n#### Parameters {/*load-parameters*/}\n\n`load` receives no parameters.\n\n#### Returns {/*load-returns*/}\n\nYou need to return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) or some other *thenable* (a Promise-like object with a `then` method). It needs to eventually resolve to a valid React component type, such as a function, [`memo`](/reference/react/memo), or a [`forwardRef`](/reference/react/forwardRef) component.\n\n--\n\n## Usage {/*usage*/}\n\n### Lazy-loading components with Suspense {/*suspense-for-code-splitting*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"218":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Lazy-loading components with Suspense {/*suspense-for-code-splitting*/}\n\nUsually, you import components with the static [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) declaration:\n\n```js\n\nimport MarkdownPreview from './MarkdownPreview.js';\n\n```\n\nTo defer loading this component's code until it's rendered for the first time, replace this import with:\n\n```js\n\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\n```\n\nThis code relies on [dynamic `import()`,](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import) which might require support from your bundler or framework.\n\nNow that your component's code loads on demand, you also need to specify what should be displayed while it is loading. You can do this by wrapping the lazy component or any of its parents into a [`<Suspense>`](/reference/react/Suspense) boundary:\n\n```js {1,4}\n\n<Suspense fallback={<Loading />}>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"219":{"pageContent":"```js {1,4}\n\n<Suspense fallback={<Loading />}>\n\n<h2>Preview</h2>\n\n<MarkdownPreview />\n\n</Suspense>\n\n```\n\nIn this example, the code for `MarkdownPreview` won't be loaded until you attempt to render it. If `MarkdownPreview` hasn't loaded yet, `Loading` will be shown in its place. Try ticking the checkbox:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, Suspense, lazy } from 'react';\n\nimport Loading from './Loading.js';\n\nconst MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));\n\nexport default function MarkdownEditor() {\n\nconst [showPreview, setShowPreview] = useState(false);\n\nconst [markdown, setMarkdown] = useState('Hello, **world**!');\n\nreturn (\n\n<>\n\n<textarea value={markdown} onChange={e => setMarkdown(e.target.value)} />\n\n<label>\n\n<input type=\"checkbox\" checked={showPreview} onChange={e => setShowPreview(e.target.checked)} />\n\nShow preview\n\n</label>\n\n<hr />\n\n{showPreview && (\n\n<Suspense fallback={<Loading />}>\n\n<h2>Preview</h2>\n\n<MarkdownPreview markdown={markdown} />\n\n</Suspense>\n\n)}\n\n</>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"220":{"pageContent":"Show preview\n\n</label>\n\n<hr />\n\n{showPreview && (\n\n<Suspense fallback={<Loading />}>\n\n<h2>Preview</h2>\n\n<MarkdownPreview markdown={markdown} />\n\n</Suspense>\n\n)}\n\n</>\n\n);\n\n}\n\n// Add a fixed delay so you can see the loading state\n\nfunction delayForDemo(promise) {\n\nreturn new Promise(resolve => {\n\nsetTimeout(resolve, 2000);\n\n}).then(() => promise);\n\n}\n\n```\n\n```js Loading.js\n\nexport default function Loading() {\n\nreturn <p><i>Loading...</i></p>;\n\n}\n\n```\n\n```js MarkdownPreview.js\n\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nexport default function MarkdownPreview({ markdown }) {\n\nreturn (\n\n<div\n\nclassName=\"content\"\n\ndangerouslySetInnerHTML={{__html: md.render(markdown)}}\n\n/>\n\n);\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"remarkable\": \"2.0.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\n}\n\ninput, textarea {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"221":{"pageContent":"},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\n}\n\ninput, textarea {\n\nmargin-bottom: 10px;\n\n}\n\nbody {\n\nmin-height: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nThis demo loads with an artificial delay. The next time you untick and tick the checkbox, `Preview` will be cached, so there will be no loading state displayed. To see the loading state again, click \"Reset\" on the sandbox.\n\n[Learn more about managing loading states with Suspense.](/reference/react/Suspense)\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My `lazy` component's state gets reset unexpectedly {/*my-lazy-components-state-gets-reset-unexpectedly*/}\n\nDo not declare `lazy` components *inside* other components:\n\n```js {4-5}\n\nimport { lazy } from 'react';\n\nfunction Editor() {\n\n// 🔴 Bad: This will cause all state to be reset on re-renders\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"222":{"pageContent":"```js {4-5}\n\nimport { lazy } from 'react';\n\nfunction Editor() {\n\n// 🔴 Bad: This will cause all state to be reset on re-renders\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\n// ...\n\n}\n\n```\n\nInstead, always declare them at the top level of your module:\n\n```js {3-4}\n\nimport { lazy } from 'react';\n\n// ✅ Good: Declare lazy components outside of your components\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n\nfunction Editor() {\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/lazy.md"}},"223":{"pageContent":"--\n\ntitle: <StrictMode>\n\n--\n\n<Intro>\n\n`<StrictMode>` lets you find common bugs in your components early during development.\n\n```js\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<StrictMode>` {/*strictmode*/}\n\nUse `StrictMode` to enable additional development behaviors and warnings for the entire component tree inside:\n\n```js\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n[See more examples below.](#usage)\n\nStrict Mode enables the following development-only behaviors:\n\nYour components will [re-render an extra time](#fixing-bugs-found-by-double-rendering-in-development) to find bugs caused by impure rendering.\n\nYour components will [re-run Effects an extra time](#fixing-bugs-found-by-re-running-effects-in-development) to find bugs caused by missing Effect cleanup.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"224":{"pageContent":"Your components will [re-run Effects an extra time](#fixing-bugs-found-by-re-running-effects-in-development) to find bugs caused by missing Effect cleanup.\n\nYour components will [be checked for usage of deprecated APIs.](#fixing-deprecation-warnings-enabled-by-strict-mode)\n\n#### Props {/*props*/}\n\n`StrictMode` accepts no props.\n\n#### Caveats {/*caveats*/}\n\nThere is no way to opt out of Strict Mode inside a tree wrapped in `<StrictMode>`. This gives you confidence that all components inside `<StrictMode>` are checked. If two teams working on a product disagree whether they find the checks valuable, they need to either reach consensus or move `<StrictMode>` down in the tree.\n\n--\n\n## Usage {/*usage*/}\n\n### Enabling Strict Mode for entire app {/*enabling-strict-mode-for-entire-app*/}\n\nStrict Mode enables extra development-only checks for the entire component tree inside the `<StrictMode>` component. These checks help you find common bugs in your components early in the development process.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"225":{"pageContent":"To enable Strict Mode for your entire app, wrap your root component with `<StrictMode>` when you render it:\n\n```js {6,8}\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\nWe recommend to wrap your entire app in Strict Mode, especially for newly created apps. If you use a framework that calls [`createRoot`](/reference/react/createRoot) for you, check its documentation for how to enable Strict Mode.\n\nAlthough the Strict Mode checks **only run in development,** they help you find bugs that already exist in your code but can be tricky to reliably reproduce in production. Strict Mode lets you fix bugs before your users report them.\n\n<Note>\n\nStrict Mode enables the following checks in development:\n\nYour components will [re-render an extra time](#fixing-bugs-found-by-double-rendering-in-development) to find bugs caused by impure rendering.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"226":{"pageContent":"Strict Mode enables the following checks in development:\n\nYour components will [re-render an extra time](#fixing-bugs-found-by-double-rendering-in-development) to find bugs caused by impure rendering.\n\nYour components will [re-run Effects an extra time](#fixing-bugs-found-by-re-running-effects-in-development) to find bugs caused by missing Effect cleanup.\n\nYour components will [be checked for usage of deprecated APIs.](#fixing-deprecation-warnings-enabled-by-strict-mode)\n\n*All of these checks are development-only and do not impact the production build.**\n\n</Note>\n\n--\n\n### Enabling strict mode for a part of the app {/*enabling-strict-mode-for-a-part-of-the-app*/}\n\nYou can also enable Strict Mode for any part of your application:\n\n```js {7,12}\n\nimport { StrictMode } from 'react';\n\nfunction App() {\n\nreturn (\n\n<>\n\n<Header />\n\n<StrictMode>\n\n<main>\n\n<Sidebar />\n\n<Content />\n\n</main>\n\n</StrictMode>\n\n<Footer />\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"227":{"pageContent":"```js {7,12}\n\nimport { StrictMode } from 'react';\n\nfunction App() {\n\nreturn (\n\n<>\n\n<Header />\n\n<StrictMode>\n\n<main>\n\n<Sidebar />\n\n<Content />\n\n</main>\n\n</StrictMode>\n\n<Footer />\n\n</>\n\n);\n\n}\n\n```\n\nIn this example, Strict Mode checks will not run against the `Header` and `Footer` components. However, they will run on `Sidebar` and `Content`, as well as all of the components inside them, no matter how deep.\n\n--\n\n### Fixing bugs found by double rendering in development {/*fixing-bugs-found-by-double-rendering-in-development*/}\n\n[React assumes that every component you write is a pure function.](/learn/keeping-components-pure) This means that React components you write must always return the same JSX given the same inputs (props, state, and context).\n\nComponents breaking this rule behave unpredictably and cause bugs. To help you find accidentally impure code, Strict Mode calls some of your functions (only the ones that should be pure) **twice in development.** This includes:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"228":{"pageContent":"Your component function body (only top-level logic, so this doesn't include code inside event handlers)\n\nFunctions that you pass to [`useState`](/reference/react/useState), [`set` functions](/reference/react/useState#setstate), [`useMemo`](/reference/react/useMemo), or [`useReducer`](/reference/react/useReducer)\n\nSome class component methods like [`constructor`](/reference/react/Component#constructor), [`render`](/reference/react/Component#render), [`shouldComponentUpdate`](/reference/react/Component#shouldcomponentupdate) ([see the whole list](https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects))\n\nIf a function is pure, running it twice does not change its behavior because a pure function produces the same result every time. However, if a function is impure (for example, it mutates the data it receives), running that impure code twice tends to be noticeable (that's what makes it impure!) This helps you spot and fix the bug early.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"229":{"pageContent":"*Here is an example to illustrate how double rendering in Strict Mode helps you find bugs early.**\n\nThis `StoryTray` component takes an array of `stories` and adds one last \"Create Story\" item at the end:\n\n<Sandpack>\n\n```js index.js\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(<App />);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState(initialStories)\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js StoryTray.js active\n\nexport default function StoryTray({ stories }) {\n\nconst items = stories;\n\nitems.push({ id: 'create', label: 'Create Story' });\n\nreturn (\n\n<ul>\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"230":{"pageContent":"const items = stories;\n\nitems.push({ id: 'create', label: 'Create Story' });\n\nreturn (\n\n<ul>\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>\n\nThere is a mistake in the code above. However, it is easy to miss because the initial output appears correct.\n\nThis mistake will become more noticeable if the `StoryTray` component re-renders multiple times. For example, let's make the `StoryTray` re-render with a different background color whenever you hover the pointer over it:\n\n<Sandpack>\n\n```js index.js\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(<App />);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"231":{"pageContent":"const root = createRoot(document.getElementById('root'));\n\nroot.render(<App />);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState(initialStories)\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js StoryTray.js active\n\nimport { useState } from 'react';\n\nexport default function StoryTray({ stories }) {\n\nconst [isHover, setIsHover] = useState(false);\n\nconst items = stories;\n\nitems.push({ id: 'create', label: 'Create Story' });\n\nreturn (\n\n<ul\n\nonPointerEnter={() => setIsHover(true)}\n\nonPointerLeave={() => setIsHover(false)}\n\nstyle={{\n\nbackgroundColor: isHover ? '#ddd' : '#fff'\n\n}}\n\n>\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"232":{"pageContent":"}}\n\n>\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>\n\nNotice how every time you hover over the `StoryTray` component, \"Create Story\" gets added to the list again. The intention of the code was to add it once at the end. But `StoryTray` directly modifies the `stories` array from the props. Every time `StoryTray` renders, it adds \"Create Story\" again at the end of the same array. In other words, `StoryTray` is not a pure function--running it multiple times produces different results.\n\nTo fix this problem, you can make a copy of the array, and modify that copy instead of the original one:\n\n```js {2}\n\nexport default function StoryTray({ stories }) {\n\nconst items = stories.slice(); // Clone the array\n\n// ✅ Good: Pushing into a new array","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"233":{"pageContent":"```js {2}\n\nexport default function StoryTray({ stories }) {\n\nconst items = stories.slice(); // Clone the array\n\n// ✅ Good: Pushing into a new array\n\nitems.push({ id: 'create', label: 'Create Story' });\n\n```\n\nThis would [make the `StoryTray` function pure.](/learn/keeping-components-pure) Each time it is called, it would only modify a new copy of the array, and would not affect any external objects or variables. This solves the bug, but notice that you had to make the component re-render more often before it became obvious that something is wrong with its behavior.\n\n*In the original example, the bug wasn't obvious. Now let's wrap the original (buggy) code in `<StrictMode>`:**\n\n<Sandpack>\n\n```js index.js\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"234":{"pageContent":"import './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState(initialStories)\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js StoryTray.js active\n\nexport default function StoryTray({ stories }) {\n\nconst items = stories;\n\nitems.push({ id: 'create', label: 'Create Story' });\n\nreturn (\n\n<ul>\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"235":{"pageContent":"```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>\n\n*Strict Mode *always* calls your rendering function twice, so you can see the mistake right away** (\"Create Story\" appears twice). Strict Mode lets you notice such mistakes early in the process. When you fix your component to render in Strict Mode, you *also* fix many possible future production bugs like the hover functionality from before:\n\n<Sandpack>\n\n```js index.js\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"236":{"pageContent":"<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState(initialStories)\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js StoryTray.js active\n\nimport { useState } from 'react';\n\nexport default function StoryTray({ stories }) {\n\nconst [isHover, setIsHover] = useState(false);\n\nconst items = stories.slice(); // Clone the array\n\nitems.push({ id: 'create', label: 'Create Story' });\n\nreturn (\n\n<ul\n\nonPointerEnter={() => setIsHover(true)}\n\nonPointerLeave={() => setIsHover(false)}\n\nstyle={{\n\nbackgroundColor: isHover ? '#ddd' : '#fff'\n\n}}\n\n>\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"237":{"pageContent":">\n\n{items.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\nheight: 100%;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>\n\nWithout Strict Mode, it was easy to miss the bug until you added more re-renders. Strict Mode made the same bug appear right away. Strict Mode helps you find bugs before you push them to your team and to your users.\n\n[Read more about keeping components pure.](/learn/keeping-components-pure)\n\n<Note>\n\nIf you have [React DevTools](/learn/react-developer-tools) installed, any `console.log` calls during the second render call will appear slightly dimmed. React DevTools also offers a setting (off by default) to suppress them completely.\n\n</Note>\n\n--\n\n### Fixing bugs found by re-running Effects in development {/*fixing-bugs-found-by-re-running-effects-in-development*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"238":{"pageContent":"</Note>\n\n--\n\n### Fixing bugs found by re-running Effects in development {/*fixing-bugs-found-by-re-running-effects-in-development*/}\n\nStrict Mode can also help find bugs in [Effects.](/learn/synchronizing-with-effects)\n\nEvery Effect has some setup code and may have some cleanup code. Normally, React calls setup when the component *mounts* (is added to the screen) and calls cleanup when the component *unmounts* (is removed from the screen). Additionally, React calls cleanup and setup again if its dependencies changed since the last render.\n\nWhen Strict Mode is on, React will also run **one extra setup+cleanup cycle in development for every Effect.** This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually.\n\n*Here is an example to illustrate how re-running Effects in Strict Mode helps you find bugs early.**\n\nConsider this example that connects a component to a chat:\n\n<Sandpack>\n\n```js index.js\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"239":{"pageContent":"Consider this example that connects a component to a chat:\n\n<Sandpack>\n\n```js index.js\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(<App />);\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'general';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\n}, []);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nlet connections = 0;\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nconnections++;\n\nconsole.log('Active connections: ' + connections);\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"240":{"pageContent":"connections++;\n\nconsole.log('Active connections: ' + connections);\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\nconnections--;\n\nconsole.log('Active connections: ' + connections);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nThere is an issue with this code, but it might not be immediately clear.\n\nTo make the issue more obvious, let's implement a feature. In the example below, `roomId` is not hardcoded. Instead, the user can select the `roomId` that they want to connect to from a dropdown. Click \"Open chat\" and then select different chat rooms one by one. Keep track of the number of active connections in the console:\n\n<Sandpack>\n\n```js index.js\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(<App />);\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"241":{"pageContent":"import './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(<App />);\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nlet connections = 0;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"242":{"pageContent":"</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nlet connections = 0;\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nconnections++;\n\nconsole.log('Active connections: ' + connections);\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\nconnections--;\n\nconsole.log('Active connections: ' + connections);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nYou'll notice that the number of open connections always keeps growing. In a real app, this would cause performance and network problems. The issue is that [your Effect is missing a cleanup function:](/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed)\n\n```js {4}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"243":{"pageContent":"```js {4}\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\n```\n\nNow that your Effect \"cleans up\" after itself and destroys the outdated connections, the leak is solved. However, notice that the problem did not become immediately visible until you've added more features (the select box).\n\n*In the original example, the bug wasn't obvious. Now let's wrap the original (buggy) code in `<StrictMode>`:**\n\n<Sandpack>\n\n```js index.js\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'general';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"244":{"pageContent":"import { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'general';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\n}, []);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nlet connections = 0;\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nconnections++;\n\nconsole.log('Active connections: ' + connections);\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\nconnections--;\n\nconsole.log('Active connections: ' + connections);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"245":{"pageContent":"connections--;\n\nconsole.log('Active connections: ' + connections);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n*With Strict Mode, you immediately see that there is a problem** (the number of active connections jumps to 2). This is because Strict Mode runs an extra setup+cleanup cycle for every Effect. This Effect has no cleanup logic, so it creates an extra connection but doesn't destroy it. This is a hint that you're missing a cleanup function.\n\nStrict Mode lets you notice such mistakes early in the process. When you fix your Effect by adding a cleanup function in Strict Mode, you *also* fix many possible future production bugs like the select box from before:\n\n<Sandpack>\n\n```js index.js\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"246":{"pageContent":"import './styles.css';\n\nimport App from './App';\n\nconst root = createRoot(document.getElementById(\"root\"));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"247":{"pageContent":"<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nlet connections = 0;\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nconnections++;\n\nconsole.log('Active connections: ' + connections);\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\nconnections--;\n\nconsole.log('Active connections: ' + connections);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice how the active connection count in the console doesn't keep growing anymore.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"248":{"pageContent":"}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice how the active connection count in the console doesn't keep growing anymore.\n\nWithout Strict Mode, it was easy to miss that your Effect needed cleanup. By running *setup → cleanup → setup* instead of *setup* for your Effect in development, Strict Mode made the missing cleanup logic more noticeable.\n\n[Read more about implementing Effect cleanup.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n\n--\n\n### Fixing deprecation warnings enabled by Strict Mode {/*fixing-deprecation-warnings-enabled-by-strict-mode*/}\n\nReact warns if some component anywhere inside a `<StrictMode>` tree uses one of these deprecated APIs:\n\n[`findDOMNode`](/reference/react-dom/findDOMNode). [See alternatives.](https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"249":{"pageContent":"[`findDOMNode`](/reference/react-dom/findDOMNode). [See alternatives.](https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage)\n\n`UNSAFE_` class lifecycle methods like [`UNSAFE_componentWillMount`](/reference/react/Component#unsafe_componentwillmount). [See alternatives.](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles)\n\nLegacy context ([`childContextTypes`](/reference/react/Component#static-childcontexttypes), [`contextTypes`](/reference/react/Component#static-contexttypes), and [`getChildContext`](/reference/react/Component#getchildcontext)). [See alternatives.](/reference/react/createContext)\n\nLegacy string refs ([`this.refs`](/reference/react/Component#refs)). [See alternatives.](https://reactjs.org/docs/strict-mode.html#warning-about-legacy-string-ref-api-usage)\n\nThese APIs are primarily used in older [class components](/reference/react/Component) so they rarely appear in modern apps.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/StrictMode.md"}},"250":{"pageContent":"--\n\ntitle: \"Legacy React APIs\"\n\n--\n\n<Intro>\n\nThese APIs are exported from the `react` package, but they are not recommended for use in the newly written code. See the linked individual API pages for the suggested alternatives.\n\n</Intro>\n\n--\n\n## Legacy APIs {/*legacy-apis*/}\n\n[`Children`](/reference/react/Children) lets you manipulate and transform the JSX received as the `children` prop. [See alternatives.](/reference/react/Children#alternatives)\n\n[`cloneElement`](/reference/react/cloneElement) lets you create a React element using another element as a starting point. [See alternatives.](/reference/react/cloneElement#alternatives)\n\n[`Component`](/reference/react/Component) lets you define a React component as a JavaScript class. [See alternatives.](/reference/react/Component#alternatives)\n\n[`createElement`](/reference/react/createElement) lets you create a React element. Typically, you'll use JSX instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/legacy.md"}},"251":{"pageContent":"[`createElement`](/reference/react/createElement) lets you create a React element. Typically, you'll use JSX instead.\n\n[`createRef`](/reference/react/createRef) creates a ref object which can contain arbitrary value. [See alternatives.](/reference/react/createRef#alternatives)\n\n[`isValidElement`](/reference/react/isValidElement) checks whether a value is a React element. Typically used with [`cloneElement`.](/reference/react/cloneElement)\n\n[`PureComponent`](/reference/react/PureComponent) is similar to [`Component`,](/reference/react/Component) but it skip re-renders with same props. [See alternatives.](/reference/react/PureComponent#alternatives)\n\n--\n\n## Deprecated APIs {/*deprecated-apis*/}\n\n<Deprecated>\n\nThese APIs will be removed in a future major version of React.\n\n</Deprecated>\n\n[`createFactory`](/reference/react/createFactory) lets you create a function that produces React elements of a certain type.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/legacy.md"}},"252":{"pageContent":"--\n\ntitle: Children\n\n--\n\n<Pitfall>\n\nUsing `Children` is uncommon and can lead to fragile code. [See common alternatives.](#alternatives)\n\n</Pitfall>\n\n<Intro>\n\n`Children` lets you manipulate and transform the JSX you received as the [`children` prop.](/learn/passing-props-to-a-component#passing-jsx-as-children)\n\n```js\n\nconst mappedChildren = Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n);\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `Children.count(children)` {/*children-count*/}\n\nCall `Children.count(children)` to count the number of children in the `children` data structure.\n\n```js RowList.js active\n\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n\nreturn (\n\n<>\n\n<h1>Total rows: {Children.count(children)}</h1>\n\n...\n\n</>\n\n);\n\n}\n\n```\n\n[See more examples below.](#counting-children)\n\n#### Parameters {/*children-count-parameters*/}\n\n`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"253":{"pageContent":"#### Parameters {/*children-count-parameters*/}\n\n`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.\n\n#### Returns {/*children-count-returns*/}\n\nThe number of nodes inside these `children`.\n\n#### Caveats {/*children-count-caveats*/}\n\nEmpty nodes (`null`, `undefined`, and Booleans), strings, numbers, and [React elements](/reference/react/createElement) count as individual nodes. Arrays don't count as individual nodes, but their children do. **The traversal does not go deeper than React elements:** they don't get rendered, and their children aren't traversed. [Fragments](/reference/react/Fragment) don't get traversed.\n\n--\n\n### `Children.forEach(children, fn, thisArg?)` {/*children-foreach*/}\n\nCall `Children.forEach(children, fn, thisArg?)` to run some code for each child in the `children` data structure.\n\n```js RowList.js active\n\nimport { Children } from 'react';\n\nfunction SeparatorList({ children }) {\n\nconst result = [];","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"254":{"pageContent":"```js RowList.js active\n\nimport { Children } from 'react';\n\nfunction SeparatorList({ children }) {\n\nconst result = [];\n\nChildren.forEach(children, (child, index) => {\n\nresult.push(child);\n\nresult.push(<hr key={index} />);\n\n});\n\n// ...\n\n```\n\n[See more examples below.](#running-some-code-for-each-child)\n\n#### Parameters {/*children-foreach-parameters*/}\n\n`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.\n\n`fn`: The function you want to run for each child, similar to the [array `forEach` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) callback. It will be called with the child as the first argument and its index as the second argument. The index starts at `0` and increments on each call.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"255":{"pageContent":"**optional** `thisArg`: The [`this` value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) with which the `fn` function should be called. If omitted, it's `undefined`.\n\n#### Returns {/*children-foreach-returns*/}\n\n`Children.forEach` returns `undefined`.\n\n#### Caveats {/*children-foreach-caveats*/}\n\nEmpty nodes (`null`, `undefined`, and Booleans), strings, numbers, and [React elements](/reference/react/createElement) count as individual nodes. Arrays don't count as individual nodes, but their children do. **The traversal does not go deeper than React elements:** they don't get rendered, and their children aren't traversed. [Fragments](/reference/react/Fragment) don't get traversed.\n\n--\n\n### `Children.map(children, fn, thisArg?)` {/*children-map*/}\n\nCall `Children.map(children, fn, thisArg?)` to map or transform each child in the `children` data structure.\n\n```js RowList.js active\n\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"256":{"pageContent":"```js RowList.js active\n\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n[See more examples below.](#transforming-children)\n\n#### Parameters {/*children-map-parameters*/}\n\n`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.\n\n`fn`: The mapping function, similar to the [array `map` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) callback. It will be called with the child as the first argument and its index as the second argument. The index starts at `0` and increments on each call. You need to return a React node from this function. This may be an empty node (`null`, `undefined`, or a Boolean), a string, a number, a React element, or an array of other React nodes.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"257":{"pageContent":"**optional** `thisArg`: The [`this` value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this) with which the `fn` function should be called. If omitted, it's `undefined`.\n\n#### Returns {/*children-map-returns*/}\n\nIf `children` is `null` or `undefined`, returns the same value.\n\nOtherwise, returns a flat array consisting of the nodes you've returned from the `fn` function. The returned array will contain all nodes you returned except for `null` and `undefined`.\n\n#### Caveats {/*children-map-caveats*/}\n\nEmpty nodes (`null`, `undefined`, and Booleans), strings, numbers, and [React elements](/reference/react/createElement) count as individual nodes. Arrays don't count as individual nodes, but their children do. **The traversal does not go deeper than React elements:** they don't get rendered, and their children aren't traversed. [Fragments](/reference/react/Fragment) don't get traversed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"258":{"pageContent":"If you return an element or an array of elements with keys from `fn`, **the returned elements' keys will be automatically combined with the key of the corresponding original item from `children`.** When you return multiple elements from `fn` in an array, their keys only need to be unique locally amongst each other.\n\n--\n\n### `Children.only(children)` {/*children-only*/}\n\nCall `Children.only(children)` to assert that `children` represent a single React element.\n\n```js\n\nfunction Box({ children }) {\n\nconst element = Children.only(children);\n\n// ...\n\n```\n\n#### Parameters {/*children-only-parameters*/}\n\n`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.\n\n#### Returns {/*children-only-returns*/}\n\nIf `children` [is a valid element,](/reference/react/isValidElement) returns that element.\n\nOtherwise, throws an error.\n\n#### Caveats {/*children-only-caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"259":{"pageContent":"#### Returns {/*children-only-returns*/}\n\nIf `children` [is a valid element,](/reference/react/isValidElement) returns that element.\n\nOtherwise, throws an error.\n\n#### Caveats {/*children-only-caveats*/}\n\nThis method always **throws if you pass an array (such as the return value of `Children.map`) as `children`.** In other words, it enforces that `children` is a single React element, not that it's an array with a single element.\n\n--\n\n### `Children.toArray(children)` {/*children-toarray*/}\n\nCall `Children.toArray(children)` to create an array out of the `children` data structure.\n\n```js ReversedList.js active\n\nimport { Children } from 'react';\n\nexport default function ReversedList({ children }) {\n\nconst result = Children.toArray(children);\n\nresult.reverse();\n\n// ...\n\n```\n\n#### Parameters {/*children-toarray-parameters*/}\n\n`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.\n\n#### Returns {/*children-toarray-returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"260":{"pageContent":"`children`: The value of the [`children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) received by your component.\n\n#### Returns {/*children-toarray-returns*/}\n\nReturns a flat array of elements in `children`.\n\n#### Caveats {/*children-toarray-caveats*/}\n\nEmpty nodes (`null`, `undefined`, and Booleans) will be omitted in the returned array. **The returned elements' keys will be calculated from the original elements' keys and their level of nesting and position.** This ensures that flattening the array does not introduce changes in behavior.\n\n--\n\n## Usage {/*usage*/}\n\n### Transforming children {/*transforming-children*/}\n\nTo transform the children JSX that your component [receives as the `children` prop,](/learn/passing-props-to-a-component#passing-jsx-as-children) call `Children.map`:\n\n```js {6,10}\n\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"261":{"pageContent":"```js {6,10}\n\nimport { Children } from 'react';\n\nfunction RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\nIn the example above, the `RowList` wraps every child it receives into a `<div className=\"Row\">` container. For example, let's say the parent component passes three `<p>` tags as the `children` prop to `RowList`:\n\n```js\n\n<RowList>\n\n<p>This is the first item.</p>\n\n<p>This is the second item.</p>\n\n<p>This is the third item.</p>\n\n</RowList>\n\n```\n\nThen, with the `RowList` implementation above, the final rendered result will look like this:\n\n```js\n\n<div className=\"RowList\">\n\n<div className=\"Row\">\n\n<p>This is the first item.</p>\n\n</div>\n\n<div className=\"Row\">\n\n<p>This is the second item.</p>\n\n</div>\n\n<div className=\"Row\">\n\n<p>This is the third item.</p>\n\n</div>\n\n</div>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"262":{"pageContent":"<div className=\"Row\">\n\n<p>This is the first item.</p>\n\n</div>\n\n<div className=\"Row\">\n\n<p>This is the second item.</p>\n\n</div>\n\n<div className=\"Row\">\n\n<p>This is the third item.</p>\n\n</div>\n\n</div>\n\n```\n\n`Children.map` is similar to [to transforming arrays with `map()`.](/learn/rendering-lists) The difference is that the `children` data structure is considered *opaque.* This means that even if it's sometimes an array, you should not assume it's an array or any other particular data type. This is why you should use `Children.map` if you need to transform it.\n\n<Sandpack>\n\n```js\n\nimport RowList from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>\n\n<p>This is the first item.</p>\n\n<p>This is the second item.</p>\n\n<p>This is the third item.</p>\n\n</RowList>\n\n);\n\n}\n\n```\n\n```js RowList.js active\n\nimport { Children } from 'react';\n\nexport default function RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"263":{"pageContent":"export default function RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Why is the children prop not always an array? {/*why-is-the-children-prop-not-always-an-array*/}\n\nIn React, the `children` prop is considered an *opaque* data structure. This means that you shouldn't rely on how it is structured. To transform, filter, or count children, you should use the `Children` methods.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"264":{"pageContent":"In practice, the `children` data structure is often represented as an array internally. However, if there is only a single child, then React won't create an extra array since this would lead to unnecessary memory overhead. As long as you use the `Children` methods instead of directly introspecting the `children` prop, your code will not break even if React changes how the data structure is actually implemented.\n\nEven when `children` is an array, `Children.map` has useful special behavior. For example, `Children.map` combines the [keys](/learn/rendering-lists#keeping-list-items-in-order-with-key) on the returned elements with the keys on the `children` you've passed to it. This ensures the original JSX children don't \"lose\" keys even if they get wrapped like in the example above.\n\n</DeepDive>\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"265":{"pageContent":"</DeepDive>\n\n<Pitfall>\n\nThe `children` data structure **does not include rendered output** of the components you pass as JSX. In the example below, the `children` received by the `RowList` only contains two items rather than three:\n\n1. `<p>This is the first item.</p>`\n\n2. `<MoreRows />`\n\nThis is why only two row wrappers are generated in this example:\n\n<Sandpack>\n\n```js\n\nimport RowList from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>\n\n<p>This is the first item.</p>\n\n<MoreRows />\n\n</RowList>\n\n);\n\n}\n\nfunction MoreRows() {\n\nreturn (\n\n<>\n\n<p>This is the second item.</p>\n\n<p>This is the third item.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```js RowList.js\n\nimport { Children } from 'react';\n\nexport default function RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"266":{"pageContent":"{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n*There is no way to get the rendered output of an inner component** like `<MoreRows />` when manipulating `children`. This is why [it's usually better to use one of the alternative solutions.](#alternatives)\n\n</Pitfall>\n\n--\n\n### Running some code for each child {/*running-some-code-for-each-child*/}\n\nCall `Children.forEach` to iterate over each child in the `children` data structure. It does not return any value and is similar to the [array `forEach` method.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) You can use it to run custom logic like constructing your own array.\n\n<Sandpack>\n\n```js\n\nimport SeparatorList from './SeparatorList.js';\n\nexport default function App() {\n\nreturn (\n\n<SeparatorList>\n\n<p>This is the first item.</p>\n\n<p>This is the second item.</p>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"267":{"pageContent":"<Sandpack>\n\n```js\n\nimport SeparatorList from './SeparatorList.js';\n\nexport default function App() {\n\nreturn (\n\n<SeparatorList>\n\n<p>This is the first item.</p>\n\n<p>This is the second item.</p>\n\n<p>This is the third item.</p>\n\n</SeparatorList>\n\n);\n\n}\n\n```\n\n```js SeparatorList.js active\n\nimport { Children } from 'react';\n\nexport default function SeparatorList({ children }) {\n\nconst result = [];\n\nChildren.forEach(children, (child, index) => {\n\nresult.push(child);\n\nresult.push(<hr key={index} />);\n\n});\n\nresult.pop(); // Remove the last separator\n\nreturn result;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nAs mentioned earlier, there is no way to get the rendered output of an inner component when manipulating `children`. This is why [it's usually better to use one of the alternative solutions.](#alternatives)\n\n</Pitfall>\n\n--\n\n### Counting children {/*counting-children*/}\n\nCall `Children.count(children)` to calculate the number of children.\n\n<Sandpack>\n\n```js\n\nimport RowList from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"268":{"pageContent":"Call `Children.count(children)` to calculate the number of children.\n\n<Sandpack>\n\n```js\n\nimport RowList from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>\n\n<p>This is the first item.</p>\n\n<p>This is the second item.</p>\n\n<p>This is the third item.</p>\n\n</RowList>\n\n);\n\n}\n\n```\n\n```js RowList.js active\n\nimport { Children } from 'react';\n\nexport default function RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n<h1 className=\"RowListHeader\">\n\nTotal rows: {Children.count(children)}\n\n</h1>\n\n{Children.map(children, child =>\n\n<div className=\"Row\">\n\n{child}\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.RowListHeader {\n\npadding-top: 5px;\n\nfont-size: 25px;\n\nfont-weight: bold;\n\ntext-align: center;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"269":{"pageContent":"padding: 5px;\n\n}\n\n.RowListHeader {\n\npadding-top: 5px;\n\nfont-size: 25px;\n\nfont-weight: bold;\n\ntext-align: center;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nAs mentioned earlier, there is no way to get the rendered output of an inner component when manipulating `children`. This is why [it's usually better to use one of the alternative solutions.](#alternatives)\n\n</Pitfall>\n\n--\n\n### Converting children to an array {/*converting-children-to-an-array*/}\n\nCall `Children.toArray(children)` to turn the `children` data structure into a regular JavaScript array. This lets you manipulate the array with built-in array methods like [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort), or [`reverse`.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"270":{"pageContent":"<Sandpack>\n\n```js\n\nimport ReversedList from './ReversedList.js';\n\nexport default function App() {\n\nreturn (\n\n<ReversedList>\n\n<p>This is the first item.</p>\n\n<p>This is the second item.</p>\n\n<p>This is the third item.</p>\n\n</ReversedList>\n\n);\n\n}\n\n```\n\n```js ReversedList.js active\n\nimport { Children } from 'react';\n\nexport default function ReversedList({ children }) {\n\nconst result = Children.toArray(children);\n\nresult.reverse();\n\nreturn result;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nAs mentioned earlier, there is no way to get the rendered output of an inner component when manipulating `children`. This is why [it's usually better to use one of the alternative solutions.](#alternatives)\n\n</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n<Note>\n\nThis section describes alternatives to the `Children` API (with capital `C`) that's imported like this:\n\n```js\n\nimport { Children } from 'react';\n\n```\n\nDon't confuse it with [using the `children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) (lowercase `c`), which is good and encouraged.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"271":{"pageContent":"```js\n\nimport { Children } from 'react';\n\n```\n\nDon't confuse it with [using the `children` prop](/learn/passing-props-to-a-component#passing-jsx-as-children) (lowercase `c`), which is good and encouraged.\n\n</Note>\n\n### Exposing multiple components {/*exposing-multiple-components*/}\n\nManipulating children with the `Children` methods often leads to fragile code. When you pass children to a component in JSX, you don't usually expect the component to manipulate or transform the individual children.\n\nWhen you can, try to avoid using the `Children` methods. For example, if you want every child of `RowList` to be wrapped in `<div className=\"Row\">`, export a `Row` component, and manually wrap every row into it like this:\n\n<Sandpack>\n\n```js\n\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>\n\n<Row>\n\n<p>This is the first item.</p>\n\n</Row>\n\n<Row>\n\n<p>This is the second item.</p>\n\n</Row>\n\n<Row>\n\n<p>This is the third item.</p>\n\n</Row>\n\n</RowList>\n\n);\n\n}\n\n```\n\n```js RowList.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"272":{"pageContent":"return (\n\n<RowList>\n\n<Row>\n\n<p>This is the first item.</p>\n\n</Row>\n\n<Row>\n\n<p>This is the second item.</p>\n\n</Row>\n\n<Row>\n\n<p>This is the third item.</p>\n\n</Row>\n\n</RowList>\n\n);\n\n}\n\n```\n\n```js RowList.js\n\nexport function RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{children}\n\n</div>\n\n);\n\n}\n\nexport function Row({ children }) {\n\nreturn (\n\n<div className=\"Row\">\n\n{children}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\nUnlike using `Children.map`, this approach does not wrap every child automatically. **However, this approach has a significant benefit compared to the [earlier example with `Children.map`](#transforming-children) because it works even if you keep extracting more components.** For example, it still works if you extract your own `MoreRows` component:\n\n<Sandpack>\n\n```js\n\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>\n\n<Row>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"273":{"pageContent":"<Sandpack>\n\n```js\n\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList>\n\n<Row>\n\n<p>This is the first item.</p>\n\n</Row>\n\n<MoreRows />\n\n</RowList>\n\n);\n\n}\n\nfunction MoreRows() {\n\nreturn (\n\n<>\n\n<Row>\n\n<p>This is the second item.</p>\n\n</Row>\n\n<Row>\n\n<p>This is the third item.</p>\n\n</Row>\n\n</>\n\n);\n\n}\n\n```\n\n```js RowList.js\n\nexport function RowList({ children }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{children}\n\n</div>\n\n);\n\n}\n\nexport function Row({ children }) {\n\nreturn (\n\n<div className=\"Row\">\n\n{children}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\nThis wouldn't work with `Children.map` because it would \"see\" `<MoreRows />` as a single child (and a single row).\n\n--\n\n### Accepting an array of objects as a prop {/*accepting-an-array-of-objects-as-a-prop*/}\n\nYou can also explicitly pass an array as a prop. For example, this `RowList` accepts a `rows` array as a prop:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"274":{"pageContent":"You can also explicitly pass an array as a prop. For example, this `RowList` accepts a `rows` array as a prop:\n\n<Sandpack>\n\n```js\n\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList rows={[\n\n{ id: 'first', content: <p>This is the first item.</p> },\n\n{ id: 'second', content: <p>This is the second item.</p> },\n\n{ id: 'third', content: <p>This is the third item.</p> }\n\n]} />\n\n);\n\n}\n\n```\n\n```js RowList.js\n\nexport function RowList({ rows }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n{rows.map(row => (\n\n<div className=\"Row\" key={row.id}>\n\n{row.content}\n\n</div>\n\n))}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\nSince `rows` is a regular JavaScript array, the `RowList` component can use built-in array methods like [`map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) on it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"275":{"pageContent":"This pattern is especially useful when you want to be able to pass more information as structured data together with children. In the below example, the `TabSwitcher` component receives an array of objects as the `tabs` prop:\n\n<Sandpack>\n\n```js\n\nimport TabSwitcher from './TabSwitcher.js';\n\nexport default function App() {\n\nreturn (\n\n<TabSwitcher tabs={[\n\n{\n\nid: 'first',\n\nheader: 'First',\n\ncontent: <p>This is the first item.</p>\n\n},\n\n{\n\nid: 'second',\n\nheader: 'Second',\n\ncontent: <p>This is the second item.</p>\n\n},\n\n{\n\nid: 'third',\n\nheader: 'Third',\n\ncontent: <p>This is the third item.</p>\n\n}\n\n]} />\n\n);\n\n}\n\n```\n\n```js TabSwitcher.js\n\nimport { useState } from 'react';\n\nexport default function TabSwitcher({ tabs }) {\n\nconst [selectedId, setSelectedId] = useState(tabs[0].id);\n\nconst selectedTab = tabs.find(tab => tab.id === selectedId);\n\nreturn (\n\n<>\n\n{tabs.map(tab => (\n\n<button\n\nkey={tab.id}\n\nonClick={() => setSelectedId(tab.id)}\n\n>\n\n{tab.header}\n\n</button>\n\n))}\n\n<hr />\n\n<div key={selectedId}>\n\n<h3>{selectedTab.header}</h3>\n\n{selectedTab.content}\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"276":{"pageContent":"<button\n\nkey={tab.id}\n\nonClick={() => setSelectedId(tab.id)}\n\n>\n\n{tab.header}\n\n</button>\n\n))}\n\n<hr />\n\n<div key={selectedId}>\n\n<h3>{selectedTab.header}</h3>\n\n{selectedTab.content}\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nUnlike passing the children as JSX, this approach lets you associate some extra data like `header` with each item. Because you are working with the `tabs` directly, and it is an array, you do not need the `Children` methods.\n\n--\n\n### Calling a render prop to customize rendering {/*calling-a-render-prop-to-customize-rendering*/}\n\nInstead of producing JSX for every single item, you can also pass a function that returns JSX, and call that function when necessary. In this example, the `App` component passes a `renderContent` function to the `TabSwitcher` component. The `TabSwitcher` component calls `renderContent` only for the selected tab:\n\n<Sandpack>\n\n```js\n\nimport TabSwitcher from './TabSwitcher.js';\n\nexport default function App() {\n\nreturn (\n\n<TabSwitcher\n\ntabIds={['first', 'second', 'third']}\n\ngetHeader={tabId => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"277":{"pageContent":"<Sandpack>\n\n```js\n\nimport TabSwitcher from './TabSwitcher.js';\n\nexport default function App() {\n\nreturn (\n\n<TabSwitcher\n\ntabIds={['first', 'second', 'third']}\n\ngetHeader={tabId => {\n\nreturn tabId[0].toUpperCase() + tabId.slice(1);\n\n}}\n\nrenderContent={tabId => {\n\nreturn <p>This is the {tabId} item.</p>;\n\n}}\n\n/>\n\n);\n\n}\n\n```\n\n```js TabSwitcher.js\n\nimport { useState } from 'react';\n\nexport default function TabSwitcher({ tabIds, getHeader, renderContent }) {\n\nconst [selectedId, setSelectedId] = useState(tabIds[0]);\n\nreturn (\n\n<>\n\n{tabIds.map((tabId) => (\n\n<button\n\nkey={tabId}\n\nonClick={() => setSelectedId(tabId)}\n\n>\n\n{getHeader(tabId)}\n\n</button>\n\n))}\n\n<hr />\n\n<div key={selectedId}>\n\n<h3>{getHeader(selectedId)}</h3>\n\n{renderContent(selectedId)}\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nA prop like `renderContent` is called a *render prop* because it is a prop that specifies how to render a piece of the user interface. However, there is nothing special about it: it is a regular prop which happens to be a function.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"278":{"pageContent":"Render props are functions, so you can pass information to them. For example, this `RowList` component passes the `id` and the `index` of each row to the `renderRow` render prop, which uses `index` to highlight even rows:\n\n<Sandpack>\n\n```js\n\nimport { RowList, Row } from './RowList.js';\n\nexport default function App() {\n\nreturn (\n\n<RowList\n\nrowIds={['first', 'second', 'third']}\n\nrenderRow={(id, index) => {\n\nreturn (\n\n<Row isHighlighted={index % 2 === 0}>\n\n<p>This is the {id} item.</p>\n\n</Row>\n\n);\n\n}}\n\n/>\n\n);\n\n}\n\n```\n\n```js RowList.js\n\nimport { Fragment } from 'react';\n\nexport function RowList({ rowIds, renderRow }) {\n\nreturn (\n\n<div className=\"RowList\">\n\n<h1 className=\"RowListHeader\">\n\nTotal rows: {rowIds.length}\n\n</h1>\n\n{rowIds.map((rowId, index) =>\n\n<Fragment key={rowId}>\n\n{renderRow(rowId, index)}\n\n</Fragment>\n\n)}\n\n</div>\n\n);\n\n}\n\nexport function Row({ children, isHighlighted }) {\n\nreturn (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{children}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"279":{"pageContent":"return (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{children}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.RowList {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.RowListHeader {\n\npadding-top: 5px;\n\nfont-size: 25px;\n\nfont-weight: bold;\n\ntext-align: center;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n.RowHighlighted {\n\nbackground: #ffa;\n\n}\n\n```\n\n</Sandpack>\n\nThis is another example of how parent and child components can cooperate without manipulating the children.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I pass a custom component, but the `Children` methods don't show its render result {/*i-pass-a-custom-component-but-the-children-methods-dont-show-its-render-result*/}\n\nSuppose you pass two children to `RowList` like this:\n\n```js\n\n<RowList>\n\n<p>First item</p>\n\n<MoreRows />\n\n</RowList>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"280":{"pageContent":"Suppose you pass two children to `RowList` like this:\n\n```js\n\n<RowList>\n\n<p>First item</p>\n\n<MoreRows />\n\n</RowList>\n\n```\n\nIf you do `Children.count(children)` inside `RowList`, you will get `2`. Even if `MoreRows` renders 10 different items, or if it returns `null`, `Children.count(children)` will still be `2`. From the `RowList`'s perspective, it only \"sees\" the JSX it has received. It does not \"see\" the internals of the `MoreRows` component.\n\nThe limitation makes it hard to extract a component. This is why [alternatives](#alternatives) are preferred to using `Children`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Children.md"}},"281":{"pageContent":"--\n\ntitle: useEffect\n\n--\n\n<Intro>\n\n`useEffect` is a React Hook that lets you [synchronize a component with an external system.](/learn/synchronizing-with-effects)\n\n```js\n\nuseEffect(setup, dependencies?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useEffect(setup, dependencies?)` {/*useeffect*/}\n\nCall `useEffect` at the top level of your component to declare an Effect:\n\n```js\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"282":{"pageContent":"connection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`setup`: The function with your Effect's logic. Your setup function may also optionally return a *cleanup* function. When your component is first added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function one last time.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"283":{"pageContent":"**optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm. If you don't specify the dependencies at all, your Effect will re-run after every re-render of the component. [See the difference between passing an array of dependencies, an empty array, and no dependencies at all.](#examples-dependencies)\n\n#### Returns {/*returns*/}\n\n`useEffect` returns `undefined`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"284":{"pageContent":"#### Returns {/*returns*/}\n\n`useEffect` returns `undefined`.\n\n#### Caveats {/*caveats*/}\n\n`useEffect` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\nIf you're **not trying to synchronize with some external system,** [you probably don't need an Effect.](/learn/you-might-not-need-an-effect)\n\nWhen Strict Mode is on, React will **run one extra development-only setup+cleanup cycle** before the first real setup. This is a stress-test that ensures that your cleanup logic \"mirrors\" your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem, [you need to implement the cleanup function.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"285":{"pageContent":"If some of your dependencies are objects or functions defined inside the component, there is a risk that they will **cause the Effect to re-run more often than needed.** To fix this, remove unnecessary [object](#removing-unnecessary-object-dependencies) and [function](#removing-unnecessary-function-dependencies) dependencies. You can also [extract state updates](#updating-state-based-on-previous-state-from-an-effect) and [non-reactive logic](#reading-the-latest-props-and-state-from-an-effect) outside of your Effect.\n\nIf your Effect wasn't caused by an interaction (like a click), React will let the browser **paint the updated screen first before running your Effect.** If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), you need to replace `useEffect` with [`useLayoutEffect`.](/reference/react/useLayoutEffect)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"286":{"pageContent":"Even if your Effect was caused by an interaction (like a click), **the browser may repaint the screen before processing the state updates inside your Effect.** Usually, that's what you want. However, if you must block the browser from repainting the screen, you need to replace `useEffect` with [`useLayoutEffect`.](/reference/react/useLayoutEffect)\n\nEffects **only run on the client.** They don't run during server rendering.\n\n--\n\n## Usage {/*usage*/}\n\n### Connecting to an external system {/*connecting-to-an-external-system*/}\n\nSometimes, your component might need to stay connected to the network, some browser API, or a third-party library, while it is displayed on the page. Such systems aren't controlled by React, so they are called *external.*\n\nTo [connect your component to some external system,](/learn/synchronizing-with-effects) call `useEffect` at the top level of your component:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"287":{"pageContent":"To [connect your component to some external system,](/learn/synchronizing-with-effects) call `useEffect` at the top level of your component:\n\n```js [[1, 8, \"const connection = createConnection(serverUrl, roomId);\"], [1, 9, \"connection.connect();\"], [2, 11, \"connection.disconnect();\"], [3, 13, \"[serverUrl, roomId]\"]]\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\n// ...\n\n}\n\n```\n\nYou need to pass two arguments to `useEffect`:\n\n1. A *setup function* with <CodeStep step={1}>setup code</CodeStep> that connects to that system.\n\nIt should return a *cleanup function* with <CodeStep step={2}>cleanup code</CodeStep> that disconnects from that system.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"288":{"pageContent":"It should return a *cleanup function* with <CodeStep step={2}>cleanup code</CodeStep> that disconnects from that system.\n\n2. A <CodeStep step={3}>list of dependencies</CodeStep> including every value from your component used inside of those functions.\n\n*React calls your setup and cleanup functions whenever it's necessary, which may happen multiple times:**\n\n1. Your <CodeStep step={1}>setup code</CodeStep> runs when your component is added to the page *(mounts)*.\n\n2. After every re-render of your component where the <CodeStep step={3}>dependencies</CodeStep> have changed:\n\nFirst, your <CodeStep step={2}>cleanup code</CodeStep> runs with the old props and state.\n\nThen, your <CodeStep step={1}>setup code</CodeStep> runs with the new props and state.\n\n3. Your <CodeStep step={2}>cleanup code</CodeStep> runs one final time after your component is removed from the page *(unmounts).*\n\n*Let's illustrate this sequence for the example above.**","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"289":{"pageContent":"3. Your <CodeStep step={2}>cleanup code</CodeStep> runs one final time after your component is removed from the page *(unmounts).*\n\n*Let's illustrate this sequence for the example above.**\n\nWhen the `ChatRoom` component above gets added to the page, it will connect to the chat room with the initial `serverUrl` and `roomId`. If either `serverUrl` or `roomId` change as a result of a re-render (say, if the user picks a different chat room in a dropdown), your Effect will *disconnect from the previous room, and connect to the next one.* When the `ChatRoom` component is finally removed from the page, your Effect will disconnect one last time.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"290":{"pageContent":"*To [help you find bugs,](/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) in development React runs <CodeStep step={1}>setup</CodeStep> and <CodeStep step={2}>cleanup</CodeStep> one extra time before the actual <CodeStep step={1}>setup</CodeStep>.** This is a stress-test that verifies your Effect's logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn't be able to distinguish between the setup being called once (as in production) and a *setup* → *cleanup* → *setup* sequence (as in development). [See common solutions.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"291":{"pageContent":"*Try to [write every Effect as an independent process](/learn/lifecycle-of-reactive-effects#each-effect-represents-a-separate-synchronization-process) and [only think about a single setup/cleanup cycle at a time.](/learn/lifecycle-of-reactive-effects#thinking-from-the-effects-perspective)** It shouldn't matter whether your component is mounting, updating, or unmounting. When your cleanup logic correctly \"mirrors\" the setup logic, your Effect will be resilient to running setup and cleanup as often as needed.\n\n<Note>\n\nAn Effect lets you [keep your component synchronized](/learn/synchronizing-with-effects) with some external system (like a chat service). Here, *external system* means any piece of code that's not controlled by React, such as:\n\nA timer managed with <CodeStep step={1}>[`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval)</CodeStep> and <CodeStep step={2}>[`clearInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval)</CodeStep>.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"292":{"pageContent":"An event subscription using <CodeStep step={1}>[`window.addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)</CodeStep> and <CodeStep step={2}>[`window.removeEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)</CodeStep>.\n\nA third-party animation library with an API like <CodeStep step={1}>`animation.start()`</CodeStep> and <CodeStep step={2}>`animation.reset()`</CodeStep>.\n\n*If you're not connecting to any external system, [you probably don't need an Effect.](/learn/you-might-not-need-an-effect)**\n\n</Note>\n\n<Recipes titleText=\"Examples of connecting to an external system\" titleId=\"examples-connecting\">\n\n#### Connecting to a chat server {/*connecting-to-a-chat-server*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"293":{"pageContent":"</Note>\n\n<Recipes titleText=\"Examples of connecting to an external system\" titleId=\"examples-connecting\">\n\n#### Connecting to a chat server {/*connecting-to-a-chat-server*/}\n\nIn this example, the `ChatRoom` component uses an Effect to stay connected to an external system defined in `chat.js`. Press \"Open chat\" to make the `ChatRoom` component appear. This sandbox runs in development mode, so there is an extra connect-and-disconnect cycle, as [explained here.](/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) Try changing the `roomId` and `serverUrl` using the dropdown and the input, and see how the Effect re-connects to the chat. Press \"Close chat\" to see the Effect disconnect one last time.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"294":{"pageContent":"function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId, serverUrl]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"295":{"pageContent":"{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Listening to a global browser event {/*listening-to-a-global-browser-event*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"296":{"pageContent":"}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Listening to a global browser event {/*listening-to-a-global-browser-event*/}\n\nIn this example, the external system is the browser DOM itself. Normally, you'd specify event listeners with JSX, but you can't listen to the global [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) object this way. An Effect lets you connect to the `window` object and listen to its events. Listening to the `pointermove` event lets you track the cursor (or finger) position and update the red dot to move with it.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => {\n\nwindow.removeEventListener('pointermove', handleMove);\n\n};\n\n}, []);\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"297":{"pageContent":"setPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => {\n\nwindow.removeEventListener('pointermove', handleMove);\n\n};\n\n}, []);\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nmin-height: 300px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Triggering an animation {/*triggering-an-animation*/}\n\nIn this example, the external system is the animation library in `animation.js`. It provides a JavaScript class called `FadeInAnimation` that takes a DOM node as an argument and exposes `start()` and `stop()` methods to control the animation. This component [uses a ref](/learn/manipulating-the-dom-with-refs) to access the underlying DOM node. The Effect reads the DOM node from the ref and automatically starts the animation for that node when the component appears.\n\n<Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"298":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { FadeInAnimation } from './animation.js';\n\nfunction Welcome() {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nconst animation = new FadeInAnimation(ref.current);\n\nanimation.start(1000);\n\nreturn () => {\n\nanimation.stop();\n\n};\n\n}, []);\n\nreturn (\n\n<h1\n\nref={ref}\n\nstyle={{\n\nopacity: 0,\n\ncolor: 'white',\n\npadding: 50,\n\ntextAlign: 'center',\n\nfontSize: 50,\n\nbackgroundImage: 'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)'\n\n}}\n\n>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```js animation.js\n\nexport class FadeInAnimation {\n\nconstructor(node) {\n\nthis.node = node;\n\n}\n\nstart(duration) {\n\nthis.duration = duration;\n\nif (this.duration === 0) {\n\n// Jump to end immediately\n\nthis.onProgress(1);\n\n} else {\n\nthis.onProgress(0);\n\n// Start animating\n\nthis.startTime = performance.now();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"299":{"pageContent":"}\n\nstart(duration) {\n\nthis.duration = duration;\n\nif (this.duration === 0) {\n\n// Jump to end immediately\n\nthis.onProgress(1);\n\n} else {\n\nthis.onProgress(0);\n\n// Start animating\n\nthis.startTime = performance.now();\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\n}\n\nonFrame() {\n\nconst timePassed = performance.now() - this.startTime;\n\nconst progress = Math.min(timePassed / this.duration, 1);\n\nthis.onProgress(progress);\n\nif (progress < 1) {\n\n// We still have more frames to paint\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\n}\n\nonProgress(progress) {\n\nthis.node.style.opacity = progress;\n\n}\n\nstop() {\n\ncancelAnimationFrame(this.frameId);\n\nthis.startTime = null;\n\nthis.frameId = null;\n\nthis.duration = 0;\n\n}\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Controlling a modal dialog {/*controlling-a-modal-dialog*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"300":{"pageContent":"}\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Controlling a modal dialog {/*controlling-a-modal-dialog*/}\n\nIn this example, the external system is the browser DOM. The `ModalDialog` component renders a [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element. It uses an Effect to synchronize the `isOpen` prop to the [`showModal()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal) and [`close()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close) method calls.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport ModalDialog from './ModalDialog.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nOpen dialog\n\n</button>\n\n<ModalDialog isOpen={show}>\n\nHello there!\n\n<br />\n\n<button onClick={() => {\n\nsetShow(false);\n\n}}>Close</button>\n\n</ModalDialog>\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"301":{"pageContent":"return (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nOpen dialog\n\n</button>\n\n<ModalDialog isOpen={show}>\n\nHello there!\n\n<br />\n\n<button onClick={() => {\n\nsetShow(false);\n\n}}>Close</button>\n\n</ModalDialog>\n\n</>\n\n);\n\n}\n\n```\n\n```js ModalDialog.js active\n\nimport { useEffect, useRef } from 'react';\n\nexport default function ModalDialog({ isOpen, children }) {\n\nconst ref = useRef();\n\nuseEffect(() => {\n\nif (!isOpen) {\n\nreturn;\n\n}\n\nconst dialog = ref.current;\n\ndialog.showModal();\n\nreturn () => {\n\ndialog.close();\n\n};\n\n}, [isOpen]);\n\nreturn <dialog ref={ref}>{children}</dialog>;\n\n}\n\n```\n\n```css\n\nbody {\n\nmin-height: 300px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Tracking element visibility {/*tracking-element-visibility*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"302":{"pageContent":"};\n\n}, [isOpen]);\n\nreturn <dialog ref={ref}>{children}</dialog>;\n\n}\n\n```\n\n```css\n\nbody {\n\nmin-height: 300px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Tracking element visibility {/*tracking-element-visibility*/}\n\nIn this example, the external system is again the browser DOM. The `App` component displays a long list, then a `Box` component, and then another long list. Scroll the list down. Notice that when the `Box` component appears in the viewport, the background color changes to black. To implement this, the `Box` component uses an Effect to manage an [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API). This browser API notifies you when the DOM element is visible in the viewport.\n\n<Sandpack>\n\n```js\n\nimport Box from './Box.js';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<LongSection />\n\n<Box />\n\n<LongSection />\n\n<Box />\n\n<LongSection />\n\n</>\n\n);\n\n}\n\nfunction LongSection() {\n\nconst items = [];\n\nfor (let i = 0; i < 50; i++) {\n\nitems.push(<li key={i}>Item #{i} (keep scrolling)</li>);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"303":{"pageContent":"<>\n\n<LongSection />\n\n<Box />\n\n<LongSection />\n\n<Box />\n\n<LongSection />\n\n</>\n\n);\n\n}\n\nfunction LongSection() {\n\nconst items = [];\n\nfor (let i = 0; i < 50; i++) {\n\nitems.push(<li key={i}>Item #{i} (keep scrolling)</li>);\n\n}\n\nreturn <ul>{items}</ul>\n\n}\n\n```\n\n```js Box.js active\n\nimport { useRef, useEffect } from 'react';\n\nexport default function Box() {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nconst div = ref.current;\n\nconst observer = new IntersectionObserver(entries => {\n\nconst entry = entries[0];\n\nif (entry.isIntersecting) {\n\ndocument.body.style.backgroundColor = 'black';\n\ndocument.body.style.color = 'white';\n\n} else {\n\ndocument.body.style.backgroundColor = 'white';\n\ndocument.body.style.color = 'black';\n\n}\n\n});\n\nobserver.observe(div, {\n\nthreshold: 1.0\n\n});\n\nreturn () => {\n\nobserver.disconnect();\n\n}\n\n}, []);\n\nreturn (\n\n<div ref={ref} style={{\n\nmargin: 20,\n\nheight: 100,\n\nwidth: 100,\n\nborder: '2px solid black',\n\nbackgroundColor: 'blue'\n\n}} />\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Wrapping Effects in custom Hooks {/*wrapping-effects-in-custom-hooks*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"304":{"pageContent":"height: 100,\n\nwidth: 100,\n\nborder: '2px solid black',\n\nbackgroundColor: 'blue'\n\n}} />\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Wrapping Effects in custom Hooks {/*wrapping-effects-in-custom-hooks*/}\n\nEffects are an [\"escape hatch\":](/learn/escape-hatches) you use them when you need to \"step outside React\" and when there is no better built-in solution for your use case. If you find yourself often needing to manually write Effects, it's usually a sign that you need to extract some [custom Hooks](/learn/reusing-logic-with-custom-hooks) for common behaviors that your components rely on.\n\nFor example, this `useChatRoom` custom Hook \"hides\" the logic of your Effect behind a more declarative API:\n\n```js {1,11}\n\nfunction useChatRoom({ serverUrl, roomId }) {\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\nThen you can use it from any component like this:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"305":{"pageContent":"roomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\nThen you can use it from any component like this:\n\n```js {4-7}\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\n// ...\n\n````\n\nThere are also many excellent custom Hooks for every purpose available in the React ecosystem.\n\n[Learn more about wrapping Effects in custom Hooks.](/learn/reusing-logic-with-custom-hooks)\n\n<Recipes titleText=\"Examples of wrapping Effects in custom Hooks\" titleId=\"examples-custom-hooks\">\n\n#### Custom `useChatRoom` Hook {/*custom-usechatroom-hook*/}\n\nThis example is identical to one of the [earlier examples,](#examples-connecting) but the logic is extracted to a custom Hook.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useChatRoom } from './useChatRoom.js';\n\nfunction ChatRoom({ roomId }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"306":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useChatRoom } from './useChatRoom.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js useChatRoom.js\n\nimport { useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"307":{"pageContent":"<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js useChatRoom.js\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport function useChatRoom({ serverUrl, roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Custom `useWindowListener` Hook {/*custom-usewindowlistener-hook*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"308":{"pageContent":"}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Custom `useWindowListener` Hook {/*custom-usewindowlistener-hook*/}\n\nThis example is identical to one of the [earlier examples,](#examples-connecting) but the logic is extracted to a custom Hook.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useWindowListener } from './useWindowListener.js';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nuseWindowListener('pointermove', (e) => {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n});\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```js useWindowListener.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useWindowListener(eventType, listener) {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"309":{"pageContent":"left: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```js useWindowListener.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useWindowListener(eventType, listener) {\n\nuseEffect(() => {\n\nwindow.addEventListener(eventType, listener);\n\nreturn () => {\n\nwindow.removeEventListener(eventType, listener);\n\n};\n\n}, [eventType, listener]);\n\n}\n\n```\n\n```css\n\nbody {\n\nmin-height: 300px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Custom `useIntersectionObserver` Hook {/*custom-useintersectionobserver-hook*/}\n\nThis example is identical to one of the [earlier examples,](#examples-connecting) but the logic is partially extracted to a custom Hook.\n\n<Sandpack>\n\n```js\n\nimport Box from './Box.js';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<LongSection />\n\n<Box />\n\n<LongSection />\n\n<Box />\n\n<LongSection />\n\n</>\n\n);\n\n}\n\nfunction LongSection() {\n\nconst items = [];\n\nfor (let i = 0; i < 50; i++) {\n\nitems.push(<li key={i}>Item #{i} (keep scrolling)</li>);\n\n}\n\nreturn <ul>{items}</ul>\n\n}\n\n```\n\n```js Box.js active\n\nimport { useRef, useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"310":{"pageContent":"const items = [];\n\nfor (let i = 0; i < 50; i++) {\n\nitems.push(<li key={i}>Item #{i} (keep scrolling)</li>);\n\n}\n\nreturn <ul>{items}</ul>\n\n}\n\n```\n\n```js Box.js active\n\nimport { useRef, useEffect } from 'react';\n\nimport { useIntersectionObserver } from './useIntersectionObserver.js';\n\nexport default function Box() {\n\nconst ref = useRef(null);\n\nconst isIntersecting = useIntersectionObserver(ref);\n\nuseEffect(() => {\n\nif (isIntersecting) {\n\ndocument.body.style.backgroundColor = 'black';\n\ndocument.body.style.color = 'white';\n\n} else {\n\ndocument.body.style.backgroundColor = 'white';\n\ndocument.body.style.color = 'black';\n\n}\n\n}, [isIntersecting]);\n\nreturn (\n\n<div ref={ref} style={{\n\nmargin: 20,\n\nheight: 100,\n\nwidth: 100,\n\nborder: '2px solid black',\n\nbackgroundColor: 'blue'\n\n}} />\n\n);\n\n}\n\n```\n\n```js useIntersectionObserver.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useIntersectionObserver(ref) {\n\nconst [isIntersecting, setIsIntersecting] = useState(false);\n\nuseEffect(() => {\n\nconst div = ref.current;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"311":{"pageContent":"import { useState, useEffect } from 'react';\n\nexport function useIntersectionObserver(ref) {\n\nconst [isIntersecting, setIsIntersecting] = useState(false);\n\nuseEffect(() => {\n\nconst div = ref.current;\n\nconst observer = new IntersectionObserver(entries => {\n\nconst entry = entries[0];\n\nsetIsIntersecting(entry.isIntersecting);\n\n});\n\nobserver.observe(div, {\n\nthreshold: 1.0\n\n});\n\nreturn () => {\n\nobserver.disconnect();\n\n}\n\n}, [ref]);\n\nreturn isIntersecting;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Controlling a non-React widget {/*controlling-a-non-react-widget*/}\n\nSometimes, you want to keep an external system synchronized to some prop or state of your component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"312":{"pageContent":"<Solution />\n\n</Recipes>\n\n--\n\n### Controlling a non-React widget {/*controlling-a-non-react-widget*/}\n\nSometimes, you want to keep an external system synchronized to some prop or state of your component.\n\nFor example, if you have a third-party map widget or a video player component written without React, you can use an Effect to call methods on it that make its state match the current state of your React component. This Effect creates an instance of a `MapWidget` class defined in `map-widget.js`. When you change the `zoomLevel` prop of the `Map` component, the Effect calls the `setZoom()` on the class instance to keep it synchronized:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"leaflet\": \"1.9.1\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"remarkable\": \"2.0.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"313":{"pageContent":"},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Map from './Map.js';\n\nexport default function App() {\n\nconst [zoomLevel, setZoomLevel] = useState(0);\n\nreturn (\n\n<>\n\nZoom level: {zoomLevel}x\n\n<button onClick={() => setZoomLevel(zoomLevel + 1)}>+</button>\n\n<button onClick={() => setZoomLevel(zoomLevel - 1)}>-</button>\n\n<hr />\n\n<Map zoomLevel={zoomLevel} />\n\n</>\n\n);\n\n}\n\n```\n\n```js Map.js active\n\nimport { useRef, useEffect } from 'react';\n\nimport { MapWidget } from './map-widget.js';\n\nexport default function Map({ zoomLevel }) {\n\nconst containerRef = useRef(null);\n\nconst mapRef = useRef(null);\n\nuseEffect(() => {\n\nif (mapRef.current === null) {\n\nmapRef.current = new MapWidget(containerRef.current);\n\n}\n\nconst map = mapRef.current;\n\nmap.setZoom(zoomLevel);\n\n}, [zoomLevel]);\n\nreturn (\n\n<div\n\nstyle={{ width: 200, height: 200 }}\n\nref={containerRef}\n\n/>\n\n);\n\n}\n\n```\n\n```js map-widget.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"314":{"pageContent":"}\n\nconst map = mapRef.current;\n\nmap.setZoom(zoomLevel);\n\n}, [zoomLevel]);\n\nreturn (\n\n<div\n\nstyle={{ width: 200, height: 200 }}\n\nref={containerRef}\n\n/>\n\n);\n\n}\n\n```\n\n```js map-widget.js\n\nimport 'leaflet/dist/leaflet.css';\n\nimport * as L from 'leaflet';\n\nexport class MapWidget {\n\nconstructor(domNode) {\n\nthis.map = L.map(domNode, {\n\nzoomControl: false,\n\ndoubleClickZoom: false,\n\nboxZoom: false,\n\nkeyboard: false,\n\nscrollWheelZoom: false,\n\nzoomAnimation: false,\n\ntouchZoom: false,\n\nzoomSnap: 0.1\n\n});\n\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\nmaxZoom: 19,\n\nattribution: '© OpenStreetMap'\n\n}).addTo(this.map);\n\nthis.map.setView([0, 0], 0);\n\n}\n\nsetZoom(level) {\n\nthis.map.setZoom(level);\n\n}\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\nIn this example, a cleanup function is not needed because the `MapWidget` class manages only the DOM node that was passed to it. After the `Map` React component is removed from the tree, both the DOM node and the `MapWidget` class instance will be automatically garbage-collected by the browser JavaScript engine.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"315":{"pageContent":"--\n\n### Fetching data with Effects {/*fetching-data-with-effects*/}\n\nYou can use an Effect to fetch data for your component. Note that [if you use a framework,](/learn/start-a-new-react-project#building-with-a-full-featured-framework) using your framework's data fetching mechanism will be a lot more efficient than writing Effects manually.\n\nIf you want to fetch data from an Effect manually, your code might look like this:\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\nconst [person, setPerson] = useState('Alice');\n\nconst [bio, setBio] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nsetBio(null);\n\nfetchBio(person).then(result => {\n\nif (!ignore) {\n\nsetBio(result);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [person]);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"316":{"pageContent":"useEffect(() => {\n\nlet ignore = false;\n\nsetBio(null);\n\nfetchBio(person).then(result => {\n\nif (!ignore) {\n\nsetBio(result);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [person]);\n\n// ...\n\n```\n\nNote the `ignore` variable which is initialized to `false`, and is set to `true` during cleanup. This ensures [your code doesn't suffer from \"race conditions\":](https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect) network responses may arrive in a different order than you sent them.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\nconst [person, setPerson] = useState('Alice');\n\nconst [bio, setBio] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nsetBio(null);\n\nfetchBio(person).then(result => {\n\nif (!ignore) {\n\nsetBio(result);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, [person]);\n\nreturn (\n\n<>\n\n<select value={person} onChange={e => {\n\nsetPerson(e.target.value);\n\n}}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"317":{"pageContent":"}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, [person]);\n\nreturn (\n\n<>\n\n<select value={person} onChange={e => {\n\nsetPerson(e.target.value);\n\n}}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>\n\n<option value=\"Taylor\">Taylor</option>\n\n</select>\n\n<hr />\n\n<p><i>{bio ?? 'Loading...'}</i></p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport async function fetchBio(person) {\n\nconst delay = person === 'Bob' ? 2000 : 200;\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve('This is ' + person + '’s bio.');\n\n}, delay);\n\n})\n\n}\n\n```\n\n</Sandpack>\n\nYou can also rewrite using the [`async` / `await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) syntax, but you still need to provide a cleanup function:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\nconst [person, setPerson] = useState('Alice');\n\nconst [bio, setBio] = useState(null);\n\nuseEffect(() => {\n\nasync function startFetching() {\n\nsetBio(null);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"318":{"pageContent":"export default function Page() {\n\nconst [person, setPerson] = useState('Alice');\n\nconst [bio, setBio] = useState(null);\n\nuseEffect(() => {\n\nasync function startFetching() {\n\nsetBio(null);\n\nconst result = await fetchBio(person);\n\nif (!ignore) {\n\nsetBio(result);\n\n}\n\n}\n\nlet ignore = false;\n\nstartFetching();\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, [person]);\n\nreturn (\n\n<>\n\n<select value={person} onChange={e => {\n\nsetPerson(e.target.value);\n\n}}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>\n\n<option value=\"Taylor\">Taylor</option>\n\n</select>\n\n<hr />\n\n<p><i>{bio ?? 'Loading...'}</i></p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport async function fetchBio(person) {\n\nconst delay = person === 'Bob' ? 2000 : 200;\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve('This is ' + person + '’s bio.');\n\n}, delay);\n\n})\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"319":{"pageContent":"const delay = person === 'Bob' ? 2000 : 200;\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve('This is ' + person + '’s bio.');\n\n}, delay);\n\n})\n\n}\n\n```\n\n</Sandpack>\n\nWriting data fetching directly in Effects gets repetitive and makes it difficult to add optimizations like caching and server rendering later. [It's easier to use a custom Hook--either your own or maintained by the community.](/learn/reusing-logic-with-custom-hooks#when-to-use-custom-hooks)\n\n<DeepDive>\n\n#### What are good alternatives to data fetching in Effects? {/*what-are-good-alternatives-to-data-fetching-in-effects*/}\n\nWriting `fetch` calls inside Effects is a [popular way to fetch data](https://www.robinwieruch.de/react-hooks-fetch-data/), especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"320":{"pageContent":"**Effects don't run on the server.** This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.\n\n**Fetching directly in Effects makes it easy to create \"network waterfalls\".** You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.\n\n**Fetching directly in Effects usually means you don't preload or cache data.** For example, if the component unmounts and then mounts again, it would have to fetch the data again.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"321":{"pageContent":"**Fetching directly in Effects usually means you don't preload or cache data.** For example, if the component unmounts and then mounts again, it would have to fetch the data again.\n\n**It's not very ergonomic.** There's quite a bit of boilerplate code involved when writing `fetch` calls in a way that doesn't suffer from bugs like [race conditions.](https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect)\n\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\n\n**If you use a [framework](/learn/start-a-new-react-project#building-with-a-full-featured-framework), use its built-in data fetching mechanism.** Modern React frameworks have integrated data fetching mechanisms that are efficient and don't suffer from the above pitfalls.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"322":{"pageContent":"**Otherwise, consider using or building a client-side cache.** Popular open source solutions include [React Query](https://react-query.tanstack.com/), [useSWR](https://swr.vercel.app/), and [React Router 6.4+.](https://beta.reactrouter.com/en/main/start/overview) You can build your own solution too, in which case you would use Effects under the hood but also add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\n\nYou can continue fetching data directly in Effects if neither of these approaches suit you.\n\n</DeepDive>\n\n--\n\n### Specifying reactive dependencies {/*specifying-reactive-dependencies*/}\n\n*Notice that you can't \"choose\" the dependencies of your Effect.** Every <CodeStep step={2}>reactive value</CodeStep> used by your Effect's code must be declared as a dependency. Your Effect's dependency list is determined by the surrounding code:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"323":{"pageContent":"```js [[2, 1, \"roomId\"], [2, 2, \"serverUrl\"], [2, 5, \"serverUrl\"], [2, 5, \"roomId\"], [2, 8, \"serverUrl\"], [2, 8, \"roomId\"]]\n\nfunction ChatRoom({ roomId }) { // This is a reactive value\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234'); // This is a reactive value too\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // This Effect reads these reactive values\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [serverUrl, roomId]); // ✅ So you must specify them as dependencies of your Effect\n\n// ...\n\n}\n\n```\n\nIf either `serverUrl` or `roomId` change, your Effect will reconnect to the chat using the new values.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"324":{"pageContent":"}, [serverUrl, roomId]); // ✅ So you must specify them as dependencies of your Effect\n\n// ...\n\n}\n\n```\n\nIf either `serverUrl` or `roomId` change, your Effect will reconnect to the chat using the new values.\n\n*[Reactive values](/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values) include props and all variables and functions declared directly inside of your component.** Since `roomId` and `serverUrl` are reactive values, you can't remove them from the dependency list. If you try to omit them and [your linter is correctly configured for React,](/learn/editor-setup#linting) the linter will flag this as a mistake that you need to fix:\n\n```js {8}\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // 🔴 React Hook useEffect has missing dependencies: 'roomId' and 'serverUrl'\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"325":{"pageContent":"connection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // 🔴 React Hook useEffect has missing dependencies: 'roomId' and 'serverUrl'\n\n// ...\n\n}\n\n```\n\n*To remove a dependency, you need to [\"prove\" to the linter that it *doesn't need* to be a dependency.](/learn/removing-effect-dependencies#removing-unnecessary-dependencies)** For example, you can move `serverUrl` out of your component to prove that it's not reactive and won't change on re-renders:\n\n```js {1,8}\n\nconst serverUrl = 'https://localhost:1234'; // Not a reactive value anymore\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nNow that `serverUrl` is not a reactive value (and can't change on a re-render), it doesn't need to be a dependency. **If your Effect's code doesn't use any reactive values, its dependency list should be empty (`[]`):**\n\n```js {1,2,9}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"326":{"pageContent":"```js {1,2,9}\n\nconst serverUrl = 'https://localhost:1234'; // Not a reactive value anymore\n\nconst roomId = 'music'; // Not a reactive value anymore\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\n[An Effect with empty dependencies](/learn/lifecycle-of-reactive-effects#what-an-effect-with-empty-dependencies-means) doesn't re-run when any of your component's props or state change.\n\n<Pitfall>\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n```js {3-4}\n\nuseEffect(() => {\n\n// ...\n\n// 🔴 Avoid suppressing the linter like this:\n\n// eslint-ignore-next-line react-hooks/exhaustive-deps\n\n}, []);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"327":{"pageContent":"```js {3-4}\n\nuseEffect(() => {\n\n// ...\n\n// 🔴 Avoid suppressing the linter like this:\n\n// eslint-ignore-next-line react-hooks/exhaustive-deps\n\n}, []);\n\n```\n\n*When dependencies don't match the code, there is a high risk of introducing bugs.** By suppressing the linter, you \"lie\" to React about the values your Effect depends on. [Instead, prove they're unnecessary.](/learn/removing-effect-dependencies#removing-unnecessary-dependencies)\n\n</Pitfall>\n\n<Recipes titleText=\"Examples of passing reactive dependencies\" titleId=\"examples-dependencies\">\n\n#### Passing a dependency array {/*passing-a-dependency-array*/}\n\nIf you specify the dependencies, your Effect runs **after the initial render _and_ after re-renders with changed dependencies.**\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}, [a, b]); // Runs again if a or b are different\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"328":{"pageContent":"```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}, [a, b]); // Runs again if a or b are different\n\n```\n\nIn the below example, `serverUrl` and `roomId` are [reactive values,](/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values) so they both must be specified as dependencies. As a result, selecting a different room in the dropdown or editing the server URL input causes the chat to re-connect. However, since `message` isn't used in the Effect (and so it isn't a dependency), editing the message doesn't re-connect to the chat.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"329":{"pageContent":"const connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<label>\n\nYour message:{' '}\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</label>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n</label>\n\n{show && <hr />}\n\n{show && <ChatRoom />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"330":{"pageContent":"{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n</label>\n\n{show && <hr />}\n\n{show && <ChatRoom />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { margin-bottom: 10px; }\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Passing an empty dependency array {/*passing-an-empty-dependency-array*/}\n\nIf your Effect truly doesn't use any reactive values, it will only run **after the initial render.**\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}, []); // Does not run again (except once in development)\n\n```\n\n*Even with empty dependencies, setup and cleanup will [run one extra time in development](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development) to help you find bugs.**","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"331":{"pageContent":"In this example, both `serverUrl` and `roomId` are hardcoded. Since they're declared outside the component, they are not reactive values, and so they aren't dependencies. The dependency list is empty, so the Effect doesn't re-run on re-renders.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'music';\n\nfunction ChatRoom() {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<label>\n\nYour message:{' '}\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</label>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"332":{"pageContent":"const [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Passing no dependency array at all {/*passing-no-dependency-array-at-all*/}\n\nIf you pass no dependency array at all, your Effect runs **after every single render (and re-render)** of your component.\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}); // Always runs again\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"333":{"pageContent":"If you pass no dependency array at all, your Effect runs **after every single render (and re-render)** of your component.\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}); // Always runs again\n\n```\n\nIn this example, the Effect re-runs when you change `serverUrl` and `roomId`, which is sensible. However, it *also* re-runs when you change the `message`, which is probably undesirable. This is why usually you'll specify the dependency array.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}); // No dependency array at all\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<label>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"334":{"pageContent":"};\n\n}); // No dependency array at all\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<label>\n\nYour message:{' '}\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</label>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n</label>\n\n{show && <hr />}\n\n{show && <ChatRoom />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"335":{"pageContent":"// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { margin-bottom: 10px; }\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Updating state based on previous state from an Effect {/*updating-state-based-on-previous-state-from-an-effect*/}\n\nWhen you want to update state based on previous state from an Effect, you might run into a problem:\n\n```js {6,9}\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst intervalId = setInterval(() => {\n\nsetCount(count + 1); // You want to increment the counter every second...\n\n}, 1000)\n\nreturn () => clearInterval(intervalId);\n\n}, [count]); // 🚩 ... but specifying `count` as a dependency always resets the interval.\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"336":{"pageContent":"}, 1000)\n\nreturn () => clearInterval(intervalId);\n\n}, [count]); // 🚩 ... but specifying `count` as a dependency always resets the interval.\n\n// ...\n\n}\n\n```\n\nSince `count` is a reactive value, it must be specified in the list of dependencies. However, that causes the Effect to cleanup and setup again every time the `count` changes. This is not ideal.\n\nTo fix this, [pass the `c => c + 1` state updater](/reference/react/useState#updating-state-based-on-the-previous-state) to `setCount`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst intervalId = setInterval(() => {\n\nsetCount(c => c + 1); // ✅ Pass a state updater\n\n}, 1000);\n\nreturn () => clearInterval(intervalId);\n\n}, []); // ✅ Now count is not a dependency\n\nreturn <h1>{count}</h1>;\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"337":{"pageContent":"}, []); // ✅ Now count is not a dependency\n\nreturn <h1>{count}</h1>;\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nNow that you're passing `c => c + 1` instead of `count + 1`, [your Effect no longer needs to depend on `count`.](/learn/removing-effect-dependencies#are-you-reading-some-state-to-calculate-the-next-state) As a result of this fix, it won't need to cleanup and setup the interval again every time the `count` changes.\n\n--\n\n### Removing unnecessary object dependencies {/*removing-unnecessary-object-dependencies*/}\n\nIf your Effect depends on an object or a function created during rendering, it might run more often than needed. For example, this Effect re-connects after every render because the `options` object is [different for every render:](/learn/removing-effect-dependencies#does-some-reactive-value-change-unintentionally)\n\n```js {6-9,12,15}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"338":{"pageContent":"```js {6-9,12,15}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nconst options = { // 🚩 This object is created from scratch on every re-render\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nuseEffect(() => {\n\nconst connection = createConnection(options); // It's used inside the Effect\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]); // 🚩 As a result, these dependencies are always different on a re-render\n\n// ...\n\n```\n\nAvoid using an object created during rendering as a dependency. Instead, create the object inside the Effect:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"339":{"pageContent":"const [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"340":{"pageContent":"// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNow that you create the `options` object inside the Effect, the Effect itself only depends on the `roomId` string.\n\nWith this fix, typing into the input doesn't reconnect the chat. Unlike an object which gets re-created, a string like `roomId` doesn't change unless you set it to another value. [Read more about removing dependencies.](/learn/removing-effect-dependencies)\n\n--\n\n### Removing unnecessary function dependencies {/*removing-unnecessary-function-dependencies*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"341":{"pageContent":"--\n\n### Removing unnecessary function dependencies {/*removing-unnecessary-function-dependencies*/}\n\nIf your Effect depends on an object or a function created during rendering, it might run more often than needed. For example, this Effect re-connects after every render because the `createOptions` function is [different for every render:](/learn/removing-effect-dependencies#does-some-reactive-value-change-unintentionally)\n\n```js {4-9,12,16}\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nfunction createOptions() { // 🚩 This function is created from scratch on every re-render\n\nreturn {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\n}\n\nuseEffect(() => {\n\nconst options = createOptions(); // It's used inside the Effect\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [createOptions]); // 🚩 As a result, these dependencies are always different on a re-render\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"342":{"pageContent":"const connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [createOptions]); // 🚩 As a result, these dependencies are always different on a re-render\n\n// ...\n\n```\n\nBy itself, creating a function from scratch on every re-render is not a problem. You don't need to optimize that. However, if you use it as a dependency of your Effect, it will cause your Effect to re-run after every re-render.\n\nAvoid using a function created during rendering as a dependency. Instead, declare it inside the Effect:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nfunction createOptions() {\n\nreturn {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\n}\n\nconst options = createOptions();\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"343":{"pageContent":"serverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\n}\n\nconst options = createOptions();\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"344":{"pageContent":"return {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNow that you define the `createOptions` function inside the Effect, the Effect itself only depends on the `roomId` string. With this fix, typing into the input doesn't reconnect the chat. Unlike a function which gets re-created, a string like `roomId` doesn't change unless you set it to another value. [Read more about removing dependencies.](/learn/removing-effect-dependencies)\n\n--\n\n### Reading the latest props and state from an Effect {/*reading-the-latest-props-and-state-from-an-effect*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"345":{"pageContent":"<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nBy default, when you read a reactive value from an Effect, you have to add it as a dependency. This ensures that your Effect \"reacts\" to every change of that value. For most dependencies, that's the behavior you want.\n\n*However, sometimes you'll want to read the *latest* props and state from an Effect without \"reacting\" to them.** For example, imagine you want to log the number of the items in the shopping cart for every page visit:\n\n```js {3}\n\nfunction Page({ url, shoppingCart }) {\n\nuseEffect(() => {\n\nlogVisit(url, shoppingCart.length);\n\n}, [url, shoppingCart]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"346":{"pageContent":"```js {3}\n\nfunction Page({ url, shoppingCart }) {\n\nuseEffect(() => {\n\nlogVisit(url, shoppingCart.length);\n\n}, [url, shoppingCart]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\n*What if you want to log a new page visit after every `url` change, but *not* if only the `shoppingCart` changes?** You can't exclude `shoppingCart` from dependencies without breaking the [reactivity rules.](#specifying-reactive-dependencies) However, you can express that you *don't want* a piece of code to \"react\" to changes even though it is called from inside an Effect. [Declare an *Effect Event*](/learn/separating-events-from-effects#declaring-an-effect-event) with the [`useEffectEvent`](/reference/react/useEffectEvent) Hook, and move the code that reads `shoppingCart` inside of it:\n\n```js {2-4,7,8}\n\nfunction Page({ url, shoppingCart }) {\n\nconst onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, shoppingCart.length)\n\n});\n\nuseEffect(() => {\n\nonVisit(url);\n\n}, [url]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"347":{"pageContent":"const onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, shoppingCart.length)\n\n});\n\nuseEffect(() => {\n\nonVisit(url);\n\n}, [url]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\n*Effect Events are not reactive and must always be omitted from dependencies of your Effect.** This is what lets you put non-reactive code (where you can read the latest value of some props and state) inside of them. For example, by reading `shoppingCart` inside of `onVisit`, you ensure that `shoppingCart` won't re-run your Effect. In the future, the linter will support `useEffectEvent` and check that you omit Effect Events from dependencies.\n\n[Read more about how Effect Events let you separate reactive and non-reactive code.](/learn/separating-events-from-effects#reading-latest-props-and-state-with-effect-events)\n\n--\n\n### Displaying different content on the server and the client {/*displaying-different-content-on-the-server-and-the-client*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"348":{"pageContent":"--\n\n### Displaying different content on the server and the client {/*displaying-different-content-on-the-server-and-the-client*/}\n\nIf your app uses server rendering (either [directly](/reference/react-dom/server) or via a [framework](/learn/start-a-new-react-project#building-with-a-full-featured-framework)), your component will render in two different environments. On the server, it will render to produce the initial HTML. On the client, React will run the rendering code again so that it can attach your event handlers to that HTML. This is why, for [hydration](/reference/react-dom/client/hydrateRoot#hydrating-server-rendered-html) to work, your initial render output must be identical on the client and the server.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"349":{"pageContent":"In rare cases, you might need to display different content on the client. For example, if your app reads some data from [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), it can't possibly do that on the server. Here is how you would typically implement this:\n\n```js\n\nfunction MyComponent() {\n\nconst [didMount, setDidMount] = useState(false);\n\nuseEffect(() => {\n\nsetDidMount(true);\n\n}, []);\n\nif (didMount) {\n\n// ... return client-only JSX ...\n\n}  else {\n\n// ... return initial JSX ...\n\n}\n\n}\n\n```\n\nWhile the app is loading, the user will see the initial render output. Then, when it's loaded and hydrated, your Effect will run and set `didMount` to `true`, triggering a re-render. This will switch to the client-only render output. Note that Effects don't run on the server, so this is why `didMount` was `false` during the initial server render.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"350":{"pageContent":"Use this pattern sparingly. Keep in mind that users with a slow connection will see the initial content for quite a bit of time--potentially, many seconds--so you don't want to make jarring changes to your component's appearance. In many cases, you can avoid the need for this by conditionally showing different things with CSS.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My Effect runs twice when the component mounts {/*my-effect-runs-twice-when-the-component-mounts*/}\n\nWhen Strict Mode is on, in development, React runs setup and cleanup one extra time before the actual setup.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"351":{"pageContent":"When Strict Mode is on, in development, React runs setup and cleanup one extra time before the actual setup.\n\nThis is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and a setup → cleanup → setup sequence (as in development).\n\nRead more about [how this helps find bugs](/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed) and [how to fix your logic.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n\n--\n\n### My Effect runs after every re-render {/*my-effect-runs-after-every-re-render*/}\n\nFirst, check that you haven't forgotten to specify the dependency array:\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}); // 🚩 No dependency array: re-runs after every render!","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"352":{"pageContent":"First, check that you haven't forgotten to specify the dependency array:\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}); // 🚩 No dependency array: re-runs after every render!\n\n```\n\nIf you've specified the dependency array but your Effect still re-runs in a loop, it's because one of your dependencies is different on every re-render.\n\nYou can debug this problem by manually logging your dependencies to the console:\n\n```js {5}\n\nuseEffect(() => {\n\n// ..\n\n}, [serverUrl, roomId]);\n\nconsole.log([serverUrl, roomId]);\n\n```\n\nYou can then right-click on the arrays from different re-renders in the console and select \"Store as a global variable\" for both of them. Assuming the first one got saved as `temp1` and the second one got saved as `temp2`, you can then use the browser console to check whether each dependency in both arrays is the same:\n\n```js\n\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\n\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"353":{"pageContent":"```js\n\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\n\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\n\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n\n```\n\nWhen you find the dependency that is different on every re-render, you can usually fix it in one of these ways:\n\n[Updating state based on previous state from an Effect](#updating-state-based-on-previous-state-from-an-effect)\n\n[Removing unnecessary object dependencies](#removing-unnecessary-object-dependencies)\n\n[Removing unnecessary function dependencies](#removing-unnecessary-function-dependencies)\n\n[Reading the latest props and state from an Effect](#reading-the-latest-props-and-state-from-an-effect)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"354":{"pageContent":"[Removing unnecessary function dependencies](#removing-unnecessary-function-dependencies)\n\n[Reading the latest props and state from an Effect](#reading-the-latest-props-and-state-from-an-effect)\n\nAs a last resort (if these methods didn't help), wrap its creation with [`useMemo`](/reference/react/useMemo#memoizing-a-dependency-of-another-hook) or [`useCallback`](/reference/react/useCallback#preventing-an-effect-from-firing-too-often) (for functions).\n\n--\n\n### My Effect keeps re-running in an infinite cycle {/*my-effect-keeps-re-running-in-an-infinite-cycle*/}\n\nIf your Effect runs in an infinite cycle, these two things must be true:\n\nYour Effect is updating some state.\n\nThat state leads to a re-render, which causes the Effect's dependencies to change.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"355":{"pageContent":"If your Effect runs in an infinite cycle, these two things must be true:\n\nYour Effect is updating some state.\n\nThat state leads to a re-render, which causes the Effect's dependencies to change.\n\nBefore you start fixing the problem, ask yourself whether your Effect is connecting to some external system (like DOM, network, a third-party widget, and so on). Why does your Effect need to set state? Does it synchronize some state with that external system? Or are you trying to manage your application's data flow with it?\n\nIf there is no external system, consider whether [removing the Effect altogether](/learn/you-might-not-need-an-effect) would simplify your logic.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"356":{"pageContent":"If there is no external system, consider whether [removing the Effect altogether](/learn/you-might-not-need-an-effect) would simplify your logic.\n\nIf you're genuinely synchronizing with some external system, think about why and under what conditions your Effect should update the state. Has something changed that affects your component's visual output? If you need to keep track of some data that isn't used by rendering, a [ref](/reference/react/useRef#referencing-a-value-with-a-ref) (which doesn't trigger re-renders) might be more appropriate. Verify your Effect doesn't update the state (and trigger re-renders) more than needed.\n\nFinally, if your Effect is updating the state at the right time, but there is still a loop, it's because that state update leads to one of your Effect's dependencies changing. [Read how to debug and resolve dependency changes.](/reference/react/useEffect#my-effect-runs-after-every-re-render)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"357":{"pageContent":"--\n\n### My cleanup logic runs even though my component didn't unmount {/*my-cleanup-logic-runs-even-though-my-component-didnt-unmount*/}\n\nThe cleanup function runs not only during unmount, but before every re-render with changed dependencies. Additionally, in development, React [runs setup+cleanup one extra time immediately after component mounts.](#my-effect-runs-twice-when-the-component-mounts)\n\nIf you have cleanup code without corresponding setup code, it's usually a code smell:\n\n```js {2-5}\n\nuseEffect(() => {\n\n// 🔴 Avoid: Cleanup logic without corresponding setup logic\n\nreturn () => {\n\ndoSomething();\n\n};\n\n}, []);\n\n```\n\nYour cleanup logic should be \"symmetrical\" to the setup logic, and should stop or undo whatever setup did:\n\n```js {2-3,5}\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"358":{"pageContent":"```js {2-3,5}\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]);\n\n```\n\n[Learn how the Effect lifecycle is different from the component's lifecycle.](/learn/lifecycle-of-reactive-effects#the-lifecycle-of-an-effect)\n\n--\n\n### My Effect does something visual, and I see a flicker before it runs {/*my-effect-does-something-visual-and-i-see-a-flicker-before-it-runs*/}\n\nIf your Effect must block the browser from [painting the screen,](/learn/render-and-commit#epilogue-browser-paint) replace `useEffect` with [`useLayoutEffect`](/reference/react/useLayoutEffect). Note that **this shouldn't be needed for the vast majority of Effects.** You'll only need this if it's crucial to run your Effect before the browser paint: for example, to measure and position a tooltip before the user sees it for the first time.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffect.md"}},"359":{"pageContent":"--\n\ntitle: useMemo\n\n--\n\n<Intro>\n\n`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.\n\n```js\n\nconst cachedValue = useMemo(calculateValue, dependencies)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useMemo(calculateValue, dependencies)` {/*usememo*/}\n\nCall `useMemo` at the top level of your component to cache a calculation between re-renders:\n\n```js\n\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab }) {\n\nconst visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab]\n\n);\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"360":{"pageContent":"function TodoList({ todos, tab }) {\n\nconst visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab]\n\n);\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`calculateValue`: The function calculating the value that you want to cache. It should be pure, should take no arguments, and should return a value of any type. React will call your function during the initial render. On subsequent renders, React will return the same value again if the `dependencies` have not changed since the last render. Otherwise, it will call `calculateValue`, return its result, and store it in case it can be reused later.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"361":{"pageContent":"`dependencies`: The list of all reactive values referenced inside of the `calculateValue` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm.\n\n#### Returns {/*returns*/}\n\nOn the initial render, `useMemo` returns the result of calling `calculateValue` with no arguments.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"362":{"pageContent":"#### Returns {/*returns*/}\n\nOn the initial render, `useMemo` returns the result of calling `calculateValue` with no arguments.\n\nDuring subsequent renders, it will either return an already stored value from the last render (if the dependencies haven't changed), or call `calculateValue` again, and return the result that `calculateValue` has returned.\n\n#### Caveats {/*caveats*/}\n\n`useMemo` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\nIn Strict Mode, React will **call your calculation function twice** in order to [help you find accidental impurities.](#my-calculation-runs-twice-on-every-re-render) This is development-only behavior and does not affect production. If your calculation function is pure (as it should be), this should not affect the logic of your component. The result from one of the calls will be ignored.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"363":{"pageContent":"React **will not throw away the cached value unless there is a specific reason to do that.** For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache--for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should match your expectations if you rely on `useMemo` solely as a performance optimization. Otherwise, a [state variable](/reference/react/useState#avoiding-recreating-the-initial-state) or a [ref](/reference/react/useRef#avoiding-recreating-the-ref-contents) may be more appropriate.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"364":{"pageContent":"<Note>\n\nCaching return values like this is also known as [*memoization*,](https://en.wikipedia.org/wiki/Memoization) which is why this Hook is called `useMemo`.\n\n</Note>\n\n--\n\n## Usage {/*usage*/}\n\n### Skipping expensive recalculations {/*skipping-expensive-recalculations*/}\n\nTo cache a calculation between re-renders, wrap it in a `useMemo` call at the top level of your component:\n\n```js [[3, 4, \"visibleTodos\"], [1, 4, \"() => filterTodos(todos, tab)\"], [2, 4, \"[todos, tab]\"]]\n\nimport { useMemo } from 'react';\n\nfunction TodoList({ todos, tab, theme }) {\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n// ...\n\n}\n\n```\n\nYou need to pass two things to `useMemo`:\n\n1. A <CodeStep step={1}>calculation function</CodeStep> that takes no arguments, like `() =>`, and returns what you wanted to calculate.\n\n2. A <CodeStep step={2}>list of dependencies</CodeStep> including every value within your component that's used inside your calculation.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"365":{"pageContent":"2. A <CodeStep step={2}>list of dependencies</CodeStep> including every value within your component that's used inside your calculation.\n\nOn the initial render, the <CodeStep step={3}>value</CodeStep> you'll get from `useMemo` will be the result of calling your <CodeStep step={1}>calculation</CodeStep>.\n\nOn every subsequent render, React will compare the <CodeStep step={2}>dependencies</CodeStep> with the dependencies you passed during the last render. If none of the dependencies have changed (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), `useMemo` will return the value you already calculated before. Otherwise, React will re-run your calculation and return the new value.\n\nIn other words, `useMemo` caches a calculation result between re-renders until its dependencies change.\n\n*Let's walk through an example to see when this is useful.**","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"366":{"pageContent":"In other words, `useMemo` caches a calculation result between re-renders until its dependencies change.\n\n*Let's walk through an example to see when this is useful.**\n\nBy default, React will re-run the entire body of your component every time that it re-renders. For example, if this `TodoList` updates its state or receives new props from its parent, the `filterTodos` function will re-run:\n\n```js {2}\n\nfunction TodoList({ todos, tab, theme }) {\n\nconst visibleTodos = filterTodos(todos, tab);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"367":{"pageContent":"```js {2}\n\nfunction TodoList({ todos, tab, theme }) {\n\nconst visibleTodos = filterTodos(todos, tab);\n\n// ...\n\n}\n\n```\n\nUsually, this isn't a problem because most calculations are very fast. However, if you're filtering or transforming a large array, or doing some expensive computation, you might want to skip doing it again if data hasn't changed. If both `todos` and `tab` are the same as they were during the last render, wrapping the calculation in `useMemo` like earlier lets you reuse `visibleTodos` you've already calculated before. This type of caching is called *[memoization.](https://en.wikipedia.org/wiki/Memoization)*\n\n<Note>\n\n*You should only rely on `useMemo` as a performance optimization.** If your code doesn't work without it, find the underlying problem and fix it first. Then you may add `useMemo` to improve performance.\n\n</Note>\n\n<DeepDive>\n\n#### How to tell if a calculation is expensive? {/*how-to-tell-if-a-calculation-is-expensive*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"368":{"pageContent":"</Note>\n\n<DeepDive>\n\n#### How to tell if a calculation is expensive? {/*how-to-tell-if-a-calculation-is-expensive*/}\n\nIn general, unless you're creating or looping over thousands of objects, it's probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:\n\n```js {1,3}\n\nconsole.time('filter array');\n\nconst visibleTodos = filterTodos(todos, tab);\n\nconsole.timeEnd('filter array');\n\n```\n\nPerform the interaction you're measuring (for example, typing into the input). You will then see logs like `filter array: 0.15ms` in your console. If the overall logged time adds up to a significant amount (say, `1ms` or more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation in `useMemo` to verify whether the total logged time has decreased for that interaction or not:\n\n```js\n\nconsole.time('filter array');\n\nconst visibleTodos = useMemo(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"369":{"pageContent":"```js\n\nconsole.time('filter array');\n\nconst visibleTodos = useMemo(() => {\n\nreturn filterTodos(todos, tab); // Skipped if todos and tab haven't changed\n\n}, [todos, tab]);\n\nconsole.timeEnd('filter array');\n\n```\n\n`useMemo` won't make the *first* render faster. It only helps you skip unnecessary work on updates.\n\nKeep in mind that your machine is probably faster than your users' so it's a good idea to test the performance with an artificial slowdown. For example, Chrome offers a [CPU Throttling](https://developer.chrome.com/blog/new-in-devtools-61/#throttling) option for this.\n\nAlso note that measuring performance in development will not give you the most accurate results. (For example, when [Strict Mode](/reference/react/StrictMode) is on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have.\n\n</DeepDive>\n\n<DeepDive>\n\n#### Should you add useMemo everywhere? {/*should-you-add-usememo-everywhere*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"370":{"pageContent":"</DeepDive>\n\n<DeepDive>\n\n#### Should you add useMemo everywhere? {/*should-you-add-usememo-everywhere*/}\n\nIf your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful.\n\nOptimizing with `useMemo`  is only valuable in a few cases:\n\nThe calculation you're putting in `useMemo` is noticeably slow, and its dependencies rarely change.\n\nYou pass it as a prop to a component wrapped in [`memo`.](/reference/react/memo) You want to skip re-rendering if the value hasn't changed. Memoization lets your component re-render only when dependencies aren't the same.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"371":{"pageContent":"The value you're passing is later used as a dependency of some Hook. For example, maybe another `useMemo` calculation value depends on it. Or maybe you are depending on this value from [`useEffect.`](/reference/react/useEffect)\n\nThere is no benefit to wrapping a calculation in `useMemo` in other cases. There is no significant harm to doing that either, so some teams choose to not think about individual cases, and memoize as much as possible. The downside of this approach is that code becomes less readable. Also, not all memoization is effective: a single value that's \"always new\" is enough to break memoization for an entire component.\n\n*In practice, you can make a lot of memoization unnecessary by following a few principles:**\n\n1. When a component visually wraps other components, let it [accept JSX as children.](/learn/passing-props-to-a-component#passing-jsx-as-children) This way, when the wrapper component updates its own state, React knows that its children don't need to re-render.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"372":{"pageContent":"1. Prefer local state and don't [lift state up](/learn/sharing-state-between-components) any further than necessary. For example, don't keep transient state like forms and whether an item is hovered at the top of your tree or in a global state library.\n\n1. Keep your [rendering logic pure.](/learn/keeping-components-pure) If re-rendering a component causes a problem or produces some noticeable visual artifact, it's a bug in your component! Fix the bug instead of adding memoization.\n\n1. Avoid [unnecessary Effects that update state.](/learn/you-might-not-need-an-effect) Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.\n\n1. Try to [remove unnecessary dependencies from your Effects.](/learn/removing-effect-dependencies) For example, instead of memoization, it's often simpler to move some object or a function inside an Effect or outside the component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"373":{"pageContent":"If a specific interaction still feels laggy, [use the React Developer Tools profiler](/blog/2018/09/10/introducing-the-react-profiler.html) to see which components would benefit the most from memoization, and add memoization where needed. These principles make your components easier to debug and understand, so it's good to follow them in any case. In the long term, we're researching [doing granular memoization automatically](https://www.youtube.com/watch?v=lGEMwh32soc) to solve this once and for all.\n\n</DeepDive>\n\n<Recipes titleText=\"The difference between useMemo and calculating a value directly\" titleId=\"examples-recalculation\">\n\n#### Skipping recalculation with `useMemo` {/*skipping-recalculation-with-usememo*/}\n\nIn this example, the `filterTodos` implementation is **artificially slowed down** so that you can see what happens when some JavaScript function you're calling during rendering is genuinely slow. Try switching the tabs and toggling the theme.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"374":{"pageContent":"Switching the tabs feels slow because it forces the slowed down `filterTodos` to re-execute. That's expected because the `tab` has changed, and so the entire calculation *needs* to re-run. (If you're curious why it runs twice, it's explained [here.](#my-calculation-runs-twice-on-every-re-render))\n\nNext, try toggling the theme. **Thanks to `useMemo`, it's fast despite the artificial slowdown!** The slow `filterTodos` call was skipped because both `todos` and `tab` (which you pass as dependencies to `useMemo`) haven't changed since the last render.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { createTodos } from './utils.js';\n\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"375":{"pageContent":"return (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active\n\nimport { useMemo } from 'react';\n\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n\nconst visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab]\n\n);\n\nreturn (\n\n<div className={theme}>\n\n<p><b>Note: <code>filterTodos</code> is artificially slowed down!</b></p>\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ?\n\n<s>{todo.text}</s> :\n\ntodo.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"376":{"pageContent":"}\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nconsole.log('[ARTIFICIALLY SLOW] Filtering ' + todos.length + ' todos for \"' + tab + '\" tab.');\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 500) {\n\n// Do nothing for 500 ms to emulate extremely slow code\n\n}\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Always recalculating a value {/*always-recalculating-a-value*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"377":{"pageContent":"}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Always recalculating a value {/*always-recalculating-a-value*/}\n\nIn this example, the `filterTodos` implementation is also **artificially slowed down** so that you can see what happens when some JavaScript function you're calling during rendering is genuinely slow. Try switching the tabs and toggling the theme.\n\nUnlike in the previous example, toggling the theme is also slow now! This is because **there is no `useMemo` call in this version,** so the artificially slowed down `filterTodos` gets called on every re-render. It is called even if only `theme` has changed.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { createTodos } from './utils.js';\n\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"378":{"pageContent":"import TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active\n\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n\nconst visibleTodos = filterTodos(todos, tab);\n\nreturn (\n\n<div className={theme}>\n\n<ul>\n\n<p><b>Note: <code>filterTodos</code> is artificially slowed down!</b></p>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ?\n\n<s>{todo.text}</s> :\n\ntodo.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function createTodos() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"379":{"pageContent":"{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ?\n\n<s>{todo.text}</s> :\n\ntodo.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nconsole.log('[ARTIFICIALLY SLOW] Filtering ' + todos.length + ' todos for \"' + tab + '\" tab.');\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 500) {\n\n// Do nothing for 500 ms to emulate extremely slow code\n\n}\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"380":{"pageContent":"return todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nHowever, here is the same code **with the artificial slowdown removed.** Does the lack of `useMemo` feel noticeable or not?\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { createTodos } from './utils.js';\n\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"381":{"pageContent":"type=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active\n\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n\nconst visibleTodos = filterTodos(todos, tab);\n\nreturn (\n\n<div className={theme}>\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ?\n\n<s>{todo.text}</s> :\n\ntodo.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nconsole.log('Filtering ' + todos.length + ' todos for \"' + tab + '\" tab.');\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"382":{"pageContent":"if (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nQuite often, code without memoization works fine. If your interactions are fast enough, you might not need memoization.\n\nYou can try increasing the number of todo items in `utils.js` and see how the behavior changes. This particular calculation wasn't very expensive to begin with, but if the number of todos grows significantly, most of the overhead will be in re-rendering rather than in the filtering. Keep reading below to see how you can optimize re-rendering with `useMemo`.\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Skipping re-rendering of components {/*skipping-re-rendering-of-components*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"383":{"pageContent":"<Solution />\n\n</Recipes>\n\n--\n\n### Skipping re-rendering of components {/*skipping-re-rendering-of-components*/}\n\nIn some cases, `useMemo` can also help you optimize performance of re-rendering child components. To illustrate this, let's say this `TodoList` component passes the `visibleTodos` as a prop to the child `List` component:\n\n```js {5}\n\nexport default function TodoList({ todos, tab, theme }) {\n\n// ...\n\nreturn (\n\n<div className={theme}>\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\nYou've noticed that toggling the `theme` prop freezes the app for a moment, but if you remove `<List />` from your JSX, it feels fast. This tells you that it's worth trying to optimize the `List` component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"384":{"pageContent":"*By default, when a component re-renders, React re-renders all of its children recursively.** This is why, when `TodoList` re-renders with a different `theme`, the `List` component *also* re-renders. This is fine for components that don't require much calculation to re-render. But if you've verified that a re-render is slow, you can tell `List` to skip re-rendering when its props are the same as on last render by wrapping it in [`memo`:](/reference/react/memo)\n\n```js {3,5}\n\nimport { memo } from 'react';\n\nconst List = memo(function List({ items }) {\n\n// ...\n\n});\n\n```\n\n*With this change, `List` will skip re-rendering if all of its props are the *same* as on the last render.** This is where caching the calculation becomes important! Imagine that you calculated `visibleTodos` without `useMemo`:\n\n```js {2-3,6-7}\n\nexport default function TodoList({ todos, tab, theme }) {\n\n// Every time the theme changes, this will be a different array...\n\nconst visibleTodos = filterTodos(todos, tab);\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"385":{"pageContent":"```js {2-3,6-7}\n\nexport default function TodoList({ todos, tab, theme }) {\n\n// Every time the theme changes, this will be a different array...\n\nconst visibleTodos = filterTodos(todos, tab);\n\nreturn (\n\n<div className={theme}>\n\n{/* ... so List's props will never be the same, and it will re-render every time */}\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\n*In the above example, the `filterTodos` function always creates a *different* array,** similar to how the `{}` object literal always creates a new object. Normally, this wouldn't be a problem, but it means that `List` props will never be the same, and your [`memo`](/reference/react/memo) optimization won't work. This is where `useMemo` comes in handy:\n\n```js {2-3,5,9-10}\n\nexport default function TodoList({ todos, tab, theme }) {\n\n// Tell React to cache your calculation between re-renders...\n\nconst visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab] // ...so as long as these dependencies don't change...\n\n);\n\nreturn (\n\n<div className={theme}>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"386":{"pageContent":"const visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab] // ...so as long as these dependencies don't change...\n\n);\n\nreturn (\n\n<div className={theme}>\n\n{/* ...List will receive the same props and can skip re-rendering */}\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\n*By wrapping the `visibleTodos` calculation in `useMemo`, you ensure that it has the *same* value between the re-renders** (until dependencies change). You don't *have to* wrap a calculation in `useMemo` unless you do it for some specific reason. In this example, the reason is that you pass it to a component wrapped in [`memo`,](/reference/react/memo) and this lets it skip re-rendering. There are a few other reasons to add `useMemo` which are described further on this page.\n\n<DeepDive>\n\n#### Memoizing individual JSX nodes {/*memoizing-individual-jsx-nodes*/}\n\nInstead of wrapping `List` in [`memo`](/reference/react/memo), you could wrap the `<List />` JSX node itself in `useMemo`:\n\n```js {3,6}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"387":{"pageContent":"Instead of wrapping `List` in [`memo`](/reference/react/memo), you could wrap the `<List />` JSX node itself in `useMemo`:\n\n```js {3,6}\n\nexport default function TodoList({ todos, tab, theme }) {\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\nconst children = useMemo(() => <List items={visibleTodos} />, [visibleTodos]);\n\nreturn (\n\n<div className={theme}>\n\n{children}\n\n</div>\n\n);\n\n}\n\n```\n\nThe behavior would be the same. If the `visibleTodos` haven't changed, `List` won't be re-rendered.\n\nA JSX node like `<List items={visibleTodos} />` is an object like `{ type: List, props: { items: visibleTodos } }`. Creating this object is very cheap, but React doesn't know whether its contents is the same as last time or not. This is why by default, React will re-render the `List` component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"388":{"pageContent":"However, if React sees the same exact JSX as during the previous render, it won't try to re-render your component. This is because JSX nodes are [immutable.](https://en.wikipedia.org/wiki/Immutable_object) A JSX node object could not have changed over time, so React knows it's safe to skip a re-render. However, for this to work, the node has to *actually be the same object*, not merely look the same in code. This is what `useMemo` does in this example.\n\nManually wrapping JSX nodes into `useMemo` is not convenient. For example, you can't do this conditionally. This is usually why you would wrap components with [`memo`](/reference/react/memo) instead of wrapping JSX nodes.\n\n</DeepDive>\n\n<Recipes titleText=\"The difference between skipping re-renders and always re-rendering\" titleId=\"examples-rerendering\">\n\n#### Skipping re-rendering with `useMemo` and `memo` {/*skipping-re-rendering-with-usememo-and-memo*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"389":{"pageContent":"#### Skipping re-rendering with `useMemo` and `memo` {/*skipping-re-rendering-with-usememo-and-memo*/}\n\nIn this example, the `List` component is **artificially slowed down** so that you can see what happens when a React component you're rendering is genuinely slow. Try switching the tabs and toggling the theme.\n\nSwitching the tabs feels slow because it forces the slowed down `List` to re-render. That's expected because the `tab` has changed, and so you need to reflect the user's new choice on the screen.\n\nNext, try toggling the theme. **Thanks to `useMemo` together with [`memo`](/reference/react/memo), it’s fast despite the artificial slowdown!** The `List` skipped re-rendering because the `visibleItems` array has not changed since the last render. The `visibleItems` array has not changed because both `todos` and `tab` (which you pass as dependencies to `useMemo`) haven't changed since the last render.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"390":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { createTodos } from './utils.js';\n\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active\n\nimport { useMemo } from 'react';\n\nimport List from './List.js';\n\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n\nconst visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab]\n\n);\n\nreturn (\n\n<div className={theme}>\n\n<p><b>Note: <code>List</code> is artificially slowed down!</b></p>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"391":{"pageContent":"const visibleTodos = useMemo(\n\n() => filterTodos(todos, tab),\n\n[todos, tab]\n\n);\n\nreturn (\n\n<div className={theme}>\n\n<p><b>Note: <code>List</code> is artificially slowed down!</b></p>\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js List.js\n\nimport { memo } from 'react';\n\nconst List = memo(function List({ items }) {\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering <List /> with ' + items.length + ' items');\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 500) {\n\n// Do nothing for 500 ms to emulate extremely slow code\n\n}\n\nreturn (\n\n<ul>\n\n{items.map(item => (\n\n<li key={item.id}>\n\n{item.completed ?\n\n<s>{item.text}</s> :\n\nitem.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n});\n\nexport default List;\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"392":{"pageContent":"});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Always re-rendering a component {/*always-re-rendering-a-component*/}\n\nIn this example, the `List` implementation is also **artificially slowed down** so that you can see what happens when some React component you're rendering is genuinely slow. Try switching the tabs and toggling the theme.\n\nUnlike in the previous example, toggling the theme is also slow now! This is because **there is no `useMemo` call in this version,** so the `visibleTodos` is always a different array, and the slowed down `List` component can't skip re-rendering.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"393":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { createTodos } from './utils.js';\n\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active\n\nimport List from './List.js';\n\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n\nconst visibleTodos = filterTodos(todos, tab);\n\nreturn (\n\n<div className={theme}>\n\n<p><b>Note: <code>List</code> is artificially slowed down!</b></p>\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js List.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"394":{"pageContent":"const visibleTodos = filterTodos(todos, tab);\n\nreturn (\n\n<div className={theme}>\n\n<p><b>Note: <code>List</code> is artificially slowed down!</b></p>\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js List.js\n\nimport { memo } from 'react';\n\nconst List = memo(function List({ items }) {\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering <List /> with ' + items.length + ' items');\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 500) {\n\n// Do nothing for 500 ms to emulate extremely slow code\n\n}\n\nreturn (\n\n<ul>\n\n{items.map(item => (\n\n<li key={item.id}>\n\n{item.completed ?\n\n<s>{item.text}</s> :\n\nitem.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n});\n\nexport default List;\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"395":{"pageContent":"}\n\nexport function filterTodos(todos, tab) {\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nHowever, here is the same code **with the artificial slowdown removed.** Does the lack of `useMemo` feel noticeable or not?\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { createTodos } from './utils.js';\n\nimport TodoList from './TodoList.js';\n\nconst todos = createTodos();\n\nexport default function App() {\n\nconst [tab, setTab] = useState('all');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setTab('all')}>\n\nAll\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"396":{"pageContent":"All\n\n</button>\n\n<button onClick={() => setTab('active')}>\n\nActive\n\n</button>\n\n<button onClick={() => setTab('completed')}>\n\nCompleted\n\n</button>\n\n<br />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<TodoList\n\ntodos={todos}\n\ntab={tab}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js TodoList.js active\n\nimport List from './List.js';\n\nimport { filterTodos } from './utils.js'\n\nexport default function TodoList({ todos, theme, tab }) {\n\nconst visibleTodos = filterTodos(todos, tab);\n\nreturn (\n\n<div className={theme}>\n\n<List items={visibleTodos} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js List.js\n\nimport { memo } from 'react';\n\nfunction List({ items }) {\n\nreturn (\n\n<ul>\n\n{items.map(item => (\n\n<li key={item.id}>\n\n{item.completed ?\n\n<s>{item.text}</s> :\n\nitem.text\n\n}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nexport default memo(List);\n\n```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"397":{"pageContent":"```\n\n```js utils.js\n\nexport function createTodos() {\n\nconst todos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ntodos.push({\n\nid: i,\n\ntext: \"Todo \" + (i + 1),\n\ncompleted: Math.random() > 0.5\n\n});\n\n}\n\nreturn todos;\n\n}\n\nexport function filterTodos(todos, tab) {\n\nreturn todos.filter(todo => {\n\nif (tab === 'all') {\n\nreturn true;\n\n} else if (tab === 'active') {\n\nreturn !todo.completed;\n\n} else if (tab === 'completed') {\n\nreturn todo.completed;\n\n}\n\n});\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 10px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nQuite often, code without memoization works fine. If your interactions are fast enough, you don't need memoization.\n\nKeep in mind that you need to run React in production mode, disable [React Developer Tools](/learn/react-developer-tools), and use devices similar to the ones your app's users have in order to get a realistic sense of what's actually slowing down your app.\n\n<Solution />\n\n</Recipes>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"398":{"pageContent":"<Solution />\n\n</Recipes>\n\n--\n\n### Memoizing a dependency of another Hook {/*memoizing-a-dependency-of-another-hook*/}\n\nSuppose you have a calculation that depends on an object created directly in the component body:\n\n```js {2}\n\nfunction Dropdown({ allItems, text }) {\n\nconst searchOptions = { matchMode: 'whole-word', text };\n\nconst visibleItems = useMemo(() => {\n\nreturn searchItems(allItems, searchOptions);\n\n}, [allItems, searchOptions]); // 🚩 Caution: Dependency on an object created in the component body\n\n// ...\n\n```\n\nDepending on an object like this defeats the point of memoization. When a component re-renders, all of the code directly inside the component body runs again. **The lines of code creating the `searchOptions` object will also run on every re-render.** Since `searchOptions` is a dependency of your `useMemo` call, and it's different every time, React will know the dependencies are different from the last time, and recalculate `searchItems` every time.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"399":{"pageContent":"To fix this, you could memoize the `searchOptions` object *itself* before passing it as a dependency:\n\n```js {2-4}\n\nfunction Dropdown({ allItems, text }) {\n\nconst searchOptions = useMemo(() => {\n\nreturn { matchMode: 'whole-word', text };\n\n}, [text]); // ✅ Only changes when text changes\n\nconst visibleItems = useMemo(() => {\n\nreturn searchItems(allItems, searchOptions);\n\n}, [allItems, searchOptions]); // ✅ Only changes when allItems or searchOptions changes\n\n// ...\n\n```\n\nIn the example above, if the `text` did not change, the `searchOptions` object also won't change. However, an even better fix is to move the `searchOptions` object declaration *inside* of the `useMemo` calculation function:\n\n```js {3}\n\nfunction Dropdown({ allItems, text }) {\n\nconst visibleItems = useMemo(() => {\n\nconst searchOptions = { matchMode: 'whole-word', text };\n\nreturn searchItems(allItems, searchOptions);\n\n}, [allItems, text]); // ✅ Only changes when allItems or text changes\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"400":{"pageContent":"const searchOptions = { matchMode: 'whole-word', text };\n\nreturn searchItems(allItems, searchOptions);\n\n}, [allItems, text]); // ✅ Only changes when allItems or text changes\n\n// ...\n\n```\n\n*Now your calculation depends on `text` directly (which is a string and can't \"accidentally\" be new like an object).**\n\nYou can use a similar approach to prevent [`useEffect`](/reference/react/useEffect) from firing again unnecessarily. Before you try to optimize dependencies with `useMemo`, see if you can make them unnecessary. [Read about removing Effect dependencies.](/learn/removing-effect-dependencies)\n\n--\n\n### Memoizing a function {/*memoizing-a-function*/}\n\nSuppose the `Form` component is wrapped in [`memo`.](/reference/react/memo) You want to pass a function to it as a prop:\n\n```js {2-7}\n\nexport default function ProductPage({ productId, referrer }) {\n\nfunction handleSubmit(orderDetails) {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails\n\n});\n\n}\n\nreturn <Form onSubmit={handleSubmit} />;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"401":{"pageContent":"function handleSubmit(orderDetails) {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails\n\n});\n\n}\n\nreturn <Form onSubmit={handleSubmit} />;\n\n}\n\n```\n\nSimilar to how `{}` always creates a different object, function declarations like `function() {}` and expressions like `() => {}` produce a *different* function on every re-render. By itself, creating a new function is not a problem. This is not something to avoid! However, if the `Form` component is memoized, presumably you want to skip re-rendering it when no props have changed. A prop that is *always* different would defeat the point of memoization.\n\nTo memoize a function with `useMemo`, your calculation function would have to return another function:\n\n```js {2-3,8-9}\n\nexport default function Page({ productId, referrer }) {\n\nconst handleSubmit = useMemo(() => {\n\nreturn (orderDetails) => {\n\npost('/product/' + product.id + '/buy', {\n\nreferrer,\n\norderDetails\n\n});\n\n};\n\n}, [productId, referrer]);\n\nreturn <Form onSubmit={handleSubmit} />;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"402":{"pageContent":"const handleSubmit = useMemo(() => {\n\nreturn (orderDetails) => {\n\npost('/product/' + product.id + '/buy', {\n\nreferrer,\n\norderDetails\n\n});\n\n};\n\n}, [productId, referrer]);\n\nreturn <Form onSubmit={handleSubmit} />;\n\n}\n\n```\n\nThis looks clunky! **Memoizing functions is common enough that React has a built-in Hook specifically for that. Wrap your functions into [`useCallback`](/reference/react/useCallback) instead of `useMemo`** to avoid having to write an extra nested function:\n\n```js {2,7}\n\nexport default function Page({ productId, referrer }) {\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + product.id + '/buy', {\n\nreferrer,\n\norderDetails\n\n});\n\n}, [productId, referrer]);\n\nreturn <Form onSubmit={handleSubmit} />;\n\n}\n\n```\n\nThe two examples above are completely equivalent. The only benefit to `useCallback` is that it lets you avoid writing an extra nested function inside. It doesn't do anything else. [Read more about `useCallback`.](/reference/react/useCallback)\n\n--\n\n## Troubleshooting {/*troubleshooting*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"403":{"pageContent":"--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My calculation runs twice on every re-render {/*my-calculation-runs-twice-on-every-re-render*/}\n\nIn [Strict Mode](/reference/react/StrictMode), React will call some of your functions twice instead of once:\n\n```js {2,5,6}\n\nfunction TodoList({ todos, tab }) {\n\n// This component function will run twice for every render.\n\nconst visibleTodos = useMemo(() => {\n\n// This calculation will run twice if any of the dependencies change.\n\nreturn filterTodos(todos, tab);\n\n}, [todos, tab]);\n\n// ...\n\n```\n\nThis is expected and shouldn't break your code.\n\nThis **development-only** behavior helps you [keep components pure.](/learn/keeping-components-pure) React uses the result of one of the calls, and ignores the result of the other call. As long as your component and calculation functions are pure, this shouldn't affect your logic. However, if they are accidentally impure, this helps you notice the mistakes and fix it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"404":{"pageContent":"For example, this impure calculation function mutates an array you received as a prop:\n\n```js {2-3}\n\nconst visibleTodos = useMemo(() => {\n\n// 🚩 Mistake: mutating a prop\n\ntodos.push({ id: 'last', text: 'Go for a walk!' });\n\nconst filtered = filterTodos(todos, tab);\n\nreturn filtered;\n\n}, [todos, tab]);\n\n```\n\nBecause React calls your calculation twice, you'll see the todo was added twice, so you'll know that there is a mistake. Your calculation can't change the objects that it received, but it can change any *new* objects you created during the calculation. For example, if `filterTodos` always returns a *different* array, you can mutate *that* array:\n\n```js {3,4}\n\nconst visibleTodos = useMemo(() => {\n\nconst filtered = filterTodos(todos, tab);\n\n// ✅ Correct: mutating an object you created during the calculation\n\nfiltered.push({ id: 'last', text: 'Go for a walk!' });\n\nreturn filtered;\n\n}, [todos, tab]);\n\n```\n\nRead [keeping components pure](/learn/keeping-components-pure) to learn more about purity.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"405":{"pageContent":"filtered.push({ id: 'last', text: 'Go for a walk!' });\n\nreturn filtered;\n\n}, [todos, tab]);\n\n```\n\nRead [keeping components pure](/learn/keeping-components-pure) to learn more about purity.\n\nAlso, check out the guides on [updating objects](/learn/updating-objects-in-state) and [updating arrays](/learn/updating-arrays-in-state) without mutation.\n\n--\n\n### My `useMemo` call is supposed to return an object, but returns undefined {/*my-usememo-call-is-supposed-to-return-an-object-but-returns-undefined*/}\n\nThis code doesn't work:\n\n```js {1-2,5}\n\n// 🔴 You can't return an object from an arrow function with () => {\n\nconst searchOptions = useMemo(() => {\n\nmatchMode: 'whole-word',\n\ntext: text\n\n}, [text]);\n\n```\n\nIn JavaScript, `() => {` starts the arrow function body, so the `{` brace is not a part of your object. This is why it doesn't return an object, and leads to confusing mistakes. You could fix it by adding parentheses like `({` and `})`:\n\n```js {1-2,5}\n\n// This works, but is easy for someone to break again","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"406":{"pageContent":"```js {1-2,5}\n\n// This works, but is easy for someone to break again\n\nconst searchOptions = useMemo(() => ({\n\nmatchMode: 'whole-word',\n\ntext: text\n\n}), [text]);\n\n```\n\nHowever, this is still confusing and too easy for someone to break by removing the parentheses.\n\nTo avoid this mistake, write a `return` statement explicitly:\n\n```js {1-3,6-7}\n\n// ✅ This works and is explicit\n\nconst searchOptions = useMemo(() => {\n\nreturn {\n\nmatchMode: 'whole-word',\n\ntext: text\n\n};\n\n}, [text]);\n\n```\n\n--\n\n### Every time my component renders, the calculation in `useMemo` re-runs {/*every-time-my-component-renders-the-calculation-in-usememo-re-runs*/}\n\nMake sure you've specified the dependency array as a second argument!\n\nIf you forget the dependency array, `useMemo` will re-run the calculation every time:\n\n```js {2-3}\n\nfunction TodoList({ todos, tab }) {\n\n// 🔴 Recalculates every time: no dependency array\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab));\n\n// ...\n\n```\n\nThis is the corrected version passing the dependency array as a second argument:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"407":{"pageContent":"// 🔴 Recalculates every time: no dependency array\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab));\n\n// ...\n\n```\n\nThis is the corrected version passing the dependency array as a second argument:\n\n```js {2-3}\n\nfunction TodoList({ todos, tab }) {\n\n// ✅ Does not recalculate unnecessarily\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n// ...\n\n```\n\nIf this doesn't help, then the problem is that at least one of your dependencies is different from the previous render. You can debug this problem by manually logging your dependencies to the console:\n\n```js\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\nconsole.log([todos, tab]);\n\n```\n\nYou can then right-click on the arrays from different re-renders in the console and select \"Store as a global variable\" for both of them. Assuming the first one got saved as `temp1` and the second one got saved as `temp2`, you can then use the browser console to check whether each dependency in both arrays is the same:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"408":{"pageContent":"```js\n\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\n\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\n\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n\n```\n\nWhen you find which dependency is breaking memoization, either find a way to remove it, or [memoize it as well.](#memoizing-a-dependency-of-another-hook)\n\n--\n\n### I need to call `useMemo` for each list item in a loop, but it's not allowed {/*i-need-to-call-usememo-for-each-list-item-in-a-loop-but-its-not-allowed*/}\n\nSuppose the `Chart` component is wrapped in [`memo`](/reference/react/memo). You want to skip re-rendering every `Chart` in the list when the `ReportList` component re-renders. However, you can't call `useMemo` in a loop:\n\n```js {5-11}\n\nfunction ReportList({ items }) {\n\nreturn (\n\n<article>\n\n{items.map(item => {\n\n// 🔴 You can't call useMemo in a loop like this:\n\nconst data = useMemo(() => calculateReport(item), [item]);\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"409":{"pageContent":"```js {5-11}\n\nfunction ReportList({ items }) {\n\nreturn (\n\n<article>\n\n{items.map(item => {\n\n// 🔴 You can't call useMemo in a loop like this:\n\nconst data = useMemo(() => calculateReport(item), [item]);\n\nreturn (\n\n<figure key={item.id}>\n\n<Chart data={data} />\n\n</figure>\n\n);\n\n})}\n\n</article>\n\n);\n\n}\n\n```\n\nInstead, extract a component for each item and memoize data for individual items:\n\n```js {5,12-18}\n\nfunction ReportList({ items }) {\n\nreturn (\n\n<article>\n\n{items.map(item =>\n\n<Report key={item.id} item={item} />\n\n)}\n\n</article>\n\n);\n\n}\n\nfunction Report({ item }) {\n\n// ✅ Call useMemo at the top level:\n\nconst data = useMemo(() => calculateReport(item), [item]);\n\nreturn (\n\n<figure>\n\n<Chart data={data} />\n\n</figure>\n\n);\n\n}\n\n```\n\nAlternatively, you could remove `useMemo` and instead wrap `Report` itself in [`memo`.](/reference/react/memo) If the `item` prop does not change, `Report` will skip re-rendering, so `Chart` will skip re-rendering too:\n\n```js {5,6,12}\n\nfunction ReportList({ items }) {\n\n// ...\n\n}\n\nconst Report = memo(function Report({ item }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"410":{"pageContent":"```js {5,6,12}\n\nfunction ReportList({ items }) {\n\n// ...\n\n}\n\nconst Report = memo(function Report({ item }) {\n\nconst data = calculateReport(item);\n\nreturn (\n\n<figure>\n\n<Chart data={data} />\n\n</figure>\n\n);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useMemo.md"}},"411":{"pageContent":"--\n\ntitle: isValidElement\n\n--\n\n<Intro>\n\n`isValidElement` checks whether a value is a React element.\n\n```js\n\nconst isElement = isValidElement(value)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `isValidElement(value)` {/*isvalidelement*/}\n\nCall `isValidElement(value)` to check whether `value` is a React element.\n\n```js\n\nimport { isValidElement, createElement } from 'react';\n\n// ✅ React elements\n\nconsole.log(isValidElement(<p />)); // true\n\nconsole.log(isValidElement(createElement('p'))); // true\n\n// ❌ Not React elements\n\nconsole.log(isValidElement(25)); // false\n\nconsole.log(isValidElement('Hello')); // false\n\nconsole.log(isValidElement({ age: 42 })); // false\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`value`: The `value` you want to check. It can be any a value of any type.\n\n#### Returns {/*returns*/}\n\n`isValidElement` returns `true` if the `value` is a React element. Otherwise, it returns `false`.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/isValidElement.md"}},"412":{"pageContent":"#### Returns {/*returns*/}\n\n`isValidElement` returns `true` if the `value` is a React element. Otherwise, it returns `false`.\n\n#### Caveats {/*caveats*/}\n\n**Only [JSX tags](/learn/writing-markup-with-jsx) and objects returned by [`createElement`](/reference/react/createElement) are considered to be React elements.** For example, even though a number like `42` is a valid React *node* (and can be returned from a component), it is not a valid React element. Arrays and portals created with [`createPortal`](/reference/react-dom/createPortal) are also *not* considered to be React elements.\n\n--\n\n## Usage {/*usage*/}\n\n### Checking if something is a React element {/*checking-if-something-is-a-react-element*/}\n\nCall `isValidElement` to check if some value is a *React element.*\n\nReact elements are:\n\nValues produced by writing a [JSX tag](/learn/writing-markup-with-jsx)\n\nValues produced by calling [`createElement`](/reference/react/createElement)\n\nFor React elements, `isValidElement` returns `true`:\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/isValidElement.md"}},"413":{"pageContent":"Values produced by calling [`createElement`](/reference/react/createElement)\n\nFor React elements, `isValidElement` returns `true`:\n\n```js\n\nimport { isValidElement, createElement } from 'react';\n\n// ✅ JSX tags are React elements\n\nconsole.log(isValidElement(<p />)); // true\n\nconsole.log(isValidElement(<MyComponent />)); // true\n\n// ✅ Values returned by createElement are React elements\n\nconsole.log(isValidElement(createElement('p'))); // true\n\nconsole.log(isValidElement(createElement(MyComponent))); // true\n\n```\n\nAny other values, such as strings, numbers, or arbitrary objects and arrays, are not React elements.\n\nFor them, `isValidElement` returns `false`:\n\n```js\n\n// ❌ These are *not* React elements\n\nconsole.log(isValidElement(null)); // false\n\nconsole.log(isValidElement(25)); // false\n\nconsole.log(isValidElement('Hello')); // false\n\nconsole.log(isValidElement({ age: 42 })); // false\n\nconsole.log(isValidElement([<div />, <div />])); // false\n\nconsole.log(isValidElement(MyComponent)); // false\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/isValidElement.md"}},"414":{"pageContent":"console.log(isValidElement({ age: 42 })); // false\n\nconsole.log(isValidElement([<div />, <div />])); // false\n\nconsole.log(isValidElement(MyComponent)); // false\n\n```\n\nIt is very uncommon to need `isValidElement`. It's mostly useful if you're calling another API that *only* accepts elements (like [`cloneElement`](/reference/react/cloneElement) does) and you want to avoid an error when your argument is not a React element.\n\nUnless you have some very specific reason to add an `isValidElement` check, you probably don't need it.\n\n<DeepDive>\n\n#### React elements vs React nodes {/*react-elements-vs-react-nodes*/}\n\nWhen you write a component, you can return any kind of *React node* from it:\n\n```js\n\nfunction MyComponent() {\n\n// ... you can return any React node ...\n\n}\n\n```\n\nA React node can be:\n\nA React element created like `<div />` or `createElement('div')`\n\nA portal created with [`createPortal`](/reference/react-dom/createPortal)\n\nA string\n\nA number\n\n`true`, `false`, `null`, or `undefined` (which are not displayed)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/isValidElement.md"}},"415":{"pageContent":"A portal created with [`createPortal`](/reference/react-dom/createPortal)\n\nA string\n\nA number\n\n`true`, `false`, `null`, or `undefined` (which are not displayed)\n\nAn array of other React nodes\n\n*Note `isValidElement` checks whether the argument is a *React element,* not whether it's a React node.** For example, `42` is not a valid React element. However, it is a perfectly valid React node:\n\n```js\n\nfunction MyComponent() {\n\nreturn 42; // It's ok to return a number from component\n\n}\n\n```\n\nThis is why you shouldn't use `isValidElement` as a way to check whether something can be rendered.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/isValidElement.md"}},"416":{"pageContent":"--\n\ntitle: createRef\n\n--\n\n<Pitfall>\n\n`createRef` is mostly used for [class components.](/reference/react/Component) Function components typically rely on [`useRef`](/reference/react/useRef) instead.\n\n</Pitfall>\n\n<Intro>\n\n`createRef` creates a [ref](/learn/referencing-values-with-refs) object which can contain arbitrary value.\n\n```js\n\nclass MyInput extends Component {\n\ninputRef = createRef();\n\n// ...\n\n}\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `createRef()` {/*createref*/}\n\nCall `createRef` to declare a [ref](/learn/referencing-values-with-refs) inside a [class component.](/reference/react/Component)\n\n```js\n\nimport { createRef, Component } from 'react';\n\nclass MyComponent extends Component {\n\nintervalRef = createRef();\n\ninputRef = createRef();\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`createRef` takes no parameters.\n\n#### Returns {/*returns*/}\n\n`createRef` returns an object with a single property:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createRef.md"}},"417":{"pageContent":"// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`createRef` takes no parameters.\n\n#### Returns {/*returns*/}\n\n`createRef` returns an object with a single property:\n\n`current`: Initially, it's set to the `null`. You can later set it to something else. If you pass the ref object to React as a `ref` attribute to a JSX node, React will set its `current` property.\n\n#### Caveats {/*caveats*/}\n\n`createRef` always returns a *different* object. It's equivalent to writing `{ current: null }` yourself.\n\nIn a function component, you probably want [`useRef`](/reference/react/useRef) instead which always returns the same object.\n\n`const ref = useRef()` is equivalent to `const [ref, _] = useState(() => createRef(null))`.\n\n--\n\n## Usage {/*usage*/}\n\n### Declaring a ref in a class component {/*declaring-a-ref-in-a-class-component*/}\n\nTo declare a ref inside a [class component,](/reference/react/Component) call `createRef` and assign its result to a class field:\n\n```js {4}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createRef.md"}},"418":{"pageContent":"To declare a ref inside a [class component,](/reference/react/Component) call `createRef` and assign its result to a class field:\n\n```js {4}\n\nimport { Component, createRef } from 'react';\n\nclass Form extends Component {\n\ninputRef = createRef();\n\n// ...\n\n}\n\n```\n\nIf you now pass `ref={this.inputRef}` to an `<input>` in your JSX, React will populate `this.inputRef.current` with the input DOM node. For example, here is how you make a button that focuses the input:\n\n<Sandpack>\n\n```js\n\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n\ninputRef = createRef();\n\nhandleClick = () => {\n\nthis.inputRef.current.focus();\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<input ref={this.inputRef} />\n\n<button onClick={this.handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\n`createRef` is mostly used for [class components.](/reference/react/Component) Function components typically rely on [`useRef`](/reference/react/useRef) instead.\n\n</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createRef.md"}},"419":{"pageContent":"</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Migrating from a class with `createRef` to a function with `useRef` {/*migrating-from-a-class-with-createref-to-a-function-with-useref*/}\n\nWe recommend to use function components instead of [class components](/reference/react/Component) in the new code. If you have some existing class components using `createRef`, here is how you can convert them. This is the original code:\n\n<Sandpack>\n\n```js\n\nimport { Component, createRef } from 'react';\n\nexport default class Form extends Component {\n\ninputRef = createRef();\n\nhandleClick = () => {\n\nthis.inputRef.current.focus();\n\n}\n\nrender() {\n\nreturn (\n\n<>\n\n<input ref={this.inputRef} />\n\n<button onClick={this.handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nWhen you [convert this component from a class to a function,](/reference/react/Component#alternatives) replace calls to `createRef` with calls to [`useRef`:](/reference/react/useRef)\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createRef.md"}},"420":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<input ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createRef.md"}},"421":{"pageContent":"--\n\ntitle: \"Built-in React Hooks\"\n\n--\n\n<Intro>\n\nHooks* let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all the built-in Hooks in React.\n\n</Intro>\n\n--\n\n## State Hooks {/*state-hooks*/}\n\nState* lets a component [\"remember\" information like user input.](/learn/state-a-components-memory) For example, a form component can use state to store the input value, while an image gallery component can use state to store the selected image index.\n\nTo add state to a component, use one of these Hooks:\n\n[`useState`](/reference/react/useState) declares a state variable that you can update directly.\n\n[`useReducer`](/reference/react/useReducer) declares a state variable with the update logic inside a [reducer function.](/learn/extracting-state-logic-into-a-reducer)\n\n```js\n\nfunction ImageGallery() {\n\nconst [index, setIndex] = useState(0);\n\n// ...\n\n```\n\n--\n\n## Context Hooks {/*context-hooks*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"422":{"pageContent":"```js\n\nfunction ImageGallery() {\n\nconst [index, setIndex] = useState(0);\n\n// ...\n\n```\n\n--\n\n## Context Hooks {/*context-hooks*/}\n\nContext* lets a component [receive information from distant parents without passing it as props.](/learn/passing-props-to-a-component) For example, your app's top-level component can pass the current UI theme to all components below, no matter how deep.\n\n[`useContext`](/reference/react/useContext) reads and subscribes to a context.\n\n```js\n\nfunction Button() {\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n```\n\n--\n\n## Ref Hooks {/*ref-hooks*/}\n\nRefs* let a component [hold some information that isn't used for rendering,](/learn/referencing-values-with-refs) like a DOM node or a timeout ID. Unlike with state, updating a ref does not re-render your component. Refs are an \"escape hatch\" from the React paradigm. They are useful when you need to work with non-React systems, such as the built-in browser APIs.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"423":{"pageContent":"[`useRef`](/reference/react/useRef) declares a ref. You can hold any value in it, but most often it's used to hold a DOM node.\n\n[`useImperativeHandle`](/reference/react/useImperativeHandle) lets you customize the ref exposed by your component. This is rarely used.\n\n```js\n\nfunction Form() {\n\nconst inputRef = useRef(null);\n\n// ...\n\n```\n\n--\n\n## Effect Hooks {/*effect-hooks*/}\n\nEffects* let a component [connect to and synchronize with external systems.](/learn/synchronizing-with-effects) This includes dealing with network, browser DOM, animations, widgets written using a different UI library, and in general any non-React code.\n\n[`useEffect`](/reference/react/useEffect) connects a component to an external system.\n\n```js\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"424":{"pageContent":"```js\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\n// ...\n\n```\n\nEffects are an \"escape hatch\" from the React paradigm. Don't use Effects to orchestrate the data flow of your application. If you're not interacting with an external system, [you might not need an Effect.](/learn/you-might-not-need-an-effect)\n\nThere are two rarely used variations of `useEffect` with differences in timing:\n\n[`useLayoutEffect`](/reference/react/useLayoutEffect) fires before the browser repaints the screen. You can measure layout here.\n\n[`useInsertionEffect`](/reference/react/useInsertionEffect) fires before React makes changes to the DOM. Libraries can insert dynamic CSS here.\n\n--\n\n## Performance Hooks {/*performance-hooks*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"425":{"pageContent":"[`useInsertionEffect`](/reference/react/useInsertionEffect) fires before React makes changes to the DOM. Libraries can insert dynamic CSS here.\n\n--\n\n## Performance Hooks {/*performance-hooks*/}\n\nA common way to optimize re-rendering performance is to skip unnecessary work. For example, you can tell React to reuse a cached calculation or to skip a re-render if the data has not changed since the previous render.\n\nTo skip calculations and unnecessary re-rendering, use one of these Hooks:\n\n[`useMemo`](/reference/react/useMemo) lets you cache the result of an expensive calculation.\n\n[`useCallback`](/reference/react/useCallback) lets you cache a function definition before passing it down to an optimized component.\n\n```js\n\nfunction TodoList({ todos, tab, theme }) {\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"426":{"pageContent":"```js\n\nfunction TodoList({ todos, tab, theme }) {\n\nconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n// ...\n\n}\n\n```\n\nSometimes, you can't skip re-rendering because the screen actually needs to update. In that case, you can improve performance by separating blocking updates that must be synchronous (like typing into an input) from non-blocking updates which don't need to block the user interface (like updating a chart).\n\nTo prioritize rendering, use one of these Hooks:\n\n[`useTransition`](/reference/react/useTransition) lets you mark a state transition as non-blocking and allow other updates to interrupt it.\n\n[`useDeferredValue`](/reference/react/useDeferredValue) lets you defer updating a non-critical part of the UI and let other parts update first.\n\n--\n\n## Other Hooks {/*other-hooks*/}\n\nThese Hooks are mostly useful to library authors and aren't commonly used in the application code.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"427":{"pageContent":"--\n\n## Other Hooks {/*other-hooks*/}\n\nThese Hooks are mostly useful to library authors and aren't commonly used in the application code.\n\n[`useDebugValue`](/reference/react/useDebugValue) lets you customize the label React DevTools displays for your custom Hook.\n\n[`useId`](/reference/react/useId) lets a component associate a unique ID with itself. Typically used with accessibility APIs.\n\n[`useSyncExternalStore`](/reference/react/useSyncExternalStore) lets a component subscribe to an external store.\n\n--\n\n## Your own Hooks {/*your-own-hooks*/}\n\nYou can also [define your own custom Hooks](/learn/reusing-logic-with-custom-hooks#extracting-your-own-custom-hook-from-a-component) as JavaScript functions.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/index.md"}},"428":{"pageContent":"--\n\ntitle: Responding to Events\n\n--\n\n<Intro>\n\nReact lets you add *event handlers* to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.\n\n</Intro>\n\n<YouWillLearn>\n\nDifferent ways to write an event handler\n\nHow to pass event handling logic from a parent component\n\nHow events propagate and how to stop them\n\n</YouWillLearn>\n\n## Adding event handlers {/*adding-event-handlers*/}\n\nTo add an event handler, you will first define a function and then [pass it as a prop](/learn/passing-props-to-a-component) to the appropriate JSX tag. For example, here is a button that doesn't do anything yet:\n\n<Sandpack>\n\n```js\n\nexport default function Button() {\n\nreturn (\n\n<button>\n\nI don't do anything\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nYou can make it show a message when a user clicks by following these three steps:\n\n1. Declare a function called `handleClick` *inside* your `Button` component.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"429":{"pageContent":"</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nYou can make it show a message when a user clicks by following these three steps:\n\n1. Declare a function called `handleClick` *inside* your `Button` component.\n\n2. Implement the logic inside that function (use `alert` to show the message).\n\n3. Add `onClick={handleClick}` to the `<button>` JSX.\n\n<Sandpack>\n\n```js\n\nexport default function Button() {\n\nfunction handleClick() {\n\nalert('You clicked me!');\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClick me\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px; }\n\n```\n\n</Sandpack>\n\nYou defined the `handleClick` function and then [passed it as a prop](/learn/passing-props-to-a-component) to `<button>`.  `handleClick` is an **event handler.** Event handler functions:\n\nAre usually defined *inside* your components.\n\nHave names that start with `handle`, followed by the name of the event.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"430":{"pageContent":"Are usually defined *inside* your components.\n\nHave names that start with `handle`, followed by the name of the event.\n\nBy convention, it is common to name event handlers as `handle` followed by the event name. You'll often see `onClick={handleClick}`, `onMouseEnter={handleMouseEnter}`, and so on.\n\nAlternatively, you can define an event handler inline in the JSX:\n\n```jsx\n\n<button onClick={function handleClick() {\n\nalert('You clicked me!');\n\n}}>\n\n```\n\nOr, more concisely, using an arrow function:\n\n```jsx\n\n<button onClick={() => {\n\nalert('You clicked me!');\n\n}}>\n\n```\n\nAll of these styles are equivalent. Inline event handlers are convenient for short functions.\n\n<Pitfall>\n\nFunctions passed to event handlers must be passed, not called. For example:\n\n| passing a function (correct)     | calling a function (incorrect)     |\n\n| -------------------------------- | ---------------------------------- |\n\n| `<button onClick={handleClick}>` | `<button onClick={handleClick()}>` |","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"431":{"pageContent":"| -------------------------------- | ---------------------------------- |\n\n| `<button onClick={handleClick}>` | `<button onClick={handleClick()}>` |\n\nThe difference is subtle. In the first example, the `handleClick` function is passed as an `onClick` event handler. This tells React to remember it and only call your function when the user clicks the button.\n\nIn the second example, the `()` at the end of `handleClick()` fires the function *immediately* during [rendering](/learn/render-and-commit), without any clicks. This is because JavaScript inside the [JSX `{` and `}`](/learn/javascript-in-jsx-with-curly-braces) executes right away.\n\nWhen you write code inline, the same pitfall presents itself in a different way:\n\n| passing a function (correct)            | calling a function (incorrect)    |\n\n| --------------------------------------- | --------------------------------- |\n\n| `<button onClick={() => alert('...')}>` | `<button onClick={alert('...')}>` |","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"432":{"pageContent":"| --------------------------------------- | --------------------------------- |\n\n| `<button onClick={() => alert('...')}>` | `<button onClick={alert('...')}>` |\n\nPassing inline code like this won't fire on click—it fires every time the component renders:\n\n```jsx\n\n// This alert fires when the component renders, not when clicked!\n\n<button onClick={alert('You clicked me!')}>\n\n```\n\nIf you want to define your event handler inline, wrap it in an anonymous function like so:\n\n```jsx\n\n<button onClick={() => alert('You clicked me!')}>\n\n```\n\nRather than executing the code inside with every render, this creates a function to be called later.\n\nIn both cases, what you want to pass is a function:\n\n`<button onClick={handleClick}>` passes the `handleClick` function.\n\n`<button onClick={() => alert('...')}>` passes the `() => alert('...')` function.\n\n[Read more about arrow functions.](https://javascript.info/arrow-functions-basics)\n\n</Pitfall>\n\n### Reading props in event handlers {/*reading-props-in-event-handlers*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"433":{"pageContent":"[Read more about arrow functions.](https://javascript.info/arrow-functions-basics)\n\n</Pitfall>\n\n### Reading props in event handlers {/*reading-props-in-event-handlers*/}\n\nBecause event handlers are declared inside of a component, they have access to the component's props. Here is a button that, when clicked, shows an alert with its `message` prop:\n\n<Sandpack>\n\n```js\n\nfunction AlertButton({ message, children }) {\n\nreturn (\n\n<button onClick={() => alert(message)}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function Toolbar() {\n\nreturn (\n\n<div>\n\n<AlertButton message=\"Playing!\">\n\nPlay Movie\n\n</AlertButton>\n\n<AlertButton message=\"Uploading!\">\n\nUpload Image\n\n</AlertButton>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px; }\n\n```\n\n</Sandpack>\n\nThis lets these two buttons show different messages. Try changing the messages passed to them.\n\n### Passing event handlers as props {/*passing-event-handlers-as-props*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"434":{"pageContent":"```\n\n</Sandpack>\n\nThis lets these two buttons show different messages. Try changing the messages passed to them.\n\n### Passing event handlers as props {/*passing-event-handlers-as-props*/}\n\nOften you'll want the parent component to specify a child's event handler. Consider buttons: depending on where you're using a `Button` component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.\n\nTo do this, pass a prop the component receives from its parent as the event handler like so:\n\n<Sandpack>\n\n```js\n\nfunction Button({ onClick, children }) {\n\nreturn (\n\n<button onClick={onClick}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nfunction PlayButton({ movieName }) {\n\nfunction handlePlayClick() {\n\nalert(`Playing ${movieName}!`);\n\n}\n\nreturn (\n\n<Button onClick={handlePlayClick}>\n\nPlay \"{movieName}\"\n\n</Button>\n\n);\n\n}\n\nfunction UploadButton() {\n\nreturn (\n\n<Button onClick={() => alert('Uploading!')}>\n\nUpload Image\n\n</Button>\n\n);\n\n}\n\nexport default function Toolbar() {\n\nreturn (\n\n<div>","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"435":{"pageContent":"Play \"{movieName}\"\n\n</Button>\n\n);\n\n}\n\nfunction UploadButton() {\n\nreturn (\n\n<Button onClick={() => alert('Uploading!')}>\n\nUpload Image\n\n</Button>\n\n);\n\n}\n\nexport default function Toolbar() {\n\nreturn (\n\n<div>\n\n<PlayButton movieName=\"Kiki's Delivery Service\" />\n\n<UploadButton />\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px; }\n\n```\n\n</Sandpack>\n\nHere, the `Toolbar` component renders a `PlayButton` and an `UploadButton`:\n\n`PlayButton` passes `handlePlayClick` as the `onClick` prop to the `Button` inside.\n\n`UploadButton` passes `() => alert('Uploading!')` as the `onClick` prop to the `Button` inside.\n\nFinally, your `Button` component accepts a prop called `onClick`. It passes that prop directly to the built-in browser `<button>` with `onClick={onClick}`. This tells React to call the passed function on click.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"436":{"pageContent":"If you use a [design system](https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969), it's common for components like buttons to contain styling but not specify behavior. Instead, components like `PlayButton` and `UploadButton` will pass event handlers down.\n\n### Naming event handler props {/*naming-event-handler-props*/}\n\nBuilt-in components like `<button>` and `<div>` only support [browser event names](/reference/react-dom/components/common#common-props) like `onClick`. However, when you're building your own components, you can name their event handler props any way that you like.\n\nBy convention, event handler props should start with `on`, followed by a capital letter.\n\nFor example, the `Button` component's `onClick` prop could have been called `onSmash`:\n\n<Sandpack>\n\n```js\n\nfunction Button({ onSmash, children }) {\n\nreturn (\n\n<button onClick={onSmash}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<Button onSmash={() => alert('Playing!')}>\n\nPlay Movie","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"437":{"pageContent":"```js\n\nfunction Button({ onSmash, children }) {\n\nreturn (\n\n<button onClick={onSmash}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<Button onSmash={() => alert('Playing!')}>\n\nPlay Movie\n\n</Button>\n\n<Button onSmash={() => alert('Uploading!')}>\n\nUpload Image\n\n</Button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px; }\n\n```\n\n</Sandpack>\n\nIn this example, `<button onClick={onSmash}>` shows that the browser `<button>` (lowercase) still needs a prop called `onClick`, but the prop name received by your custom `Button` component is up to you!\n\nWhen your component supports multiple interactions, you might name event handler props for app-specific concepts. For example, this `Toolbar` component receives `onPlayMovie` and `onUploadImage` event handlers:\n\n<Sandpack>\n\n```js\n\nexport default function App() {\n\nreturn (\n\n<Toolbar\n\nonPlayMovie={() => alert('Playing!')}\n\nonUploadImage={() => alert('Uploading!')}\n\n/>\n\n);\n\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n\nreturn (\n\n<div>\n\n<Button onClick={onPlayMovie}>\n\nPlay Movie","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"438":{"pageContent":"<Toolbar\n\nonPlayMovie={() => alert('Playing!')}\n\nonUploadImage={() => alert('Uploading!')}\n\n/>\n\n);\n\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n\nreturn (\n\n<div>\n\n<Button onClick={onPlayMovie}>\n\nPlay Movie\n\n</Button>\n\n<Button onClick={onUploadImage}>\n\nUpload Image\n\n</Button>\n\n</div>\n\n);\n\n}\n\nfunction Button({ onClick, children }) {\n\nreturn (\n\n<button onClick={onClick}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px; }\n\n```\n\n</Sandpack>\n\nNotice how the `App` component does not need to know *what* `Toolbar` will do with `onPlayMovie` or `onUploadImage`. That's an implementation detail of the `Toolbar`. Here, `Toolbar` passes them down as `onClick` handlers to its `Button`s, but it could later also trigger them on a keyboard shortcut. Naming props after app-specific interactions like `onPlayMovie` gives you the flexibility to change how they're used later.\n\n## Event propagation {/*event-propagation*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"439":{"pageContent":"## Event propagation {/*event-propagation*/}\n\nEvent handlers will also catch events from any children your component might have. We say that an event \"bubbles\" or \"propagates\" up the tree: it starts with where the event happened, and then goes up the tree.\n\nThis `<div>` contains two buttons. Both the `<div>` *and* each button have their own `onClick` handlers. Which handlers do you think will fire when you click a button?\n\n<Sandpack>\n\n```js\n\nexport default function Toolbar() {\n\nreturn (\n\n<div className=\"Toolbar\" onClick={() => {\n\nalert('You clicked on the toolbar!');\n\n}}>\n\n<button onClick={() => alert('Playing!')}>\n\nPlay Movie\n\n</button>\n\n<button onClick={() => alert('Uploading!')}>\n\nUpload Image\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.Toolbar {\n\nbackground: #aaa;\n\npadding: 5px;\n\n}\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\nIf you click on either button, its `onClick` will run first, followed by the parent `<div>`'s `onClick`. So two messages will appear. If you click the toolbar itself, only the parent `<div>`'s `onClick` will run.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"440":{"pageContent":"<Pitfall>\n\nAll events propagate in React except `onScroll`, which only works on the JSX tag you attach it to.\n\n</Pitfall>\n\n### Stopping propagation {/*stopping-propagation*/}\n\nEvent handlers receive an **event object** as their only argument. By convention, it's usually called `e`, which stands for \"event\". You can use this object to read information about the event.\n\nThat event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call `e.stopPropagation()` like this `Button` component does:\n\n<Sandpack>\n\n```js\n\nfunction Button({ onClick, children }) {\n\nreturn (\n\n<button onClick={e => {\n\ne.stopPropagation();\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function Toolbar() {\n\nreturn (\n\n<div className=\"Toolbar\" onClick={() => {\n\nalert('You clicked on the toolbar!');\n\n}}>\n\n<Button onClick={() => alert('Playing!')}>\n\nPlay Movie\n\n</Button>\n\n<Button onClick={() => alert('Uploading!')}>\n\nUpload Image\n\n</Button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.Toolbar {\n\nbackground: #aaa;","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"441":{"pageContent":"}}>\n\n<Button onClick={() => alert('Playing!')}>\n\nPlay Movie\n\n</Button>\n\n<Button onClick={() => alert('Uploading!')}>\n\nUpload Image\n\n</Button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.Toolbar {\n\nbackground: #aaa;\n\npadding: 5px;\n\n}\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\nWhen you click on a button:\n\n1. React calls the `onClick` handler passed to `<button>`.\n\n2. That handler, defined in `Button`, does the following:\n\nCalls `e.stopPropagation()`, preventing the event from bubbling further.\n\nCalls the `onClick` function, which is a prop passed from the `Toolbar` component.\n\n3. That function, defined in the `Toolbar` component, displays the button's own alert.\n\n4. Since the propagation was stopped, the parent `<div>`'s `onClick` handler does *not* run.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"442":{"pageContent":"3. That function, defined in the `Toolbar` component, displays the button's own alert.\n\n4. Since the propagation was stopped, the parent `<div>`'s `onClick` handler does *not* run.\n\nAs a result of `e.stopPropagation()`, clicking on the buttons now only shows a single alert (from the `<button>`) rather than the two of them (from the `<button>` and the parent toolbar `<div>`). Clicking a button is not the same thing as clicking the surrounding toolbar, so stopping the propagation makes sense for this UI.\n\n<DeepDive>\n\n#### Capture phase events {/*capture-phase-events*/}\n\nIn rare cases, you might need to catch all events on child elements, *even if they stopped propagation*. For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding `Capture` at the end of the event name:\n\n```js\n\n<div onClickCapture={() => { /* this runs first */ }}>\n\n<button onClick={e => e.stopPropagation()} />\n\n<button onClick={e => e.stopPropagation()} />\n\n</div>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"443":{"pageContent":"```js\n\n<div onClickCapture={() => { /* this runs first */ }}>\n\n<button onClick={e => e.stopPropagation()} />\n\n<button onClick={e => e.stopPropagation()} />\n\n</div>\n\n```\n\nEach event propagates in three phases:\n\n1. It travels down, calling all `onClickCapture` handlers.\n\n2. It runs the clicked element's `onClick` handler.\n\n3. It travels upwards, calling all `onClick` handlers.\n\nCapture events are useful for code like routers or analytics, but you probably won't use them in app code.\n\n</DeepDive>\n\n### Passing handlers as alternative to propagation {/*passing-handlers-as-alternative-to-propagation*/}\n\nNotice how this click handler runs a line of code _and then_ calls the `onClick` prop passed by the parent:\n\n```js {4,5}\n\nfunction Button({ onClick, children }) {\n\nreturn (\n\n<button onClick={e => {\n\ne.stopPropagation();\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"444":{"pageContent":"```js {4,5}\n\nfunction Button({ onClick, children }) {\n\nreturn (\n\n<button onClick={e => {\n\ne.stopPropagation();\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\nYou could add more code to this handler before calling the parent `onClick` event handler, too. This pattern provides an *alternative* to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it's not automatic. But the benefit of this pattern is that you can clearly follow the whole chain code that executes as a result of some event.\n\nIf you rely on propagation and it's difficult to trace which handlers execute and why, try this approach instead.\n\n### Preventing default behavior {/*preventing-default-behavior*/}\n\nSome browser events have default behavior associated with them. For example, a `<form>` submit event, which happens when a button inside of it is clicked, will reload the whole page by default:\n\n<Sandpack>\n\n```js\n\nexport default function Signup() {","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"445":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function Signup() {\n\nreturn (\n\n<form onSubmit={() => alert('Submitting!')}>\n\n<input />\n\n<button>Send</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\nYou can call `e.preventDefault()` on the event object to stop this from happening:\n\n<Sandpack>\n\n```js\n\nexport default function Signup() {\n\nreturn (\n\n<form onSubmit={e => {\n\ne.preventDefault();\n\nalert('Submitting!');\n\n}}>\n\n<input />\n\n<button>Send</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\nDon't confuse `e.stopPropagation()` and `e.preventDefault()`. They are both useful, but are unrelated:\n\n[`e.stopPropagation()`](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation) stops the event handlers attached to the tags above from firing.\n\n[`e.preventDefault()` ](https://developer.mozilla.org/docs/Web/API/Event/preventDefault) prevents the default browser behavior for the few events that have it.\n\n## Can event handlers have side effects? {/*can-event-handlers-have-side-effects*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"446":{"pageContent":"## Can event handlers have side effects? {/*can-event-handlers-have-side-effects*/}\n\nAbsolutely! Event handlers are the best place for side effects.\n\nUnlike rendering functions, event handlers don't need to be [pure](/learn/keeping-components-pure), so it's a great place to *change* something—for example, change an input's value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using [state, a component's memory.](/learn/state-a-components-memory) You will learn all about it on the next page.\n\n<Recap>\n\nYou can handle events by passing a function as a prop to an element like `<button>`.\n\nEvent handlers must be passed, **not called!** `onClick={handleClick}`, not `onClick={handleClick()}`.\n\nYou can define an event handler function separately or inline.\n\nEvent handlers are defined inside a component, so they can access props.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"447":{"pageContent":"You can define an event handler function separately or inline.\n\nEvent handlers are defined inside a component, so they can access props.\n\nYou can declare an event handler in a parent and pass it as a prop to a child.\n\nYou can define your own event handler props with application-specific names.\n\nEvents propagate upwards. Call `e.stopPropagation()` on the first argument to prevent that.\n\nEvents may have unwanted default browser behavior. Call `e.preventDefault()` to prevent that.\n\nExplicitly calling an event handler prop from a child handler is a good alternative to propagation.\n\n</Recap>\n\n<Challenges>\n\n#### Fix an event handler {/*fix-an-event-handler*/}\n\nClicking this button is supposed to switch the page background between white and black. However, nothing happens when you click it. Fix the problem. (Don't worry about the logic inside `handleClick`—that part is fine.)\n\n<Sandpack>\n\n```js\n\nexport default function LightSwitch() {\n\nfunction handleClick() {\n\nlet bodyStyle = document.body.style;","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"448":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function LightSwitch() {\n\nfunction handleClick() {\n\nlet bodyStyle = document.body.style;\n\nif (bodyStyle.backgroundColor === 'black') {\n\nbodyStyle.backgroundColor = 'white';\n\n} else {\n\nbodyStyle.backgroundColor = 'black';\n\n}\n\n}\n\nreturn (\n\n<button onClick={handleClick()}>\n\nToggle the lights\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem is that `<button onClick={handleClick()}>` _calls_ the `handleClick` function while rendering instead of _passing_ it. Removing the `()` call so that it's `<button onClick={handleClick}>` fixes the issue:\n\n<Sandpack>\n\n```js\n\nexport default function LightSwitch() {\n\nfunction handleClick() {\n\nlet bodyStyle = document.body.style;\n\nif (bodyStyle.backgroundColor === 'black') {\n\nbodyStyle.backgroundColor = 'white';\n\n} else {\n\nbodyStyle.backgroundColor = 'black';\n\n}\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nToggle the lights\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nAlternatively, you could wrap the call into another function, like `<button onClick={() => handleClick()}>`:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"449":{"pageContent":"<button onClick={handleClick}>\n\nToggle the lights\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nAlternatively, you could wrap the call into another function, like `<button onClick={() => handleClick()}>`:\n\n<Sandpack>\n\n```js\n\nexport default function LightSwitch() {\n\nfunction handleClick() {\n\nlet bodyStyle = document.body.style;\n\nif (bodyStyle.backgroundColor === 'black') {\n\nbodyStyle.backgroundColor = 'white';\n\n} else {\n\nbodyStyle.backgroundColor = 'black';\n\n}\n\n}\n\nreturn (\n\n<button onClick={() => handleClick()}>\n\nToggle the lights\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Wire up the events {/*wire-up-the-events*/}\n\nThis `ColorSwitch` component renders a button. It's supposed to change the page color. Wire it up to the `onChangeColor` event handler prop it receives from the parent so that clicking the button changes the color.","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"450":{"pageContent":"After you do this, notice that clicking the button also increments the page click counter. Your colleague who wrote the parent component insists that `onChangeColor` does not increment any counters. What else might be happening? Fix it so that clicking the button *only* changes the color, and does _not_ increment the counter.\n\n<Sandpack>\n\n```js ColorSwitch.js active\n\nexport default function ColorSwitch({\n\nonChangeColor\n\n}) {\n\nreturn (\n\n<button>\n\nChange color\n\n</button>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ColorSwitch from './ColorSwitch.js';\n\nexport default function App() {\n\nconst [clicks, setClicks] = useState(0);\n\nfunction handleClickOutside() {\n\nsetClicks(c => c + 1);\n\n}\n\nfunction getRandomLightColor() {\n\nlet r = 150 + Math.round(100 * Math.random());\n\nlet g = 150 + Math.round(100 * Math.random());\n\nlet b = 150 + Math.round(100 * Math.random());\n\nreturn `rgb(${r}, ${g}, ${b})`;\n\n}\n\nfunction handleChangeColor() {\n\nlet bodyStyle = document.body.style;\n\nbodyStyle.backgroundColor = getRandomLightColor();","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"451":{"pageContent":"let b = 150 + Math.round(100 * Math.random());\n\nreturn `rgb(${r}, ${g}, ${b})`;\n\n}\n\nfunction handleChangeColor() {\n\nlet bodyStyle = document.body.style;\n\nbodyStyle.backgroundColor = getRandomLightColor();\n\n}\n\nreturn (\n\n<div style={{ width: '100%', height: '100%' }} onClick={handleClickOutside}>\n\n<ColorSwitch onChangeColor={handleChangeColor} />\n\n<br />\n\n<br />\n\n<h2>Clicks on the page: {clicks}</h2>\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nFirst, you need to add the event handler, like `<button onClick={onChangeColor}>`.\n\nHowever, this introduces the problem of the incrementing counter. If `onChangeColor` does not do this, as your colleague insists, then the problem is that this event propagates up, and some handler above does it. To solve this problem, you need to stop the propagation. But don't forget that you should still call `onChangeColor`.\n\n<Sandpack>\n\n```js ColorSwitch.js active\n\nexport default function ColorSwitch({\n\nonChangeColor\n\n}) {\n\nreturn (\n\n<button onClick={e => {\n\ne.stopPropagation();\n\nonChangeColor();\n\n}}>\n\nChange color","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"452":{"pageContent":"<Sandpack>\n\n```js ColorSwitch.js active\n\nexport default function ColorSwitch({\n\nonChangeColor\n\n}) {\n\nreturn (\n\n<button onClick={e => {\n\ne.stopPropagation();\n\nonChangeColor();\n\n}}>\n\nChange color\n\n</button>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ColorSwitch from './ColorSwitch.js';\n\nexport default function App() {\n\nconst [clicks, setClicks] = useState(0);\n\nfunction handleClickOutside() {\n\nsetClicks(c => c + 1);\n\n}\n\nfunction getRandomLightColor() {\n\nlet r = 150 + Math.round(100 * Math.random());\n\nlet g = 150 + Math.round(100 * Math.random());\n\nlet b = 150 + Math.round(100 * Math.random());\n\nreturn `rgb(${r}, ${g}, ${b})`;\n\n}\n\nfunction handleChangeColor() {\n\nlet bodyStyle = document.body.style;\n\nbodyStyle.backgroundColor = getRandomLightColor();\n\n}\n\nreturn (\n\n<div style={{ width: '100%', height: '100%' }} onClick={handleClickOutside}>\n\n<ColorSwitch onChangeColor={handleChangeColor} />\n\n<br />\n\n<br />\n\n<h2>Clicks on the page: {clicks}</h2>\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/responding-to-events.md"}},"453":{"pageContent":"--\n\ntitle: <Suspense>\n\n--\n\n<Intro>\n\n`<Suspense>` lets you display a fallback until its children have finished loading.\n\n```js\n\n<Suspense fallback={<Loading />}>\n\n<SomeComponent />\n\n</Suspense>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<Suspense>` {/*suspense*/}\n\n#### Props {/*props*/}\n\n`children`: The actual UI you intend to render. If `children` suspends while rendering, the Suspense boundary will switch to rendering `fallback`.\n\n`fallback`: An alternate UI to render in place of the actual UI if it has not finished loading. Any valid React node is accepted, though in practice, a fallback is a lightweight placeholder view, such as a loading spinner or skeleton. Suspense will automatically switch to `fallback` when `children` suspends, and back to `children` when the data is ready. If `fallback` suspends while rendering, it will activate the closest parent Suspense boundary.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"454":{"pageContent":"#### Caveats {/*caveats*/}\n\nReact does not preserve any state for renders that got suspended before they were able to mount for the first time. When the component has loaded, React will retry rendering the suspended tree from scratch.\n\nIf Suspense was displaying content for the tree, but then it suspended again, the `fallback` will be shown again unless the update causing it was caused by [`startTransition`](/reference/react/startTransition) or [`useDeferredValue`](/reference/react/useDeferredValue).\n\nIf React needs to hide the already visible content because it suspended again, it will clean up [layout Effects](/reference/react/useLayoutEffect) in the content tree. When the content is ready to be shown again, React will fire the layout Effects again. This lets you make sure that Effects measuring the DOM layout don't try to do this while the content is hidden.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"455":{"pageContent":"React includes under-the-hood optimizations like *Streaming Server Rendering* and *Selective Hydration* that are integrated with Suspense. Read [an architectural overview](https://github.com/reactwg/react-18/discussions/37) and watch [a technical talk](https://www.youtube.com/watch?v=pj5N-Khihgc) to learn more.\n\n--\n\n## Usage {/*usage*/}\n\n### Displaying a fallback while content is loading {/*displaying-a-fallback-while-content-is-loading*/}\n\nYou can wrap any part of your application with a Suspense boundary:\n\n```js [[1, 1, \"<Loading />\"], [2, 2, \"<Albums />\"]]\n\n<Suspense fallback={<Loading />}>\n\n<Albums />\n\n</Suspense>\n\n```\n\nReact will display your <CodeStep step={1}>loading fallback</CodeStep> until all the code and data needed by <CodeStep step={2}>the children</CodeStep> has been loaded.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"456":{"pageContent":"<Albums />\n\n</Suspense>\n\n```\n\nReact will display your <CodeStep step={1}>loading fallback</CodeStep> until all the code and data needed by <CodeStep step={2}>the children</CodeStep> has been loaded.\n\nIn the example below, the `Albums` component *suspends* while fetching the list of albums. Until it's ready to render, React switches the closest Suspense boundary above to show the fallback--your `Loading` component. Then, when the data loads, React hides the `Loading` fallback and renders the `Albums` component with data.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ArtistPage from './ArtistPage.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nif (show) {\n\nreturn (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"457":{"pageContent":"import ArtistPage from './ArtistPage.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nif (show) {\n\nreturn (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n} else {\n\nreturn (\n\n<button onClick={() => setShow(true)}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n```js ArtistPage.js active\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Suspense fallback={<Loading />}>\n\n<Albums artistId={artist.id} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction Loading() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"458":{"pageContent":"// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"459":{"pageContent":"// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"460":{"pageContent":"}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\n*Only Suspense-enabled data sources will activate the Suspense component.** They include:\n\nData fetching with Suspense-enabled frameworks like [Relay](https://relay.dev/docs/guided-tour/rendering/loading-states/) and [Next.js](https://nextjs.org/docs/advanced-features/react-18)\n\nLazy-loading component code with [`lazy`](/reference/react/lazy)\n\nSuspense **does not** detect when data is fetched inside an Effect or event handler.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"461":{"pageContent":"Lazy-loading component code with [`lazy`](/reference/react/lazy)\n\nSuspense **does not** detect when data is fetched inside an Effect or event handler.\n\nThe exact way you would load data in the `Albums` component above depends on your framework. If you use a Suspense-enabled framework, you'll find the details in its data fetching documentation.\n\nSuspense-enabled data fetching without the use of an opinionated framework is not yet supported. The requirements for implementing a Suspense-enabled data source are unstable and undocumented. An official API for integrating data sources with Suspense will be released in a future version of React.\n\n</Note>\n\n--\n\n### Revealing content together at once {/*revealing-content-together-at-once*/}\n\nBy default, the whole tree inside Suspense is treated as a single unit. For example, even if *only one* of these components suspends waiting for some data, *all* of them together will be replaced by the loading indicator:\n\n```js {2-5}\n\n<Suspense fallback={<Loading />}>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"462":{"pageContent":"```js {2-5}\n\n<Suspense fallback={<Loading />}>\n\n<Biography />\n\n<Panel>\n\n<Albums />\n\n</Panel>\n\n</Suspense>\n\n```\n\nThen, after all of them are ready to be displayed, they will all appear together at once.\n\nIn the example below, both `Biography` and `Albums` fetch some data. However, because they are grouped under a single Suspense boundary, these components always \"pop in\" together at the same time.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ArtistPage from './ArtistPage.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nif (show) {\n\nreturn (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n} else {\n\nreturn (\n\n<button onClick={() => setShow(true)}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"463":{"pageContent":"if (show) {\n\nreturn (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n} else {\n\nreturn (\n\n<button onClick={() => setShow(true)}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n```js ArtistPage.js active\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Suspense fallback={<Loading />}>\n\n<Biography artistId={artist.id} />\n\n<Panel>\n\n<Albums artistId={artist.id} />\n\n</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction Loading() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Panel.js\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"464":{"pageContent":"// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Biography({ artistId }) {\n\nconst bio = use(fetchData(`/${artistId}/bio`));\n\nreturn (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"465":{"pageContent":"promise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"466":{"pageContent":"return promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else if (url === '/the-beatles/bio') {\n\nreturn await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 1500);\n\n});","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"467":{"pageContent":"return await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 1500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised\n\nJohn Lennon, Paul McCartney, George Harrison\n\nand Ringo Starr.`;\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"468":{"pageContent":"year: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css\n\n.bio { font-style: italic; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n```\n\n</Sandpack>\n\nComponents that load data don't have to be direct children of the Suspense boundary. For example, you can move `Biography` and `Albums` into a new `Details` component. This doesn't change the behavior. Because `Biography` and `Albums` share the same closest parent Suspense boundary, their reveal is coordinated together.\n\n```js {2,8-11}\n\n<Suspense fallback={<Loading />}>\n\n<Details artistId={artist.id} />\n\n</Suspense>\n\nfunction Details({ artistId }) {\n\nreturn (\n\n<>\n\n<Biography artistId={artistId} />\n\n<Panel>\n\n<Albums artistId={artistId} />\n\n</Panel>\n\n</>\n\n);\n\n}\n\n```\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"469":{"pageContent":"<Details artistId={artist.id} />\n\n</Suspense>\n\nfunction Details({ artistId }) {\n\nreturn (\n\n<>\n\n<Biography artistId={artistId} />\n\n<Panel>\n\n<Albums artistId={artistId} />\n\n</Panel>\n\n</>\n\n);\n\n}\n\n```\n\n--\n\n### Revealing nested content as it loads {/*revealing-nested-content-as-it-loads*/}\n\nWhen a component suspends, the closest parent Suspense component shows the fallback. This lets you nest multiple Suspense components to create a loading sequence. Each Suspense boundary's fallback will be filled in as the next level of content becomes available. For example, you can give the album list its own loading fallback:\n\n```js {3,7}\n\n<Suspense fallback={<BigSpinner />}>\n\n<Biography />\n\n<Suspense fallback={<AlbumsGlimmer />}>\n\n<Panel>\n\n<Albums />\n\n</Panel>\n\n</Suspense>\n\n</Suspense>\n\n```\n\nWith this change, displaying the `Biography` doesn't need to \"wait\" for the `Albums` to load.\n\nThe sequence will be:\n\n1. If `Biography` hasn't loaded yet, `BigSpinner` is shown in place of the entire content area.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"470":{"pageContent":"The sequence will be:\n\n1. If `Biography` hasn't loaded yet, `BigSpinner` is shown in place of the entire content area.\n\n1. Once `Biography` finishes loading, `BigSpinner` is replaced by the content.\n\n1. If `Albums` hasn't loaded yet, `AlbumsGlimmer` is shown in place of `Albums` and its parent `Panel`.\n\n1. Finally, once `Albums` finishes loading, it replaces `AlbumsGlimmer`.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ArtistPage from './ArtistPage.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nif (show) {\n\nreturn (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n} else {\n\nreturn (\n\n<button onClick={() => setShow(true)}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n```js ArtistPage.js active","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"471":{"pageContent":"return (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n} else {\n\nreturn (\n\n<button onClick={() => setShow(true)}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n}\n\n```\n\n```js ArtistPage.js active\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Suspense fallback={<BigSpinner />}>\n\n<Biography artistId={artist.id} />\n\n<Suspense fallback={<AlbumsGlimmer />}>\n\n<Panel>\n\n<Albums artistId={artist.id} />\n\n</Panel>\n\n</Suspense>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Panel.js\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Biography.js hidden","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"472":{"pageContent":"<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Panel.js\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Biography({ artistId }) {\n\nconst bio = use(fetchData(`/${artistId}/bio`));\n\nreturn (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"473":{"pageContent":"return promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"474":{"pageContent":"{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"475":{"pageContent":"export function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else if (url === '/the-beatles/bio') {\n\nreturn await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised\n\nJohn Lennon, Paul McCartney, George Harrison\n\nand Ringo Starr.`;\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"476":{"pageContent":"}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css\n\n.bio { font-style: italic; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"477":{"pageContent":"border-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>\n\nSuspense boundaries let you coordinate which parts of your UI should always \"pop in\" together at the same time, and which parts should progressively reveal more content in a sequence of loading states. You can add, move, or delete Suspense boundaries in any place in the tree without affecting the rest of your app's behavior.\n\nDon't put a Suspense boundary around every component. Suspense boundaries should not be more granular than the loading sequence that you want the user to experience. If you work with a designer, ask them where the loading states should be placed--it's likely that they've already included them in their design wireframes.\n\n--\n\n### Showing stale content while fresh content is loading {/*showing-stale-content-while-fresh-content-is-loading*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"478":{"pageContent":"--\n\n### Showing stale content while fresh content is loading {/*showing-stale-content-while-fresh-content-is-loading*/}\n\nIn this example, the `SearchResults` component suspends while fetching the search results. Try typing `\"a\"`, waiting for the results, and then editing it to `\"ab\"`. The results for `\"a\"` will get replaced by the loading fallback.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState } from 'react';\n\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<SearchResults query={query} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"479":{"pageContent":"return (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<SearchResults query={query} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchResults.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function SearchResults({ query }) {\n\nif (query === '') {\n\nreturn null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"480":{"pageContent":"</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/search?q=')) {\n\nreturn await getSearchResults(url.slice('/search?q='.length));\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"481":{"pageContent":"cache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/search?q=')) {\n\nreturn await getSearchResults(url.slice('/search?q='.length));\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getSearchResults(query) {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"482":{"pageContent":"year: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\nconst lowerQuery = query.trim().toLowerCase();\n\nreturn allAlbums.filter(album => {\n\nconst lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css\n\ninput { margin: 10px; }\n\n```\n\n</Sandpack>\n\nA common alternative UI pattern is to *defer* updating the list of results and to keep showing the previous results until the new results are ready. The [`useDeferredValue`](/reference/react/useDeferredValue) Hook lets you pass a deferred version of the query down:\n\n```js {3,11}\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"483":{"pageContent":"const [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<SearchResults query={deferredQuery} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\nThe `query` will update immediately, so the input will display the new value. However, the `deferredQuery` will keep its previous value until the data has loaded, so `SearchResults` will show the stale results for a bit.\n\nTo make it more obvious to the user, you can add a visual indication when the stale result list is displayed:\n\n```js {2}\n\n<div style={{\n\nopacity: query !== deferredQuery ? 0.5 : 1\n\n}}>\n\n<SearchResults query={deferredQuery} />\n\n</div>\n\n```\n\nEnter `\"a\"` in the example below, wait for the results to load, and then edit the input to `\"ab\"`. Notice how instead of the Suspense fallback, you now see the slightly dimmed stale result list until the new results have loaded:\n\n<Sandpack>\n\n```json package.json hidden\n\n{","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"484":{"pageContent":"<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useDeferredValue } from 'react';\n\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\nconst isStale = query !== deferredQuery;\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<div style={{ opacity: isStale ? 0.5 : 1 }}>\n\n<SearchResults query={deferredQuery} />\n\n</div>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchResults.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"485":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```js SearchResults.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function SearchResults({ query }) {\n\nif (query === '') {\n\nreturn null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"486":{"pageContent":"return promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/search?q=')) {\n\nreturn await getSearchResults(url.slice('/search?q='.length));\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getSearchResults(query) {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"487":{"pageContent":"}\n\n}\n\nasync function getSearchResults(query) {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\nconst lowerQuery = query.trim().toLowerCase();\n\nreturn allAlbums.filter(album => {\n\nconst lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"488":{"pageContent":"return allAlbums.filter(album => {\n\nconst lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css\n\ninput { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Note>\n\nBoth deferred values and [transitions](#preventing-already-revealed-content-from-hiding) let you avoid showing Suspense fallback in favor of inline indicators. Transitions mark the whole update as non-urgent so they are typically used by frameworks and router libraries for navigation. Deferred values, on the other hand, are mostly useful in application code where you want to mark a part of UI as non-urgent, meaning that it's allowed to \"lag behind\" the rest of the UI.\n\n</Note>\n\n--\n\n### Preventing already revealed content from hiding {/*preventing-already-revealed-content-from-hiding*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"489":{"pageContent":"</Note>\n\n--\n\n### Preventing already revealed content from hiding {/*preventing-already-revealed-content-from-hiding*/}\n\nWhen a component suspends, the closest parent Suspense boundary switches to showing the fallback. This can lead to a jarring user experience if it was already displaying some content. Press the button in the example below:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState } from 'react';\n\nimport IndexPage from './IndexPage.js';\n\nimport ArtistPage from './ArtistPage.js';\n\nimport Layout from './Layout.js';\n\nexport default function App() {\n\nreturn (\n\n<Suspense fallback={<BigSpinner />}>\n\n<Router />\n\n</Suspense>\n\n);\n\n}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nfunction navigate(url) {\n\nsetPage(url);\n\n}\n\nlet content;\n\nif (page === '/') {\n\ncontent = (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"490":{"pageContent":"<Suspense fallback={<BigSpinner />}>\n\n<Router />\n\n</Suspense>\n\n);\n\n}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nfunction navigate(url) {\n\nsetPage(url);\n\n}\n\nlet content;\n\nif (page === '/') {\n\ncontent = (\n\n<IndexPage navigate={navigate} />\n\n);\n\n} else if (page === '/the-beatles') {\n\ncontent = (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n}\n\nreturn (\n\n<Layout>\n\n{content}\n\n</Layout>\n\n);\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Layout.js\n\nexport default function Layout({ children }) {\n\nreturn (\n\n<div className=\"layout\">\n\n<section className=\"header\">\n\nMusic Browser\n\n</section>\n\n<main>\n\n{children}\n\n</main>\n\n</div>\n\n);\n\n}\n\n```\n\n```js IndexPage.js\n\nexport default function IndexPage({ navigate }) {\n\nreturn (\n\n<button onClick={() => navigate('/the-beatles')}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n```\n\n```js ArtistPage.js\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"491":{"pageContent":"import { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Biography artistId={artist.id} />\n\n<Suspense fallback={<AlbumsGlimmer />}>\n\n<Panel>\n\n<Albums artistId={artist.id} />\n\n</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"492":{"pageContent":"export default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"493":{"pageContent":"// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Biography({ artistId }) {\n\nconst bio = use(fetchData(`/${artistId}/bio`));\n\nreturn (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Panel.js hidden\n\nexport default function Panel({ children }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"494":{"pageContent":"promise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Panel.js hidden\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else if (url === '/the-beatles/bio') {\n\nreturn await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"495":{"pageContent":"// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised\n\nJohn Lennon, Paul McCartney, George Harrison\n\nand Ringo Starr.`;\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"496":{"pageContent":"}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css\n\nmain {\n\nmin-height: 200px;\n\npadding: 10px;\n\n}\n\n.layout {\n\nborder: 1px solid black;\n\n}\n\n.header {\n\nbackground: #222;\n\npadding: 10px;\n\ntext-align: center;\n\ncolor: white;\n\n}\n\n.bio { font-style: italic; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"497":{"pageContent":"border-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>\n\nWhen you pressed the button, the `Router` component rendered `ArtistPage` instead of `IndexPage`. A component inside the `ArtistPage` suspended, so the closest Suspense boundary started showing the fallback. The closest Suspense boundary was near the root, so the whole site layout got replaced by `BigSpinner`.\n\nTo prevent this from happening, you can mark the navigation state update as a *transition* with [`startTransition`:](/reference/react/startTransition)\n\n```js {5,7}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"498":{"pageContent":"```js {5,7}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\n// ...\n\n```\n\nThis tells React that the state transition is not urgent, and it's better to keep showing the previous page instead of hiding any already revealed content. Notice how clicking the button now \"waits\" for the `Biography` to load:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, startTransition, useState } from 'react';\n\nimport IndexPage from './IndexPage.js';\n\nimport ArtistPage from './ArtistPage.js';\n\nimport Layout from './Layout.js';\n\nexport default function App() {\n\nreturn (\n\n<Suspense fallback={<BigSpinner />}>\n\n<Router />\n\n</Suspense>\n\n);\n\n}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nfunction navigate(url) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"499":{"pageContent":"export default function App() {\n\nreturn (\n\n<Suspense fallback={<BigSpinner />}>\n\n<Router />\n\n</Suspense>\n\n);\n\n}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\nlet content;\n\nif (page === '/') {\n\ncontent = (\n\n<IndexPage navigate={navigate} />\n\n);\n\n} else if (page === '/the-beatles') {\n\ncontent = (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n}\n\nreturn (\n\n<Layout>\n\n{content}\n\n</Layout>\n\n);\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Layout.js\n\nexport default function Layout({ children }) {\n\nreturn (\n\n<div className=\"layout\">\n\n<section className=\"header\">\n\nMusic Browser\n\n</section>\n\n<main>\n\n{children}\n\n</main>\n\n</div>\n\n);\n\n}\n\n```\n\n```js IndexPage.js\n\nexport default function IndexPage({ navigate }) {\n\nreturn (\n\n<button onClick={() => navigate('/the-beatles')}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n```\n\n```js ArtistPage.js\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"500":{"pageContent":"Open The Beatles artist page\n\n</button>\n\n);\n\n}\n\n```\n\n```js ArtistPage.js\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Biography artistId={artist.id} />\n\n<Suspense fallback={<AlbumsGlimmer />}>\n\n<Panel>\n\n<Albums artistId={artist.id} />\n\n</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"501":{"pageContent":"// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"502":{"pageContent":");\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Biography({ artistId }) {\n\nconst bio = use(fetchData(`/${artistId}/bio`));\n\nreturn (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"503":{"pageContent":"} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Panel.js hidden\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else if (url === '/the-beatles/bio') {\n\nreturn await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"504":{"pageContent":"return await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised\n\nJohn Lennon, Paul McCartney, George Harrison\n\nand Ringo Starr.`;\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"505":{"pageContent":"year: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css\n\nmain {\n\nmin-height: 200px;\n\npadding: 10px;\n\n}\n\n.layout {\n\nborder: 1px solid black;\n\n}\n\n.header {\n\nbackground: #222;\n\npadding: 10px;\n\ntext-align: center;\n\ncolor: white;\n\n}\n\n.bio { font-style: italic; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"506":{"pageContent":"border-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>\n\nA transition doesn't wait for *all* content to load. It only waits long enough to avoid hiding already revealed content. For example, the website `Layout` was already revealed, so it would be bad to hide it behind a loading spinner. However, the nested `Suspense` boundary around `Albums` is new, so the transition doesn't wait for it.\n\n<Note>\n\nSuspense-enabled routers are expected to wrap the navigation updates into transitions by default.\n\n</Note>\n\n--\n\n### Indicating that a transition is happening {/*indicating-that-a-transition-is-happening*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"507":{"pageContent":"Suspense-enabled routers are expected to wrap the navigation updates into transitions by default.\n\n</Note>\n\n--\n\n### Indicating that a transition is happening {/*indicating-that-a-transition-is-happening*/}\n\nIn the above example, once you click the button, there is no visual indication that a navigation is in progress. To add an indicator, you can replace [`startTransition`](/reference/react/startTransition) with [`useTransition`](/reference/react/useTransition) which gives you a boolean `isPending` value. In the example below, it's used to change the website header styling while a transition is happening:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useTransition } from 'react';\n\nimport IndexPage from './IndexPage.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"508":{"pageContent":"\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useTransition } from 'react';\n\nimport IndexPage from './IndexPage.js';\n\nimport ArtistPage from './ArtistPage.js';\n\nimport Layout from './Layout.js';\n\nexport default function App() {\n\nreturn (\n\n<Suspense fallback={<BigSpinner />}>\n\n<Router />\n\n</Suspense>\n\n);\n\n}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nconst [isPending, startTransition] = useTransition();\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\nlet content;\n\nif (page === '/') {\n\ncontent = (\n\n<IndexPage navigate={navigate} />\n\n);\n\n} else if (page === '/the-beatles') {\n\ncontent = (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n}\n\nreturn (\n\n<Layout isPending={isPending}>\n\n{content}\n\n</Layout>\n\n);\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Layout.js\n\nexport default function Layout({ children, isPending }) {\n\nreturn (\n\n<div className=\"layout\">\n\n<section className=\"header\" style={{","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"509":{"pageContent":");\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Layout.js\n\nexport default function Layout({ children, isPending }) {\n\nreturn (\n\n<div className=\"layout\">\n\n<section className=\"header\" style={{\n\nopacity: isPending ? 0.7 : 1\n\n}}>\n\nMusic Browser\n\n</section>\n\n<main>\n\n{children}\n\n</main>\n\n</div>\n\n);\n\n}\n\n```\n\n```js IndexPage.js\n\nexport default function IndexPage({ navigate }) {\n\nreturn (\n\n<button onClick={() => navigate('/the-beatles')}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n```\n\n```js ArtistPage.js\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Biography artistId={artist.id} />\n\n<Suspense fallback={<AlbumsGlimmer />}>\n\n<Panel>\n\n<Albums artistId={artist.id} />\n\n</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"510":{"pageContent":"</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"511":{"pageContent":"function use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Biography({ artistId }) {\n\nconst bio = use(fetchData(`/${artistId}/bio`));\n\nreturn (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"512":{"pageContent":"return (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Panel.js hidden\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"513":{"pageContent":"// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else if (url === '/the-beatles/bio') {\n\nreturn await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised\n\nJohn Lennon, Paul McCartney, George Harrison\n\nand Ringo Starr.`;\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"514":{"pageContent":"});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css\n\nmain {\n\nmin-height: 200px;\n\npadding: 10px;\n\n}\n\n.layout {\n\nborder: 1px solid black;\n\n}\n\n.header {\n\nbackground: #222;\n\npadding: 10px;\n\ntext-align: center;\n\ncolor: white;\n\n}\n\n.bio { font-style: italic; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"515":{"pageContent":"border: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Resetting Suspense boundaries on navigation {/*resetting-suspense-boundaries-on-navigation*/}\n\nDuring a transition, React will avoid hiding already revealed content. However, if you navigate to a route with different parameters, you might want to tell React it is *different* content. You can express this with a `key`:\n\n```js\n\n<ProfilePage key={queryParams.id} />\n\n```\n\nImagine you're navigating within a user's profile page, and something suspends. If that update is wrapped in a transition, it will not trigger the fallback for already visible content. That's the expected behavior.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"516":{"pageContent":"However, now imagine you're navigating between two different user profiles. In that case, it makes sense to show the fallback. For example, one user's timeline is *different content* from another user's timeline. By specifying a `key`, you ensure that React treats different users' profiles as different components, and resets the Suspense boundaries during navigation. A Suspense-integrated routing framework should do this automatically.\n\n--\n\n### Providing a fallback for server errors and server-only content {/*providing-a-fallback-for-server-errors-and-server-only-content*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"517":{"pageContent":"--\n\n### Providing a fallback for server errors and server-only content {/*providing-a-fallback-for-server-errors-and-server-only-content*/}\n\nIf you use one of the [streaming server rendering APIs](/reference/react-dom/server) (or a framework that relies on them), React will also use your `<Suspense>` boundaries to handle errors on the server. If a component throws an error on the server, React will not abort the server render. Instead, it will find the closest `<Suspense>` component above it and include its fallback (such as a spinner) into the generated server HTML. The user will see a spinner instead of an error.\n\nOn the client, React will attempt to render the same component again. If it errors on the client too, React will throw the error and display the closest [error boundary.](/reference/react/Component#static-getderivedstatefromerror) However, if it does not error on the client, React will not display the error to the user since the content was eventually displayed successfully.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"518":{"pageContent":"You can use this to opt out some components from rendering on the server. To do this, throw an error from them in the server environment and then wrap them in a `<Suspense>` boundary to replace their HTML with fallbacks:\n\n```js\n\n<Suspense fallback={<Loading />}>\n\n<Chat />\n\n</Suspense>\n\nfunction Chat() {\n\nif (typeof window === 'undefined') {\n\nthrow Error('Chat should only render on the client.');\n\n}\n\n// ...\n\n}\n\n```\n\nThe server HTML will include the loading indicator. It will be replaced by the `Chat` component on the client.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### How do I prevent the UI from being replaced by a fallback during an update? {/*preventing-unwanted-fallbacks*/}\n\nReplacing visible UI with a fallback creates a jarring user experience. This can happen when an update causes a component to suspend, and the nearest Suspense boundary is already showing content to the user.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"519":{"pageContent":"To prevent this from happening, [mark the update as non-urgent using `startTransition`](#preventing-already-revealed-content-from-hiding). During a transition, React will wait until enough data has loaded to prevent an unwanted fallback from appearing:\n\n```js {2-3,5}\n\nfunction handleNextPageClick() {\n\n// If this update suspends, don't hide the already displayed content\n\nstartTransition(() => {\n\nsetCurrentPage(currentPage + 1);\n\n});\n\n}\n\n```\n\nThis will avoid hiding existing content. However, any newly rendered `Suspense` boundaries will still immediately display fallbacks to avoid blocking the UI and let the user see the content as it becomes available.\n\n*React will only prevent unwanted fallbacks during non-urgent updates**. It will not delay a render if it's the result of an urgent update. You must opt in with an API like [`startTransition`](/reference/react/startTransition) or [`useDeferredValue`](/reference/react/useDeferredValue).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"520":{"pageContent":"If your router is integrated with Suspense, it should wrap its updates into [`startTransition`](/reference/react/startTransition) automatically.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Suspense.md"}},"521":{"pageContent":"--\n\ntitle: startTransition\n\n--\n\n<Intro>\n\n`startTransition` lets you update the state without blocking the UI.\n\n```js\n\nstartTransition(scope)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `startTransition(scope)` {/*starttransitionscope*/}\n\nThe `startTransition` function lets you mark a state update as a transition.\n\n```js {7,9}\n\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/startTransition.md"}},"522":{"pageContent":"const [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`scope`: A function that updates some state by calling one or more [`set` functions.](/reference/react/useState#setstate) React immediately calls `scope` with no parameters and marks all state updates scheduled synchronously during the `scope` function call as transitions. They will be [non-blocking](/reference/react/useTransition#marking-a-state-update-as-a-non-blocking-transition) and [will not display unwanted loading indicators.](/reference/react/useTransition#preventing-unwanted-loading-indicators)\n\n#### Returns {/*returns*/}\n\n`startTransition` does not return anything.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/startTransition.md"}},"523":{"pageContent":"#### Returns {/*returns*/}\n\n`startTransition` does not return anything.\n\n#### Caveats {/*caveats*/}\n\n`startTransition` does not provide a way to track whether a transition is pending. To show a pending indicator while the transition is ongoing, you need [`useTransition`](/reference/react/useTransition) instead.\n\nYou can wrap an update into a transition only if you have access to the `set` function of that state. If you want to start a transition in response to some prop or a custom Hook return value, try [`useDeferredValue`](/reference/react/usedeferredvalue) instead.\n\nThe function you pass to `startTransition` must be synchronous. React immediately executes this function, marking all state updates that happen while it executes as transitions. If you try to perform more state updates later (for example, in a timeout), they won't be marked as transitions.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/startTransition.md"}},"524":{"pageContent":"A state update marked as a transition will be interrupted by other state updates. For example, if you update a chart component inside a transition, but then start typing into an input while the chart is in the middle of a re-render, React will restart the rendering work on the chart component after handling the input state update.\n\nTransition updates can't be used to control text inputs.\n\nIf there are multiple ongoing transitions, React currently batches them together. This is a limitation that will likely be removed in a future release.\n\n--\n\n## Usage {/*usage*/}\n\n### Marking a state update as a non-blocking transition {/*marking-a-state-update-as-a-non-blocking-transition*/}\n\nYou can mark a state update as a *transition* by wrapping it in a `startTransition` call:\n\n```js {7,9}\n\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/startTransition.md"}},"525":{"pageContent":"```js {7,9}\n\nimport { startTransition } from 'react';\n\nfunction TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```\n\nTransitions let you keep the user interface updates responsive even on slow devices.\n\nWith a transition, your UI stays responsive in the middle of a re-render. For example, if the user clicks a tab but then change their mind and click another tab, they can do that without waiting for the first re-render to finish.\n\n<Note>\n\n`startTransition` is very similar to [`useTransition`](/reference/react/useTransition), except that it does not provide the `isPending` flag to track whether a transition is ongoing. You can call `startTransition` when `useTransition` is not available. For example, `startTransition` works outside components, such as from a data library.\n\n[Learn about transitions and see examples on the `useTransition` page.](/reference/react/useTransition)\n\n</Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/startTransition.md"}},"526":{"pageContent":"--\n\ntitle: useRef\n\n--\n\n<Intro>\n\n`useRef` is a React Hook that lets you reference a value that's not needed for rendering.\n\n```js\n\nconst ref = useRef(initialValue)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useRef(initialValue)` {/*useref*/}\n\nCall `useRef` at the top level of your component to declare a [ref.](/learn/referencing-values-with-refs)\n\n```js\n\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n\nconst intervalRef = useRef(0);\n\nconst inputRef = useRef(null);\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`initialValue`: The value you want the ref object's `current` property to be initially. It can be a value of any type. This argument is ignored after the initial render.\n\n#### Returns {/*returns*/}\n\n`useRef` returns an object with a single property:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"527":{"pageContent":"#### Returns {/*returns*/}\n\n`useRef` returns an object with a single property:\n\n`current`: Initially, it's set to the `initialValue` you have passed. You can later set it to something else. If you pass the ref object to React as a `ref` attribute to a JSX node, React will set its `current` property.\n\nOn the next renders, `useRef` will return the same object.\n\n#### Caveats {/*caveats*/}\n\nYou can mutate the `ref.current` property. Unlike state, it is mutable. However, if it holds an object that is used for rendering (for example, a piece of your state), then you shouldn't mutate that object.\n\nWhen you change the `ref.current` property, React does not re-render your component. React is not aware of when you change it because a ref is a plain JavaScript object.\n\nDo not write _or read_ `ref.current` during rendering, except for [initialization.](#avoiding-recreating-the-ref-contents) This makes your component's behavior unpredictable.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"528":{"pageContent":"Do not write _or read_ `ref.current` during rendering, except for [initialization.](#avoiding-recreating-the-ref-contents) This makes your component's behavior unpredictable.\n\nIn Strict Mode, React will **call your component function twice** in order to [help you find accidental impurities.](#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. This means that each ref object will be created twice, and one of the versions will be discarded. If your component function is pure (as it should be), this should not affect the logic of your component.\n\n--\n\n## Usage {/*usage*/}\n\n### Referencing a value with a ref {/*referencing-a-value-with-a-ref*/}\n\nCall `useRef` at the top level of your component to declare one or more [refs.](/learn/referencing-values-with-refs)\n\n```js [[1, 4, \"intervalRef\"], [3, 4, \"0\"]]\n\nimport { useRef } from 'react';\n\nfunction Stopwatch() {\n\nconst intervalRef = useRef(0);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"529":{"pageContent":"```js [[1, 4, \"intervalRef\"], [3, 4, \"0\"]]\n\nimport { useRef } from 'react';\n\nfunction Stopwatch() {\n\nconst intervalRef = useRef(0);\n\n// ...\n\n```\n\n`useRef` returns a <CodeStep step={1}>ref object</CodeStep> with a single <CodeStep step={2}>`current` property</CodeStep> initially set to the <CodeStep step={3}>initial value</CodeStep> you provided.\n\nOn the next renders, `useRef` will return the same object. You can change its `current` property to store information and read it later. This might remind you of [state](/reference/react/useState), but there is an important difference.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"530":{"pageContent":"*Changing a ref does not trigger a re-render.** This means refs are perfect for storing information that doesn't affect the visual output of your component. For example, if you need to store an [interval ID](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) and retrieve it later, you can put it in a ref. To update the value inside the ref, you need to manually change its <CodeStep step={2}>`current` property</CodeStep>:\n\n```js [[2, 5, \"intervalRef.current\"]]\n\nfunction handleStartClick() {\n\nconst intervalId = setInterval(() => {\n\n// ...\n\n}, 1000);\n\nintervalRef.current = intervalId;\n\n}\n\n```\n\nLater, you can read that interval ID from the ref so that you can call [clear that interval](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval):\n\n```js [[2, 2, \"intervalRef.current\"]]\n\nfunction handleStopClick() {\n\nconst intervalId = intervalRef.current;\n\nclearInterval(intervalId);\n\n}\n\n```\n\nBy using a ref, you ensure that:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"531":{"pageContent":"```js [[2, 2, \"intervalRef.current\"]]\n\nfunction handleStopClick() {\n\nconst intervalId = intervalRef.current;\n\nclearInterval(intervalId);\n\n}\n\n```\n\nBy using a ref, you ensure that:\n\nYou can **store information** between re-renders (unlike regular variables, which reset on every render).\n\nChanging it **does not trigger a re-render** (unlike state variables, which trigger a re-render).\n\nThe **information is local** to each copy of your component (unlike the variables outside, which are shared).\n\nChanging a ref does not trigger a re-render, so refs are not appropriate for storing information that you want to display on the screen. Use state for that instead. Read more about [choosing between `useRef` and `useState`.](/learn/referencing-values-with-refs#differences-between-refs-and-state)\n\n<Recipes titleText=\"Examples of referencing a value with useRef\" titleId=\"examples-value\">\n\n#### Click counter {/*click-counter*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"532":{"pageContent":"<Recipes titleText=\"Examples of referencing a value with useRef\" titleId=\"examples-value\">\n\n#### Click counter {/*click-counter*/}\n\nThis component uses a ref to keep track of how many times the button was clicked. Note that it's okay to use a ref instead of state here because the click count is only read and written in an event handler.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Counter() {\n\nlet ref = useRef(0);\n\nfunction handleClick() {\n\nref.current = ref.current + 1;\n\nalert('You clicked ' + ref.current + ' times!');\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClick me!\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIf you show `{ref.current}` in the JSX, the number won't update on click. This is because setting `ref.current` does not trigger a re-render. Information that's used for rendering should be state instead.\n\n<Solution />\n\n#### A stopwatch {/*a-stopwatch*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"533":{"pageContent":"<Solution />\n\n#### A stopwatch {/*a-stopwatch*/}\n\nThis example uses a combination of state and refs. Both `startTime` and `now` are state variables because they are used for rendering. But we also need to hold an [interval ID](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) so that we can stop the interval on button press. Since the interval ID is not used for rendering, it's appropriate to keep it in a ref, and manually update it.\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function Stopwatch() {\n\nconst [startTime, setStartTime] = useState(null);\n\nconst [now, setNow] = useState(null);\n\nconst intervalRef = useRef(null);\n\nfunction handleStart() {\n\nsetStartTime(Date.now());\n\nsetNow(Date.now());\n\nclearInterval(intervalRef.current);\n\nintervalRef.current = setInterval(() => {\n\nsetNow(Date.now());\n\n}, 10);\n\n}\n\nfunction handleStop() {\n\nclearInterval(intervalRef.current);\n\n}\n\nlet secondsPassed = 0;\n\nif (startTime != null && now != null) {\n\nsecondsPassed = (now - startTime) / 1000;\n\n}\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"534":{"pageContent":"setNow(Date.now());\n\n}, 10);\n\n}\n\nfunction handleStop() {\n\nclearInterval(intervalRef.current);\n\n}\n\nlet secondsPassed = 0;\n\nif (startTime != null && now != null) {\n\nsecondsPassed = (now - startTime) / 1000;\n\n}\n\nreturn (\n\n<>\n\n<h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n\n<button onClick={handleStart}>\n\nStart\n\n</button>\n\n<button onClick={handleStop}>\n\nStop\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n<Pitfall>\n\n*Do not write _or read_ `ref.current` during rendering.**\n\nReact expects that the body of your component [behaves like a pure function](/learn/keeping-components-pure):\n\nIf the inputs ([props](/learn/passing-props-to-a-component), [state](/learn/state-a-components-memory), and [context](/learn/passing-data-deeply-with-context)) are the same, it should return exactly the same JSX.\n\nCalling it in a different order or with different arguments should not affect the results of other calls.\n\nReading or writing a ref **during rendering** breaks these expectations.\n\n```js {3-4,6-7}\n\nfunction MyComponent() {\n\n// ...","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"535":{"pageContent":"Reading or writing a ref **during rendering** breaks these expectations.\n\n```js {3-4,6-7}\n\nfunction MyComponent() {\n\n// ...\n\n// 🚩 Don't write a ref during rendering\n\nmyRef.current = 123;\n\n// ...\n\n// 🚩 Don't read a ref during rendering\n\nreturn <h1>{myOtherRef.current}</h1>;\n\n}\n\n```\n\nYou can read or write refs **from event handlers or effects instead**.\n\n```js {4-5,9-10}\n\nfunction MyComponent() {\n\n// ...\n\nuseEffect(() => {\n\n// ✅ You can read or write refs in effects\n\nmyRef.current = 123;\n\n});\n\n// ...\n\nfunction handleClick() {\n\n// ✅ You can read or write refs in event handlers\n\ndoSomething(myOtherRef.current);\n\n}\n\n// ...\n\n}\n\n```\n\nIf you *have to* read [or write](/reference/react/useState#storing-information-from-previous-renders) something during rendering, [use state](/reference/react/useState) instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"536":{"pageContent":"}\n\n// ...\n\n}\n\n```\n\nIf you *have to* read [or write](/reference/react/useState#storing-information-from-previous-renders) something during rendering, [use state](/reference/react/useState) instead.\n\nWhen you break these rules, your component might still work, but most of the newer features we're adding to React will rely on these expectations. Read more about [keeping your components pure.](/learn/keeping-components-pure#where-you-can-cause-side-effects)\n\n</Pitfall>\n\n--\n\n### Manipulating the DOM with a ref {/*manipulating-the-dom-with-a-ref*/}\n\nIt's particularly common to use a ref to manipulate the [DOM.](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API) React has built-in support for this.\n\nFirst, declare a <CodeStep step={1}>ref object</CodeStep> with an <CodeStep step={3}>initial value</CodeStep> of `null`:\n\n```js [[1, 4, \"inputRef\"], [3, 4, \"null\"]]\n\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n\nconst inputRef = useRef(null);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"537":{"pageContent":"```js [[1, 4, \"inputRef\"], [3, 4, \"null\"]]\n\nimport { useRef } from 'react';\n\nfunction MyComponent() {\n\nconst inputRef = useRef(null);\n\n// ...\n\n```\n\nThen pass your ref object as the `ref` attribute to the JSX of the DOM node you want to manipulate:\n\n```js [[1, 2, \"inputRef\"]]\n\n// ...\n\nreturn <input ref={inputRef} />;\n\n```\n\nAfter React creates the DOM node and puts it on the screen, React will set the <CodeStep step={2}>`current` property</CodeStep> of your ref object to that DOM node. Now you can access the `<input>`'s DOM node and call methods like [`focus()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus):\n\n```js [[2, 2, \"inputRef.current\"]]\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\n```\n\nReact will set the `current` property back to `null` when the node is removed from the screen.\n\nRead more about [manipulating the DOM with refs.](/learn/manipulating-the-dom-with-refs)\n\n<Recipes titleText=\"Examples of manipulating the DOM with useRef\" titleId=\"examples-dom\">","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"538":{"pageContent":"Read more about [manipulating the DOM with refs.](/learn/manipulating-the-dom-with-refs)\n\n<Recipes titleText=\"Examples of manipulating the DOM with useRef\" titleId=\"examples-dom\">\n\n#### Focusing a text input {/*focusing-a-text-input*/}\n\nIn this example, clicking the button will focus the input:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<input ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Scrolling an image into view {/*scrolling-an-image-into-view*/}\n\nIn this example, clicking the button will scroll an image into view. It uses a ref to the list DOM node, and then calls DOM [`querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) API to find the image we want to scroll to.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function CatFriends() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"539":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n\nconst listRef = useRef(null);\n\nfunction scrollToIndex(index) {\n\nconst listNode = listRef.current;\n\n// This line assumes a particular DOM structure:\n\nconst imgNode = listNode.querySelectorAll('li > img')[index];\n\nimgNode.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n}\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={() => scrollToIndex(0)}>\n\nTom\n\n</button>\n\n<button onClick={() => scrollToIndex(1)}>\n\nMaru\n\n</button>\n\n<button onClick={() => scrollToIndex(2)}>\n\nJellylorum\n\n</button>\n\n</nav>\n\n<div>\n\n<ul ref={listRef}>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/200/200\"\n\nalt=\"Tom\"\n\n/>\n\n</li>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/300/200\"\n\nalt=\"Maru\"\n\n/>\n\n</li>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/250/200\"\n\nalt=\"Jellylorum\"\n\n/>\n\n</li>\n\n</ul>\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"540":{"pageContent":"```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Playing and pausing a video {/*playing-and-pausing-a-video*/}\n\nThis example uses a ref to call [`play()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play) and [`pause()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause) on a `<video>` DOM node.\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nconst nextIsPlaying = !isPlaying;\n\nsetIsPlaying(nextIsPlaying);\n\nif (nextIsPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<video\n\nwidth=\"250\"\n\nref={ref}\n\nonPlay={() => setIsPlaying(true)}\n\nonPause={() => setIsPlaying(false)}\n\n>\n\n<source","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"541":{"pageContent":"}\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<video\n\nwidth=\"250\"\n\nref={ref}\n\nonPlay={() => setIsPlaying(true)}\n\nonPause={() => setIsPlaying(false)}\n\n>\n\n<source\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\ntype=\"video/mp4\"\n\n/>\n\n</video>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Exposing a ref to your own component {/*exposing-a-ref-to-your-own-component*/}\n\nSometimes, you may want to let the parent component manipulate the DOM inside of your component. For example, maybe you're writing a `MyInput` component, but you want the parent to be able to focus the input (which the parent has no access to). You can use a combination of `useRef` to hold the input and [`forwardRef`](/reference/react/forwardRef) to expose it to the parent component. Read a [detailed walkthrough](/learn/manipulating-the-dom-with-refs#accessing-another-components-dom-nodes) here.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"542":{"pageContent":"<Sandpack>\n\n```js\n\nimport { forwardRef, useRef } from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n\nreturn <input {...props} ref={ref} />;\n\n});\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<MyInput ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Avoiding recreating the ref contents {/*avoiding-recreating-the-ref-contents*/}\n\nReact saves the initial ref value once and ignores it on the next renders.\n\n```js\n\nfunction Video() {\n\nconst playerRef = useRef(new VideoPlayer());\n\n// ...\n\n```\n\nAlthough the result of `new VideoPlayer()` is only used for the initial render, you're still calling this function on every render. This can be wasteful if it's creating expensive objects.\n\nTo solve it, you may initialize the ref like this instead:\n\n```js\n\nfunction Video() {\n\nconst playerRef = useRef(null);\n\nif (playerRef.current === null) {\n\nplayerRef.current = new VideoPlayer();\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"543":{"pageContent":"To solve it, you may initialize the ref like this instead:\n\n```js\n\nfunction Video() {\n\nconst playerRef = useRef(null);\n\nif (playerRef.current === null) {\n\nplayerRef.current = new VideoPlayer();\n\n}\n\n// ...\n\n```\n\nNormally, writing or reading `ref.current` during render is not allowed. However, it's fine in this case because the result is always the same, and the condition only executes during initialization so it's fully predictable.\n\n<DeepDive>\n\n#### How to avoid null checks when initializing useRef later {/*how-to-avoid-null-checks-when-initializing-use-ref-later*/}\n\nIf you use a type checker and don't want to always check for `null`, you can try a pattern like this instead:\n\n```js\n\nfunction Video() {\n\nconst playerRef = useRef(null);\n\nfunction getPlayer() {\n\nif (playerRef.current !== null) {\n\nreturn playerRef.current;\n\n}\n\nconst player = new VideoPlayer();\n\nplayerRef.current = player;\n\nreturn player;\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"544":{"pageContent":"const playerRef = useRef(null);\n\nfunction getPlayer() {\n\nif (playerRef.current !== null) {\n\nreturn playerRef.current;\n\n}\n\nconst player = new VideoPlayer();\n\nplayerRef.current = player;\n\nreturn player;\n\n}\n\n// ...\n\n```\n\nHere, the `playerRef` itself is nullable. However, you should be able to convince your type checker that there is no case in which `getPlayer()` returns `null`. Then use `getPlayer()` in your event handlers.\n\n</DeepDive>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I can't get a ref to a custom component {/*i-cant-get-a-ref-to-a-custom-component*/}\n\nIf you try to pass a `ref` to your own component like this:\n\n```js\n\nconst inputRef = useRef(null);\n\nreturn <MyInput ref={inputRef} />;\n\n```\n\nYou might get an error in the console:\n\n<ConsoleBlock level=\"error\">\n\nWarning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\n</ConsoleBlock>\n\nBy default, your own components don't expose refs to the DOM nodes inside them.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"545":{"pageContent":"</ConsoleBlock>\n\nBy default, your own components don't expose refs to the DOM nodes inside them.\n\nTo fix this, find the component that you want to get a ref to:\n\n```js\n\nexport default function MyInput({ value, onChange }) {\n\nreturn (\n\n<input\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\nAnd then wrap it in [`forwardRef`](/reference/react/forwardRef) like this:\n\n```js {3,8}\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(({ value, onChange }, ref) => {\n\nreturn (\n\n<input\n\nvalue={value}\n\nonChange={onChange}\n\nref={ref}\n\n/>\n\n);\n\n});\n\nexport default MyInput;\n\n```\n\nThen the parent component can get a ref to it.\n\nRead more about [accessing another component's DOM nodes.](/learn/manipulating-the-dom-with-refs#accessing-another-components-dom-nodes)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useRef.md"}},"546":{"pageContent":"--\n\ntitle: useReducer\n\n--\n\n<Intro>\n\n`useReducer` is a React Hook that lets you add a [reducer](/learn/extracting-state-logic-into-a-reducer) to your component.\n\n```js\n\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useReducer(reducer, initialArg, init?)` {/*usereducer*/}\n\nCall `useReducer` at the top level of your component to manage its state with a [reducer.](/learn/extracting-state-logic-into-a-reducer)\n\n```js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n\n// ...\n\n}\n\nfunction MyComponent() {\n\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`reducer`: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"547":{"pageContent":"`initialArg`: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the next `init` argument.\n\n**optional** `init`: The initializer function that specifies how the initial state is calculated. If it's not specified, the initial state is set to `initialArg`. Otherwise, the initial state is set to the result of calling `init(initialArg)`.\n\n#### Returns {/*returns*/}\n\n`useReducer` returns an array with exactly two values:\n\n1. The current state. During the first render, it's set to `init(initialArg)` or `initialArg` (if there's no `init`).\n\n2. The [`dispatch` function](#dispatch) that lets you update the state to a different value and trigger a re-render.\n\n#### Caveats {/*caveats*/}\n\n`useReducer` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"548":{"pageContent":"In Strict Mode, React will **call your reducer and initializer twice** in order to [help you find accidental impurities.](#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. If your reducer and initializer are pure (as they should be), this should not affect the logic of your component. The result from one of the calls is ignored.\n\n--\n\n### `dispatch` function {/*dispatch*/}\n\nThe `dispatch` function returned by `useReducer` lets you update the state to a different value and trigger a re-render. You need to pass the action as the only argument to the `dispatch` function:\n\n```js\n\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nfunction handleClick() {\n\ndispatch({ type: 'incremented_age' });\n\n// ...\n\n```\n\nReact will set the next state to the result of calling the `reducer` function you've provided with the current `state` and the action you've passed to `dispatch`.\n\n#### Parameters {/*dispatch-parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"549":{"pageContent":"#### Parameters {/*dispatch-parameters*/}\n\n`action`: The action performed by the user. It can be a value of any type. By convention, an action is usually an object with a `type` property identifying it and, optionally, other properties with additional information.\n\n#### Returns {/*dispatch-returns*/}\n\n`dispatch` functions do not have a return value.\n\n#### Caveats {/*setstate-caveats*/}\n\nThe `dispatch` function **only updates the state variable for the *next* render**. If you read the state variable after calling the `dispatch` function, [you will still get the old value](#ive-dispatched-an-action-but-logging-gives-me-the-old-state-value) that was on the screen before your call.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"550":{"pageContent":"If the new value you provide is identical to the current `state`, as determined by an [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison, React will **skip re-rendering the component and its children.** This is an optimization. React may still need to call your component before ignoring the result, but it shouldn't affect your code.\n\nReact [batches state updates.](/learn/queueing-a-series-of-state-updates) It updates the screen **after all the event handlers have run** and have called their `set` functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use [`flushSync`.](/reference/react-dom/flushsync)\n\n--\n\n## Usage {/*usage*/}\n\n### Adding a reducer to a component {/*adding-a-reducer-to-a-component*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"551":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Adding a reducer to a component {/*adding-a-reducer-to-a-component*/}\n\nCall `useReducer` at the top level of your component to manage state with a [reducer.](/learn/extracting-state-logic-into-a-reducer)\n\n```js [[1, 8, \"state\"], [2, 8, \"dispatch\"], [4, 8, \"reducer\"], [3, 8, \"{ age: 42 }\"]]\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n\n// ...\n\n}\n\nfunction MyComponent() {\n\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\n// ...\n\n```\n\n`useReducer` returns an array with exactly two items:\n\n1. The <CodeStep step={1}>current state</CodeStep> of this state variable, initially set to the <CodeStep step={3}>initial state</CodeStep> you provided.\n\n2. The <CodeStep step={2}>`dispatch` function</CodeStep> that lets you change it in response to interaction.\n\nTo update what's on the screen, call <CodeStep step={2}>`dispatch`</CodeStep> with an object representing what the user did, called an *action*:\n\n```js [[2, 2, \"dispatch\"]]\n\nfunction handleClick() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"552":{"pageContent":"To update what's on the screen, call <CodeStep step={2}>`dispatch`</CodeStep> with an object representing what the user did, called an *action*:\n\n```js [[2, 2, \"dispatch\"]]\n\nfunction handleClick() {\n\ndispatch({ type: 'incremented_age' });\n\n}\n\n```\n\nReact will pass the current state and the action to your <CodeStep step={4}>reducer function</CodeStep>. Your reducer will calculate and return the next state. React will store that next state, render your component with it, and update the UI.\n\n<Sandpack>\n\n```js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n\nif (action.type === 'incremented_age') {\n\nreturn {\n\nage: state.age + 1\n\n};\n\n}\n\nthrow Error('Unknown action.');\n\n}\n\nexport default function Counter() {\n\nconst [state, dispatch] = useReducer(reducer, { age: 42 });\n\nreturn (\n\n<>\n\n<button onClick={() => {\n\ndispatch({ type: 'incremented_age' })\n\n}}>\n\nIncrement age\n\n</button>\n\n<p>Hello! You are {state.age}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"553":{"pageContent":"<>\n\n<button onClick={() => {\n\ndispatch({ type: 'incremented_age' })\n\n}}>\n\nIncrement age\n\n</button>\n\n<p>Hello! You are {state.age}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n`useReducer` is very similar to [`useState`](/reference/react/useState), but it lets you move the state update logic from event handlers into a single function outside of your component. Read more about [choosing between `useState` and `useReducer`.](/learn/extracting-state-logic-into-a-reducer#comparing-usestate-and-usereducer)\n\n--\n\n### Writing the reducer function {/*writing-the-reducer-function*/}\n\nA reducer function is declared like this:\n\n```js\n\nfunction reducer(state, action) {\n\n// ...\n\n}\n\n```\n\nThen you need to fill in the code that will calculate and return the next state. By convention, it is common to write it as a [`switch` statement.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) For each `case` in the `switch`, you need to calculate and return some next state.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"554":{"pageContent":"```js {4-7,10-13}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\nreturn {\n\nname: state.name,\n\nage: state.age + 1\n\n};\n\n}\n\ncase 'changed_name': {\n\nreturn {\n\nname: action.nextName,\n\nage: state.age\n\n};\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n```\n\nActions can have any shape. By convention, it's common to pass objects with a `type` property identifying the action. It should include the minimal necessary information that the reducer needs to compute the next state.\n\n```js {5,9-12}\n\nfunction Form() {\n\nconst [state, dispatch] = useReducer(reducer, { name: 'Taylor', age: 42 });\n\nfunction handleButtonClick() {\n\ndispatch({ type: 'incremented_age' });\n\n}\n\nfunction handleInputChange(e) {\n\ndispatch({\n\ntype: 'changed_name',\n\nnextName: e.target.value\n\n});\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"555":{"pageContent":"function handleButtonClick() {\n\ndispatch({ type: 'incremented_age' });\n\n}\n\nfunction handleInputChange(e) {\n\ndispatch({\n\ntype: 'changed_name',\n\nnextName: e.target.value\n\n});\n\n}\n\n// ...\n\n```\n\nThe action type names are local to your component. [Each action describes a single interaction, even if that leads to multiple changes in data.](/learn/extracting-state-logic-into-a-reducer#writing-reducers-well) The shape of the state is arbitrary, but usually it'll be an object or an array.\n\nRead [extracting state logic into a reducer](/learn/extracting-state-logic-into-a-reducer) to learn more.\n\n<Pitfall>\n\nState is read-only. Don't modify any objects or arrays in state:\n\n```js {4,5}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\n// 🚩 Don't mutate an object in state like this:\n\nstate.age = state.age + 1;\n\nreturn state;\n\n}\n\n```\n\nInstead, always return new objects from your reducer:\n\n```js {4-8}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\n// ✅ Instead, return a new object","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"556":{"pageContent":"return state;\n\n}\n\n```\n\nInstead, always return new objects from your reducer:\n\n```js {4-8}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\n// ✅ Instead, return a new object\n\nreturn {\n\n...state,\n\nage: state.age + 1\n\n};\n\n}\n\n```\n\nRead [updating objects in state](/learn/updating-objects-in-state) and [updating arrays in state](/learn/updating-arrays-in-state) to learn more.\n\n</Pitfall>\n\n<Recipes titleText=\"Basic useReducer examples\" titleId=\"examples-basic\">\n\n#### Form (object) {/*form-object*/}\n\nIn this example, the reducer manages a state object with two fields: `name` and `age`.\n\n<Sandpack>\n\n```js\n\nimport { useReducer } from 'react';\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\nreturn {\n\nname: state.name,\n\nage: state.age + 1\n\n};\n\n}\n\ncase 'changed_name': {\n\nreturn {\n\nname: action.nextName,\n\nage: state.age\n\n};\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\nconst initialState = { name: 'Taylor', age: 42 };\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"557":{"pageContent":"}\n\ncase 'changed_name': {\n\nreturn {\n\nname: action.nextName,\n\nage: state.age\n\n};\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\nconst initialState = { name: 'Taylor', age: 42 };\n\nexport default function Form() {\n\nconst [state, dispatch] = useReducer(reducer, initialState);\n\nfunction handleButtonClick() {\n\ndispatch({ type: 'incremented_age' });\n\n}\n\nfunction handleInputChange(e) {\n\ndispatch({\n\ntype: 'changed_name',\n\nnextName: e.target.value\n\n});\n\n}\n\nreturn (\n\n<>\n\n<input\n\nvalue={state.name}\n\nonChange={handleInputChange}\n\n/>\n\n<button onClick={handleButtonClick}>\n\nIncrement age\n\n</button>\n\n<p>Hello, {state.name}. You are {state.age}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Todo list (array) {/*todo-list-array*/}\n\nIn this example, the reducer manages an array of tasks. The array needs to be updated [without mutation.](/learn/updating-arrays-in-state)\n\n<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"558":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"559":{"pageContent":"type: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Visit Kafka Museum', done: true },\n\n{ id: 1, text: 'Watch a puppet show', done: false },\n\n{ id: 2, text: 'Lennon Wall pic', done: false }\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"560":{"pageContent":"onDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Writing concise update logic with Immer {/*writing-concise-update-logic-with-immer*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"561":{"pageContent":"li { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Writing concise update logic with Immer {/*writing-concise-update-logic-with-immer*/}\n\nIf updating arrays and objects without mutation feels tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer#useimmerreducer) to reduce repetitive code. Immer lets you write concise code as if you were mutating objects, but under the hood it performs immutable updates:\n\n<Sandpack>\n\n```js App.js\n\nimport { useImmerReducer } from 'use-immer';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nfunction tasksReducer(draft, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\ndraft.push({\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n});\n\nbreak;\n\n}\n\ncase 'changed': {\n\nconst index = draft.findIndex(t =>\n\nt.id === action.task.id\n\n);\n\ndraft[index] = action.task;\n\nbreak;\n\n}\n\ncase 'deleted': {\n\nreturn draft.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"562":{"pageContent":"t.id === action.task.id\n\n);\n\ndraft[index] = action.task;\n\nbreak;\n\n}\n\ncase 'deleted': {\n\nreturn draft.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useImmerReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Visit Kafka Museum', done: true },\n\n{ id: 1, text: 'Watch a puppet show', done: false },\n\n{ id: 2, text: 'Lennon Wall pic', done: false },\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"563":{"pageContent":"{ id: 2, text: 'Lennon Wall pic', done: false },\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"564":{"pageContent":"onChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Avoiding recreating the initial state {/*avoiding-recreating-the-initial-state*/}\n\nReact saves the initial state once and ignores it on the next renders.\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"565":{"pageContent":"}\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Avoiding recreating the initial state {/*avoiding-recreating-the-initial-state*/}\n\nReact saves the initial state once and ignores it on the next renders.\n\n```js\n\nfunction createInitialState(username) {\n\n// ...\n\n}\n\nfunction TodoList({ username }) {\n\nconst [state, dispatch] = useReducer(reducer, createInitialState(username));\n\n// ...\n\n```\n\nAlthough the result of `createInitialState(username)` is only used for the initial render, you're still calling this function on every render. This can be wasteful if it's creating large arrays or performing expensive calculations.\n\nTo solve this, you may **pass it as an _initializer_ function** to `useReducer` as the third argument instead:\n\n```js {6}\n\nfunction createInitialState(username) {\n\n// ...\n\n}\n\nfunction TodoList({ username }) {\n\nconst [state, dispatch] = useReducer(reducer, username, createInitialState);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"566":{"pageContent":"```js {6}\n\nfunction createInitialState(username) {\n\n// ...\n\n}\n\nfunction TodoList({ username }) {\n\nconst [state, dispatch] = useReducer(reducer, username, createInitialState);\n\n// ...\n\n```\n\nNotice that you’re passing `createInitialState`, which is the *function itself*, and not `createInitialState()`, which is the result of calling it. This way, the initial state does not get re-created after initialization.\n\nIn the above example, `createInitialState` takes a `username` argument. If your initializer doesn't need any information to compute the initial state, you may pass `null` as the second argument to `useReducer`.\n\n<Recipes titleText=\"The difference between passing an initializer and passing the initial state directly\" titleId=\"examples-initializer\">\n\n#### Passing the initializer function {/*passing-the-initializer-function*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"567":{"pageContent":"#### Passing the initializer function {/*passing-the-initializer-function*/}\n\nThis example passes the initializer function, so the `createInitialState` function only runs during initialization. It does not run when component re-renders, such as when you type into the input.\n\n<Sandpack>\n\n```js App.js hidden\n\nimport TodoList from './TodoList.js';\n\nexport default function App() {\n\nreturn <TodoList username=\"Taylor\" />;\n\n}\n\n```\n\n```js TodoList.js active\n\nimport { useReducer } from 'react';\n\nfunction createInitialState(username) {\n\nconst initialTodos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ninitialTodos.push({\n\nid: i,\n\ntext: username + \"'s task #\" + (i + 1)\n\n});\n\n}\n\nreturn {\n\ndraft: '',\n\ntodos: initialTodos,\n\n};\n\n}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_draft': {\n\nreturn {\n\ndraft: action.nextDraft,\n\ntodos: state.todos,\n\n};\n\n};\n\ncase 'added_todo': {\n\nreturn {\n\ndraft: '',\n\ntodos: [{\n\nid: state.todos.length,\n\ntext: state.draft\n\n}, ...state.todos]\n\n}\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"568":{"pageContent":"todos: state.todos,\n\n};\n\n};\n\ncase 'added_todo': {\n\nreturn {\n\ndraft: '',\n\ntodos: [{\n\nid: state.todos.length,\n\ntext: state.draft\n\n}, ...state.todos]\n\n}\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\nexport default function TodoList({ username }) {\n\nconst [state, dispatch] = useReducer(\n\nreducer,\n\nusername,\n\ncreateInitialState\n\n);\n\nreturn (\n\n<>\n\n<input\n\nvalue={state.draft}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed_draft',\n\nnextDraft: e.target.value\n\n})\n\n}}\n\n/>\n\n<button onClick={() => {\n\ndispatch({ type: 'added_todo' });\n\n}}>Add</button>\n\n<ul>\n\n{state.todos.map(item => (\n\n<li key={item.id}>\n\n{item.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Passing the initial state directly {/*passing-the-initial-state-directly*/}\n\nThis example **does not** pass the initializer function, so the `createInitialState` function runs on every render, such as when you type into the input. There is no observable difference in behavior, but this code is less efficient.\n\n<Sandpack>\n\n```js App.js hidden\n\nimport TodoList from './TodoList.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"569":{"pageContent":"<Sandpack>\n\n```js App.js hidden\n\nimport TodoList from './TodoList.js';\n\nexport default function App() {\n\nreturn <TodoList username=\"Taylor\" />;\n\n}\n\n```\n\n```js TodoList.js active\n\nimport { useReducer } from 'react';\n\nfunction createInitialState(username) {\n\nconst initialTodos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ninitialTodos.push({\n\nid: i,\n\ntext: username + \"'s task #\" + (i + 1)\n\n});\n\n}\n\nreturn {\n\ndraft: '',\n\ntodos: initialTodos,\n\n};\n\n}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_draft': {\n\nreturn {\n\ndraft: action.nextDraft,\n\ntodos: state.todos,\n\n};\n\n};\n\ncase 'added_todo': {\n\nreturn {\n\ndraft: '',\n\ntodos: [{\n\nid: state.todos.length,\n\ntext: state.draft\n\n}, ...state.todos]\n\n}\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\nexport default function TodoList({ username }) {\n\nconst [state, dispatch] = useReducer(\n\nreducer,\n\ncreateInitialState(username)\n\n);\n\nreturn (\n\n<>\n\n<input\n\nvalue={state.draft}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed_draft',\n\nnextDraft: e.target.value\n\n})\n\n}}\n\n/>\n\n<button onClick={() => {\n\ndispatch({ type: 'added_todo' });\n\n}}>Add</button>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"570":{"pageContent":");\n\nreturn (\n\n<>\n\n<input\n\nvalue={state.draft}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed_draft',\n\nnextDraft: e.target.value\n\n})\n\n}}\n\n/>\n\n<button onClick={() => {\n\ndispatch({ type: 'added_todo' });\n\n}}>Add</button>\n\n<ul>\n\n{state.todos.map(item => (\n\n<li key={item.id}>\n\n{item.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I've dispatched an action, but logging gives me the old state value {/*ive-dispatched-an-action-but-logging-gives-me-the-old-state-value*/}\n\nCalling the `dispatch` function **does not change state in the running code**:\n\n```js {4,5,8}\n\nfunction handleClick() {\n\nconsole.log(state.age);  // 42\n\ndispatch({ type: 'incremented_age' }); // Request a re-render with 43\n\nconsole.log(state.age);  // Still 42!\n\nsetTimeout(() => {\n\nconsole.log(state.age); // Also 42!\n\n}, 5000);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"571":{"pageContent":"dispatch({ type: 'incremented_age' }); // Request a re-render with 43\n\nconsole.log(state.age);  // Still 42!\n\nsetTimeout(() => {\n\nconsole.log(state.age); // Also 42!\n\n}, 5000);\n\n}\n\n```\n\nThis is because [states behaves like a snapshot.](/learn/state-as-a-snapshot) Updating state requests another render with the new state value, but does not affect the `state` JavaScript variable in your already-running event handler.\n\nIf you need to guess the next state value, you can calculate it manually by calling the reducer yourself:\n\n```js\n\nconst action = { type: 'incremented_age' };\n\ndispatch(action);\n\nconst nextState = reducer(state, action);\n\nconsole.log(state);     // { age: 42 }\n\nconsole.log(nextState); // { age: 43 }\n\n```\n\n--\n\n### I've dispatched an action, but the screen doesn't update {/*ive-dispatched-an-action-but-the-screen-doesnt-update*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"572":{"pageContent":"console.log(nextState); // { age: 43 }\n\n```\n\n--\n\n### I've dispatched an action, but the screen doesn't update {/*ive-dispatched-an-action-but-the-screen-doesnt-update*/}\n\nReact will **ignore your update if the next state is equal to the previous state,** as determined by an [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. This usually happens when you change an object or an array in state directly:\n\n```js {4-5,9-10}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\n// 🚩 Wrong: mutating existing object\n\nstate.age++;\n\nreturn state;\n\n}\n\ncase 'changed_name': {\n\n// 🚩 Wrong: mutating existing object\n\nstate.name = action.nextName;\n\nreturn state;\n\n}\n\n// ...\n\n}\n\n}\n\n```\n\nYou mutated an existing `state` object and returned it, so React ignored the update. To fix this, you need to ensure that you're always [_replacing_ objects and arrays in state instead of _mutating_ them](#updating-objects-and-arrays-in-state):\n\n```js {4-8,11-15}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"573":{"pageContent":"```js {4-8,11-15}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\n// ✅ Correct: creating a new object\n\nreturn {\n\n...state,\n\nage: state.age + 1\n\n};\n\n}\n\ncase 'changed_name': {\n\n// ✅ Correct: creating a new object\n\nreturn {\n\n...state,\n\nname: action.nextName\n\n};\n\n}\n\n// ...\n\n}\n\n}\n\n```\n\n--\n\n### A part of my reducer state becomes undefined after dispatching {/*a-part-of-my-reducer-state-becomes-undefined-after-dispatching*/}\n\nMake sure that every `case` branch **copies all of the existing fields** when returning the new state:\n\n```js {5}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\nreturn {\n\n...state, // Don't forget this!\n\nage: state.age + 1\n\n};\n\n}\n\n// ...\n\n```\n\nWithout `...state` above, the returned next state would only contain the `age` field and nothing else.\n\n--\n\n### My entire reducer state becomes undefined after dispatching {/*my-entire-reducer-state-becomes-undefined-after-dispatching*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"574":{"pageContent":"--\n\n### My entire reducer state becomes undefined after dispatching {/*my-entire-reducer-state-becomes-undefined-after-dispatching*/}\n\nIf your state unexpectedly becomes `undefined`, you're likely forgetting to `return` state in one of the cases, or your action type doesn't match any of the `case` statements. To find why, throw an error outside the `switch`:\n\n```js {10}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'incremented_age': {\n\n// ...\n\n}\n\ncase 'edited_name': {\n\n// ...\n\n}\n\n}\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n```\n\nYou can also use a static type checker like TypeScript to catch such mistakes.\n\n--\n\n### I'm getting an error: \"Too many re-renders\" {/*im-getting-an-error-too-many-re-renders*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"575":{"pageContent":"}\n\n```\n\nYou can also use a static type checker like TypeScript to catch such mistakes.\n\n--\n\n### I'm getting an error: \"Too many re-renders\" {/*im-getting-an-error-too-many-re-renders*/}\n\nYou might get an error that says: `Too many re-renders. React limits the number of renders to prevent an infinite loop.` Typically, this means that you're unconditionally dispatching an action *during render*, so your component enters a loop: render, dispatch (which causes a render), render, dispatch (which causes a render), and so on. Very often, this is caused by a mistake in specifying an event handler:\n\n```js {1-2}\n\n// 🚩 Wrong: calls the handler during render\n\nreturn <button onClick={handleClick()}>Click me</button>\n\n// ✅ Correct: passes down the event handler\n\nreturn <button onClick={handleClick}>Click me</button>\n\n// ✅ Correct: passes down an inline function\n\nreturn <button onClick={(e) => handleClick(e)}>Click me</button>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"576":{"pageContent":"return <button onClick={handleClick}>Click me</button>\n\n// ✅ Correct: passes down an inline function\n\nreturn <button onClick={(e) => handleClick(e)}>Click me</button>\n\n```\n\nIf you can't find the cause of this error, click on the arrow next to the error in the console and look through the JavaScript stack to find the specific `dispatch` function call responsible for the error.\n\n--\n\n### My reducer or initializer function runs twice {/*my-reducer-or-initializer-function-runs-twice*/}\n\nIn [Strict Mode](/reference/react/StrictMode), React will call your reducer and initializer functions twice. This shouldn't break your code.\n\nThis **development-only** behavior helps you [keep components pure.](/learn/keeping-components-pure) React uses the result of one of the calls, and ignores the result of the other call. As long as your component, initializer, and reducer functions are pure, this shouldn't affect your logic. However, if they are accidentally impure, this helps you notice the mistakes and fix it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"577":{"pageContent":"For example, this impure reducer function mutates an array in state:\n\n```js {4-6}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'added_todo': {\n\n// 🚩 Mistake: mutating state\n\nstate.todos.push({ id: nextId++, text: action.text });\n\nreturn state;\n\n}\n\n// ...\n\n}\n\n}\n\n```\n\nBecause React calls your reducer function twice, you'll see the todo was added twice, so you'll know that there is a mistake. In this example, you can fix the mistake by [replacing the array instead of mutating it](#updating-objects-and-arrays-in-state):\n\n```js {4-11}\n\nfunction reducer(state, action) {\n\nswitch (action.type) {\n\ncase 'added_todo': {\n\n// ✅ Correct: replacing with new state\n\nreturn {\n\n...state,\n\ntodos: [\n\n...state.todos,\n\n{ id: nextId++, text: action.text }\n\n]\n\n};\n\n}\n\n// ...\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"578":{"pageContent":"switch (action.type) {\n\ncase 'added_todo': {\n\n// ✅ Correct: replacing with new state\n\nreturn {\n\n...state,\n\ntodos: [\n\n...state.todos,\n\n{ id: nextId++, text: action.text }\n\n]\n\n};\n\n}\n\n// ...\n\n}\n\n}\n\n```\n\nNow that this reducer function is pure, calling it an extra time doesn't make a difference in behavior. This is why React calling it twice helps you find mistakes. **Only component, initializer, and reducer functions need to be pure.** Event handlers don't need to be pure, so React will never call your event handlers twice.\n\nRead [keeping components pure](/learn/keeping-components-pure) to learn more.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useReducer.md"}},"579":{"pageContent":"--\n\ntitle: forwardRef\n\n--\n\n<Intro>\n\n`forwardRef` lets your component expose a DOM node to parent component with a [ref.](/learn/manipulating-the-dom-with-refs)\n\n```js\n\nconst SomeComponent = forwardRef(render)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `forwardRef(render)` {/*forwardref*/}\n\nCall `forwardRef()` to let your component receive a ref and forward it to a child component:\n\n```js\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\n// ...\n\n});\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`render`: The render function for your component. React calls this function with the props and `ref` that your component received from its parent. The JSX you return will be the output of your component.\n\n#### Returns {/*returns*/}\n\n`forwardRef` returns a React component that you can render in JSX. Unlike React components defined as plain functions, a component returned by `forwardRef` is also able to receive a `ref` prop.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"580":{"pageContent":"`forwardRef` returns a React component that you can render in JSX. Unlike React components defined as plain functions, a component returned by `forwardRef` is also able to receive a `ref` prop.\n\n#### Caveats {/*caveats*/}\n\nIn Strict Mode, React will **call your render function twice** in order to [help you find accidental impurities.](#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. If your render function is pure (as it should be), this should not affect the logic of your component. The result from one of the calls will be ignored.\n\n--\n\n### `render` function {/*render-function*/}\n\n`forwardRef` accepts a render function as an argument. React calls this function with `props` and `ref`:\n\n```js\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nreturn (\n\n<label>\n\n{props.label}\n\n<input ref={ref} />\n\n</label>\n\n);\n\n});\n\n```\n\n#### Parameters {/*render-parameters*/}\n\n`props`: The props passed by the parent component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"581":{"pageContent":"return (\n\n<label>\n\n{props.label}\n\n<input ref={ref} />\n\n</label>\n\n);\n\n});\n\n```\n\n#### Parameters {/*render-parameters*/}\n\n`props`: The props passed by the parent component.\n\n`ref`:  The `ref` attribute passed by the parent component. The `ref` can be an object or a function. If the parent component has not passed a ref, it will be `null`. You should either pass the `ref` you receive to another component, or pass it to [`useImperativeHandle`.](/reference/react/useImperativeHandle)\n\n#### Returns {/*render-returns*/}\n\n`forwardRef` returns a React component that you can render in JSX. Unlike React components defined as plain functions, the component returned by `forwardRef` is able to take a `ref` prop.\n\n--\n\n## Usage {/*usage*/}\n\n### Exposing a DOM node to the parent component {/*exposing-a-dom-node-to-the-parent-component*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"582":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Exposing a DOM node to the parent component {/*exposing-a-dom-node-to-the-parent-component*/}\n\nBy default, each component's DOM nodes are private. However, sometimes it's useful to expose a DOM node to the parent--for example, to allow focusing it. To opt in, wrap your component definition into `forwardRef()`:\n\n```js {3,11}\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst { label, ...otherProps } = props;\n\nreturn (\n\n<label>\n\n{label}\n\n<input {...otherProps} />\n\n</label>\n\n);\n\n});\n\n```\n\nYou will receive a <CodeStep step={1}>ref</CodeStep> as the second argument after props. Pass it to the DOM node that you want to expose:\n\n```js {8} [[1, 3, \"ref\"], [1, 8, \"ref\", 30]]\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst { label, ...otherProps } = props;\n\nreturn (\n\n<label>\n\n{label}\n\n<input {...otherProps} ref={ref} />\n\n</label>\n\n);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"583":{"pageContent":"const MyInput = forwardRef(function MyInput(props, ref) {\n\nconst { label, ...otherProps } = props;\n\nreturn (\n\n<label>\n\n{label}\n\n<input {...otherProps} ref={ref} />\n\n</label>\n\n);\n\n});\n\n```\n\nThis lets the parent `Form` component access the <CodeStep step={2}>`<input>` DOM node</CodeStep> exposed by `MyInput`:\n\n```js [[1, 2, \"ref\"], [1, 10, \"ref\", 41], [2, 5, \"ref.current\"]]\n\nfunction Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n}\n\nreturn (\n\n<form>\n\n<MyInput label=\"Enter your name:\" ref={ref} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\nThis `Form` component [passes a ref](/reference/useref#manipulating-the-dom-with-a-ref) to `MyInput`. The `MyInput` component *forwards* that ref to the `<input>` browser tag. As a result, the `Form` component can access that `<input>` DOM node and call [`focus()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"584":{"pageContent":"Keep in mind that by exposing a ref to the DOM node inside your component, you're making it harder to change your component's internals later. You will typically expose DOM nodes from reusable low-level components like buttons or text inputs, but you won't do it for application-level components like an avatar or a comment.\n\n<Recipes title=\"Examples of forwarding a ref\">\n\n#### Focusing a text input {/*focusing-a-text-input*/}\n\nClicking the button will focus the input. The `Form` component defines a ref and passes it to the `MyInput` component. The `MyInput` component forwards that ref to the browser `<input>`. This lets the `Form` component focus the `<input>`.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n}\n\nreturn (\n\n<form>\n\n<MyInput label=\"Enter your name:\" ref={ref} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```js MyInput.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"585":{"pageContent":"function handleClick() {\n\nref.current.focus();\n\n}\n\nreturn (\n\n<form>\n\n<MyInput label=\"Enter your name:\" ref={ref} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```js MyInput.js\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst { label, ...otherProps } = props;\n\nreturn (\n\n<label>\n\n{label}\n\n<input {...otherProps} ref={ref} />\n\n</label>\n\n);\n\n});\n\nexport default MyInput;\n\n```\n\n```css\n\ninput {\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Playing and pausing a video {/*playing-and-pausing-a-video*/}\n\nClicking the button will call [`play()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play) and [`pause()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause) on a `<video>` DOM node. The `App` component defines a ref and passes it to the `MyVideoPlayer` component. The `MyVideoPlayer` component forwards that ref to the browser `<video>` node. This lets the `App` component play and pause the `<video>`.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"586":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport MyVideoPlayer from './MyVideoPlayer.js';\n\nexport default function App() {\n\nconst ref = useRef(null);\n\nreturn (\n\n<>\n\n<button onClick={() => ref.current.play()}>\n\nPlay\n\n</button>\n\n<button onClick={() => ref.current.pause()}>\n\nPause\n\n</button>\n\n<br />\n\n<MyVideoPlayer\n\nref={ref}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\ntype=\"video/mp4\"\n\nwidth=\"250\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js MyVideoPlayer.js\n\nimport { forwardRef } from 'react';\n\nconst VideoPlayer = forwardRef(function VideoPlayer({ src, type, width }, ref) {\n\nreturn (\n\n<video width={width} ref={ref}>\n\n<source\n\nsrc={src}\n\ntype={type}\n\n/>\n\n</video>\n\n);\n\n});\n\nexport default VideoPlayer;\n\n```\n\n```css\n\nbutton { margin-bottom: 10px; margin-right: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Forwarding a ref through multiple components {/*forwarding-a-ref-through-multiple-components*/}\n\nInstead of forwarding a `ref` to a DOM node, you can forward it to your own component like `MyInput`:\n\n```js {1,5}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"587":{"pageContent":"Instead of forwarding a `ref` to a DOM node, you can forward it to your own component like `MyInput`:\n\n```js {1,5}\n\nconst FormField = forwardRef(function FormField(props, ref) {\n\n// ...\n\nreturn (\n\n<>\n\n<MyInput ref={ref} />\n\n...\n\n</>\n\n);\n\n});\n\n```\n\nIf that `MyInput` component forwards a ref to its `<input>`, a ref to `FormField` will give you that `<input>`:\n\n```js {2,5,10}\n\nfunction Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n}\n\nreturn (\n\n<form>\n\n<FormField label=\"Enter your name:\" ref={ref} isRequired={true} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\nThe `Form` component defines a ref and passes it to `FormField`. The `FormField` component forwards that ref to `MyInput`, which forwards this ref to a browser `<input>` DOM node. This is how `Form` accesses that DOM node.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport FormField from './FormField.js';\n\nexport default function Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"588":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport FormField from './FormField.js';\n\nexport default function Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n}\n\nreturn (\n\n<form>\n\n<FormField label=\"Enter your name:\" ref={ref} isRequired={true} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```js FormField.js\n\nimport { forwardRef, useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nconst FormField = forwardRef(function FormField({ label, isRequired }, ref) {\n\nconst [value, setValue] = useState('');\n\nreturn (\n\n<>\n\n<MyInput\n\nref={ref}\n\nlabel={label}\n\nvalue={value}\n\nonChange={e => setValue(e.target.value)}\n\n/>\n\n{(isRequired && value === '') &&\n\n<i>Required</i>\n\n}\n\n</>\n\n);\n\n});\n\nexport default FormField;\n\n```\n\n```js MyInput.js\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n\nconst { label, ...otherProps } = props;\n\nreturn (\n\n<label>\n\n{label}\n\n<input {...otherProps} ref={ref} />\n\n</label>\n\n);\n\n});\n\nexport default MyInput;\n\n```\n\n```css\n\ninput, button {\n\nmargin: 5px;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"589":{"pageContent":"const { label, ...otherProps } = props;\n\nreturn (\n\n<label>\n\n{label}\n\n<input {...otherProps} ref={ref} />\n\n</label>\n\n);\n\n});\n\nexport default MyInput;\n\n```\n\n```css\n\ninput, button {\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Exposing an imperative handle instead of a DOM node {/*exposing-an-imperative-handle-instead-of-a-dom-node*/}\n\nInstead of exposing an entire DOM node, you can expose a custom object, called an *imperative handle,* with a more constrained set of methods. To do this, you'd need to define a separate ref to hold the DOM node:\n\n```js {2,6}\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);\n\n// ...\n\nreturn <input {...props} ref={inputRef} />;\n\n});\n\n```\n\nThen pass the `ref` you received to [`useImperativeHandle`](/reference/react/useImperativeHandle) and specify the value you want to expose to the `ref`:\n\n```js {6-15}\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"590":{"pageContent":"```js {6-15}\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\nfocus() {\n\ninputRef.current.focus();\n\n},\n\nscrollIntoView() {\n\ninputRef.current.scrollIntoView();\n\n},\n\n};\n\n}, []);\n\nreturn <input {...props} ref={inputRef} />;\n\n});\n\n```\n\nIf some component gets a ref to `MyInput` now, it will only receive your `{ focus, scrollIntoView }` object instead of the DOM node. This lets you limit the information you expose about your DOM node to the minimum.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n// This won't work because the DOM node isn't exposed:\n\n// ref.current.style.opacity = 0.5;\n\n}\n\nreturn (\n\n<form>\n\n<MyInput label=\"Enter your name:\" ref={ref} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```js MyInput.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"591":{"pageContent":"// ref.current.style.opacity = 0.5;\n\n}\n\nreturn (\n\n<form>\n\n<MyInput label=\"Enter your name:\" ref={ref} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```js MyInput.js\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\nfocus() {\n\ninputRef.current.focus();\n\n},\n\nscrollIntoView() {\n\ninputRef.current.scrollIntoView();\n\n},\n\n};\n\n}, []);\n\nreturn <input {...props} ref={inputRef} />;\n\n});\n\nexport default MyInput;\n\n```\n\n```css\n\ninput {\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n[Read more about using imperative handles.](/reference/react/useImperativeHandle)\n\n<Pitfall>\n\n*Do not overuse refs.** You should only use refs for *imperative* behaviors that you can't express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"592":{"pageContent":"*If you can express something as a prop, you should not use a ref.** For example, instead of exposing an imperative handle like `{ open, close }` from a `Modal` component, it is better to take `isOpen` as a prop like `<Modal isOpen={isOpen} />`. [Effects](/learn/synchronizing-with-effects) can help you expose imperative behaviors via props.\n\n</Pitfall>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My component is wrapped in `forwardRef`, but the `ref` to it is always `null` {/*my-component-is-wrapped-in-forwardref-but-the-ref-to-it-is-always-null*/}\n\nThis usually means that you forgot to actually use the `ref` that you received.\n\nFor example, this component doesn't do anything with its `ref`:\n\n```js {1}\n\nconst MyInput = forwardRef(function MyInput({ label }, ref) {\n\nreturn (\n\n<label>\n\n{label}\n\n<input />\n\n</label>\n\n);\n\n});\n\n```\n\nTo fix it, pass the `ref` down to a DOM node or another component that can accept a ref:\n\n```js {1,5}\n\nconst MyInput = forwardRef(function MyInput({ label }, ref) {\n\nreturn (\n\n<label>\n\n{label}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"593":{"pageContent":"</label>\n\n);\n\n});\n\n```\n\nTo fix it, pass the `ref` down to a DOM node or another component that can accept a ref:\n\n```js {1,5}\n\nconst MyInput = forwardRef(function MyInput({ label }, ref) {\n\nreturn (\n\n<label>\n\n{label}\n\n<input ref={ref} />\n\n</label>\n\n);\n\n});\n\n```\n\nThe `ref` to `MyInput` could also be `null` if some of the logic is conditional:\n\n```js {1,5}\n\nconst MyInput = forwardRef(function MyInput({ label, showInput }, ref) {\n\nreturn (\n\n<label>\n\n{label}\n\n{showInput && <input ref={ref} />}\n\n</label>\n\n);\n\n});\n\n```\n\nIf `showInput` is `false`, then the ref won't be forwarded to any node, and a ref to `MyInput` will remain empty. This is particularly easy to miss if the condition is hidden inside another component, like `Panel` in this example:\n\n```js {5,7}\n\nconst MyInput = forwardRef(function MyInput({ label, showInput }, ref) {\n\nreturn (\n\n<label>\n\n{label}\n\n<Panel isExpanded={showInput}>\n\n<input ref={ref} />\n\n</Panel>\n\n</label>\n\n);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/forwardRef.md"}},"594":{"pageContent":"--\n\ntitle: useDebugValue\n\n--\n\n<Intro>\n\n`useDebugValue` is a React Hook that lets you add a label to a custom Hook in [React DevTools.](/learn/react-developer-tools)\n\n```js\n\nuseDebugValue(value, format?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useDebugValue(value, format?)` {/*usedebugvalue*/}\n\nCall `useDebugValue` at the top level of your [custom Hook](/learn/reusing-logic-with-custom-hooks) to display a readable debug value:\n\n```js\n\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n// ...\n\nuseDebugValue(isOnline ? 'Online' : 'Offline');\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`value`: The value you want to display in React DevTools. It can have any type.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDebugValue.md"}},"595":{"pageContent":"// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`value`: The value you want to display in React DevTools. It can have any type.\n\n**optional** `format`: A formatting function. When the component is inspected, React DevTools will call the formatting function with the `value` as the argument, and then display the returned formatted value (which may have any type). If you don't specify the formatting function, the original `value` itself will be displayed.\n\n#### Returns {/*returns*/}\n\n`useDebugValue` does not return anything.\n\n## Usage {/*usage*/}\n\n### Adding a label to a custom Hook {/*adding-a-label-to-a-custom-hook*/}\n\nCall `useDebugValue` at the top level of your [custom Hook](/learn/reusing-logic-with-custom-hooks) to display a readable <CodeStep step={1}>debug value</CodeStep> for [React DevTools.](/learn/react-developer-tools)\n\n```js [[1, 5, \"isOnline ? 'Online' : 'Offline'\"]]\n\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n// ...","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDebugValue.md"}},"596":{"pageContent":"```js [[1, 5, \"isOnline ? 'Online' : 'Offline'\"]]\n\nimport { useDebugValue } from 'react';\n\nfunction useOnlineStatus() {\n\n// ...\n\nuseDebugValue(isOnline ? 'Online' : 'Offline');\n\n// ...\n\n}\n\n```\n\nThis gives components calling `useOnlineStatus` a label like `OnlineStatus: \"Online\"` when you inspect them:\n\n![A screenshot of React DevTools showing the debug value](/images/docs/react-devtools-usedebugvalue.png)\n\nWithout the `useDebugValue` call, only the underlying data (in this example, `true`) would be displayed.\n\n<Sandpack>\n\n```js\n\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nexport default function App() {\n\nreturn <StatusBar />;\n\n}\n\n```\n\n```js useOnlineStatus.js active\n\nimport { useSyncExternalStore, useDebugValue } from 'react';\n\nexport function useOnlineStatus() {\n\nconst isOnline = useSyncExternalStore(subscribe, () => navigator.onLine, () => true);\n\nuseDebugValue(isOnline ? 'Online' : 'Offline');","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDebugValue.md"}},"597":{"pageContent":"export function useOnlineStatus() {\n\nconst isOnline = useSyncExternalStore(subscribe, () => navigator.onLine, () => true);\n\nuseDebugValue(isOnline ? 'Online' : 'Offline');\n\nreturn isOnline;\n\n}\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\nWe don't recommend adding debug values to every custom Hook. It's most valuable for custom Hooks that are part of shared libraries and that have a complex internal data structure that's difficult to inspect.\n\n</Note>\n\n--\n\n### Deferring formatting of a debug value {/*deferring-formatting-of-a-debug-value*/}\n\nYou can also pass a formatting function as the second argument to `useDebugValue`:\n\n```js [[1, 1, \"date\", 18], [2, 1, \"date.toDateString()\"]]\n\nuseDebugValue(date, date => date.toDateString());\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDebugValue.md"}},"598":{"pageContent":"You can also pass a formatting function as the second argument to `useDebugValue`:\n\n```js [[1, 1, \"date\", 18], [2, 1, \"date.toDateString()\"]]\n\nuseDebugValue(date, date => date.toDateString());\n\n```\n\nYour formatting function will receive the <CodeStep step={1}>debug value</CodeStep> as a parameter and should return a <CodeStep step={2}>formatted display value</CodeStep>. When your component is inspected, React DevTools will call the formatting function and display its result.\n\nThis lets you avoid running potentially expensive formatting logic unless the component is actually inspected. For example, if `date` is a Date value, this avoids calling `toDateString()` on it for every render of your component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDebugValue.md"}},"599":{"pageContent":"--\n\ntitle: memo\n\n--\n\n<Intro>\n\n`memo` lets you skip re-rendering a component when its props are unchanged.\n\n```\n\nconst MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `memo(Component, arePropsEqual?)` {/*memo*/}\n\nWrap a component in `memo` to get a *memoized* version of that component. This memoized version of your component will usually not be re-rendered when its parent component is re-rendered as long as its props have not changed. But React may still re-render it: memoization is only a performance optimization, not a guarantee.\n\n```js\n\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props) {\n\n// ...\n\n});\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"600":{"pageContent":"```js\n\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props) {\n\n// ...\n\n});\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`Component`: The component that you want to memoize. The `memo` does not modify this component, but returns a new, memoized component instead. Any valid React component, including functions and [`forwardRef`](/reference/react/forwardRef) components, is accepted.\n\n**optional** `arePropsEqual`: A function that accepts two arguments: the component's previous props, and its new props. It should return `true` if the old and new props are equal: that is, if the component will render the same output and behave in the same way with the new props as with the old. Otherwise it should return `false`.\n\n#### Returns {/*returns*/}\n\n`memo` returns a new React component. It behaves the same as the component provided to `memo` except that React will not always re-render it when its parent is being re-rendered unless its props have changed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"601":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Skipping re-rendering when props are unchanged {/*skipping-re-rendering-when-props-are-unchanged*/}\n\nReact normally re-renders a component whenever its parent re-renders. With `memo`, you can create a component that React will not re-render when its parent re-renders so long as its new props are the same as the old props. Such a component is said to be *memoized*.\n\nTo memoize a component, wrap it in a call to `memo` and use the value that it returns in place of your original component:\n\n```js\n\nconst Greeting = memo(function Greeting({ name }) {\n\nreturn <h1>Hello, {name}!</h1>;\n\n});\n\nexport default Greeting;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"602":{"pageContent":"```js\n\nconst Greeting = memo(function Greeting({ name }) {\n\nreturn <h1>Hello, {name}!</h1>;\n\n});\n\nexport default Greeting;\n\n```\n\nA React component should always have [pure rendering logic.](/learn/keeping-components-pure) This means that it must return the same output if its props, state, and context haven't changed. By using `memo`, you are telling React that your component complies with this requirement, so React doesn't need to re-render as long as its props haven't changed. When you use `memo`, your component will still re-render if its own state changes or if a context that it's using changes.\n\nIn this example, notice that the `Greeting` component re-renders whenever `name` is changed (because that's one of its props), but not when `address` is changed (because it's not passed to `Greeting` as a prop):\n\n<Sandpack>\n\n```js\n\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"603":{"pageContent":"<Sandpack>\n\n```js\n\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}\n\n<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>\n\n<Greeting name={name} />\n\n</>\n\n);\n\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n\nconsole.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n\nreturn <h3>Hello{name && ', '}{name}!</h3>;\n\n});\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-bottom: 16px;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\n*You should only rely on `memo` as a performance optimization.** If your code doesn't work without it, find the underlying problem and fix it first. Then you may add `memo` to improve performance.\n\n</Note>\n\n<DeepDive>\n\n#### Should you add memo everywhere? {/*should-you-add-memo-everywhere*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"604":{"pageContent":"</Note>\n\n<DeepDive>\n\n#### Should you add memo everywhere? {/*should-you-add-memo-everywhere*/}\n\nIf your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"605":{"pageContent":"Optimizing with `memo`  is only valuable when your component re-renders often with the same exact props, and its re-rendering logic is expensive. If there is no perceptible lag when your component re-renders, `memo` is unnecessary. Keep in mind that `memo` is completely useless if the props passed to your component are *always different,* such as if you pass an object or a plain function defined during rendering. This is why you will often need [`useMemo`](/reference/react/useMemo#skipping-re-rendering-of-components) and [`useCallback`](/reference/react/useCallback#skipping-re-rendering-of-components) together with `memo`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"606":{"pageContent":"There is no benefit to wrapping a component in `memo` in other cases. There is no significant harm to doing that either, so some teams choose to not think about individual cases, and memoize as much as possible. The downside of this approach is that code becomes less readable. Also, not all memoization is effective: a single value that's \"always new\" is enough to break memoization for an entire component.\n\n*In practice, you can make a lot of memoization unnecessary by following a few principles:**\n\n1. When a component visually wraps other components, let it [accept JSX as children.](/learn/passing-props-to-a-component#passing-jsx-as-children) This way, when the wrapper component updates its own state, React knows that its children don't need to re-render.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"607":{"pageContent":"1. Prefer local state and don't [lift state up](/learn/sharing-state-between-components) any further than necessary. For example, don't keep transient state like forms and whether an item is hovered at the top of your tree or in a global state library.\n\n1. Keep your [rendering logic pure.](/learn/keeping-components-pure) If re-rendering a component causes a problem or produces some noticeable visual artifact, it's a bug in your component! Fix the bug instead of adding memoization.\n\n1. Avoid [unnecessary Effects that update state.](/learn/you-might-not-need-an-effect) Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.\n\n1. Try to [remove unnecessary dependencies from your Effects.](/learn/removing-effect-dependencies) For example, instead of memoization, it's often simpler to move some object or a function inside an Effect or outside the component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"608":{"pageContent":"If a specific interaction still feels laggy, [use the React Developer Tools profiler](/blog/2018/09/10/introducing-the-react-profiler.html) to see which components would benefit the most from memoization, and add memoization where needed. These principles make your components easier to debug and understand, so it's good to follow them in any case. In the long term, we're researching [doing granular memoization automatically](https://www.youtube.com/watch?v=lGEMwh32soc) to solve this once and for all.\n\n</DeepDive>\n\n--\n\n### Updating a memoized component using state {/*updating-a-memoized-component-using-state*/}\n\nEven when a component is memoized, it will still re-render when its own state changes. Memoization only has to do with props that are passed to the component from its parent.\n\n<Sandpack>\n\n```js\n\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"609":{"pageContent":"<Sandpack>\n\n```js\n\nimport { memo, useState } from 'react';\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}\n\n<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>\n\n<Greeting name={name} />\n\n</>\n\n);\n\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n\nconsole.log('Greeting was rendered at', new Date().toLocaleTimeString());\n\nconst [greeting, setGreeting] = useState('Hello');\n\nreturn (\n\n<>\n\n<h3>{greeting}{name && ', '}{name}!</h3>\n\n<GreetingSelector value={greeting} onChange={setGreeting} />\n\n</>\n\n);\n\n});\n\nfunction GreetingSelector({ value, onChange }) {\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"radio\"\n\nchecked={value === 'Hello'}\n\nonChange={e => onChange('Hello')}\n\n/>\n\nRegular greeting\n\n</label>\n\n<label>\n\n<input\n\ntype=\"radio\"\n\nchecked={value === 'Hello and welcome'}\n\nonChange={e => onChange('Hello and welcome')}\n\n/>\n\nEnthusiastic greeting\n\n</label>\n\n</>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"610":{"pageContent":"/>\n\nRegular greeting\n\n</label>\n\n<label>\n\n<input\n\ntype=\"radio\"\n\nchecked={value === 'Hello and welcome'}\n\nonChange={e => onChange('Hello and welcome')}\n\n/>\n\nEnthusiastic greeting\n\n</label>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-bottom: 16px;\n\n}\n\n```\n\n</Sandpack>\n\nIf you set a state variable to its current value, React will skip re-rendering your component even without `memo`. You may still see your component function being called an extra time, but the result will be discarded.\n\n--\n\n### Updating a memoized component using a context {/*updating-a-memoized-component-using-a-context*/}\n\nEven when a component is memoized, it will still re-render when a context that it's using changes. Memoization only has to do with props that are passed to the component from its parent.\n\n<Sandpack>\n\n```js\n\nimport { createContext, memo, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('dark');\n\nfunction handleClick() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"611":{"pageContent":"const ThemeContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('dark');\n\nfunction handleClick() {\n\nsetTheme(theme === 'dark' ? 'light' : 'dark');\n\n}\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<button onClick={handleClick}>\n\nSwitch theme\n\n</button>\n\n<Greeting name=\"Taylor\" />\n\n</ThemeContext.Provider>\n\n);\n\n}\n\nconst Greeting = memo(function Greeting({ name }) {\n\nconsole.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n\nconst theme = useContext(ThemeContext);\n\nreturn (\n\n<h3 className={theme}>Hello, {name}!</h3>\n\n);\n\n});\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-bottom: 16px;\n\n}\n\n.light {\n\ncolor: black;\n\nbackground-color: white;\n\n}\n\n.dark {\n\ncolor: white;\n\nbackground-color: black;\n\n}\n\n```\n\n</Sandpack>\n\nTo make your component re-render only when a _part_ of some context changes, split your component in two. Read what you need from the context in the outer component, and pass it down to a memoized child as a prop.\n\n--\n\n### Minimizing props changes {/*minimizing-props-changes*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"612":{"pageContent":"--\n\n### Minimizing props changes {/*minimizing-props-changes*/}\n\nWhen you use `memo`, your component re-renders whenever any prop is not *shallowly equal* to what it was previously. This means that React compares every prop in your component with the previous value of that prop using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. Note that `Object.is(3, 3)` is `true`, but `Object.is({}, {})` is `false`.\n\nTo get the most out of `memo`, minimize the times that the props change. For example, if the prop is an object, prevent the parent component from re-creating that object every time by using [`useMemo`:](/reference/react/useMemo)\n\n```js {5-8}\n\nfunction Page() {\n\nconst [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\nconst person = useMemo(\n\n() => ({ name, age }),\n\n[name, age]\n\n);\n\nreturn <Profile person={person} />;\n\n}\n\nconst Profile = memo(function Profile({ person }) {\n\n// ...\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"613":{"pageContent":"const [age, setAge] = useState(42);\n\nconst person = useMemo(\n\n() => ({ name, age }),\n\n[name, age]\n\n);\n\nreturn <Profile person={person} />;\n\n}\n\nconst Profile = memo(function Profile({ person }) {\n\n// ...\n\n});\n\n```\n\nA better way to minimize props changes is to make sure the component accepts the minimum necessary information in its props. For example, it could accept individual values instead of a whole object:\n\n```js {4,7}\n\nfunction Page() {\n\nconst [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\nreturn <Profile name={name} age={age} />;\n\n}\n\nconst Profile = memo(function Profile({ name, age }) {\n\n// ...\n\n});\n\n```\n\nEven individual values can sometimes be projected to ones that change less frequently. For example, here a component accepts a boolean indicating the presence of a value rather than the value itself:\n\n```js {3}\n\nfunction GroupsLanding({ person }) {\n\nconst hasGroups = person.groups !== null;\n\nreturn <CallToAction hasGroups={hasGroups} />;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"614":{"pageContent":"```js {3}\n\nfunction GroupsLanding({ person }) {\n\nconst hasGroups = person.groups !== null;\n\nreturn <CallToAction hasGroups={hasGroups} />;\n\n}\n\nconst CallToAction = memo(function CallToAction({ hasGroups }) {\n\n// ...\n\n});\n\n```\n\nWhen you need to pass a function to memoized component, either declare it outside your component so that it never changes, or [`useCallback`](/reference/react/useCallback#skipping-re-rendering-of-components) to cache its definition between re-renders.\n\n--\n\n### Specifying a custom comparison function {/*specifying-a-custom-comparison-function*/}\n\nIn rare cases it may be infeasible to minimize the props changes of a memoized component. In that case, you can provide a custom comparison function, which React will use to compare the old and new props instead of using shallow equality. This function is passed as a second argument to `memo`. It should return `true` only if the new props would result in the same output as the old props; otherwise it should return `false`.\n\n```js {3}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"615":{"pageContent":"```js {3}\n\nconst Chart = memo(function Chart({ dataPoints }) {\n\n// ...\n\n}, arePropsEqual);\n\nfunction arePropsEqual(oldProps, newProps) {\n\nreturn (\n\noldProps.dataPoints.length === newProps.dataPoints.length &&\n\noldProps.dataPoints.every((oldPoint, index) => {\n\nconst newPoint = newProps.dataPoints[index];\n\nreturn oldPoint.x === newPoint.x && oldPoint.y === newPoint.y;\n\n})\n\n);\n\n}\n\n```\n\nIf you do this, use the Performance panel in your browser developer tools to make sure that your comparison function is actually faster than re-rendering the component. You might be surprised.\n\nWhen you do performance measurements, make sure that React is running in the production mode.\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"616":{"pageContent":"When you do performance measurements, make sure that React is running in the production mode.\n\n<Pitfall>\n\nIf you provide a custom `arePropsEqual` implementation, **you must compare every prop, including functions.** Functions often [close over](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) the props and state of parent components. If you return `true` when `oldProps.onClick !== newProps.onClick`, your component will keep \"seeing\" the props and state from a previous render inside its `onClick` handler, leading to very confusing bugs.\n\nAvoid doing deep equality checks inside `arePropsEqual` unless you are 100% sure that the data structure you're working with has a known limited depth. **Deep equality checks can become incredibly slow** and can freeze your app for many seconds if someone changes the data structure later.\n\n</Pitfall>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"617":{"pageContent":"</Pitfall>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My component re-renders when a prop is an object, array, or function {/*my-component-rerenders-when-a-prop-is-an-object-or-array*/}\n\nReact compares old and new props by shallow equality: that is, it considers whether each new prop is reference-equal to the old prop. If you create a new object or array each time the parent is re-rendered, even if the individual elements are each the same, React will still consider it to be changed. Similarly, if you create a new function when rendering the parent component, React will consider it to have changed even if the function has the same definition.  Avoid this by [simplifying props or memoizing props in the parent component](#minimizing-props-changes).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/memo.md"}},"618":{"pageContent":"--\n\ntitle: createFactory\n\n--\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [See the alternatives.](#alternatives)\n\n</Deprecated>\n\n<Intro>\n\n`createFactory` lets you create a function that produces React elements of a given type.\n\n```js\n\nconst factory = createFactory(type)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `createFactory(type)` {/*createfactory*/}\n\nCall `createFactory(type)` to create a factory function which produces React elements of a given `type`.\n\n```js\n\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n\n```\n\nThen you can use it to create React elements without JSX:\n\n```js\n\nexport default function App() {\n\nreturn button({\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"619":{"pageContent":"```js\n\nexport default function App() {\n\nreturn button({\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`type`: The `type` argument must be a valid React component type. For example, it could be a tag name string (such as `'div'` or `'span'`), or a React component (a function, a class, or a special component like [`Fragment`](/reference/react/Fragment)).\n\n#### Returns {/*returns*/}\n\nReturns a factory function. That factory function receives a `props` object as the first argument, followed by a list of `...children` arguments, and returns a React element with the given `type`, `props` and `children`.\n\n--\n\n## Usage {/*usage*/}\n\n### Creating React elements with a factory {/*creating-react-elements-with-a-factory*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"620":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Creating React elements with a factory {/*creating-react-elements-with-a-factory*/}\n\nAlthough most React projects use [JSX](/learn/writing-markup-with-jsx) to describe the user interface, JSX is not required. In the past, `createFactory` used to be one of the ways you could describe the user interface without JSX.\n\nCall `createFactory` to create a *factory function* for a specific element type like `'button'`:\n\n```js\n\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n\n```\n\nCalling that factory function will produce React elements with the props and children you have provided:\n\n<Sandpack>\n\n```js App.js\n\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n\nexport default function App() {\n\nreturn button({\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"621":{"pageContent":"```js App.js\n\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n\nexport default function App() {\n\nreturn button({\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n</Sandpack>\n\nThis is how `createFactory` was used as an alternative to JSX. However, `createFactory` is deprecated, and you should not call `createFactory` in any new code. See how to migrate away from `createFactory` below.\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Copying `createFactory` into your project {/*copying-createfactory-into-your-project*/}\n\nIf your project has many `createFactory` calls, copy this `createFactory.js` implementation into your project:\n\n<Sandpack>\n\n```js App.js\n\nimport { createFactory } from './createFactory.js';\n\nconst button = createFactory('button');\n\nexport default function App() {\n\nreturn button({\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n```js createFactory.js\n\nimport { createElement } from 'react';\n\nexport function createFactory(type) {\n\nreturn createElement.bind(null, type);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"622":{"pageContent":"onClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n```js createFactory.js\n\nimport { createElement } from 'react';\n\nexport function createFactory(type) {\n\nreturn createElement.bind(null, type);\n\n}\n\n```\n\n</Sandpack>\n\nThis lets you keep all of your code unchanged except the imports.\n\n--\n\n### Replacing `createFactory` with `createElement` {/*replacing-createfactory-with-createelement*/}\n\nIf you have a few `createFactory` calls that you don't mind porting manually, and you don't want to use JSX, you can replace every call a factory function with a [`createElement`](/reference/react/createElement) call. For example, you can replace this code:\n\n```js {1,3,6}\n\nimport { createFactory } from 'react';\n\nconst button = createFactory('button');\n\nexport default function App() {\n\nreturn button({\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\nwith this code:\n\n```js {1,4}\n\nimport { createElement } from 'react';\n\nexport default function App() {\n\nreturn createElement('button', {\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"623":{"pageContent":"}\n\n}, 'Click me');\n\n}\n\n```\n\nwith this code:\n\n```js {1,4}\n\nimport { createElement } from 'react';\n\nexport default function App() {\n\nreturn createElement('button', {\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\nHere is a complete example of using React without JSX:\n\n<Sandpack>\n\n```js App.js\n\nimport { createElement } from 'react';\n\nexport default function App() {\n\nreturn createElement('button', {\n\nonClick: () => {\n\nalert('Clicked!')\n\n}\n\n}, 'Click me');\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Replacing `createFactory` with JSX {/*replacing-createfactory-with-jsx*/}\n\nFinally, you can use JSX instead of `createFactory`. This is the most common way to use React:\n\n<Sandpack>\n\n```js App.js\n\nexport default function App() {\n\nreturn (\n\n<button onClick={() => {\n\nalert('Clicked!');\n\n}}>\n\nClick me\n\n</button>\n\n);\n\n};\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nSometimes, your existing code might pass some variable as a `type` instead of a constant like `'button'`:\n\n```js {3}\n\nfunction Heading({ isSubheading, ...props }) {\n\nconst type = isSubheading ? 'h2' : 'h1';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"624":{"pageContent":"Sometimes, your existing code might pass some variable as a `type` instead of a constant like `'button'`:\n\n```js {3}\n\nfunction Heading({ isSubheading, ...props }) {\n\nconst type = isSubheading ? 'h2' : 'h1';\n\nconst factory = createFactory(type);\n\nreturn factory(props);\n\n}\n\n```\n\nTo do the same in JSX, you need to rename your variable to start with an uppercase letter like `Type`:\n\n```js {2,3}\n\nfunction Heading({ isSubheading, ...props }) {\n\nconst Type = isSubheading ? 'h2' : 'h1';\n\nreturn <Type {...props} />;\n\n}\n\n```\n\nOtherwise React will interpret `<type>` as a built-in HTML tag because it is lowercase.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createFactory.md"}},"625":{"pageContent":"--\n\ntitle: createElement\n\n--\n\n<Intro>\n\n`createElement` lets you create a React element. It serves as an alternative to writing [JSX.](/learn/writing-markup-with-jsx)\n\n```js\n\nconst element = createElement(type, props, ...children)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `createElement(type, props, ...children)` {/*createelement*/}\n\nCall `createElement` to create a React element with the given `type`, `props`, and `children`.\n\n```js\n\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\nreturn createElement(\n\n'h1',\n\n{ className: 'greeting' },\n\n'Hello'\n\n);\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`type`: The `type` argument must be a valid React component type. For example, it could be a tag name string (such as `'div'` or `'span'`), or a React component (a function, a class, or a special component like [`Fragment`](/reference/react/Fragment)).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"626":{"pageContent":"`props`: The `props` argument must either be an object or `null`. If you pass `null`, it will be treated the same as an empty object. React will create an element with props matching the `props` you have passed. Note that `ref` and `key` from your `props` object are special and will *not* be available as `element.props.ref` and `element.props.key` on the returned `element`. They will be available as `element.ref` and `element.key`.\n\n**optional** `...children`: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, [portals](/reference/react-dom/createPortal), empty nodes (`null`, `undefined`, `true`, and `false`), and arrays of React nodes.\n\n#### Returns {/*returns*/}\n\n`createElement` returns a React element object with a few properties:\n\n`type`: The `type` you have passed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"627":{"pageContent":"#### Returns {/*returns*/}\n\n`createElement` returns a React element object with a few properties:\n\n`type`: The `type` you have passed.\n\n`props`: The `props` you have passed except for `ref` and `key`. If the `type` is a component with legacy `type.defaultProps`, then any missing or undefined `props` will get the values from `type.defaultProps`.\n\n`ref`: The `ref` you have passed. If missing, `null`.\n\n`key`: The `key` you have passed, coerced to a string. If missing, `null`.\n\nUsually, you'll return the element from your component or make it a child of another element. Although you may read the element's properties, it's best to treat every element as opaque after it's created, and only render it.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"628":{"pageContent":"#### Caveats {/*caveats*/}\n\nYou must **treat React elements and their props as [immutable](https://en.wikipedia.org/wiki/Immutable_object)** and never change their contents after creation. In development, React will [freeze](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) the returned element and its `props` property shallowly to enforce this.\n\nWhen you use JSX, **you must start a tag with a capital letter to render your own custom component.** In other words, `<Something />` is equivalent to `createElement(Something)`, but `<something />` (lowercase) is equivalent to `createElement('something')` (note it's a string, so it will be treated as a built-in HTML tag).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"629":{"pageContent":"You should only **pass children as multiple arguments to `createElement` if they are all statically known,** like `createElement('h1', {}, child1, child2, child3)`. If your children are dynamic, pass the entire array as the third argument: `createElement('ul', {}, listItems)`. This ensures that React will [warn you about missing `key`s](/learn/rendering-lists#keeping-list-items-in-order-with-key) for any dynamic lists. For static lists this is not necessary because they never reorder.\n\n--\n\n## Usage {/*usage*/}\n\n### Creating an element without JSX {/*creating-an-element-without-jsx*/}\n\nIf you don't like [JSX](/learn/writing-markup-with-jsx) or can't use it in your project, you can use `createElement` as an alternative.\n\nTo create an element without JSX, call `createElement` with some <CodeStep step={1}>type</CodeStep>, <CodeStep step={2}>props</CodeStep>, and <CodeStep step={3}>children</CodeStep>:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"630":{"pageContent":"To create an element without JSX, call `createElement` with some <CodeStep step={1}>type</CodeStep>, <CodeStep step={2}>props</CodeStep>, and <CodeStep step={3}>children</CodeStep>:\n\n```js [[1, 5, \"'h1'\"], [2, 6, \"{ className: 'greeting' }\"], [3, 7, \"'Hello ',\"], [3, 8, \"createElement('i', null, name),\"], [3, 9, \"'. Welcome!'\"]]\n\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\nreturn createElement(\n\n'h1',\n\n{ className: 'greeting' },\n\n'Hello ',\n\ncreateElement('i', null, name),\n\n'. Welcome!'\n\n);\n\n}\n\n```\n\nThe <CodeStep step={3}>children</CodeStep> are optional, and you can pass as many as you need (the example above has three children). This code will display a `<h1>` header with a greeting. For comparison, here is the same example rewritten with JSX:\n\n```js [[1, 3, \"h1\"], [2, 3, \"className=\\\\\"greeting\\\\\"\"], [3, 4, \"Hello <i>{name}</i>. Welcome!\"], [1, 5, \"h1\"]]\n\nfunction Greeting({ name }) {\n\nreturn (\n\n<h1 className=\"greeting\">\n\nHello <i>{name}</i>. Welcome!\n\n</h1>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"631":{"pageContent":"function Greeting({ name }) {\n\nreturn (\n\n<h1 className=\"greeting\">\n\nHello <i>{name}</i>. Welcome!\n\n</h1>\n\n);\n\n}\n\n```\n\nTo render your own React component, pass a function like `Greeting` as the <CodeStep step={1}>type</CodeStep> instead of a string like `'h1'`:\n\n```js [[1, 2, \"Greeting\"], [2, 2, \"{ name: 'Taylor' }\"]]\n\nexport default function App() {\n\nreturn createElement(Greeting, { name: 'Taylor' });\n\n}\n\n```\n\nWith JSX, it would look like this:\n\n```js [[1, 2, \"Greeting\"], [2, 2, \"name=\\\\\"Taylor\\\\\"\"]]\n\nexport default function App() {\n\nreturn <Greeting name=\"Taylor\" />;\n\n}\n\n```\n\nHere is a complete example written with `createElement`:\n\n<Sandpack>\n\n```js\n\nimport { createElement } from 'react';\n\nfunction Greeting({ name }) {\n\nreturn createElement(\n\n'h1',\n\n{ className: 'greeting' },\n\n'Hello ',\n\ncreateElement('i', null, name),\n\n'. Welcome!'\n\n);\n\n}\n\nexport default function App() {\n\nreturn createElement(\n\nGreeting,\n\n{ name: 'Taylor' }\n\n);\n\n}\n\n```\n\n```css\n\n.greeting {\n\ncolor: darkgreen;\n\nfont-family: Georgia;\n\n}\n\n```\n\n</Sandpack>\n\nAnd here is the same example written using JSX:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"632":{"pageContent":"return createElement(\n\nGreeting,\n\n{ name: 'Taylor' }\n\n);\n\n}\n\n```\n\n```css\n\n.greeting {\n\ncolor: darkgreen;\n\nfont-family: Georgia;\n\n}\n\n```\n\n</Sandpack>\n\nAnd here is the same example written using JSX:\n\n<Sandpack>\n\n```js\n\nfunction Greeting({ name }) {\n\nreturn (\n\n<h1 className=\"greeting\">\n\nHello <i>{name}</i>. Welcome!\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nreturn <Greeting name=\"Taylor\" />;\n\n}\n\n```\n\n```css\n\n.greeting {\n\ncolor: darkgreen;\n\nfont-family: Georgia;\n\n}\n\n```\n\n</Sandpack>\n\nBoth coding styles are fine, so you can use whichever one you prefer for your project. The main benefit of using JSX compared to `createElement` is that it's easy to see which closing tag corresponds to which opening tag.\n\n<DeepDive>\n\n#### What is a React element, exactly? {/*what-is-a-react-element-exactly*/}\n\nAn element is a lightweight description of a piece of the user interface. For example, both `<Greeting name=\"Taylor\" />` and `createElement(Greeting, { name: 'Taylor' })` produce an object like this:\n\n```js\n\n// Slightly simplified\n\n{\n\ntype: Greeting,\n\nprops: {\n\nname: 'Taylor'\n\n},","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"633":{"pageContent":"```js\n\n// Slightly simplified\n\n{\n\ntype: Greeting,\n\nprops: {\n\nname: 'Taylor'\n\n},\n\nkey: null,\n\nref: null,\n\n}\n\n```\n\n*Note that creating this object does not render the `Greeting` component or create any DOM elements.**\n\nA React element is more like a description--an instruction for React to later render the `Greeting` component. By returning this object from your `App` component, you tell React what to do next.\n\nCreating elements is extremely cheap so you don't need to try to optimize or avoid it.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createElement.md"}},"634":{"pageContent":"--\n\ntitle: Invalid ARIA Prop Warning\n\n--\n\nThis warning will fire if you attempt to render a DOM element with an `aria-*` prop that does not exist in the Web Accessibility Initiative (WAI) Accessible Rich Internet Application (ARIA) [specification](https://www.w3.org/TR/wai-aria-1.1/#states_and_properties).\n\n1. If you feel that you are using a valid prop, check the spelling carefully. `aria-labelledby` and `aria-activedescendant` are often misspelled.\n\n2. If you wrote `aria-role`, you may have meant `role`.\n\n3. Otherwise, if you're on the latest version of React DOM and verified that you're using a valid property name listed in the ARIA specification, please [report a bug](https://github.com/facebook/react/issues/new/choose).","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-aria-prop.md"}},"635":{"pageContent":"--\n\ntitle: 'Tutorial: Tic-Tac-Toe'\n\n--\n\n<Intro>\n\nYou will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you'll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.\n\n</Intro>\n\n<Note>\n\nThis tutorial is designed for people who prefer to **learn by doing** and want to quickly try making something tangible. If you prefer learning each concept step by step, start with [Describing the UI.](/learn/describing-the-ui)\n\n</Note>\n\nThe tutorial is divided into several sections:\n\n[Setup for the tutorial](#setup-for-the-tutorial) will give you **a starting point** to follow the tutorial.\n\n[Overview](#overview) will teach you **the fundamentals** of React: components, props, and state.\n\n[Completing the game](#completing-the-game) will teach you **the most common techniques** in React development.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"636":{"pageContent":"[Completing the game](#completing-the-game) will teach you **the most common techniques** in React development.\n\n[Adding time travel](#adding-time-travel) will give you **a deeper insight** into the unique strengths of React.\n\n### What are you building? {/*what-are-you-building*/}\n\nIn this tutorial, you'll build an interactive tic-tac-toe game with React.\n\nYou can see what it will look like when you're finished here:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"637":{"pageContent":"}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"638":{"pageContent":"<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst [currentMove, setCurrentMove] = useState(0);\n\nconst xIsNext = currentMove % 2 === 0;\n\nconst currentSquares = history[currentMove];\n\nfunction handlePlay(nextSquares) {\n\nconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\n}\n\nconst moves = history.map((squares, move) => {\n\nlet description;\n\nif (move > 0) {\n\ndescription = 'Go to move #' + move;\n\n} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li key={move}>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"639":{"pageContent":"</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"640":{"pageContent":"width: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nIf the code doesn't make sense to you yet, or if you are unfamiliar with the code's syntax, don't worry! The goal of this tutorial is to help you understand React and its syntax.\n\nWe recommend that you check out the tic-tac-toe game above before continuing with the tutorial. One of the features that you'll notice is that there is a numbered list to the right of the game's board. This list gives you a history of all of the moves that have occurred in the game, and it is updated as the game progresses.\n\nOnce you've played around with the finished tic-tac-toe game, keep scrolling. You'll start with a simpler template in this tutorial. Our next step is to set you up so that you can start building the game.\n\n## Setup for the tutorial {/*setup-for-the-tutorial*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"641":{"pageContent":"## Setup for the tutorial {/*setup-for-the-tutorial*/}\n\nIn the live code editor below, click **Fork** in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox allows you to write code in your browser and immediately view how your users will see the app you've created. The new tab should display an empty square and the starter code for this tutorial.\n\n<Sandpack>\n\n```js App.js\n\nexport default function Square() {\n\nreturn <button className=\"square\">X</button>;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"642":{"pageContent":"width: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\nYou can also follow this tutorial using your local development environment. To do this, you need to:\n\n1. Install [Node.js](https://nodejs.org/en/)\n\n1. In the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose **File > Export to ZIP** in that menu to download an archive of the files locally\n\n1. Unzip the archive, then open a terminal and `cd` to the directory you unzipped\n\n1. Install the dependencies with `npm install`\n\n1. Run `npm start` to start a local server and follow the prompts to view the code running in a browser\n\nIf you get stuck, don't let this stop you! Follow along online instead and try a local setup again later.\n\n</Note>\n\n## Overview {/*overview*/}\n\nNow that you're set up, let's get an overview of React!","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"643":{"pageContent":"If you get stuck, don't let this stop you! Follow along online instead and try a local setup again later.\n\n</Note>\n\n## Overview {/*overview*/}\n\nNow that you're set up, let's get an overview of React!\n\n### Inspecting the starter code {/*inspecting-the-starter-code*/}\n\nIn CodeSandbox you'll see three main sections:\n\n![CodeSandbox with starter code](../images/tutorial/react-starter-code-codesandbox.png)\n\n1. The _Files_ section with a list of files like `App.js`, `index.js`, `styles.css` and a folder called `public`\n\n1. The _code editor_ where you'll see the source code of your selected file\n\n1. The _browser_ section where you'll see how the code you've written will be displayed\n\nThe `App.js` file should be selected in the _Files_ section. The contents of that file in the _code editor_ should be:\n\n```jsx\n\nexport default function Square() {\n\nreturn <button className=\"square\">X</button>;\n\n}\n\n```\n\nThe _browser_ section should be displaying a square with a X in it like this:","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"644":{"pageContent":"```jsx\n\nexport default function Square() {\n\nreturn <button className=\"square\">X</button>;\n\n}\n\n```\n\nThe _browser_ section should be displaying a square with a X in it like this:\n\n![x-filled square](../images/tutorial/x-filled-square.png)\n\nNow let's have a look at the files in the starter code.\n\n#### `App.js` {/*appjs*/}\n\nThe code in `App.js` creates a _component_. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let's look at the component line by line to see what's going on:\n\n```js {1}\n\nexport default function Square() {\n\nreturn <button className=\"square\">X</button>;\n\n}\n\n```\n\nThe first line defines a function called `Square`. The `export` JavaScript keyword makes this function accessible outside of this file. The `default` keyword tells other files using your code that it's the main function in your file.\n\n```js {2}\n\nexport default function Square() {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"645":{"pageContent":"```js {2}\n\nexport default function Square() {\n\nreturn <button className=\"square\">X</button>;\n\n}\n\n```\n\nThe second line returns a button. The `return` JavaScript keyword means whatever comes after is returned as a value to the caller of the function. `<button>` is a *JSX element*. A JSX element is a combination of JavaScript code and HTML tags that describes what you'd like to display. `className=\"square\"` is a button property or *prop* that tells CSS how to style the button. `X` is the text displayed inside of the button and `</button>` closes the JSX element to indicate that any following content shouldn't be placed inside the button.\n\n#### `styles.css` {/*stylescss*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"646":{"pageContent":"#### `styles.css` {/*stylescss*/}\n\nClick on the file labeled `styles.css` in the _Files_ section of CodeSandbox. This file defines the styles for your React app. The first two _CSS selectors_ (`*` and `body`) define the style of large parts of your app while the `.square` selector defines the style of any component where the `className` property is set to `square`. In your code, that would match the button from your Square component in the `App.js` file.\n\n#### `index.js` {/*indexjs*/}\n\nClick on the file labeled `index.js` in the _Files_ section of CodeSandbox. You won't be editing this file during the tutorial but it is the bridge between the component you created in the `App.js` file and the web browser.\n\n```jsx\n\nimport {StrictMode} from 'react';\n\nimport {createRoot} from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App';\n\n```\n\nLines 1-5 brings all the necessary pieces together:\n\nReact\n\nReact's library to talk to web browsers (React DOM)\n\nthe styles for your components","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"647":{"pageContent":"import './styles.css';\n\nimport App from './App';\n\n```\n\nLines 1-5 brings all the necessary pieces together:\n\nReact\n\nReact's library to talk to web browsers (React DOM)\n\nthe styles for your components\n\nthe component you created in `App.js`.\n\nThe remainder of the file brings all the pieces together and injects the final product into `index.html` in the `public` folder.\n\n### Building the board {/*building-the-board*/}\n\nLet's get back to `App.js`. This is where you'll spend the rest of the tutorial.\n\nCurrently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\n\n```js {2}\n\nexport default function Square() {\n\nreturn <button className=\"square\">X</button><button className=\"square\">X</button>;\n\n}\n\n```\n\nYou'll get this error:\n\n<ConsoleBlock level=\"error\">\n\n/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment `<>...</>`?\n\n</ConsoleBlock>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"648":{"pageContent":"}\n\n```\n\nYou'll get this error:\n\n<ConsoleBlock level=\"error\">\n\n/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment `<>...</>`?\n\n</ConsoleBlock>\n\nReact components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use *fragments* (`<>` and `</>`) to wrap multiple adjacent JSX elements like this:\n\n```js {3-6}\n\nexport default function Square() {\n\nreturn (\n\n<>\n\n<button className=\"square\">X</button>\n\n<button className=\"square\">X</button>\n\n</>\n\n);\n\n}\n\n```\n\nNow you should see:\n\n![two x-filled squares](../images/tutorial/two-x-filled-squares.png)\n\nGreat! Now you just need to copy-paste a few times to add nine squares and...\n\n![nine x-filled squares in a line](../images/tutorial/nine-x-filled-squares.png)","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"649":{"pageContent":"Great! Now you just need to copy-paste a few times to add nine squares and...\n\n![nine x-filled squares in a line](../images/tutorial/nine-x-filled-squares.png)\n\nOh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you'll need to group your squares into rows with `div`s and add some CSS classes. While you're at it, you'll give each square a number to make sure you know where each square is displayed.\n\nIn the `App.js` file, update the `Square` component to look like this:\n\n```js {3-19}\n\nexport default function Square() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<button className=\"square\">1</button>\n\n<button className=\"square\">2</button>\n\n<button className=\"square\">3</button>\n\n</div>\n\n<div className=\"board-row\">\n\n<button className=\"square\">4</button>\n\n<button className=\"square\">5</button>\n\n<button className=\"square\">6</button>\n\n</div>\n\n<div className=\"board-row\">\n\n<button className=\"square\">7</button>\n\n<button className=\"square\">8</button>\n\n<button className=\"square\">9</button>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"650":{"pageContent":"<button className=\"square\">6</button>\n\n</div>\n\n<div className=\"board-row\">\n\n<button className=\"square\">7</button>\n\n<button className=\"square\">8</button>\n\n<button className=\"square\">9</button>\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\nThe CSS defined in `styles.css` styles the divs with the `className` of `board-row`. Now that you've grouped your components into rows with the styled `div`s you have your tic-tac-toe board:\n\n![tic-tac-toe board filled with numbers 1 through 9](../images/tutorial/number-filled-board.png)\n\nBut you now have a problem. Your component named `Square`, really isn't a square anymore. Let's fix that by changing the name to `Board`:\n\n```js {1}\n\nexport default function Board() {\n\n//...\n\n}\n\n```\n\nAt this point your code should look something like this:\n\n<Sandpack>\n\n```js\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<button className=\"square\">1</button>\n\n<button className=\"square\">2</button>\n\n<button className=\"square\">3</button>\n\n</div>\n\n<div className=\"board-row\">\n\n<button className=\"square\">4</button>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"651":{"pageContent":"<button className=\"square\">1</button>\n\n<button className=\"square\">2</button>\n\n<button className=\"square\">3</button>\n\n</div>\n\n<div className=\"board-row\">\n\n<button className=\"square\">4</button>\n\n<button className=\"square\">5</button>\n\n<button className=\"square\">6</button>\n\n</div>\n\n<div className=\"board-row\">\n\n<button className=\"square\">7</button>\n\n<button className=\"square\">8</button>\n\n<button className=\"square\">9</button>\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"652":{"pageContent":"width: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\nPsssst... That's a lot to type! It's okay to copy and paste code from this page. However, if you're up for a little challenge, we recommend to only copy the code that you've manually typed at least once yourself.\n\n</Note>\n\n### Passing data through props {/*passing-data-through-props*/}\n\nNext, you'll want to change the value of a square from empty to \"X\" when the user clicks on the square. With how you've built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React's component architecture allows you to create a reusable component to avoid messy, duplicated code.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"653":{"pageContent":"First, you are going to copy the line defining your first square (`<button className=\"square\">1</button>`) from your `Board` component into a new `Square` component:\n\n```js {1-3}\n\nfunction Square() {\n\nreturn <button className=\"square\">1</button>;\n\n}\n\nexport default function Board() {\n\n// ...\n\n}\n\n```\n\nThen you'll update the Board component to render that `Square` component using JSX syntax:\n\n```js {5-19}\n\n// ...\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\nNotice how unlike the browser `div`s, your own components `Board` and `Square` must start with a capital letter.\n\nLet's take a look:\n\n![one-filled board](../images/tutorial/board-filled-with-ones.png)","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"654":{"pageContent":"}\n\n```\n\nNotice how unlike the browser `div`s, your own components `Board` and `Square` must start with a capital letter.\n\nLet's take a look:\n\n![one-filled board](../images/tutorial/board-filled-with-ones.png)\n\nOh no! You lost the numbered squares you had before. Now each square says \"1\". To fix this, you will use *props* to pass the value each square should have from the parent component (`Board`) to the child component (`Square`).\n\nUpdate the `Square` component to read the `value` prop that you'll pass from the `Board`:\n\n```js {1}\n\nfunction Square({ value }) {\n\nreturn <button className=\"square\">1</button>;\n\n}\n\n```\n\n`function Square({ value })` indicates the Square component can be passed a prop called `value`.\n\nNow you want to display that `value` instead of `1` inside every square. Try doing it like this:\n\n```js {2}\n\nfunction Square({ value }) {\n\nreturn <button className=\"square\">value</button>;\n\n}\n\n```\n\nOops, this is not what you wanted:\n\n![value-filled board](../images/tutorial/board-filled-with-value.png)","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"655":{"pageContent":"```js {2}\n\nfunction Square({ value }) {\n\nreturn <button className=\"square\">value</button>;\n\n}\n\n```\n\nOops, this is not what you wanted:\n\n![value-filled board](../images/tutorial/board-filled-with-value.png)\n\nYou wanted to render the JavaScript variable called `value` from your component, not the word \"value\". To \"escape into JavaScript\" from JSX, you need curly braces. Add curly braces around `value` in JSX like so:\n\n```js {2}\n\nfunction Square({ value }) {\n\nreturn <button className=\"square\">{value}</button>;\n\n}\n\n```\n\nFor now, you should see an empty board:\n\n![empty board](../images/tutorial/empty-board.png)\n\nThis is because the `Board` component hasn't passed the `value` prop to each `Square` component it renders yet. To fix it you'll add the `value` prop to each `Square` component rendered by the `Board` component:\n\n```js {5-7,10-12,15-17}\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value=\"1\" />\n\n<Square value=\"2\" />\n\n<Square value=\"3\" />\n\n</div>\n\n<div className=\"board-row\">","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"656":{"pageContent":"```js {5-7,10-12,15-17}\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value=\"1\" />\n\n<Square value=\"2\" />\n\n<Square value=\"3\" />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value=\"4\" />\n\n<Square value=\"5\" />\n\n<Square value=\"6\" />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value=\"7\" />\n\n<Square value=\"8\" />\n\n<Square value=\"9\" />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\nNow you should see a grid of numbers again:\n\n![tic-tac-toe board filled with numbers 1 through 9](../images/tutorial/number-filled-board.png)\n\nYour updated code should look like this:\n\n<Sandpack>\n\n```js App.js\n\nfunction Square({ value }) {\n\nreturn <button className=\"square\">{value}</button>;\n\n}\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value=\"1\" />\n\n<Square value=\"2\" />\n\n<Square value=\"3\" />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value=\"4\" />\n\n<Square value=\"5\" />\n\n<Square value=\"6\" />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value=\"7\" />\n\n<Square value=\"8\" />\n\n<Square value=\"9\" />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"657":{"pageContent":"<Square value=\"4\" />\n\n<Square value=\"5\" />\n\n<Square value=\"6\" />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value=\"7\" />\n\n<Square value=\"8\" />\n\n<Square value=\"9\" />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n### Making an interactive component {/*making-an-interactive-component*/}\n\nLet's fill the `Square` component with an `X` when you click it. Declare a function called `handleClick` inside of the `Square`. Then, add `onClick` to the props of the button JSX element returned from the `Square` component:\n\n```js {2-4,9}\n\nfunction Square({ value }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"658":{"pageContent":"```js {2-4,9}\n\nfunction Square({ value }) {\n\nfunction handleClick() {\n\nconsole.log('clicked!');\n\n}\n\nreturn (\n\n<button\n\nclassName=\"square\"\n\nonClick={handleClick}\n\n>\n\n{value}\n\n</button>\n\n);\n\n}\n\n```\n\nIf you click on a square now, you should see a log saying `\"clicked!\"` in the _Console_ tab at the bottom of the _Browser_ section in CodeSandbox. Clicking the square more than once will log `\"clicked!\"` again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first `\"clicked!\"` log.\n\n<Note>\n\nIf you are following this tutorial using your local development environment, you need to open your browser's Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcut **Shift + Ctrl + J** (on Windows/Linux) or **Option + ⌘ + J** (on macOS).\n\n</Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"659":{"pageContent":"</Note>\n\nAs a next step, you want the Square component to \"remember\" that it got clicked, and fill it with an \"X\" mark. To \"remember\" things, components use *state*.\n\nReact provides a special function called `useState` that you can call from your component to let it \"remember\" things. Let's store the current value of the `Square` in state, and change it when the `Square` is clicked.\n\nImport `useState` at the top of the file. Remove the `value` prop from the Square component. Instead, add a new line at the start of the `Square` component that calls `useState`. Have it return a state variable called `value`:\n\n```js {1,3,4}\n\nimport { useState } from 'react';\n\nfunction Square() {\n\nconst [value, setValue] = useState(null);\n\nfunction handleClick() {\n\n//...\n\n```\n\n`value` stores the value and `setValue` is a function that can be used to change the value. The `null` passed to `useState` is used as the initial value for this state variable, so `value` here starts off equal to `null`.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"660":{"pageContent":"Since the `Square` component no longer accepts props anymore, you'll remove the `value` prop from all nine of the Square components created by the Board component:\n\n```js {6-8,11-13,16-18}\n\n// ...\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\nNow you'll change `Square` to display an \"X\" when clicked. Replace the `console.log(\"clicked!\");` event handler with `setValue('X');`. Now your `Square` component looks like this:\n\n```js {5}\n\nfunction Square() {\n\nconst [value, setValue] = useState(null);\n\nfunction handleClick() {\n\nsetValue('X');\n\n}\n\nreturn (\n\n<button\n\nclassName=\"square\"\n\nonClick={handleClick}\n\n>\n\n{value}\n\n</button>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"661":{"pageContent":"```js {5}\n\nfunction Square() {\n\nconst [value, setValue] = useState(null);\n\nfunction handleClick() {\n\nsetValue('X');\n\n}\n\nreturn (\n\n<button\n\nclassName=\"square\"\n\nonClick={handleClick}\n\n>\n\n{value}\n\n</button>\n\n);\n\n}\n\n```\n\nBy calling this `set` function from an `onClick` handler, you're telling React to re-render that `Square` whenever its `<button>` is clicked. After the update, the `Square`'s `value` will be `'X'`, so you'll see the \"X\" on the game board.\n\nIf you click on any Square, an \"X\" should show up:\n\n![adding xes to board](../images/tutorial/tictac-adding-x-s.gif)\n\nNote that each Square has its own state: the `value` stored in each Square is completely independent of the others. When you call a `set` function in a component, React automatically updates the child components inside of it too.\n\nAfter you've made the above changes, your code will look like this:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square() {\n\nconst [value, setValue] = useState(null);\n\nfunction handleClick() {\n\nsetValue('X');\n\n}\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"662":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square() {\n\nconst [value, setValue] = useState(null);\n\nfunction handleClick() {\n\nsetValue('X');\n\n}\n\nreturn (\n\n<button\n\nclassName=\"square\"\n\nonClick={handleClick}\n\n>\n\n{value}\n\n</button>\n\n);\n\n}\n\nexport default function Board() {\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square />\n\n<Square />\n\n<Square />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n### React Developer Tools {/*react-developer-tools*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"663":{"pageContent":"content: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n### React Developer Tools {/*react-developer-tools*/}\n\nReact DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of the _browser_ section in CodeSandbox:\n\n![React DevTools in CodeSandbox](../images/tutorial/codesandbox-devtools.png)\n\nTo inspect a particular component on the screen, use the button in the top left corner of React DevTools:\n\n![Selecting components on the page with React DevTools](../images/tutorial/devtools-select.gif)\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"664":{"pageContent":"![Selecting components on the page with React DevTools](../images/tutorial/devtools-select.gif)\n\n<Note>\n\nFor local development, React DevTools is available as a [Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en), [Firefox](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/), and [Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) browser extension. After installing it, the *Components* tab will appear in your browser Developer Tools for sites using React.\n\n</Note>\n\n## Completing the game {/*completing-the-game*/}\n\nBy this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing \"X\"s and \"O\"s on the board, and you need a way to determine a winner.\n\n### Lifting state up {/*lifting-state-up*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"665":{"pageContent":"### Lifting state up {/*lifting-state-up*/}\n\nCurrently, each `Square` component maintains a part of the game's state. To check for a winner in a tic-tac-toe game, the `Board` would need to somehow know the state of each of the 9 `Square` components.\n\nHow would you approach that? At first, you might guess that the `Board` needs to \"ask\" each `Square` for that `Square`'s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game's state in the parent `Board` component instead of in each `Square`. The `Board` component can tell each `Square` what to display by passing a prop, like you did when you passed a number to each Square.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"666":{"pageContent":"*To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with the parent component.**\n\nLifting state into a parent component is common when React components are refactored.\n\nLet's take this opportunity to try it out. Edit the `Board` component so that it declares a state variable named `squares` that defaults to an array of 9 nulls corresponding to the 9 squares:\n\n```js {3}\n\n// ...\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nreturn (\n\n// ...\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"667":{"pageContent":"```js {3}\n\n// ...\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nreturn (\n\n// ...\n\n);\n\n}\n\n```\n\n`Array(9).fill(null)` creates an array with nine elements and sets each of them to `null`. The `useState()` call around it declares a `squares` state variable that's initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the `squares` array will look something like this:\n\n```jsx\n\n['O', null, 'X', 'X', 'X', 'O', 'O', null, null]\n\n```\n\nNow your `Board` component needs to pass the `value` prop down to each of the `Square` components it renders:\n\n```js {6-8,11-13,16-18}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} />\n\n<Square value={squares[1]} />\n\n<Square value={squares[2]} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} />\n\n<Square value={squares[4]} />\n\n<Square value={squares[5]} />","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"668":{"pageContent":"<Square value={squares[1]} />\n\n<Square value={squares[2]} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} />\n\n<Square value={squares[4]} />\n\n<Square value={squares[5]} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} />\n\n<Square value={squares[7]} />\n\n<Square value={squares[8]} />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\nNext, you'll edit the `Square` component to receive the `value` prop from the Board component. This will require removing the Square component's own stateful tracking of `value` and the button's `onClick` prop:\n\n```js {1,2}\n\nfunction Square({value}) {\n\nreturn <button className=\"square\">{value}</button>;\n\n}\n\n```\n\nAt this point you should see an empty tic-tac-toe board:\n\n![empty board](../images/tutorial/empty-board.png)\n\nAnd your code should look like this:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value }) {\n\nreturn <button className=\"square\">{value}</button>;\n\n}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"669":{"pageContent":"function Square({ value }) {\n\nreturn <button className=\"square\">{value}</button>;\n\n}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} />\n\n<Square value={squares[1]} />\n\n<Square value={squares[2]} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} />\n\n<Square value={squares[4]} />\n\n<Square value={squares[5]} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} />\n\n<Square value={squares[7]} />\n\n<Square value={squares[8]} />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"670":{"pageContent":"padding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nEach Square will now receive a `value` prop that will either be `'X'`, `'O'`, or `null` for empty squares.\n\nNext, you need to change what happens when a `Square` is clicked. The `Board` component now maintains which squares are filled. You'll need to create a way for the `Square` to update the `Board`'s state. Since state is private to a component that defines it, you cannot update the `Board`'s state directly from `Square`.\n\nInstead, you'll pass down a function from the `Board` component to the `Square` component, and you'll have `Square` call that function when a square is clicked. You'll start with the function that the `Square` component will call when it is clicked. You'll call that function `onSquareClick`:\n\n```js {3}\n\nfunction Square({ value }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"671":{"pageContent":"```js {3}\n\nfunction Square({ value }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\n```\n\nNext, you'll add the `onSquareClick` function to the `Square` component's props:\n\n```js {1}\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\n```\n\nNow you'll connect the `onSquareClick` prop to a function in the `Board` component that you'll name `handleClick`. To connect `onSquareClick` to `handleClick` you'll pass a function to the `onSquareClick` prop of the first `Square` component:\n\n```js {7}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={handleClick} />\n\n//...\n\n);\n\n}\n\n```\n\nLastly, you will define the `handleClick` function inside the Board component to update the `squares` array holding your board's state:\n\n```js {4-8}\n\nexport default function Board() {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"672":{"pageContent":"//...\n\n);\n\n}\n\n```\n\nLastly, you will define the `handleClick` function inside the Board component to update the `squares` array holding your board's state:\n\n```js {4-8}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nfunction handleClick() {\n\nconst nextSquares = squares.slice();\n\nnextSquares[0] = \"X\";\n\nsetSquares(nextSquares);\n\n}\n\nreturn (\n\n// ...\n\n)\n\n}\n\n```\n\nThe `handleClick` function creates a copy of the `squares` array (`nextSquares`) with the JavaScript `slice()` Array method. Then, `handleClick` updates the `nextSquares` array to add `X` to the first (`[0]` index) square.\n\nCalling the `setSquares` function lets React know the state of the component has changed. This will trigger a re-render of the components that use the `squares` state (`Board`) as well as its child components (the `Square` components that make up the board).\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"673":{"pageContent":"<Note>\n\nJavaScript supports [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) which means an inner function (e.g. `handleClick`) has access to variables and functions defined in a outer function (e.g. `Board`). The `handleClick` function can read the `squares` state and call the `setSquares` method because they are both defined inside of the `Board` function.\n\n</Note>\n\nNow you can add X's to the board...  but only to the upper left square. Your `handleClick` function is hardcoded to update the index for the upper left square (`0`). Let's update `handleClick` to be able to update any square. Add a argument `i` to the `handleClick` function that takes the index of the square that should be updated:\n\n```js {4,6}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nfunction handleClick(i) {\n\nconst nextSquares = squares.slice();\n\nnextSquares[i] = \"X\";\n\nsetSquares(nextSquares);\n\n}\n\nreturn (\n\n// ...\n\n)\n\n}\n\n```\n\nNow there is a new problem!","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"674":{"pageContent":"function handleClick(i) {\n\nconst nextSquares = squares.slice();\n\nnextSquares[i] = \"X\";\n\nsetSquares(nextSquares);\n\n}\n\nreturn (\n\n// ...\n\n)\n\n}\n\n```\n\nNow there is a new problem!\n\nTry setting the `onSquareClick` prop of square to be `handleClick(0)` directly in the JSX like this:\n\n```jsx\n\n<Square value={squares[0]} onSquareClick={handleClick(0)} />\n\n```\n\nThe `handleClick(0)` call will be a part of rendering the board component. Because `handleClick(0)` alters the state of the board component by calling `setSquares`, your entire board component will be re-rendered again. But `handleClick(0)` is now a part of rendering of the board component, and so you've created an infinite loop:\n\n<ConsoleBlock level=\"error\">\n\nToo many re-renders. React limits the number of renders to prevent an infinite loop.\n\n</ConsoleBlock>\n\nWhy didn't this problem happen earlier?","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"675":{"pageContent":"<ConsoleBlock level=\"error\">\n\nToo many re-renders. React limits the number of renders to prevent an infinite loop.\n\n</ConsoleBlock>\n\nWhy didn't this problem happen earlier?\n\nWhen you were passing `onSquareClick={handleClick}`, you were passing the `handleClick` function down as a prop. You were not calling it! But now you are *calling* that function right away--notice the parentheses in `handleClick(0)`--and that's why it runs too early. You don't *want* to call `handleClick` until the user clicks!\n\nTo fix this, you could create a function like `handleFirstSquareClick` that calls `handleClick(0)`, a function like `handleSecondSquareClick` that calls `handleClick(1)`, and so on. Instead of calling them, you would pass these functions down as props like `onSquareClick={handleFirstSquareClick}`. This would solve the infinite loop.\n\nHowever, defining nine different functions and giving each of them a name is too verbose. Instead, let's do this:\n\n```js {6}\n\nexport default function Board() {\n\n// ...\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"676":{"pageContent":"However, defining nine different functions and giving each of them a name is too verbose. Instead, let's do this:\n\n```js {6}\n\nexport default function Board() {\n\n// ...\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n// ...\n\n);\n\n}\n\n```\n\nNotice the new `() =>` syntax. Here, `() => handleClick(0)` is an *arrow function,* which is a shorter way to define functions. When the square is clicked, the code after the `=>` \"arrow\" will run, calling `handleClick(0)`.\n\nNow you need to update the other eight squares to call `handleClick` from the arrow functions you pass. Make sure that the argument for each call of the `handleClick` corresponds to the index of the correct square:\n\n```js {6-8,11-13,16-18}\n\nexport default function Board() {\n\n// ...\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"677":{"pageContent":"// ...\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n};\n\n```\n\nNow you can again add X's to any square on the board by clicking on them:\n\n![filling the board with X](../images/tutorial/tictac-adding-x-s.gif)\n\nBut this time all the state management is handled by the `Board` component!\n\nThis is what your code should look like:\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"678":{"pageContent":"But this time all the state management is handled by the `Board` component!\n\nThis is what your code should look like:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nexport default function Board() {\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nfunction handleClick(i) {\n\nconst nextSquares = squares.slice();\n\nnextSquares[i] = 'X';\n\nsetSquares(nextSquares);\n\n}\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"679":{"pageContent":"<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"680":{"pageContent":"width: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nNow that your state handling is in the `Board` component, the parent `Board` component passes props to the child `Square` components so that they can be displayed correctly. When clicking on a `Square`, the child `Square` component now asks the parent `Board` component to update the state of the board. When the `Board`'s state changes, both the `Board` component and every child `Square` component re-renders automatically. Keeping the state of all squares in the `Board` component will allow it to determine the winner in the future.\n\nLet's recap what happens when a user clicks the top left square on your board to add an `X` to it:","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"681":{"pageContent":"Let's recap what happens when a user clicks the top left square on your board to add an `X` to it:\n\n1. Clicking on the upper left square runs the function that the `button` received as its `onClick` prop from the `Square`. The `Square` component received that function as its `onSquareClick` prop from the `Board`. The `Board` component defined that function directly in the JSX. It calls `handleClick` with an argument of `0`.\n\n1. `handleClick` uses the argument (`0`) to update the first element of the `squares` array from `null` to `X`.\n\n1. The `squares` state of the `Board` component was updated, so the `Board` and all of its children re-render. This causes the `value` prop of the `Square` component with index `0` to change from `null` to `X`.\n\nIn the end the user sees that the upper left square has changed from empty to having a `X` after clicking it.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"682":{"pageContent":"In the end the user sees that the upper left square has changed from empty to having a `X` after clicking it.\n\n<Note>\n\nThe DOM `<button>` element's `onClick` attribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. You could give any name to the `Square`'s `onSquareClick` prop or `Board`'s `handleClick` function, and the code would work the same. In React, it's conventional to use `on[Event]` names for props which represent events and `handle[Event]` for the function definitions which handle the events.\n\n</Note>\n\n### Why immutability is important {/*why-immutability-is-important*/}\n\nNote how in `handleClick`, you call `.slice()` to create a copy of the `squares` array instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"683":{"pageContent":"There are generally two approaches to changing data. The first approach is to _mutate_ the data by directly changing the data's values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated the `squares` array:\n\n```jsx\n\nconst squares = [null, null, null, null, null, null, null, null, null];\n\nsquares[0] = 'X';\n\n// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];\n\n```\n\nAnd here is what it would look like if you changed data without mutating the `squares` array:\n\n```jsx\n\nconst squares = [null, null, null, null, null, null, null, null, null];\n\nconst nextSquares = ['X', null, null, null, null, null, null, null, null];\n\n// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`\n\n```\n\nThe end result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"684":{"pageContent":"```\n\nThe end result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.\n\nImmutability makes complex features much easier to implement. Later in this tutorial, you will implement a \"time travel\" feature that lets you review the game's history and \"jump back\" to past moves. This functionality isn't specific to games--an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them (or reset to them) later.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"685":{"pageContent":"There is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren't affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn't actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn't affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in [the `memo` API reference](/reference/react/memo) documentation.\n\n### Taking turns {/*taking-turns*/}\n\nIt's now time to fix a major defect in this tic-tac-toe game: the \"O\"s cannot be marked on the board.\n\nYou'll set the first move to be \"X\" by default. Let's keep track of this by adding another piece of state to the Board component:\n\n```js {2}\n\nfunction Board() {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"686":{"pageContent":"You'll set the first move to be \"X\" by default. Let's keep track of this by adding another piece of state to the Board component:\n\n```js {2}\n\nfunction Board() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\n// ...\n\n}\n\n```\n\nEach time a player moves, `xIsNext` (a boolean) will be flipped to determine which player goes next and the game's state will be saved. You'll update the `Board`'s `handleClick` function to flip the value of `xIsNext`:\n\n```js {7,8,9,10,11,13}\n\nexport default function Board() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nfunction handleClick(i) {\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = \"X\";\n\n} else {\n\nnextSquares[i] = \"O\";\n\n}\n\nsetSquares(nextSquares);\n\nsetXIsNext(!xIsNext);\n\n}\n\nreturn (\n\n//...\n\n);\n\n}\n\n```\n\nNow, as you click on different squares, they will alternate between `X` and `O`, as they should!","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"687":{"pageContent":"} else {\n\nnextSquares[i] = \"O\";\n\n}\n\nsetSquares(nextSquares);\n\nsetXIsNext(!xIsNext);\n\n}\n\nreturn (\n\n//...\n\n);\n\n}\n\n```\n\nNow, as you click on different squares, they will alternate between `X` and `O`, as they should!\n\nBut wait, there's a problem. Try clicking on the same square multiple times:\n\n![O overwriting an X](../images/tutorial/o-replaces-x.gif)\n\nThe `X` is overwritten by an `O`! While this would add a very interesting twist to the game, we're going to stick to the original rules for now.\n\nWhen you mark a square with a `X` or a `O` you aren't first checking to see if the square already has a `X` or `O` value. You can fix this by *returning early*. You'll check to see if the square already has a `X` or and `O`. If the square is already filled, you will `return` in the `handleClick` function early--before it tries to update the board state.\n\n```js {2,3,4}\n\nfunction handleClick(i) {\n\nif (squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\n//...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"688":{"pageContent":"```js {2,3,4}\n\nfunction handleClick(i) {\n\nif (squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\n//...\n\n}\n\n```\n\nNow you can only add `X`'s or `O`'s to empty squares! Here is what your code should look like at this point:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nexport default function Board() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nfunction handleClick(i) {\n\nif (squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nsetSquares(nextSquares);\n\nsetXIsNext(!xIsNext);\n\n}\n\nreturn (\n\n<>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"689":{"pageContent":"<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"690":{"pageContent":"line-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n### Declaring a winner {/*declaring-a-winner*/}\n\nNow that you show which player's turn is next, you should also show when the game is won and there are no more turns to make. To do this you'll add a helper function called `calculateWinner` that takes an array of 9 squares, checks for a winner and returns `'X'`, `'O'`, or `null` as appropriate. Don't worry too much about the `calculateWinner` function; it's not specific to React:\n\n```js App.js\n\nexport default function Board() {\n\n//...\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6]\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"691":{"pageContent":"}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6]\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n<Note>\n\nIt does not matter whether you define `calculateWinner` before or after the `Board`. Let's put it at the end so that you don't have to scroll past it every time you edit your components.\n\n</Note>\n\nYou will call `calculateWinner(squares)` in the `Board` component's `handleClick` function to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has a `X` or and `O`. We'd like to return early in both cases:\n\n```js {2}\n\nfunction handleClick(i) {\n\nif (squares[i] || calculateWinner(squares)) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\n//...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"692":{"pageContent":"```js {2}\n\nfunction handleClick(i) {\n\nif (squares[i] || calculateWinner(squares)) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\n//...\n\n}\n\n```\n\nTo let the players know when the game is over, you can display text such as \"Winner: X\" or \"Winner: O\". To do that you'll add a `status` section to the `Board` component. The status will display the winner if the game is over and if the game is ongoing you'll display which player's turn is next:\n\n```js {3-9,13}\n\nexport default function Board() {\n\n// ...\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = \"Winner: \" + winner;\n\n} else {\n\nstatus = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n\n}\n\nreturn (\n\n<div>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n// ...\n\n)\n\n}\n\n```\n\nCongratulations! You now have a working tic-tac-toe game. And you've just learned the basics of React too. So _you_ are the real winner here. Here is what the code should look like:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"693":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nexport default function Board() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [squares, setSquares] = useState(Array(9).fill(null));\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nsetSquares(nextSquares);\n\nsetXIsNext(!xIsNext);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"694":{"pageContent":"<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"695":{"pageContent":"if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n## Adding time travel {/*adding-time-travel*/}\n\nAs a final exercise, let's make it possible to \"go back in time\" to the previous moves in the game.\n\n### Storing a history of moves {/*storing-a-history-of-moves*/}\n\nIf you mutated the `squares` array, implementing time travel would be very difficult.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"696":{"pageContent":"### Storing a history of moves {/*storing-a-history-of-moves*/}\n\nIf you mutated the `squares` array, implementing time travel would be very difficult.\n\nHowever, you used `slice()` to create a new copy of the `squares` array after every move, and treated it as immutable. This will allow you to store every past version of the `squares` array, and navigate between the turns that have already happened.\n\nYou'll store the past `squares` arrays in another array called `history`, which you'll store as a new state variable. The `history` array represents all board states, from the first to the last move, and has a shape like this:\n\n```jsx\n\n[\n\n// Before first move\n\n[null, null, null, null, null, null, null, null, null],\n\n// After first move\n\n[null, null, null, null, 'X', null, null, null, null],\n\n// After second move\n\n[null, null, null, null, 'X', null, null, null, 'O'],\n\n// ...\n\n]\n\n```\n\n### Lifting state up, again {/*lifting-state-up-again*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"697":{"pageContent":"[null, null, null, null, 'X', null, null, null, null],\n\n// After second move\n\n[null, null, null, null, 'X', null, null, null, 'O'],\n\n// ...\n\n]\n\n```\n\n### Lifting state up, again {/*lifting-state-up-again*/}\n\nYou will now write a new top-level component called `Game` to display a list of past moves. That's where you will place the `history` state that contains the entire game history.\n\nPlacing the `history` state into the `Game` component will let you remove the `squares` state from its child `Board` component. Just like you \"lifted state up\" from the `Square` component into the `Board` component, you will now lift it up from the `Board` into the top-level `Game` component. This gives the `Game` component full control over the `Board`'s data and lets it instruct the `Board` to render previous turns from the `history`.\n\nFirst, add a `Game` component with `export default`. Have it render the `Board` component inside some markup:\n\n```js {1,5-16}\n\nfunction Board() {\n\n// ...\n\n}\n\nexport default function Game() {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"698":{"pageContent":"First, add a `Game` component with `export default`. Have it render the `Board` component inside some markup:\n\n```js {1,5-16}\n\nfunction Board() {\n\n// ...\n\n}\n\nexport default function Game() {\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{/*TODO*/}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\nNote that you are removing the `export default` keywords before the `function Board() {` declaration and adding them before the `function Game() {` declaration. This tells your `index.js` file to use the `Game` component as the top-level component instead of your `Board` component. The additional `div`s returned by the `Game` component are making room for the game information you'll add to the board later.\n\nAdd some state to the `Game` component to track which player is next and the history of moves:\n\n```js {2-3}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"699":{"pageContent":"```js {2-3}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\n// ...\n\n```\n\nNotice how `[Array(9).fill(null)]` is an array with a single item, which itself is an array of 9 `null`s.\n\nTo render the squares for the current move, you'll want to read the last squares array from the `history`. You don't need `useState` for this--you already have enough information to calculate it during rendering:\n\n```js {4}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst currentSquares = history[history.length - 1];\n\n// ...\n\n```\n\nNext, create a `handlePlay` function inside the `Game` component that will be called by the `Board` component to update the game. Pass `xIsNext`, `currentSquares` and `handlePlay` as props to the `Board` component:\n\n```js {6-8,13}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"700":{"pageContent":"```js {6-8,13}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst currentSquares = history[history.length - 1];\n\nfunction handlePlay(nextSquares) {\n\n// TODO\n\n}\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n//...\n\n)\n\n}\n\n```\n\nLet's make the `Board` component fully controlled by the props it receives. Change the `Board` component to take three props: `xIsNext`, `squares`, and a new `onPlay` function that `Board` can call with the updated squares array whenever a player makes a move. Next, remove the first two lines of the `Board` function that call `useState`:\n\n```js {1}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\n//...\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"701":{"pageContent":"```js {1}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\n//...\n\n}\n\n// ...\n\n}\n\n```\n\nNow you'll replace the `setSquares` and `setXIsNext` calls in `handleClick` in the `Board` component with a single call to your new `onPlay` function so the `Game` component can update the `Board` when the user clicks a square:\n\n```js {12}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = \"X\";\n\n} else {\n\nnextSquares[i] = \"O\";\n\n}\n\nonPlay(nextSquares);\n\n}\n\n//...\n\n}\n\n```\n\nThe `Board` component is fully controlled by the props passed to it by the `Game` component. You need to implement the `handlePlay` function in the `Game` component to get the game working again.\n\nWhat should `handlePlay` do when called? Remember that Board used to call `setSquares` with an updated array; now it passes the updated `squares` array to `onPlay`.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"702":{"pageContent":"What should `handlePlay` do when called? Remember that Board used to call `setSquares` with an updated array; now it passes the updated `squares` array to `onPlay`.\n\nThe `handlePlay` function needs to update `Game`'s state to trigger a re-render, but you don't have a `setSquares` function that you can call any more--you're now using the `history` state variable to store this information. You'll want to update `history` by appending the updated `squares` array as a new history entry. You also want to toggle `xIsNext`, just as Board used to do:\n\n```js {4-5}\n\nexport default function Game() {\n\n//...\n\nfunction handlePlay(nextSquares) {\n\nsetHistory([...history, nextSquares]);\n\nsetXIsNext(!xIsNext);\n\n}\n\n//...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"703":{"pageContent":"```js {4-5}\n\nexport default function Game() {\n\n//...\n\nfunction handlePlay(nextSquares) {\n\nsetHistory([...history, nextSquares]);\n\nsetXIsNext(!xIsNext);\n\n}\n\n//...\n\n}\n\n```\n\nHere, `[...history, nextSquares]` creates a new array that contains all the items in `history`, followed by `nextSquares`. (You can read the `...history` [*spread syntax*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) as \"enumerate all the items in `history`\".)\n\nFor example, if `history` is `[[null,null,null], [\"X\",null,null]]` and `nextSquares` is `[\"X\",null,\"O\"]`, then the new `[...history, nextSquares]` array will be `[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]]`.\n\nAt this point, you've moved the state to live in the `Game` component, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"704":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"705":{"pageContent":"<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst currentSquares = history[history.length - 1];\n\nfunction handlePlay(nextSquares) {\n\nsetHistory([...history, nextSquares]);\n\nsetXIsNext(!xIsNext);\n\n}\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"706":{"pageContent":"setXIsNext(!xIsNext);\n\n}\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{/*TODO*/}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"707":{"pageContent":"text-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n### Showing the past moves {/*showing-the-past-moves*/}\n\nSince you are recording the tic-tac-toe game's history, you can now display it to the player as a list of past moves.\n\nReact elements like `<button>` are regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.\n\nYou already have an array of `history` moves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use the [array `map` method:](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n```jsx\n\n[1, 2, 3].map((x) => x * 2) // [2, 4, 6]\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"708":{"pageContent":"```jsx\n\n[1, 2, 3].map((x) => x * 2) // [2, 4, 6]\n\n```\n\nYou'll use `map` to transform your `history` of moves into React elements representing buttons on the screen, and you'll display a list of buttons to \"jump\" to past moves. Let's `map` over the `history` in the Game component:\n\n```js {11-13,15-27,35}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst currentSquares = history[history.length - 1];\n\nfunction handlePlay(nextSquares) {\n\nsetHistory([...history, nextSquares]);\n\nsetXIsNext(!xIsNext);\n\n}\n\nfunction jumpTo(nextMove) {\n\n// TODO\n\n}\n\nconst moves = history.map((squares, move) => {\n\nlet description;\n\nif (move > 0) {\n\ndescription = 'Go to move #' + move;\n\n} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"709":{"pageContent":"</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\nYou can see what your code should look like below. Note that you should see an error in the developer tools console that says: ``Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the render method of `Game`.`` You'll fix this error in the next section.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"710":{"pageContent":"return;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"711":{"pageContent":"</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst currentSquares = history[history.length - 1];\n\nfunction handlePlay(nextSquares) {\n\nsetHistory([...history, nextSquares]);\n\nsetXIsNext(!xIsNext);\n\n}\n\nfunction jumpTo(nextMove) {\n\n// TODO\n\n}\n\nconst moves = history.map((squares, move) => {\n\nlet description;\n\nif (move > 0) {\n\ndescription = 'Go to move #' + move;\n\n} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"712":{"pageContent":");\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"713":{"pageContent":"width: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nAs you iterate through `history` array inside the function you passed to `map`, the `squares` argument goes through each element of `history`, and the `move` argument goes through each array index: `0`, `1`, `2`, …. (In most cases, you'd need the actual array elements, but in this case you don't use `squares` to render a list of moves.)\n\nFor each move in the tic-tac-toe game's history, you create a list item `<li>` which contains a button `<button>`. The button has an `onClick` handler which calls a function called `jumpTo` (that you haven't implemented yet).\n\nFor now, you should see a list of the moves that occurred in the game and an error in the developer tools console.\n\nLet's discuss what the \"key\" error means.\n\n### Picking a key {/*picking-a-key*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"714":{"pageContent":"For now, you should see a list of the moves that occurred in the game and an error in the developer tools console.\n\nLet's discuss what the \"key\" error means.\n\n### Picking a key {/*picking-a-key*/}\n\nWhen you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list's items.\n\nImagine transitioning from\n\n```html\n\n<li>Alexa: 7 tasks left</li>\n\n<li>Ben: 5 tasks left</li>\n\n```\n\nto\n\n```html\n\n<li>Ben: 9 tasks left</li>\n\n<li>Claudia: 8 tasks left</li>\n\n<li>Alexa: 5 tasks left</li>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"715":{"pageContent":"Imagine transitioning from\n\n```html\n\n<li>Alexa: 7 tasks left</li>\n\n<li>Ben: 5 tasks left</li>\n\n```\n\nto\n\n```html\n\n<li>Ben: 9 tasks left</li>\n\n<li>Claudia: 8 tasks left</li>\n\n<li>Alexa: 5 tasks left</li>\n\n```\n\nIn addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben's ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and can't know what you intended, so you need to specify a _key_ property for each list item to differentiate each list item from its siblings. If you were displaying data from a database, Alexa, Ben, and Claudia's database IDs could be used as keys.\n\n```js {1}\n\n<li key={user.id}>\n\n{user.name}: {user.taskCount} tasks left\n\n</li>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"716":{"pageContent":"```js {1}\n\n<li key={user.id}>\n\n{user.name}: {user.taskCount} tasks left\n\n</li>\n\n```\n\nWhen a list is re-rendered, React takes each list item's key and searches the previous list's items for a matching key. If the current list has a key that didn't exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.\n\nKeys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component's key changes, the component will be destroyed and re-created with a new state.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"717":{"pageContent":"`key` is a special and reserved property in React. When an element is created, React extracts the `key` property and stores the key directly on the returned element. Even though `key` may look like it is passed as props, React automatically uses `key` to decide which components to update. There's no way for a component to ask what `key` its parent specified.\n\n*It's strongly recommended that you assign proper keys whenever you build dynamic lists.** If you don't have an appropriate key, you may want to consider restructuring your data so that you do.\n\nIf no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list's items or inserting/removing list items. Explicitly passing `key={i}` silences the error but has the same problems as array indices and is not recommended in most cases.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"718":{"pageContent":"Keys do not need to be globally unique; they only need to be unique between components and their siblings.\n\n### Implementing time travel {/*implementing-time-travel*/}\n\nIn the tic-tac-toe game's history, each past move has a unique ID associated with it: it's the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it's safe to use the move index as a key.\n\nIn the `Game` function, you can add the key as `<li key={move}>`, and if you reload the rendered game, React's \"key\" error should disappear:\n\n```js {4}\n\nconst moves = history.map((squares, move) => {\n\n//...\n\nreturn (\n\n<li key={move}>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\n```\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"719":{"pageContent":"<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"720":{"pageContent":"<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst currentSquares = history[history.length - 1];\n\nfunction handlePlay(nextSquares) {\n\nsetHistory([...history, nextSquares]);\n\nsetXIsNext(!xIsNext);\n\n}\n\nfunction jumpTo(nextMove) {\n\n// TODO\n\n}\n\nconst moves = history.map((squares, move) => {\n\nlet description;\n\nif (move > 0) {\n\ndescription = 'Go to move #' + move;\n\n} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li key={move}>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"721":{"pageContent":"} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li key={move}>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"722":{"pageContent":"font-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nBefore you can implement `jumpTo`, you need the `Game` component to keep track of which step the user is currently viewing. To do this, define a new state variable called `currentMove`, defaulting to `0`:\n\n```js {4}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst [currentMove, setCurrentMove] = useState(0);\n\nconst currentSquares = history[history.length - 1];\n\n//...\n\n}\n\n```\n\nNext, update the `jumpTo` function inside `Game` to update that `currentMove`. You'll also set `xIsNext` to `true` if the number that you're changing `currentMove` to is even.\n\n```js {4-5}\n\nexport default function Game() {\n\n// ...","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"723":{"pageContent":"```js {4-5}\n\nexport default function Game() {\n\n// ...\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\nsetXIsNext(nextMove % 2 === 0);\n\n}\n\n//...\n\n}\n\n```\n\nYou will now make two changes to the `Game`'s `handlePlay` function which is called when you click on a square.\n\nIf you \"go back in time\" and then make a new move from that point, you only want to keep the history up to that point. Instead of adding `nextSquares` after all items (`...` spread syntax) in `history`, you'll add it after all items in `history.slice(0, currentMove + 1)` so that you're only keeping that portion of the old history.\n\nEach time a move is made, you need to update `currentMove` to point to the latest history entry.\n\n```js {2-4}\n\nfunction handlePlay(nextSquares) {\n\nconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\nsetXIsNext(!xIsNext);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"724":{"pageContent":"function handlePlay(nextSquares) {\n\nconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\nsetXIsNext(!xIsNext);\n\n}\n\n```\n\nFinally, you will modify the `Game` component to render the currently selected move, instead of always rendering the final move:\n\n```js {5}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst [currentMove, setCurrentMove] = useState(0);\n\nconst currentSquares = history[currentMove];\n\n// ...\n\n}\n\n```\n\nIf you click on any step in the game's history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({value, onSquareClick}) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"725":{"pageContent":"function Square({value, onSquareClick}) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"726":{"pageContent":"</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {\n\nconst [xIsNext, setXIsNext] = useState(true);\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst [currentMove, setCurrentMove] = useState(0);\n\nconst currentSquares = history[currentMove];\n\nfunction handlePlay(nextSquares) {\n\nconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\nsetXIsNext(!xIsNext);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\nsetXIsNext(nextMove % 2 === 0);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"727":{"pageContent":"setHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\nsetXIsNext(!xIsNext);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\nsetXIsNext(nextMove % 2 === 0);\n\n}\n\nconst moves = history.map((squares, move) => {\n\nlet description;\n\nif (move > 0) {\n\ndescription = 'Go to move #' + move;\n\n} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li key={move}>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"728":{"pageContent":"if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n### Final cleanup {/*final-cleanup*/}\n\nIf you look at the code very closely, you may notice that `xIsNext === true` when `currentMove` is even and `xIsNext === false` when `currentMove` is odd. In other words, if you know the value of `currentMove`, then you can always figure out what `xIsNext` should be.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"729":{"pageContent":"There's no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state helps reduce bugs and make your code easier to understand. Change `Game` so that it no longer stores `xIsNext` as a separate state variable and instead figures it out based on the `currentMove`:\n\n```js {4,11,15}\n\nexport default function Game() {\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst [currentMove, setCurrentMove] = useState(0);\n\nconst xIsNext = currentMove % 2 === 0;\n\nconst currentSquares = history[currentMove];\n\nfunction handlePlay(nextSquares) {\n\nconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"730":{"pageContent":"const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\n}\n\n// ...\n\n}\n\n```\n\nYou no longer need the `xIsNext` state declaration or the calls to `setXIsNext`. Now, there's no chance for `xIsNext` to get out of sync with `currentMove`, even if you make a mistake while coding the components.\n\n### Wrapping up {/*wrapping-up*/}\n\nCongratulations! You've created a tic-tac-toe game that:\n\nLets you play tic-tac-toe,\n\nIndicates when a player has won the game,\n\nStores a game's history as a game progresses,\n\nAllows players to review a game's history and see previous versions of a game's board.\n\nNice work! We hope you now feel like you have a decent grasp of how React works.\n\nCheck out the final result here:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"731":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n\nreturn (\n\n<button className=\"square\" onClick={onSquareClick}>\n\n{value}\n\n</button>\n\n);\n\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n\nfunction handleClick(i) {\n\nif (calculateWinner(squares) || squares[i]) {\n\nreturn;\n\n}\n\nconst nextSquares = squares.slice();\n\nif (xIsNext) {\n\nnextSquares[i] = 'X';\n\n} else {\n\nnextSquares[i] = 'O';\n\n}\n\nonPlay(nextSquares);\n\n}\n\nconst winner = calculateWinner(squares);\n\nlet status;\n\nif (winner) {\n\nstatus = 'Winner: ' + winner;\n\n} else {\n\nstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\n}\n\nreturn (\n\n<>\n\n<div className=\"status\">{status}</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n\n<Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n\n<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"732":{"pageContent":"<Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n\n<Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n\n<Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n\n</div>\n\n<div className=\"board-row\">\n\n<Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n\n<Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n\n<Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n\n</div>\n\n</>\n\n);\n\n}\n\nexport default function Game() {\n\nconst [history, setHistory] = useState([Array(9).fill(null)]);\n\nconst [currentMove, setCurrentMove] = useState(0);\n\nconst xIsNext = currentMove % 2 === 0;\n\nconst currentSquares = history[currentMove];\n\nfunction handlePlay(nextSquares) {\n\nconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"733":{"pageContent":"const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\nsetHistory(nextHistory);\n\nsetCurrentMove(nextHistory.length - 1);\n\n}\n\nfunction jumpTo(nextMove) {\n\nsetCurrentMove(nextMove);\n\n}\n\nconst moves = history.map((squares, move) => {\n\nlet description;\n\nif (move > 0) {\n\ndescription = 'Go to move #' + move;\n\n} else {\n\ndescription = 'Go to game start';\n\n}\n\nreturn (\n\n<li key={move}>\n\n<button onClick={() => jumpTo(move)}>{description}</button>\n\n</li>\n\n);\n\n});\n\nreturn (\n\n<div className=\"game\">\n\n<div className=\"game-board\">\n\n<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\n</div>\n\n<div className=\"game-info\">\n\n<ol>{moves}</ol>\n\n</div>\n\n</div>\n\n);\n\n}\n\nfunction calculateWinner(squares) {\n\nconst lines = [\n\n[0, 1, 2],\n\n[3, 4, 5],\n\n[6, 7, 8],\n\n[0, 3, 6],\n\n[1, 4, 7],\n\n[2, 5, 8],\n\n[0, 4, 8],\n\n[2, 4, 6],\n\n];\n\nfor (let i = 0; i < lines.length; i++) {\n\nconst [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"734":{"pageContent":"const [a, b, c] = lines[i];\n\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\nreturn squares[a];\n\n}\n\n}\n\nreturn null;\n\n}\n\n```\n\n```css styles.css\n\n{\n\nbox-sizing: border-box;\n\n}\n\nbody {\n\nfont-family: sans-serif;\n\nmargin: 20px;\n\npadding: 0;\n\n}\n\n.square {\n\nbackground: #fff;\n\nborder: 1px solid #999;\n\nfloat: left;\n\nfont-size: 24px;\n\nfont-weight: bold;\n\nline-height: 34px;\n\nheight: 34px;\n\nmargin-right: -1px;\n\nmargin-top: -1px;\n\npadding: 0;\n\ntext-align: center;\n\nwidth: 34px;\n\n}\n\n.board-row:after {\n\nclear: both;\n\ncontent: '';\n\ndisplay: table;\n\n}\n\n.status {\n\nmargin-bottom: 10px;\n\n}\n\n.game {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n.game-info {\n\nmargin-left: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nIf you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game, listed in order of increasing difficulty:\n\n1. For the current move only, show \"You are at move #...\" instead of a button\n\n1. Rewrite `Board` to use two loops to make the squares instead of hardcoding them.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"735":{"pageContent":"1. For the current move only, show \"You are at move #...\" instead of a button\n\n1. Rewrite `Board` to use two loops to make the squares instead of hardcoding them.\n\n1. Add a toggle button that lets you sort the moves in either ascending or descending order.\n\n1. When someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).\n\n1. Display the location for each move in the format (col, row) in the move history list.\n\nThroughout this tutorial, you've touched on React concepts including elements, components, props, and state. Now that you've seen how these concepts work when building a game, check out [Thinking in React](/learn/thinking-in-react) to see how the same React concepts work when build an app's UI.","metadata":{"source":"reactjs.org/beta/src/content/learn/tutorial-tic-tac-toe.md"}},"736":{"pageContent":"--\n\ntitle: Rules of Hooks\n\n--\n\nYou are probably here because you got the following error message:\n\n<ConsoleBlock level=\"error\">\n\nHooks can only be called inside the body of a function component.\n\n</ConsoleBlock>\n\nThere are three common reasons you might be seeing it:\n\n1. You might be **breaking the Rules of Hooks**.\n\n2. You might have **mismatching versions** of React and React DOM.\n\n3. You might have **more than one copy of React** in the same app.\n\nLet's look at each of these cases.\n\n## Breaking Rules of Hooks {/*breaking-rules-of-hooks*/}\n\nFunctions whose names start with `use` are called [*Hooks*](/reference/react) in React.\n\n*Don’t call Hooks inside loops, conditions, or nested functions.** Instead, always use Hooks at the top level of your React function, before any early returns. You can only call Hooks while React is rendering a function component:\n\n✅ Call them at the top level in the body of a [function component](/learn/your-first-component).","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"737":{"pageContent":"✅ Call them at the top level in the body of a [function component](/learn/your-first-component).\n\n✅ Call them at the top level in the body of a [custom Hook](/learn/reusing-logic-with-custom-hooks).\n\n```js{2-3,8-9}\n\nfunction Counter() {\n\n// ✅ Good: top-level in a function component\n\nconst [count, setCount] = useState(0);\n\n// ...\n\n}\n\nfunction useWindowWidth() {\n\n// ✅ Good: top-level in a custom Hook\n\nconst [width, setWidth] = useState(window.innerWidth);\n\n// ...\n\n}\n\n```\n\nIt’s **not** supported to call Hooks (functions starting with `use`) in any other cases, for example:\n\n🔴 Do not call Hooks inside conditions or loops.\n\n🔴 Do not call Hooks after a conditional `return` statement.\n\n🔴 Do not call Hooks in event handlers.\n\n🔴 Do not call Hooks in class components.\n\n🔴 Do not call Hooks inside functions passed to `useMemo`, `useReducer`, or `useEffect`.\n\nIf you break these rules, you might see this error.\n\n```js{3-4,11-12,20-21}\n\nfunction Bad({ cond }) {\n\nif (cond) {\n\n// 🔴 Bad: inside a condition (to fix, move it outside!)","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"738":{"pageContent":"If you break these rules, you might see this error.\n\n```js{3-4,11-12,20-21}\n\nfunction Bad({ cond }) {\n\nif (cond) {\n\n// 🔴 Bad: inside a condition (to fix, move it outside!)\n\nconst theme = useContext(ThemeContext);\n\n}\n\n// ...\n\n}\n\nfunction Bad() {\n\nfor (let i = 0; i < 10; i++) {\n\n// 🔴 Bad: inside a loop (to fix, move it outside!)\n\nconst theme = useContext(ThemeContext);\n\n}\n\n// ...\n\n}\n\nfunction Bad({ cond }) {\n\nif (cond) {\n\nreturn;\n\n}\n\n// 🔴 Bad: after a conditional return (to fix, move it before the return!)\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n}\n\nfunction Bad() {\n\nfunction handleClick() {\n\n// 🔴 Bad: inside an event handler (to fix, move it outside!)\n\nconst theme = useContext(ThemeContext);\n\n}\n\n// ...\n\n}\n\nfunction Bad() {\n\nconst style = useMemo(() => {\n\n// 🔴 Bad: inside useMemo (to fix, move it outside!)\n\nconst theme = useContext(ThemeContext);\n\nreturn createStyle(theme);\n\n});\n\n// ...\n\n}\n\nclass Bad extends React.Component {\n\nrender() {\n\n// 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)\n\nuseEffect(() => {})","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"739":{"pageContent":"return createStyle(theme);\n\n});\n\n// ...\n\n}\n\nclass Bad extends React.Component {\n\nrender() {\n\n// 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)\n\nuseEffect(() => {})\n\n// ...\n\n}\n\n}\n\n```\n\nYou can use the [`eslint-plugin-react-hooks` plugin](https://www.npmjs.com/package/eslint-plugin-react-hooks) to catch these mistakes.\n\n<Note>\n\n[Custom Hooks](/learn/reusing-logic-with-custom-hooks) *may* call other Hooks (that's their whole purpose). This works because custom Hooks are also supposed to only be called while a function component is rendering.\n\n</Note>\n\n## Mismatching Versions of React and React DOM {/*mismatching-versions-of-react-and-react-dom*/}\n\nYou might be using a version of `react-dom` (< 16.8.0) or `react-native` (< 0.59) that doesn't yet support Hooks. You can run `npm ls react-dom` or `npm ls react-native` in your application folder to check which version you're using. If you find more than one of them, this might also create problems (more on that below).","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"740":{"pageContent":"## Duplicate React {/*duplicate-react*/}\n\nIn order for Hooks to work, the `react` import from your application code needs to resolve to the same module as the `react` import from inside the `react-dom` package.\n\nIf these `react` imports resolve to two different exports objects, you will see this warning. This may happen if you **accidentally end up with two copies** of the `react` package.\n\nIf you use Node for package management, you can run this check in your project folder:\n\n<TerminalBlock>\n\nnpm ls react\n\n</TerminalBlock>\n\nIf you see more than one React, you'll need to figure out why this happens and fix your dependency tree. For example, maybe a library you're using incorrectly specifies `react` as a dependency (rather than a peer dependency). Until that library is fixed, [Yarn resolutions](https://yarnpkg.com/lang/en/docs/selective-version-resolutions/) is one possible workaround.\n\nYou can also try to debug this problem by adding some logs and restarting your development server:\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"741":{"pageContent":"You can also try to debug this problem by adding some logs and restarting your development server:\n\n```js\n\n// Add this in node_modules/react-dom/index.js\n\nwindow.React1 = require('react');\n\n// Add this in your component file\n\nrequire('react-dom');\n\nwindow.React2 = require('react');\n\nconsole.log(window.React1 === window.React2);\n\n```\n\nIf it prints `false` then you might have two Reacts and need to figure out why that happened. [This issue](https://github.com/facebook/react/issues/13991) includes some common reasons encountered by the community.\n\nThis problem can also come up when you use `npm link` or an equivalent. In that case, your bundler might \"see\" two Reacts — one in application folder and one in your library folder. Assuming `myapp` and `mylib` are sibling folders, one possible fix is to run `npm link ../myapp/node_modules/react` from `mylib`. This should make the library use the application's React copy.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"742":{"pageContent":"<Note>\n\nIn general, React supports using multiple independent copies on one page (for example, if an app and a third-party widget both use it). It only breaks if `require('react')` resolves differently between the component and the `react-dom` copy it was rendered with.\n\n</Note>\n\n## Other Causes {/*other-causes*/}\n\nIf none of this worked, please comment in [this issue](https://github.com/facebook/react/issues/13991) and we'll try to help. Try to create a small reproducing example — you might discover the problem as you're doing it.","metadata":{"source":"reactjs.org/beta/src/content/warnings/invalid-hook-call-warning.md"}},"743":{"pageContent":"--\n\ntitle: Special Props Warning\n\n--\n\nMost props on a JSX element are passed on to the component, however, there are two special props (`ref` and `key`) which are used by React, and are thus not forwarded to the component.\n\nFor instance, you can't read `props.key` from a component. If you need to access the same value within the child component, you should pass it as a different prop (ex: `<ListItemWrapper key={result.id} id={result.id} />` and read `props.id`). While this may seem redundant, it's important to separate app logic from hints to React.","metadata":{"source":"reactjs.org/beta/src/content/warnings/special-props.md"}},"744":{"pageContent":"--\n\ntitle: Unknown Prop Warning\n\n--\n\nThe unknown-prop warning will fire if you attempt to render a DOM element with a prop that is not recognized by React as a legal DOM attribute/property. You should ensure that your DOM elements do not have spurious props floating around.\n\nThere are a couple of likely reasons this warning could be appearing:\n\n1. Are you using `{...props}` or `cloneElement(element, props)`? When copying props to a child component, you should ensure that you are not accidentally forwarding props that were intended only for the parent component. See common fixes for this problem below.\n\n2. You are using a non-standard DOM attribute on a native DOM node, perhaps to represent custom data. If you are trying to attach custom data to a standard DOM element, consider using a custom data attribute as described [on MDN](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes).","metadata":{"source":"reactjs.org/beta/src/content/warnings/unknown-prop.md"}},"745":{"pageContent":"3. React does not yet recognize the attribute you specified. This will likely be fixed in a future version of React. React will allow you to pass it without a warning if you write the attribute name lowercase.\n\n4. You are using a React component without an upper case, for example `<myButton />`. React interprets it as a DOM tag because React JSX transform uses the upper vs. lower case convention to distinguish between user-defined components and DOM tags. For your own React components, use PascalCase. For example, write `<MyButton />` instead of `<myButton />`.\n\n--\n\nIf you get this warning because you pass props like `{...props}`, your parent component needs to \"consume\" any prop that is intended for the parent component and not intended for the child component. Example:\n\n*Bad:** Unexpected `layout` prop is forwarded to the `div` tag.\n\n```js\n\nfunction MyDiv(props) {\n\nif (props.layout === 'horizontal') {\n\n// BAD! Because you know for sure \"layout\" is not a prop that <div> understands.","metadata":{"source":"reactjs.org/beta/src/content/warnings/unknown-prop.md"}},"746":{"pageContent":"```js\n\nfunction MyDiv(props) {\n\nif (props.layout === 'horizontal') {\n\n// BAD! Because you know for sure \"layout\" is not a prop that <div> understands.\n\nreturn <div {...props} style={getHorizontalStyle()} />\n\n} else {\n\n// BAD! Because you know for sure \"layout\" is not a prop that <div> understands.\n\nreturn <div {...props} style={getVerticalStyle()} />\n\n}\n\n}\n\n```\n\n*Good:** The spread syntax can be used to pull variables off props, and put the remaining props into a variable.\n\n```js\n\nfunction MyDiv(props) {\n\nconst { layout, ...rest } = props\n\nif (layout === 'horizontal') {\n\nreturn <div {...rest} style={getHorizontalStyle()} />\n\n} else {\n\nreturn <div {...rest} style={getVerticalStyle()} />\n\n}\n\n}\n\n```\n\n*Good:** You can also assign the props to a new object and delete the keys that you're using from the new object. Be sure not to delete the props from the original `this.props` object, since that object should be considered immutable.\n\n```js\n\nfunction MyDiv(props) {\n\nconst divProps = Object.assign({}, props);\n\ndelete divProps.layout;","metadata":{"source":"reactjs.org/beta/src/content/warnings/unknown-prop.md"}},"747":{"pageContent":"```js\n\nfunction MyDiv(props) {\n\nconst divProps = Object.assign({}, props);\n\ndelete divProps.layout;\n\nif (props.layout === 'horizontal') {\n\nreturn <div {...divProps} style={getHorizontalStyle()} />\n\n} else {\n\nreturn <div {...divProps} style={getVerticalStyle()} />\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/warnings/unknown-prop.md"}},"748":{"pageContent":"--\n\ntitle: 'Referencing Values with Refs'\n\n--\n\n<Intro>\n\nWhen you want a component to \"remember\" some information, but you don't want that information to [trigger new renders](/learn/render-and-commit), you can use a *ref*.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to add a ref to your component\n\nHow to update a ref's value\n\nHow refs are different from state\n\nHow to use refs safely\n\n</YouWillLearn>\n\n## Adding a ref to your component {/*adding-a-ref-to-your-component*/}\n\nYou can add a ref to your component by importing the `useRef` Hook from React:\n\n```js\n\nimport { useRef } from 'react';\n\n```\n\nInside your component, call the `useRef` Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value `0`:\n\n```js\n\nconst ref = useRef(0);\n\n```\n\n`useRef` returns an object like this:\n\n```js\n\n{\n\ncurrent: 0 // The value you passed to useRef\n\n}\n\n```\n\n<Illustration src=\"/images/docs/illustrations/i_ref.png\" alt=\"An arrow with 'current' written on it stuffed into a pocket with 'ref' written on it.\" />","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"749":{"pageContent":"{\n\ncurrent: 0 // The value you passed to useRef\n\n}\n\n```\n\n<Illustration src=\"/images/docs/illustrations/i_ref.png\" alt=\"An arrow with 'current' written on it stuffed into a pocket with 'ref' written on it.\" />\n\nYou can access the current value of that ref through the `ref.current` property. This value is intentionally mutable, meaning you can both read and write to it. It's like a secret pocket of your component that React doesn't track. (This is what makes it an \"escape hatch\" from React's one-way data flow--more on that below!)\n\nHere, a button will increment `ref.current` on every click:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Counter() {\n\nlet ref = useRef(0);\n\nfunction handleClick() {\n\nref.current = ref.current + 1;\n\nalert('You clicked ' + ref.current + ' times!');\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClick me!\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"750":{"pageContent":"let ref = useRef(0);\n\nfunction handleClick() {\n\nref.current = ref.current + 1;\n\nalert('You clicked ' + ref.current + ' times!');\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClick me!\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThe ref points to a number, but, like [state](/learn/state-a-components-memory), you could point to anything: a string, an object, or even a function. Unlike state, ref is a plain JavaScript object with the `current` property that you can read and modify.\n\nNote that **the component doesn't re-render with every increment.** Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not!\n\n## Example: building a stopwatch {/*example-building-a-stopwatch*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"751":{"pageContent":"## Example: building a stopwatch {/*example-building-a-stopwatch*/}\n\nYou can combine refs and state in a single component. For example, let's make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed \"Start\", you will need to keep track of when the Start button was pressed and what the current time is. **This information is used for rendering, so you'll keep it in state:**\n\n```js\n\nconst [startTime, setStartTime] = useState(null);\n\nconst [now, setNow] = useState(null);\n\n```\n\nWhen the user presses \"Start\", you'll use [`setInterval`](https://developer.mozilla.org/docs/Web/API/setInterval) in order to update the time every 10 milliseconds:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Stopwatch() {\n\nconst [startTime, setStartTime] = useState(null);\n\nconst [now, setNow] = useState(null);\n\nfunction handleStart() {\n\n// Start counting.\n\nsetStartTime(Date.now());\n\nsetNow(Date.now());\n\nsetInterval(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"752":{"pageContent":"const [startTime, setStartTime] = useState(null);\n\nconst [now, setNow] = useState(null);\n\nfunction handleStart() {\n\n// Start counting.\n\nsetStartTime(Date.now());\n\nsetNow(Date.now());\n\nsetInterval(() => {\n\n// Update the current time every 10ms.\n\nsetNow(Date.now());\n\n}, 10);\n\n}\n\nlet secondsPassed = 0;\n\nif (startTime != null && now != null) {\n\nsecondsPassed = (now - startTime) / 1000;\n\n}\n\nreturn (\n\n<>\n\n<h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n\n<button onClick={handleStart}>\n\nStart\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nWhen the \"Stop\" button is pressed, you need to cancel the existing interval so that it stops updating the `now` state variable. You can do this by calling [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval), but you need to give it the interval ID that was previously returned by the `setInterval` call when the user pressed Start. You need to keep the interval ID somewhere. **Since the interval ID is not used for rendering, you can keep it in a ref:**\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"753":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function Stopwatch() {\n\nconst [startTime, setStartTime] = useState(null);\n\nconst [now, setNow] = useState(null);\n\nconst intervalRef = useRef(null);\n\nfunction handleStart() {\n\nsetStartTime(Date.now());\n\nsetNow(Date.now());\n\nclearInterval(intervalRef.current);\n\nintervalRef.current = setInterval(() => {\n\nsetNow(Date.now());\n\n}, 10);\n\n}\n\nfunction handleStop() {\n\nclearInterval(intervalRef.current);\n\n}\n\nlet secondsPassed = 0;\n\nif (startTime != null && now != null) {\n\nsecondsPassed = (now - startTime) / 1000;\n\n}\n\nreturn (\n\n<>\n\n<h1>Time passed: {secondsPassed.toFixed(3)}</h1>\n\n<button onClick={handleStart}>\n\nStart\n\n</button>\n\n<button onClick={handleStop}>\n\nStop\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nWhen a piece of information is used for rendering, keep it in state. When a piece of information is only needed by event handlers and changing it doesn't require a re-render, using a ref may be more efficient.\n\n## Differences between refs and state {/*differences-between-refs-and-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"754":{"pageContent":"## Differences between refs and state {/*differences-between-refs-and-state*/}\n\nPerhaps you're thinking refs seem less \"strict\" than state—you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you'll want to use state. Refs are an \"escape hatch\" you won't need often. Here's how state and refs compare:\n\n| refs                                                                                  | state                                                                                                                     |\n\n| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n\n| `useRef(initialValue)` returns `{ current: initialValue }`                            | `useState(initialValue)` returns the current value of a state variable and a state setter function ( `[value, setValue]`) |","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"755":{"pageContent":"| Doesn't trigger re-render when you change it.                                         | Triggers re-render when you change it.                                                                                    |\n\n| Mutable—you can modify and update `current`'s value outside of the rendering process. | \"Immutable\"—you must use the state setting function to modify state variables to queue a re-render.                       |\n\n| You shouldn't read (or write) the `current` value during rendering. | You can read state at any time. However, each render has its own [snapshot](/learn/state-as-a-snapshot) of state which does not change.\n\nHere is a counter button that's implemented with state:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nYou clicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"756":{"pageContent":"const [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nYou clicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nBecause the `count` value is displayed, it makes sense to use a state value for it. When the counter's value is set with `setCount()`, React re-renders the component and the screen updates to reflect the new count.\n\nIf you tried to implement this with a ref, React would never re-render the component, so you'd never see the count change! See how clicking this button **does not update its text**:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Counter() {\n\nlet countRef = useRef(0);\n\nfunction handleClick() {\n\n// This doesn't re-render the component!\n\ncountRef.current = countRef.current + 1;\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nYou clicked {countRef.current} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis is why reading `ref.current` during render leads to unreliable code. If you need that, use state instead.\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"757":{"pageContent":"You clicked {countRef.current} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis is why reading `ref.current` during render leads to unreliable code. If you need that, use state instead.\n\n<DeepDive>\n\n#### How does useRef work inside? {/*how-does-use-ref-work-inside*/}\n\nAlthough both `useState` and `useRef` are provided by React, in principle `useRef` could be implemented _on top of_ `useState`. You can imagine that inside of React, `useRef` is implemented like this:\n\n```js\n\n// Inside of React\n\nfunction useRef(initialValue) {\n\nconst [ref, unused] = useState({ current: initialValue });\n\nreturn ref;\n\n}\n\n```\n\nDuring the first render, `useRef` returns `{ current: initialValue }`. This object is stored by React, so during the next render the same object will be returned. Note how the state setter is unused in this example. It is unnecessary because `useRef` always needs to return the same object!","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"758":{"pageContent":"React provides a built-in version of `useRef` because it is common enough in practice. But you can think of it as a regular state variable without a setter. If you're familiar with object-oriented programming, refs might remind you of instance fields--but instead of `this.something` you write `somethingRef.current`.\n\n</DeepDive>\n\n## When to use refs {/*when-to-use-refs*/}\n\nTypically, you will use a ref when your component needs to \"step outside\" React and communicate with external APIs—often a browser API that won't impact the appearance of the component. Here are a few of these rare situations:\n\nStoring [timeout IDs](https://developer.mozilla.org/docs/Web/API/setTimeout)\n\nStoring and manipulating [DOM elements](https://developer.mozilla.org/docs/Web/API/Element), which we cover on [the next page](/learn/manipulating-the-dom-with-refs)\n\nStoring other objects that aren't necessary to calculate the JSX.","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"759":{"pageContent":"Storing other objects that aren't necessary to calculate the JSX.\n\nIf your component needs to store some value, but it doesn't impact the rendering logic, choose refs.\n\n## Best practices for refs {/*best-practices-for-refs*/}\n\nFollowing these principles will make your components more predictable:\n\n**Treat refs as an escape hatch.** Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.\n\n**Don't read or write `ref.current` during rendering.** If some information is needed during rendering, use [state](/learn/state-a-components-memory) instead. Since React doesn't know when `ref.current` changes, even reading it while rendering makes your component's behavior difficult to predict. (The only exception to this is code like `if (!ref.current) ref.current = new Thing()` which only sets the ref once during the first render.)","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"760":{"pageContent":"Limitations of React state don't apply to refs. For example, state acts like a [snapshot for every render](/learn/state-as-a-snapshot) and [doesn't update synchronously.](/learn/queueing-a-series-of-state-updates) But when you mutate the current value of a ref, it changes immediately:\n\n```js\n\nref.current = 5;\n\nconsole.log(ref.current); // 5\n\n```\n\nThis is because **the ref itself is a regular JavaScript object,** and so it behaves like one.\n\nYou also don't need to worry about [avoiding mutation](/learn/updating-objects-in-state) when you work with a ref. As long as the object you're mutating isn't used for rendering, React doesn't care what you do with the ref or its contents.\n\n## Refs and the DOM {/*refs-and-the-dom*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"761":{"pageContent":"## Refs and the DOM {/*refs-and-the-dom*/}\n\nYou can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to a `ref` attribute in JSX, like `<div ref={myRef}>`, React will put the corresponding DOM element into `myRef.current`. You can read more about this in [Manipulating the DOM with Refs.](/learn/manipulating-the-dom-with-refs)\n\n<Recap>\n\nRefs are an escape hatch to hold onto values that aren't used for rendering. You won't need them often.\n\nA ref is a plain JavaScript object with a single property called `current`, which you can read or set.\n\nYou can ask React to give you a ref by calling the `useRef` Hook.\n\nLike state, refs let you retain information between re-renders of a component.\n\nUnlike state, setting the ref's `current` value does not trigger a re-render.\n\nDon't read or write `ref.current` during rendering. This makes your component hard to predict.","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"762":{"pageContent":"Unlike state, setting the ref's `current` value does not trigger a re-render.\n\nDon't read or write `ref.current` during rendering. This makes your component hard to predict.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a broken chat input {/*fix-a-broken-chat-input*/}\n\nType a message and click \"Send\". You will notice there is a three second delay before you see the \"Sent!\" alert. During this delay, you can see an \"Undo\" button. Click it. This \"Undo\" button is supposed to stop the \"Sent!\" message from appearing. It does this by calling [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout) for the timeout ID saved during `handleSend`. However, even after \"Undo\" is clicked, the \"Sent!\" message still appears. Find why it doesn't work, and fix it.\n\n<Hint>\n\nRegular variables like `let timeoutID` don't \"survive\" between re-renders because every render runs your component (and initializes its variables) from scratch. Should you keep the timeout ID somewhere else?\n\n</Hint>\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"763":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Chat() {\n\nconst [text, setText] = useState('');\n\nconst [isSending, setIsSending] = useState(false);\n\nlet timeoutID = null;\n\nfunction handleSend() {\n\nsetIsSending(true);\n\ntimeoutID = setTimeout(() => {\n\nalert('Sent!');\n\nsetIsSending(false);\n\n}, 3000);\n\n}\n\nfunction handleUndo() {\n\nsetIsSending(false);\n\nclearTimeout(timeoutID);\n\n}\n\nreturn (\n\n<>\n\n<input\n\ndisabled={isSending}\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button\n\ndisabled={isSending}\n\nonClick={handleSend}>\n\n{isSending ? 'Sending...' : 'Send'}\n\n</button>\n\n{isSending &&\n\n<button onClick={handleUndo}>\n\nUndo\n\n</button>\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nWhenever your component re-renders (such as when you set state), all local variables get initialized from scratch. This is why you can't save the timeout ID in a local variable like `timeoutID` and then expect another event handler to \"see\" it in the future. Instead, store it in a ref, which React will preserve between renders.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"764":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function Chat() {\n\nconst [text, setText] = useState('');\n\nconst [isSending, setIsSending] = useState(false);\n\nconst timeoutRef = useRef(null);\n\nfunction handleSend() {\n\nsetIsSending(true);\n\ntimeoutRef.current = setTimeout(() => {\n\nalert('Sent!');\n\nsetIsSending(false);\n\n}, 3000);\n\n}\n\nfunction handleUndo() {\n\nsetIsSending(false);\n\nclearTimeout(timeoutRef.current);\n\n}\n\nreturn (\n\n<>\n\n<input\n\ndisabled={isSending}\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button\n\ndisabled={isSending}\n\nonClick={handleSend}>\n\n{isSending ? 'Sending...' : 'Send'}\n\n</button>\n\n{isSending &&\n\n<button onClick={handleUndo}>\n\nUndo\n\n</button>\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix a component failing to re-render {/*fix-a-component-failing-to-re-render*/}\n\nThis button is supposed to toggle between showing \"On\" and \"Off\". However, it always shows \"Off\". What is wrong with this code? Fix it.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Toggle() {","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"765":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Toggle() {\n\nconst isOnRef = useRef(false);\n\nreturn (\n\n<button onClick={() => {\n\nisOnRef.current = !isOnRef.current;\n\n}}>\n\n{isOnRef.current ? 'On' : 'Off'}\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nIn this example, the current value of a ref is used to calculate the rendering output: `{isOnRef.current ? 'On' : 'Off'}`. This is a sign that this information should not be in a ref, and should have instead been put in state. To fix it, remove the ref and use state instead:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Toggle() {\n\nconst [isOn, setIsOn] = useState(false);\n\nreturn (\n\n<button onClick={() => {\n\nsetIsOn(!isOn);\n\n}}>\n\n{isOn ? 'On' : 'Off'}\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix debouncing {/*fix-debouncing*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"766":{"pageContent":"const [isOn, setIsOn] = useState(false);\n\nreturn (\n\n<button onClick={() => {\n\nsetIsOn(!isOn);\n\n}}>\n\n{isOn ? 'On' : 'Off'}\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix debouncing {/*fix-debouncing*/}\n\nIn this example, all button click handlers are [\"debounced\".](https://redd.one/blog/debounce-vs-throttle) To see what this means, press one of the buttons. Notice how the message appears a second later. If you press the button while waiting for the message, the timer will reset. So if you keep clicking the same button fast many times, the message won't appear until a second *after* you stop clicking. Debouncing lets you delay some action until the user \"stops doing things\".\n\nThis example works, but not quite as intended. The buttons are not independent. To see the problem, click one of the buttons, and then immediately click another button. You'd expect that after a delay, you would see both button's messages. But only the last button's message shows up. The first button's message gets lost.","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"767":{"pageContent":"Why are the buttons interfering with each other? Find and fix the issue.\n\n<Hint>\n\nThe last timeout ID variable is shared between all `DebouncedButton` components. This is why clicking one button resets another button's timeout. Can you store a separate timeout ID for each button?\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet timeoutID;\n\nfunction DebouncedButton({ onClick, children }) {\n\nreturn (\n\n<button onClick={() => {\n\nclearTimeout(timeoutID);\n\ntimeoutID = setTimeout(() => {\n\nonClick();\n\n}, 1000);\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function Dashboard() {\n\nreturn (\n\n<>\n\n<DebouncedButton\n\nonClick={() => alert('Spaceship launched!')}\n\n>\n\nLaunch the spaceship\n\n</DebouncedButton>\n\n<DebouncedButton\n\nonClick={() => alert('Soup boiled!')}\n\n>\n\nBoil the soup\n\n</DebouncedButton>\n\n<DebouncedButton\n\nonClick={() => alert('Lullaby sung!')}\n\n>\n\nSing a lullaby\n\n</DebouncedButton>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"768":{"pageContent":">\n\nBoil the soup\n\n</DebouncedButton>\n\n<DebouncedButton\n\nonClick={() => alert('Lullaby sung!')}\n\n>\n\nSing a lullaby\n\n</DebouncedButton>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nA variable like `timeoutID` is shared between all components. This is why clicking on the second button resets the first button's pending timeout. To fix this, you can keep timeout in a ref. Each button will get its own ref, so they won't conflict with each other. Notice how clicking two buttons fast will show both messages.\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nfunction DebouncedButton({ onClick, children }) {\n\nconst timeoutRef = useRef(null);\n\nreturn (\n\n<button onClick={() => {\n\nclearTimeout(timeoutRef.current);\n\ntimeoutRef.current = setTimeout(() => {\n\nonClick();\n\n}, 1000);\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function Dashboard() {\n\nreturn (\n\n<>\n\n<DebouncedButton\n\nonClick={() => alert('Spaceship launched!')}\n\n>\n\nLaunch the spaceship\n\n</DebouncedButton>\n\n<DebouncedButton","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"769":{"pageContent":"}, 1000);\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\nexport default function Dashboard() {\n\nreturn (\n\n<>\n\n<DebouncedButton\n\nonClick={() => alert('Spaceship launched!')}\n\n>\n\nLaunch the spaceship\n\n</DebouncedButton>\n\n<DebouncedButton\n\nonClick={() => alert('Soup boiled!')}\n\n>\n\nBoil the soup\n\n</DebouncedButton>\n\n<DebouncedButton\n\nonClick={() => alert('Lullaby sung!')}\n\n>\n\nSing a lullaby\n\n</DebouncedButton>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Read the latest state {/*read-the-latest-state*/}\n\nIn this example, after you press \"Send\", there is a small delay before the message is shown. Type \"hello\", press Send, and then quickly edit the input again. Despite your edits, the alert would still show \"hello\" (which was the value of state [at the time](/learn/state-as-a-snapshot#state-over-time) the button was clicked).","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"770":{"pageContent":"Usually, this behavior is what you want in an app. However, there may be occasional cases where you want some asynchronous code to read the *latest* version of some state. Can you think of a way to make the alert show the *current* input text rather than what it was at the time of the click?\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function Chat() {\n\nconst [text, setText] = useState('');\n\nfunction handleSend() {\n\nsetTimeout(() => {\n\nalert('Sending: ' + text);\n\n}, 3000);\n\n}\n\nreturn (\n\n<>\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button\n\nonClick={handleSend}>\n\nSend\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"771":{"pageContent":"setTimeout(() => {\n\nalert('Sending: ' + text);\n\n}, 3000);\n\n}\n\nreturn (\n\n<>\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button\n\nonClick={handleSend}>\n\nSend\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nState works [like a snapshot](/learn/state-as-a-snapshot), so you can't read the latest state from an asynchronous operation like a timeout. However, you can keep the latest input text in a ref. A ref is mutable, so you can read the `current` property at any time. Since the current text is also used for rendering, in this example, you will need *both* a state variable (for rendering), *and* a ref (to read it in the timeout). You will need to update the current ref value manually.\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function Chat() {\n\nconst [text, setText] = useState('');\n\nconst textRef = useRef(text);\n\nfunction handleChange(e) {\n\nsetText(e.target.value);\n\ntextRef.current = e.target.value;\n\n}\n\nfunction handleSend() {\n\nsetTimeout(() => {\n\nalert('Sending: ' + textRef.current);","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"772":{"pageContent":"const textRef = useRef(text);\n\nfunction handleChange(e) {\n\nsetText(e.target.value);\n\ntextRef.current = e.target.value;\n\n}\n\nfunction handleSend() {\n\nsetTimeout(() => {\n\nalert('Sending: ' + textRef.current);\n\n}, 3000);\n\n}\n\nreturn (\n\n<>\n\n<input\n\nvalue={text}\n\nonChange={handleChange}\n\n/>\n\n<button\n\nonClick={handleSend}>\n\nSend\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/referencing-values-with-refs.md"}},"773":{"pageContent":"--\n\ntitle: Escape Hatches\n\n--\n\n<Intro>\n\nSome of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you'll learn the escape hatches that let you \"step outside\" React and connect to external systems. Most of your application logic and data flow should not rely on these features.\n\n</Intro>\n\n<YouWillLearn isChapter={true}>\n\n[How to \"remember\" information without re-rendering](/learn/referencing-values-with-refs)\n\n[How to access DOM elements managed by React](/learn/manipulating-the-dom-with-refs)\n\n[How to synchronize components with external systems](/learn/synchronizing-with-effects)\n\n[How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)\n\n[How an Effect's lifecycle is different from a component's](/learn/lifecycle-of-reactive-effects)","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"774":{"pageContent":"[How to remove unnecessary Effects from your components](/learn/you-might-not-need-an-effect)\n\n[How an Effect's lifecycle is different from a component's](/learn/lifecycle-of-reactive-effects)\n\n[How to prevent some values from re-triggering Effects](/learn/separating-events-from-effects)\n\n[How to make your Effect re-run less often](/learn/removing-effect-dependencies)\n\n[How to share logic between components](/learn/reusing-logic-with-custom-hooks)\n\n</YouWillLearn>\n\n## Referencing values with refs {/*referencing-values-with-refs*/}\n\nWhen you want a component to \"remember\" some information, but you don't want that information to [trigger new renders](/learn/render-and-commit), you can use a *ref*:\n\n```js\n\nconst ref = useRef(0);\n\n```\n\nLike state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the `ref.current` property.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"775":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Counter() {\n\nlet ref = useRef(0);\n\nfunction handleClick() {\n\nref.current = ref.current + 1;\n\nalert('You clicked ' + ref.current + ' times!');\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClick me!\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nA ref is like a secret pocket of your component that React doesn't track. For example, you can use refs to store [timeout IDs](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#return_value), [DOM elements](https://developer.mozilla.org/en-US/docs/Web/API/Element), and other objects that don't impact the component's rendering output.\n\n<LearnMore path=\"/learn/referencing-values-with-refs\">\n\nRead **[Referencing Values with Refs](/learn/referencing-values-with-refs)** to learn how to use refs to remember information.\n\n</LearnMore>\n\n## Manipulating the DOM with refs {/*manipulating-the-dom-with-refs*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"776":{"pageContent":"</LearnMore>\n\n## Manipulating the DOM with refs {/*manipulating-the-dom-with-refs*/}\n\nReact automatically updates the DOM to match your render output, so your components won't often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<input ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/manipulating-the-dom-with-refs\">\n\nRead **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.\n\n</LearnMore>","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"777":{"pageContent":"Read **[Manipulating the DOM with Refs](/learn/manipulating-the-dom-with-refs)** to learn how to access DOM elements managed by React.\n\n</LearnMore>\n\n## Synchronizing with Effects {/*synchronizing-with-effects*/}\n\nSome components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, *Effects* let you run some code after rendering. Use them to synchronize your component with some system outside of React.\n\nPress Play/Pause multiple times and see how the video player stays synchronized to the `isPlaying` prop value:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n}, [isPlaying]);","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"778":{"pageContent":"function VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n}, [isPlaying]);\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setIsPlaying(!isPlaying)}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<VideoPlayer\n\nisPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>\n\nMany Effects also need to \"clean up\" after themselves. For example, if your Effect sets up a connection to a chat server, it should return a *cleanup function* that tells React how to disconnect your component from that server:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"779":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []);\n\nreturn <h1>Welcome to the chat!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection() {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected.');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\nIn development, React will immediately run and clean up your Effect one extra time. This is why you see `\"✅ Connecting...\"` printed twice. This ensures that you don't forget to implement the cleanup function.\n\n<LearnMore path=\"/learn/synchronizing-with-effects\">\n\nRead **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.\n\n</LearnMore>","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"780":{"pageContent":"<LearnMore path=\"/learn/synchronizing-with-effects\">\n\nRead **[Synchronizing with Effects](/learn/synchronizing-with-effects)** to learn how to synchronize components with external systems.\n\n</LearnMore>\n\n## You Might Not Need An Effect {/*you-might-not-need-an-effect*/}\n\nEffects are an escape hatch from the React paradigm. They let you \"step outside\" of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component's state when some props or state change), you shouldn't need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\n\nThere are two common cases in which you don't need Effects:\n\n**You don't need Effects to transform data for rendering.**\n\n**You don't need Effects to handle user events.**\n\nFor example, you don't need an Effect to adjust some state based on other state:\n\n```js {5-9}\n\nfunction Form() {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"781":{"pageContent":"**You don't need Effects to handle user events.**\n\nFor example, you don't need an Effect to adjust some state based on other state:\n\n```js {5-9}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\n// 🔴 Avoid: redundant state and unnecessary Effect\n\nconst [fullName, setFullName] = useState('');\n\nuseEffect(() => {\n\nsetFullName(firstName + ' ' + lastName);\n\n}, [firstName, lastName]);\n\n// ...\n\n}\n\n```\n\nInstead, calculate as much as you can while rendering:\n\n```js {4-5}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\n// ✅ Good: calculated during rendering\n\nconst fullName = firstName + ' ' + lastName;\n\n// ...\n\n}\n\n```\n\nHowever, you *do* need Effects to synchronize with external systems.\n\n<LearnMore path=\"/learn/you-might-not-need-an-effect\">\n\nRead **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.\n\n</LearnMore>","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"782":{"pageContent":"<LearnMore path=\"/learn/you-might-not-need-an-effect\">\n\nRead **[You Might Not Need an Effect](/learn/you-might-not-need-an-effect)** to learn how to remove unnecessary Effects.\n\n</LearnMore>\n\n## Lifecycle of reactive effects {/*lifecycle-of-reactive-effects*/}\n\nEffects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.\n\nThis Effect depends on the value of the `roomId` prop. Props are *reactive values,* which means they can change on a re-render. Notice that the Effect *re-synchronizes* (and re-connects to the server) after you update the `roomId`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"783":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"784":{"pageContent":"// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nReact provides a linter rule to check that you've specified your Effect's dependencies correctly. If you forget to specify `roomId` in the list of dependencies in the above example, the linter will find that bug automatically.\n\n<LearnMore path=\"/learn/lifecycle-of-reactive-effects\">\n\nRead **[Lifecycle of Reactive Events](/learn/lifecycle-of-reactive-effects)** to learn how an Effect's lifecycle is different from a component's.\n\n</LearnMore>\n\n## Separating events from Effects {/*separating-events-from-effects*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"785":{"pageContent":"## Separating events from Effects {/*separating-events-from-effects*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if some value they read, like a prop or a state variable, is different from what it was on last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.\n\nAll code inside Effects is *reactive.* It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either `roomId` or `theme` have changed after interaction:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"786":{"pageContent":"{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nshowNotification('Connected!', theme);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, theme]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"787":{"pageContent":"}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"788":{"pageContent":"}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nThis is not ideal. You want to re-connect to the chat only if the `roomId` has changed. Switching the `theme` shouldn't re-connect to the chat! Move the code reading `theme` out of your Effect into an *Event function*:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"789":{"pageContent":"<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(() => {\n\nshowNotification('Connected!', theme);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nonConnected();\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"790":{"pageContent":"connection.on('connected', () => {\n\nonConnected();\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"791":{"pageContent":"let connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js hidden\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nCode inside Event functions isn't reactive, so changing the `theme` no longer makes your Effect re-connect.\n\n<LearnMore path=\"/learn/separating-events-from-effects\">","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"792":{"pageContent":"```\n\n</Sandpack>\n\nCode inside Event functions isn't reactive, so changing the `theme` no longer makes your Effect re-connect.\n\n<LearnMore path=\"/learn/separating-events-from-effects\">\n\nRead **[Separating Events from Effects](/learn/separating-events-from-effects)** to learn how to prevent some values from re-triggering Effects.\n\n</LearnMore>\n\n## Removing Effect dependencies {/*removing-effect-dependencies*/}\n\nWhen you write an Effect, the linter will verify that you've included every reactive value (like props and state) that the Effect reads in the list of your Effect's dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.\n\nFor example, this Effect depends on the `options` object which gets re-created every time you edit the input:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"793":{"pageContent":"For example, this Effect depends on the `options` object which gets re-created every time you edit the input:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nuseEffect(() => {\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [options]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"794":{"pageContent":">\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nYou don't want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the `options` object inside the Effect so that the Effect only depends on the `roomId` string:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"795":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"796":{"pageContent":"<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice that you didn't start by editing the dependency list to remove the `options` dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became *unnecessary.* You can think of the dependency list as a list of all the reactive values used by your Effect's code. You don't intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"797":{"pageContent":"<LearnMore path=\"/learn/removing-effect-dependencies\">\n\nRead **[Removing Effect Dependencies](/learn/removing-effect-dependencies)** to learn how to make your Effect re-run less often.\n\n</LearnMore>\n\n## Reusing logic with custom Hooks {/*reusing-logic-with-custom-hooks*/}\n\nReact comes with built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application's needs.\n\nIn this example, the `usePointerPosition` custom Hook tracks the cursor position, while `useDelayedValue` custom Hook returns a value that's \"lagging behind\" the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:\n\n<Sandpack>\n\n```js\n\nimport { usePointerPosition } from './usePointerPosition.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"798":{"pageContent":"<Sandpack>\n\n```js\n\nimport { usePointerPosition } from './usePointerPosition.js';\n\nimport { useDelayedValue } from './useDelayedValue.js';\n\nexport default function Canvas() {\n\nconst pos1 = usePointerPosition();\n\nconst pos2 = useDelayedValue(pos1, 100);\n\nconst pos3 = useDelayedValue(pos2, 200);\n\nconst pos4 = useDelayedValue(pos3, 100);\n\nconst pos5 = useDelayedValue(pos3, 50);\n\nreturn (\n\n<>\n\n<Dot position={pos1} opacity={1} />\n\n<Dot position={pos2} opacity={0.8} />\n\n<Dot position={pos3} opacity={0.6} />\n\n<Dot position={pos4} opacity={0.4} />\n\n<Dot position={pos5} opacity={0.2} />\n\n</>\n\n);\n\n}\n\nfunction Dot({ position, opacity }) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```js usePointerPosition.js\n\nimport { useState, useEffect } from 'react';\n\nexport function usePointerPosition() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"799":{"pageContent":"width: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```js usePointerPosition.js\n\nimport { useState, useEffect } from 'react';\n\nexport function usePointerPosition() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, []);\n\nreturn position;\n\n}\n\n```\n\n```js useDelayedValue.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useDelayedValue(value, delay) {\n\nconst [delayedValue, setDelayedValue] = useState(value);\n\nuseEffect(() => {\n\nsetTimeout(() => {\n\nsetDelayedValue(value);\n\n}, delay);\n\n}, [value, delay]);\n\nreturn delayedValue;\n\n}\n\n```\n\n```css\n\nbody { min-height: 300px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"800":{"pageContent":"useEffect(() => {\n\nsetTimeout(() => {\n\nsetDelayedValue(value);\n\n}, delay);\n\n}, [value, delay]);\n\nreturn delayedValue;\n\n}\n\n```\n\n```css\n\nbody { min-height: 300px; }\n\n```\n\n</Sandpack>\n\nYou can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you'll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.\n\n<LearnMore path=\"/learn/reusing-logic-with-custom-hooks\">\n\nRead **[Reusing Logic with Custom Hooks](/learn/reusing-logic-with-custom-hooks)** to learn how to share logic between components.\n\n</LearnMore>\n\n## What's next? {/*whats-next*/}\n\nHead over to [Referencing Values with Refs](/learn/referencing-values-with-refs) to start reading this chapter page by page!","metadata":{"source":"reactjs.org/beta/src/content/learn/escape-hatches.md"}},"801":{"pageContent":"--\n\ntitle: 'Reusing Logic with Custom Hooks'\n\n--\n\n<Intro>\n\nReact comes with several built-in Hooks like `useState`, `useContext`, and `useEffect`. Sometimes, you'll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. You might not find these Hooks in React, but you can create your own Hooks for your application's needs.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat custom Hooks are, and how to write your own\n\nHow to reuse logic between components\n\nHow to name and structure your custom Hooks\n\nWhen and why to extract custom Hooks\n\n</YouWillLearn>\n\n## Custom Hooks: Sharing logic between components {/*custom-hooks-sharing-logic-between-components*/}\n\nImagine you're developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it?","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"802":{"pageContent":"It seems like you'll need two things in your component:\n\n1. A piece of state that tracks whether the network is online.\n\n2. An Effect that subscribes to the global [`online`](https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event) and [`offline`](https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event) events, and updates that state.\n\nThis will keep your component [synchronized](/learn/synchronizing-with-effects) with the network status. You might start with something like this:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function StatusBar() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\nfunction handleOnline() {\n\nsetIsOnline(true);\n\n}\n\nfunction handleOffline() {\n\nsetIsOnline(false);\n\n}\n\nwindow.addEventListener('online', handleOnline);\n\nwindow.addEventListener('offline', handleOffline);\n\nreturn () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"803":{"pageContent":"window.addEventListener('offline', handleOffline);\n\nreturn () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\n```\n\n</Sandpack>\n\nTry turning your network on and off, and notice how this `StatusBar` updates in response to your actions.\n\nNow imagine you *also* want to use the same logic in a different component. You want to implement a Save button that will become disabled and show \"Reconnecting...\" instead of \"Save\" while the network is off.\n\nTo start, you can copy and paste the `isOnline` state and the Effect into `SaveButton`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function SaveButton() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\nfunction handleOnline() {\n\nsetIsOnline(true);\n\n}\n\nfunction handleOffline() {\n\nsetIsOnline(false);\n\n}\n\nwindow.addEventListener('online', handleOnline);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"804":{"pageContent":"useEffect(() => {\n\nfunction handleOnline() {\n\nsetIsOnline(true);\n\n}\n\nfunction handleOffline() {\n\nsetIsOnline(false);\n\n}\n\nwindow.addEventListener('online', handleOnline);\n\nwindow.addEventListener('offline', handleOffline);\n\nreturn () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nVerify that, if you turn off the network, the button will change its appearance.\n\nThese two components work fine, but the duplication in logic between them is unfortunate. It seems like even though they have different *visual appearance,* you want to reuse the logic between them.\n\n### Extracting your own custom Hook from a component {/*extracting-your-own-custom-hook-from-a-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"805":{"pageContent":"### Extracting your own custom Hook from a component {/*extracting-your-own-custom-hook-from-a-component*/}\n\nImagine for a moment that, similar to [`useState`](/reference/react/useState) and [`useEffect`](/reference/react/useEffect), there was a built-in `useOnlineStatus` Hook. Then both of these components could be simplified and you could remove the duplication between them:\n\n```js {2,7}\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\n```\n\nAlthough there is no such built-in Hook, you can write it yourself. Declare a function called `useOnlineStatus` and move all the duplicated code into it from the components you wrote earlier:\n\n```js {2-16}\n\nfunction useOnlineStatus() {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"806":{"pageContent":"```js {2-16}\n\nfunction useOnlineStatus() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\nfunction handleOnline() {\n\nsetIsOnline(true);\n\n}\n\nfunction handleOffline() {\n\nsetIsOnline(false);\n\n}\n\nwindow.addEventListener('online', handleOnline);\n\nwindow.addEventListener('offline', handleOffline);\n\nreturn () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nreturn isOnline;\n\n}\n\n```\n\nAt the end of the function, return `isOnline`. This lets your components read that value:\n\n<Sandpack>\n\n```js\n\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"807":{"pageContent":"console.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<SaveButton />\n\n<StatusBar />\n\n</>\n\n);\n\n}\n\n```\n\n```js useOnlineStatus.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useOnlineStatus() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\nfunction handleOnline() {\n\nsetIsOnline(true);\n\n}\n\nfunction handleOffline() {\n\nsetIsOnline(false);\n\n}\n\nwindow.addEventListener('online', handleOnline);\n\nwindow.addEventListener('offline', handleOffline);\n\nreturn () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nreturn isOnline;\n\n}\n\n```\n\n</Sandpack>\n\nVerify that switching the network on and off updates both components.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"808":{"pageContent":"window.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nreturn isOnline;\n\n}\n\n```\n\n</Sandpack>\n\nVerify that switching the network on and off updates both components.\n\nNow your components don't have as much repetitive logic. **More importantly, the code inside them describes *what they want to do* (use the online status!) rather than *how to do it* (by subscribing to the browser events).**\n\nWhen you extract logic into custom Hooks, you can hide the gnarly details of how you deal with some external system or a browser API. The code of your components expresses your intent, not the implementation.\n\n### Hook names always start with `use` {/*hook-names-always-start-with-use*/}\n\nReact applications are built from components. Components are built from Hooks, whether built-in or custom. You'll likely often use custom Hooks created by others, but occasionally you might write one yourself!\n\nYou must follow these naming conventions:","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"809":{"pageContent":"You must follow these naming conventions:\n\n1. **React component names must start with a capital letter,** like `StatusBar` and `SaveButton`. React components also need to return something that React knows how to display, like a piece of JSX.\n\n2. **Hook names must start with `use` followed by a capital letter,** like [`useState`](/reference/react/useState) (built-in) or `useOnlineStatus` (custom, like earlier on the page). Hooks may return arbitrary values.\n\nThis convention guarantees that you can always look at a component and know where its state, Effects, and other React features might \"hide\". For example, if you see a `getColor()` function call inside your component, you can be sure that it can't possibly contain React state inside because its name doesn't start with `use`. However, a function call like `useOnlineStatus()` will most likely contain calls to other Hooks inside!\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"810":{"pageContent":"<Note>\n\nIf your linter is [configured for React,](/learn/editor-setup#linting) it will enforce this naming convention. Scroll up to the sandbox above and rename `useOnlineStatus` to `getOnlineStatus`. Notice that the linter won't allow you to call `useState` or `useEffect` inside of it anymore. Only Hooks and components can call other Hooks!\n\n</Note>\n\n<DeepDive>\n\n#### Should all functions called during rendering start with the use prefix? {/*should-all-functions-called-during-rendering-start-with-the-use-prefix*/}\n\nNo. Functions that don't *call* Hooks don't need to *be* Hooks.\n\nIf your function doesn't call any Hooks, avoid the `use` prefix. Instead, write it as a regular function *without* the `use` prefix. For example, `useSorted` below doesn't call Hooks, so call it `getSorted` instead:\n\n```js\n\n// 🔴 Avoid: A Hook that doesn't use Hooks\n\nfunction useSorted(items) {\n\nreturn items.slice().sort();\n\n}\n\n// ✅ Good: A regular function that doesn't use Hooks\n\nfunction getSorted(items) {\n\nreturn items.slice().sort();","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"811":{"pageContent":"function useSorted(items) {\n\nreturn items.slice().sort();\n\n}\n\n// ✅ Good: A regular function that doesn't use Hooks\n\nfunction getSorted(items) {\n\nreturn items.slice().sort();\n\n}\n\n```\n\nThis ensures that your code can call this regular function anywhere, including conditions:\n\n```js\n\nfunction List({ items, shouldSort }) {\n\nlet displayedItems = items;\n\nif (shouldSort) {\n\n// ✅ It's ok to call getSorted() conditionally because it's not a Hook\n\ndisplayedItems = getSorted(items);\n\n}\n\n// ...\n\n}\n\n```\n\nYou should give `use` prefix to a function (and thus make it a Hook) if it uses at least one Hook inside of it:\n\n```js\n\n// ✅ Good: A Hook that uses other Hooks\n\nfunction useAuth() {\n\nreturn useContext(Auth);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"812":{"pageContent":"```js\n\n// ✅ Good: A Hook that uses other Hooks\n\nfunction useAuth() {\n\nreturn useContext(Auth);\n\n}\n\n```\n\nTechnically, this isn't enforced by React. In principle, you could make a Hook that doesn't call other Hooks. This is often confusing and limiting so it's best to avoid that pattern. However, there may be rare cases where it is helpful. For example, maybe your function doesn't use any Hooks right now, but you plan to add some Hook calls to it in the future. Then it makes sense to name it with the `use` prefix:\n\n```js {3-4}\n\n// ✅ Good: A Hook that will likely use some other Hooks later\n\nfunction useAuth() {\n\n// TODO: Replace with this line when authentication is implemented:\n\n// return useContext(Auth);\n\nreturn TEST_USER;\n\n}\n\n```\n\nThen components won't be able to call it conditionally. This will become important when you actually add Hook calls inside. If you don't plan to use Hooks inside it (now or later), don't make it a Hook.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"813":{"pageContent":"</DeepDive>\n\n### Custom Hooks let you share stateful logic, not state itself {/*custom-hooks-let-you-share-stateful-logic-not-state-itself*/}\n\nIn the earlier example, when you turned the network on and off, both components updated together. However, it's wrong to think that a single `isOnline` state variable is shared between them. Look at this code:\n\n```js {2,7}\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\n// ...\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\n// ...\n\n}\n\n```\n\nIt works the same way as before you extracted the duplication:\n\n```js {2-5,10-13}\n\nfunction StatusBar() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\n// ...\n\n}, []);\n\n// ...\n\n}\n\nfunction SaveButton() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\n// ...\n\n}, []);\n\n// ...\n\n}\n\n```\n\nThese are two completely independent state variables and Effects! They only happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on).","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"814":{"pageContent":"To better illustrate this, we'll need a different example. Consider this `Form` component:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('Mary');\n\nconst [lastName, setLastName] = useState('Poppins');\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input value={firstName} onChange={handleFirstNameChange} />\n\n</label>\n\n<label>\n\nLast name:\n\n<input value={lastName} onChange={handleLastNameChange} />\n\n</label>\n\n<p><b>Good morning, {firstName} {lastName}.</b></p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nThere's some repetitive logic for each form field:\n\n1. There's a piece of state (`firstName` and `lastName`).\n\n1. There's a change handler (`handleFirstNameChange` and `handleLastNameChange`).\n\n1. There's a piece of JSX that specifies the `value` and `onChange` attributes for that input.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"815":{"pageContent":"1. There's a change handler (`handleFirstNameChange` and `handleLastNameChange`).\n\n1. There's a piece of JSX that specifies the `value` and `onChange` attributes for that input.\n\nYou can extract the repetitive logic into this `useFormInput` custom Hook:\n\n<Sandpack>\n\n```js\n\nimport { useFormInput } from './useFormInput.js';\n\nexport default function Form() {\n\nconst firstNameProps = useFormInput('Mary');\n\nconst lastNameProps = useFormInput('Poppins');\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input {...firstNameProps} />\n\n</label>\n\n<label>\n\nLast name:\n\n<input {...lastNameProps} />\n\n</label>\n\n<p><b>Good morning, {firstNameProps.value} {lastNameProps.value}.</b></p>\n\n</>\n\n);\n\n}\n\n```\n\n```js useFormInput.js active\n\nimport { useState } from 'react';\n\nexport function useFormInput(initialValue) {\n\nconst [value, setValue] = useState(initialValue);\n\nfunction handleChange(e) {\n\nsetValue(e.target.value);\n\n}\n\nconst inputProps = {\n\nvalue: value,\n\nonChange: handleChange\n\n};\n\nreturn inputProps;\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"816":{"pageContent":"setValue(e.target.value);\n\n}\n\nconst inputProps = {\n\nvalue: value,\n\nonChange: handleChange\n\n};\n\nreturn inputProps;\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice that it only declares *one* state variable called `value`.\n\nHowever, the `Form` component calls `useFormInput` *two times:*\n\n```js\n\nfunction Form() {\n\nconst firstNameProps = useFormInput('Mary');\n\nconst lastNameProps = useFormInput('Poppins');\n\n// ...\n\n```\n\nThis is why it works like declaring two separate state variables!\n\n*Custom Hooks let you share *stateful logic* but not *state itself.* Each call to a Hook is completely independent from every other call to the same Hook.** This is why the two sandboxes above are completely equivalent. If you'd like, scroll back up and compare them. The behavior before and after extracting a custom Hook is identical.\n\nWhen you need to share the state itself between multiple components, [lift it up and pass it down](/learn/sharing-state-between-components) instead.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"817":{"pageContent":"When you need to share the state itself between multiple components, [lift it up and pass it down](/learn/sharing-state-between-components) instead.\n\n## Passing reactive values between Hooks {/*passing-reactive-values-between-hooks*/}\n\nThe code inside your custom Hooks will re-run during every re-render of your component. This is why, like components, custom Hooks [need to be pure.](/learn/keeping-components-pure) Think of custom Hooks' code as part of your component's body!\n\nBecause custom Hooks re-render together with your component, they always receive the latest props and state. To see what this means, consider this chat room example. Change the server URL or the selected chat room:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"818":{"pageContent":"export default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.on('message', (msg) => {\n\nshowNotification('New message: ' + msg);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"819":{"pageContent":"connection.on('message', (msg) => {\n\nshowNotification('New message: ' + msg);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:\n\n<input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"820":{"pageContent":"clearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl + '');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme = 'dark') {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"821":{"pageContent":"color: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nWhen you change `serverUrl` or `roomId`, the Effect [\"reacts\" to your changes](/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values) and re-synchronizes. You can tell by the console messages that the chat re-connects every time that you change your Effect's dependencies.\n\nNow move the Effect's code into a custom Hook:\n\n```js {2-13}\n\nexport function useChatRoom({ serverUrl, roomId }) {\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"822":{"pageContent":"export function useChatRoom({ serverUrl, roomId }) {\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nconnection.on('message', (msg) => {\n\nshowNotification('New message: ' + msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\nThis lets your `ChatRoom` component call your custom Hook without worrying about how it works inside:\n\n```js {4-7}\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:\n\n<input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n```\n\nThis looks much simpler! (But it does the same thing.)\n\nNotice that the logic *still responds* to prop and state changes. Try editing the server URL or the selected room:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"823":{"pageContent":"Notice that the logic *still responds* to prop and state changes. Try editing the server URL or the selected room:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState } from 'react';\n\nimport { useChatRoom } from './useChatRoom.js';\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:\n\n<input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"824":{"pageContent":"roomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:\n\n<input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```js useChatRoom.js\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nexport function useChatRoom({ serverUrl, roomId }) {\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nconnection.on('message', (msg) => {\n\nshowNotification('New message: ' + msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"825":{"pageContent":"if (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl + '');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"826":{"pageContent":"throw Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme = 'dark') {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice how you're taking the return value of one Hook:\n\n```js {2}\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"827":{"pageContent":"```\n\n</Sandpack>\n\nNotice how you're taking the return value of one Hook:\n\n```js {2}\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\n// ...\n\n```\n\nand pass it as an input to another Hook:\n\n```js {6}\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl\n\n});\n\n// ...\n\n```\n\nEvery time your `ChatRoom` component re-renders, it passes the latest `roomId` and `serverUrl` to your Hook. This is why your Effect re-connects to the chat whenever their values are different after a re-render. (If you ever worked with music processing software, chaining Hooks like this might remind you of chaining multiple audio effects, like adding reverb or chorus. It's as if the output of `useState` \"feeds into\" the input of the `useChatRoom`.)","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"828":{"pageContent":"### Passing event handlers to custom Hooks {/*passing-event-handlers-to-custom-hooks*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nAs you start using `useChatRoom` in more components, you might want to let different components customize its behavior. For example, currently, the logic for what to do when a message arrives is hardcoded inside the Hook:\n\n```js {9-11}\n\nexport function useChatRoom({ serverUrl, roomId }) {\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nconnection.on('message', (msg) => {\n\nshowNotification('New message: ' + msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\nLet's say you want to move this logic back to your component:\n\n```js {7-9}\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"829":{"pageContent":"```js {7-9}\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl,\n\nonReceiveMessage(msg) {\n\nshowNotification('New message: ' + msg);\n\n}\n\n});\n\n// ...\n\n```\n\nTo make this work, change your custom Hook to take `onReceiveMessage` as one of its named options:\n\n```js {1,10,13}\n\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nconnection.on('message', (msg) => {\n\nonReceiveMessage(msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared\n\n}\n\n```\n\nThis will work, but there's one more improvement you can do when your custom Hook accepts event handlers.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"830":{"pageContent":"}, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared\n\n}\n\n```\n\nThis will work, but there's one more improvement you can do when your custom Hook accepts event handlers.\n\nAdding a dependency on `onReceiveMessage` is not ideal because it will cause the chat to re-connect every time the component re-renders. [Wrap this event handler into an Effect Event to remove it from the dependencies:](/learn/removing-effect-dependencies#wrapping-an-event-handler-from-the-props)\n\n```js {1,4,5,15,18}\n\nimport { useEffect, useEffectEvent } from 'react';\n\n// ...\n\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n\nconst onMessage = useEffectEvent(onReceiveMessage);\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nconnection.on('message', (msg) => {\n\nonMessage(msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]); // ✅ All dependencies declared\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"831":{"pageContent":"connection.connect();\n\nconnection.on('message', (msg) => {\n\nonMessage(msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]); // ✅ All dependencies declared\n\n}\n\n```\n\nNow the chat won't re-connect every time that the `ChatRoom` component re-renders. Here is a fully working demo of passing an event handler to a custom Hook that you can play with:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState } from 'react';\n\nimport { useChatRoom } from './useChatRoom.js';\n\nimport { showNotification } from './notifications.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"832":{"pageContent":"<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState } from 'react';\n\nimport { useChatRoom } from './useChatRoom.js';\n\nimport { showNotification } from './notifications.js';\n\nexport default function ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseChatRoom({\n\nroomId: roomId,\n\nserverUrl: serverUrl,\n\nonReceiveMessage(msg) {\n\nshowNotification('New message: ' + msg);\n\n}\n\n});\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:\n\n<input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```js useChatRoom.js\n\nimport { useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\n\nconst onMessage = useEffectEvent(onReceiveMessage);\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"833":{"pageContent":"const onMessage = useEffectEvent(onReceiveMessage);\n\nuseEffect(() => {\n\nconst options = {\n\nserverUrl: serverUrl,\n\nroomId: roomId\n\n};\n\nconst connection = createConnection(options);\n\nconnection.connect();\n\nconnection.on('message', (msg) => {\n\nonMessage(msg);\n\n});\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection({ serverUrl, roomId }) {\n\n// A real implementation would actually connect to the server\n\nif (typeof serverUrl !== 'string') {\n\nthrow Error('Expected serverUrl to be a string. Received: ' + serverUrl);\n\n}\n\nif (typeof roomId !== 'string') {\n\nthrow Error('Expected roomId to be a string. Received: ' + roomId);\n\n}\n\nlet intervalId;\n\nlet messageCallback;\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\nclearInterval(intervalId);\n\nintervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"834":{"pageContent":"intervalId = setInterval(() => {\n\nif (messageCallback) {\n\nif (Math.random() > 0.5) {\n\nmessageCallback('hey')\n\n} else {\n\nmessageCallback('lol');\n\n}\n\n}\n\n}, 3000);\n\n},\n\ndisconnect() {\n\nclearInterval(intervalId);\n\nmessageCallback = null;\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl + '');\n\n},\n\non(event, callback) {\n\nif (messageCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'message') {\n\nthrow Error('Only \"message\" event is supported.');\n\n}\n\nmessageCallback = callback;\n\n},\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme = 'dark') {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"835":{"pageContent":"},\n\n}).showToast();\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice how you no longer need to know *how* `useChatRoom` works in order to use it. You could add it to any other component, pass any other options, and it would work the same way. That's the power of custom Hooks.\n\n## When to use custom Hooks {/*when-to-use-custom-hooks*/}\n\nYou don't need to extract a custom Hook for every little duplicated bit of code. Some duplication is fine. For example, extracting a `useFormInput` Hook to wrap a single `useState` call like earlier is probably unnecessary.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"836":{"pageContent":"However, whenever you write an Effect, consider whether it would be clearer to also wrap it in a custom Hook. [You shouldn't need Effects very often,](/learn/you-might-not-need-an-effect) so if you're writing one, it means that you need to \"step outside React\" to synchronize with some external system or to do something that React doesn't have a built-in API for. Wrapping your Effect into a custom Hook lets you precisely communicate your intent and how the data flows through it.\n\nFor example, consider a `ShippingForm` component that displays two dropdowns: one shows the list of cities, and another shows the list of areas in the selected city. You might start with some code that looks like this:\n\n```js {3-16,20-35}\n\nfunction ShippingForm({ country }) {\n\nconst [cities, setCities] = useState(null);\n\n// This Effect fetches cities for a country\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetch(`/api/cities?country=${country}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetCities(json);\n\n}\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"837":{"pageContent":"useEffect(() => {\n\nlet ignore = false;\n\nfetch(`/api/cities?country=${country}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetCities(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [country]);\n\nconst [city, setCity] = useState(null);\n\nconst [areas, setAreas] = useState(null);\n\n// This Effect fetches areas for the selected city\n\nuseEffect(() => {\n\nif (city) {\n\nlet ignore = false;\n\nfetch(`/api/areas?city=${city}`)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetAreas(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}\n\n}, [city]);\n\n// ...\n\n```\n\nAlthough this code is quite repetitive, [it's correct to keep these Effects separate from each other.](/learn/removing-effect-dependencies#is-your-effect-doing-several-unrelated-things) They synchronize two different things, so you shouldn't merge them into one Effect. Instead, you can simplify the `ShippingForm` component above by extracting the common logic between them into your own `useData` Hook:\n\n```js {2-18}\n\nfunction useData(url) {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"838":{"pageContent":"```js {2-18}\n\nfunction useData(url) {\n\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n\nif (url) {\n\nlet ignore = false;\n\nfetch(url)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetData(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}\n\n}, [url]);\n\nreturn data;\n\n}\n\n```\n\nNow you can replace both Effects in the `ShippingForm` components with calls to `useData`:\n\n```js {2,4}\n\nfunction ShippingForm({ country }) {\n\nconst cities = useData(`/api/cities?country=${country}`);\n\nconst [city, setCity] = useState(null);\n\nconst areas = useData(city ? `/api/areas?city=${city}` : null);\n\n// ...\n\n```\n\nExtracting a custom Hook makes the data flow explicit. You feed the `url` in and you get the `data` out. By \"hiding\" your Effect inside `useData`, you also prevent someone working on the `ShippingForm` component from adding [unnecessary dependencies](/learn/removing-effect-dependencies) to it. Ideally, with time, most of your app's Effects will be in custom Hooks.\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"839":{"pageContent":"<DeepDive>\n\n#### Keep your custom Hooks focused on concrete high-level use cases {/*keep-your-custom-hooks-focused-on-concrete-high-level-use-cases*/}\n\nStart by choosing your custom Hook's name. If you struggle to pick a clear name, it might mean that your Effect is too coupled to the rest of your component's logic, and is not yet ready to be extracted.\n\nIdeally, your custom Hook's name should be clear enough that even a person who doesn't write code often could have a good guess about what your custom Hook does, what it takes, and what it returns:\n\n✅ `useData(url)`\n\n✅ `useImpressionLog(eventName, extraData)`\n\n✅ `useChatRoom(options)`\n\nWhen you synchronize with an external system, your custom Hook name may be more technical and use jargon specific to that system. It's good as long as it would be clear to a person familiar with that system:\n\n✅ `useMediaQuery(query)`\n\n✅ `useSocket(url)`\n\n✅ `useIntersectionObserver(ref, options)`","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"840":{"pageContent":"✅ `useMediaQuery(query)`\n\n✅ `useSocket(url)`\n\n✅ `useIntersectionObserver(ref, options)`\n\n*Keep custom Hooks focused on concrete high-level use cases.** Avoid creating and using custom \"lifecycle\" Hooks that act as alternatives and convenience wrappers for the `useEffect` API itself:\n\n🔴 `useMount(fn)`\n\n🔴 `useEffectOnce(fn)`\n\n🔴 `useUpdateEffect(fn)`\n\nFor example, this `useMount` Hook tries to ensure some code only runs \"on mount\":\n\n```js {4-5,14-15}\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n// 🔴 Avoid: using custom \"lifecycle\" Hooks\n\nuseMount(() => {\n\nconst connection = createConnection({ roomId, serverUrl });\n\nconnection.connect();\n\npost('/analytics/event', { eventName: 'visit_chat' });\n\n});\n\n// ...\n\n}\n\n// 🔴 Avoid: creating custom \"lifecycle\" Hooks\n\nfunction useMount(fn) {\n\nuseEffect(() => {\n\nfn();\n\n}, []); // 🔴 React Hook useEffect has a missing dependency: 'fn'\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"841":{"pageContent":"});\n\n// ...\n\n}\n\n// 🔴 Avoid: creating custom \"lifecycle\" Hooks\n\nfunction useMount(fn) {\n\nuseEffect(() => {\n\nfn();\n\n}, []); // 🔴 React Hook useEffect has a missing dependency: 'fn'\n\n}\n\n```\n\n*Custom \"lifecycle\" Hooks like `useMount` don't fit well into the React paradigm.** For example, this code example has a mistake (it doesn't \"react\" to `roomId` or `serverUrl` changes), but the linter won't warn you about it because the linter only checks direct `useEffect` calls. It won't know about your Hook.\n\nIf you're writing an Effect, start by using the React API directly:\n\n```js\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n// ✅ Good: two raw Effects separated by purpose\n\nuseEffect(() => {\n\nconst connection = createConnection({ serverUrl, roomId });\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [serverUrl, roomId]);\n\nuseEffect(() => {\n\npost('/analytics/event', { eventName: 'visit_chat', roomId });\n\n}, [roomId]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"842":{"pageContent":"connection.connect();\n\nreturn () => connection.disconnect();\n\n}, [serverUrl, roomId]);\n\nuseEffect(() => {\n\npost('/analytics/event', { eventName: 'visit_chat', roomId });\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\nThen, you can (but don't have to) extract custom Hooks for different high-level use cases:\n\n```js\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\n// ✅ Great: custom Hooks named after their purpose\n\nuseChatRoom({ serverUrl, roomId });\n\nuseImpressionLog('visit_chat', { roomId });\n\n// ...\n\n}\n\n```\n\n*A good custom Hook makes the calling code more declarative by constraining what it does.** For example, `useChatRoom(options)` can only connect to the chat room, while `useImpressionLog(eventName, extraData)` can only send an impression log to the analytics. If your custom Hook API doesn't constrain the use cases and is very abstract, in the long run it's likely to introduce more problems than it solves.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"843":{"pageContent":"</DeepDive>\n\n### Custom Hooks help you migrate to better patterns {/*custom-hooks-help-you-migrate-to-better-patterns*/}\n\nEffects are an [\"escape hatch\"](/learn/escape-hatches): you use them when you need to \"step outside React\" and when there is no better built-in solution for your use case. With time, the React team's goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping Effects in custom Hooks makes it easier to upgrade your code when these solutions become available. Let's return to this example:\n\n<Sandpack>\n\n```js\n\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"844":{"pageContent":"}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<SaveButton />\n\n<StatusBar />\n\n</>\n\n);\n\n}\n\n```\n\n```js useOnlineStatus.js active\n\nimport { useState, useEffect } from 'react';\n\nexport function useOnlineStatus() {\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\nfunction handleOnline() {\n\nsetIsOnline(true);\n\n}\n\nfunction handleOffline() {\n\nsetIsOnline(false);\n\n}\n\nwindow.addEventListener('online', handleOnline);\n\nwindow.addEventListener('offline', handleOffline);\n\nreturn () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nreturn isOnline;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"845":{"pageContent":"return () => {\n\nwindow.removeEventListener('online', handleOnline);\n\nwindow.removeEventListener('offline', handleOffline);\n\n};\n\n}, []);\n\nreturn isOnline;\n\n}\n\n```\n\n</Sandpack>\n\nIn the above example, `useOnlineStatus` is implemented with a pair of [`useState`](/reference/react/useState) and [`useEffect`.](/reference/react/useEffect) However, this isn't the best possible solution. There is a number of edge cases it doesn't consider. For example, it assumes that when the component mounts, `isOnline` is already `true`, but this may be wrong if the network already went offline. You can use the browser [`navigator.onLine`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine) API to check for that, but using it directly would break if you run your React app on the server to generate the initial HTML. In short, this code could be improved.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"846":{"pageContent":"Luckily, React 18 includes a dedicated API called [`useSyncExternalStore`](/reference/react/useSyncExternalStore) which takes care of all of these problems for you. Here is how your `useOnlineStatus` Hook, rewritten to take advantage of this new API:\n\n<Sandpack>\n\n```js\n\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<SaveButton />\n\n<StatusBar />\n\n</>\n\n);\n\n}\n\n```\n\n```js useOnlineStatus.js active\n\nimport { useSyncExternalStore } from 'react';\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"847":{"pageContent":"import { useSyncExternalStore } from 'react';\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\nexport function useOnlineStatus() {\n\nreturn useSyncExternalStore(\n\nsubscribe,\n\n() => navigator.onLine, // How to get the value on the client\n\n() => true // How to get the value on the server\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNotice how **you didn't need to change any of the components** to make this migration:\n\n```js {2,7}\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\n// ...\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\n// ...\n\n}\n\n```\n\nThis is another reason for why wrapping Effects in custom Hooks is often beneficial:\n\n1. You make the data flow to and from your Effects very explicit.\n\n2. You let your components focus on the intent rather than on the exact implementation of your Effects.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"848":{"pageContent":"1. You make the data flow to and from your Effects very explicit.\n\n2. You let your components focus on the intent rather than on the exact implementation of your Effects.\n\n3. When React adds new features, you can remove those Effects without changing any of your components.\n\nSimilar to a [design system,](https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969) you might find it helpful to start extracting common idioms from your app's components into custom Hooks. This will keep your components' code focused on the intent, and let you avoid writing raw Effects very often. There are also many excellent custom Hooks maintained by the React community.\n\n<DeepDive>\n\n#### Will React provide any built-in solution for data fetching? {/*will-react-provide-any-built-in-solution-for-data-fetching*/}\n\nWe're still working out the details, but we expect that in the future, you'll write data fetching like this:\n\n```js {1,4,6}\n\nimport { use } from 'react'; // Not available yet!","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"849":{"pageContent":"We're still working out the details, but we expect that in the future, you'll write data fetching like this:\n\n```js {1,4,6}\n\nimport { use } from 'react'; // Not available yet!\n\nfunction ShippingForm({ country }) {\n\nconst cities = use(fetch(`/api/cities?country=${country}`));\n\nconst [city, setCity] = useState(null);\n\nconst areas = city ? use(fetch(`/api/areas?city=${city}`)) : null;\n\n// ...\n\n```\n\nIf you use custom Hooks like `useData` above in your app, it will require fewer changes to migrate to the eventually recommended approach than if you write raw Effects in every component manually. However, the old approach will still work fine, so if you feel happy writing raw Effects, you can continue to do that.\n\n</DeepDive>\n\n### There is more than one way to do it {/*there-is-more-than-one-way-to-do-it*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"850":{"pageContent":"</DeepDive>\n\n### There is more than one way to do it {/*there-is-more-than-one-way-to-do-it*/}\n\nLet's say you want to implement a fade-in animation *from scratch* using the browser [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) API. You might start with an Effect that sets up an animation loop. During each frame of the animation, you could change the opacity of the DOM node you [hold in a ref](/learn/manipulating-the-dom-with-refs) until it reaches `1`. Your code might start like this:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nfunction Welcome() {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nconst duration = 1000;\n\nconst node = ref.current;\n\nlet startTime = performance.now();\n\nlet frameId = null;\n\nfunction onFrame(now) {\n\nconst timePassed = now - startTime;\n\nconst progress = Math.min(timePassed / duration, 1);\n\nonProgress(progress);\n\nif (progress < 1) {\n\n// We still have more frames to paint","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"851":{"pageContent":"function onFrame(now) {\n\nconst timePassed = now - startTime;\n\nconst progress = Math.min(timePassed / duration, 1);\n\nonProgress(progress);\n\nif (progress < 1) {\n\n// We still have more frames to paint\n\nframeId = requestAnimationFrame(onFrame);\n\n}\n\n}\n\nfunction onProgress(progress) {\n\nnode.style.opacity = progress;\n\n}\n\nfunction start() {\n\nonProgress(0);\n\nstartTime = performance.now();\n\nframeId = requestAnimationFrame(onFrame);\n\n}\n\nfunction stop() {\n\ncancelAnimationFrame(frameId);\n\nstartTime = null;\n\nframeId = null;\n\n}\n\nstart();\n\nreturn () => stop();\n\n}, []);\n\nreturn (\n\n<h1 className=\"welcome\" ref={ref}>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n.welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"852":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n.welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n}\n\n```\n\n</Sandpack>\n\nTo make the component more readable, you might extract the logic into a `useFadeIn` custom Hook:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n\nconst ref = useRef(null);\n\nuseFadeIn(ref, 1000);\n\nreturn (\n\n<h1 className=\"welcome\" ref={ref}>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```js useFadeIn.js\n\nimport { useEffect } from 'react';\n\nexport function useFadeIn(ref, duration) {\n\nuseEffect(() => {\n\nconst node = ref.current;\n\nlet startTime = performance.now();\n\nlet frameId = null;","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"853":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```js useFadeIn.js\n\nimport { useEffect } from 'react';\n\nexport function useFadeIn(ref, duration) {\n\nuseEffect(() => {\n\nconst node = ref.current;\n\nlet startTime = performance.now();\n\nlet frameId = null;\n\nfunction onFrame(now) {\n\nconst timePassed = now - startTime;\n\nconst progress = Math.min(timePassed / duration, 1);\n\nonProgress(progress);\n\nif (progress < 1) {\n\n// We still have more frames to paint\n\nframeId = requestAnimationFrame(onFrame);\n\n}\n\n}\n\nfunction onProgress(progress) {\n\nnode.style.opacity = progress;\n\n}\n\nfunction start() {\n\nonProgress(0);\n\nstartTime = performance.now();\n\nframeId = requestAnimationFrame(onFrame);\n\n}\n\nfunction stop() {\n\ncancelAnimationFrame(frameId);\n\nstartTime = null;\n\nframeId = null;\n\n}\n\nstart();\n\nreturn () => stop();\n\n}, [ref, duration]);\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n.welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"854":{"pageContent":".welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n}\n\n```\n\n</Sandpack>\n\nYou could keep the `useFadeIn` code as is, but you could also refactor it more. For example, you could extract the logic for setting up the animation loop out of `useFadeIn` into a new custom Hook called `useAnimationLoop`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n\nconst ref = useRef(null);\n\nuseFadeIn(ref, 1000);\n\nreturn (\n\n<h1 className=\"welcome\" ref={ref}>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```js useFadeIn.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"855":{"pageContent":"</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```js useFadeIn.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport function useFadeIn(ref, duration) {\n\nconst [isRunning, setIsRunning] = useState(true);\n\nuseAnimationLoop(isRunning, (timePassed) => {\n\nconst progress = Math.min(timePassed / duration, 1);\n\nref.current.style.opacity = progress;\n\nif (progress === 1) {\n\nsetIsRunning(false);\n\n}\n\n});\n\n}\n\nfunction useAnimationLoop(isRunning, drawFrame) {\n\nconst onFrame = useEffectEvent(drawFrame);\n\nuseEffect(() => {\n\nif (!isRunning) {\n\nreturn;\n\n}\n\nconst startTime = performance.now();\n\nlet frameId = null;\n\nfunction tick(now) {\n\nconst timePassed = now - startTime;\n\nonFrame(timePassed);\n\nframeId = requestAnimationFrame(tick);\n\n}\n\ntick();\n\nreturn () => cancelAnimationFrame(frameId);\n\n}, [isRunning]);\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n.welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"856":{"pageContent":"}, [isRunning]);\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n.welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n}\n\n```\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nHowever, you didn't *have to* do that. As with regular functions, ultimately you decide where to draw the boundaries between different parts of your code. For example, you could also take a very different approach. Instead of keeping the logic in the Effect, you could move most of the imperative logic inside a JavaScript [class:](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"857":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport { useFadeIn } from './useFadeIn.js';\n\nfunction Welcome() {\n\nconst ref = useRef(null);\n\nuseFadeIn(ref, 1000);\n\nreturn (\n\n<h1 className=\"welcome\" ref={ref}>\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```js useFadeIn.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { FadeInAnimation } from './animation.js';\n\nexport function useFadeIn(ref, duration) {\n\nuseEffect(() => {\n\nconst animation = new FadeInAnimation(ref.current);\n\nanimation.start(duration);\n\nreturn () => {\n\nanimation.stop();\n\n};\n\n}, [ref, duration]);\n\n}\n\n```\n\n```js animation.js\n\nexport class FadeInAnimation {\n\nconstructor(node) {\n\nthis.node = node;\n\n}\n\nstart(duration) {\n\nthis.duration = duration;\n\nthis.onProgress(0);\n\nthis.startTime = performance.now();\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\nonFrame() {","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"858":{"pageContent":"this.node = node;\n\n}\n\nstart(duration) {\n\nthis.duration = duration;\n\nthis.onProgress(0);\n\nthis.startTime = performance.now();\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\nonFrame() {\n\nconst timePassed = performance.now() - this.startTime;\n\nconst progress = Math.min(timePassed / this.duration, 1);\n\nthis.onProgress(progress);\n\nif (progress === 1) {\n\nthis.stop();\n\n} else {\n\n// We still have more frames to paint\n\nthis.frameId = requestAnimationFrame(() => this.onFrame());\n\n}\n\n}\n\nonProgress(progress) {\n\nthis.node.style.opacity = progress;\n\n}\n\nstop() {\n\ncancelAnimationFrame(this.frameId);\n\nthis.startTime = null;\n\nthis.frameId = null;\n\nthis.duration = 0;\n\n}\n\n}\n\n```\n\n```css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n.welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"859":{"pageContent":".welcome {\n\nopacity: 0;\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\n}\n\n```\n\n</Sandpack>\n\nEffects let you connect React to external systems. The more coordination between Effects is needed (for example, to chain multiple animations), the more it makes sense to extract that logic out of Effects and Hooks *completely* like in the sandbox above. Then, the code you extracted *becomes* the \"external system\". This lets your Effects stay simple because they only need to send messages to the system you've moved outside React.\n\nThe examples above assume that the fade-in logic needs to be written in JavaScript. However, this particular fade-in animation is both simpler and much more efficient to implement with a plain [CSS Animation:](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"860":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect, useRef } from 'react';\n\nimport './welcome.css';\n\nfunction Welcome() {\n\nreturn (\n\n<h1 className=\"welcome\">\n\nWelcome\n\n</h1>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Remove' : 'Show'}\n\n</button>\n\n<hr />\n\n{show && <Welcome />}\n\n</>\n\n);\n\n}\n\n```\n\n```css styles.css\n\nlabel, button { display: block; margin-bottom: 20px; }\n\nhtml, body { min-height: 300px; }\n\n```\n\n```css welcome.css active\n\n.welcome {\n\ncolor: white;\n\npadding: 50px;\n\ntext-align: center;\n\nfont-size: 50px;\n\nbackground-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\n\nanimation: fadeIn 1000ms;\n\n}\n\n@keyframes fadeIn {\n\n0% { opacity: 0; }\n\n100% { opacity: 1; }\n\n}\n\n```\n\n</Sandpack>\n\nSometimes, you don't even need a Hook!\n\n<Recap>\n\nCustom Hooks let you share logic between components.\n\nCustom Hooks must be named starting with `use` followed by a capital letter.\n\nCustom Hooks only share stateful logic, not state itself.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"861":{"pageContent":"<Recap>\n\nCustom Hooks let you share logic between components.\n\nCustom Hooks must be named starting with `use` followed by a capital letter.\n\nCustom Hooks only share stateful logic, not state itself.\n\nYou can pass reactive values from one Hook to another, and they stay up-to-date.\n\nAll Hooks re-run every time your component re-renders.\n\nThe code of your custom Hooks should be pure, like your component's code.\n\nWrap event handlers received by custom Hooks into Effect Events.\n\nDon't create custom Hooks like `useMount`. Keep their purpose specific.\n\nIt's up to you how and where to choose the boundaries of your code.\n\n</Recap>\n\n<Challenges>\n\n#### Extract a `useCounter` Hook {/*extract-a-usecounter-hook*/}\n\nThis component uses a state variable and an Effect to display a number that increments every second. Extract this logic into a custom Hook called `useCounter`. Your goal is to make the `Counter` component implementation look exactly like this:\n\n```js\n\nexport default function Counter() {\n\nconst count = useCounter();","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"862":{"pageContent":"```js\n\nexport default function Counter() {\n\nconst count = useCounter();\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\nYou'll need to write your custom Hook in `useCounter.js` and import it into the `Counter.js` file.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + 1);\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\n```js useCounter.js\n\n// Write your custom Hook in this file!\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYour code should look like this:\n\n<Sandpack>\n\n```js\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst count = useCounter();\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useCounter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + 1);\n\n}, 1000);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"863":{"pageContent":"import { useState, useEffect } from 'react';\n\nexport function useCounter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + 1);\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn count;\n\n}\n\n```\n\n</Sandpack>\n\nNotice that `App.js` doesn't need to import `useState` or `useEffect` anymore.\n\n</Solution>\n\n#### Make the counter delay configurable {/*make-the-counter-delay-configurable*/}\n\nIn this example, there is a `delay` state variable controlled by a slider, but its value is not used. Pass the `delay` value to your custom `useCounter` Hook, and change the `useCounter` Hook to use the passed `delay` instead of hardcoding `1000` ms.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst [delay, setDelay] = useState(1000);\n\nconst count = useCounter();\n\nreturn (\n\n<>\n\n<label>\n\nTick duration: {delay} ms\n\n<br />\n\n<input\n\ntype=\"range\"\n\nvalue={delay}\n\nmin=\"10\"\n\nmax=\"2000\"","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"864":{"pageContent":"export default function Counter() {\n\nconst [delay, setDelay] = useState(1000);\n\nconst count = useCounter();\n\nreturn (\n\n<>\n\n<label>\n\nTick duration: {delay} ms\n\n<br />\n\n<input\n\ntype=\"range\"\n\nvalue={delay}\n\nmin=\"10\"\n\nmax=\"2000\"\n\nonChange={e => setDelay(Number(e.target.value))}\n\n/>\n\n</label>\n\n<hr />\n\n<h1>Ticks: {count}</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useCounter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + 1);\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn count;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nPass the `delay` to your Hook with `useCounter(delay)`. Then, inside the Hook, use `delay` instead of the hardcoded `1000` value. You'll need to add `delay` to your Effect's dependencies. This ensures that a change in `delay` will reset the interval.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst [delay, setDelay] = useState(1000);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"865":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst [delay, setDelay] = useState(1000);\n\nconst count = useCounter(delay);\n\nreturn (\n\n<>\n\n<label>\n\nTick duration: {delay} ms\n\n<br />\n\n<input\n\ntype=\"range\"\n\nvalue={delay}\n\nmin=\"10\"\n\nmax=\"2000\"\n\nonChange={e => setDelay(Number(e.target.value))}\n\n/>\n\n</label>\n\n<hr />\n\n<h1>Ticks: {count}</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn () => clearInterval(id);\n\n}, [delay]);\n\nreturn count;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Extract `useInterval` out of `useCounter` {/*extract-useinterval-out-of-usecounter*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"866":{"pageContent":"}, delay);\n\nreturn () => clearInterval(id);\n\n}, [delay]);\n\nreturn count;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Extract `useInterval` out of `useCounter` {/*extract-useinterval-out-of-usecounter*/}\n\nCurrently, your `useCounter` Hook does two things. It sets up an interval, and it also increments a state variable on every interval tick. Split out the logic that sets up the interval into a separate Hook called `useInterval`. It should take two arguments: the `onTick` callback, and the `delay`. After this change, your `useCounter` implementation should look like this:\n\n```js\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn count;\n\n}\n\n```\n\nWrite `useInterval` in the `useInterval.js` file and import it into the `useCounter.js` file.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst count = useCounter(1000);\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"867":{"pageContent":"```js\n\nimport { useState } from 'react';\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst count = useCounter(1000);\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState, useEffect } from 'react';\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn () => clearInterval(id);\n\n}, [delay]);\n\nreturn count;\n\n}\n\n```\n\n```js useInterval.js\n\n// Write your Hook here!\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe logic inside `useInterval` should set up and clear the interval. It doesn't need to do anything else.\n\n<Sandpack>\n\n```js\n\nimport { useCounter } from './useCounter.js';\n\nexport default function Counter() {\n\nconst count = useCounter(1000);\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState } from 'react';\n\nimport { useInterval } from './useInterval.js';\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"868":{"pageContent":"}\n\n```\n\n```js useCounter.js\n\nimport { useState } from 'react';\n\nimport { useInterval } from './useInterval.js';\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn count;\n\n}\n\n```\n\n```js useInterval.js active\n\nimport { useEffect } from 'react';\n\nexport function useInterval(onTick, delay) {\n\nuseEffect(() => {\n\nconst id = setInterval(onTick, delay);\n\nreturn () => clearInterval(id);\n\n}, [onTick, delay]);\n\n}\n\n```\n\n</Sandpack>\n\nNote that there is a bit of a problem with this solution, which you'll solve in the next challenge.\n\n</Solution>\n\n#### Fix a resetting interval {/*fix-a-resetting-interval*/}\n\nIn this example, there are *two* separate intervals.\n\nThe `App` component calls `useCounter`, which calls `useInterval` to update the counter every second. But the `App` component *also* calls `useInterval` to randomly update the page background color every two seconds.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"869":{"pageContent":"For some reason, the callback that updates the page background never runs. Add some logs inside `useInterval`:\n\n```js {2,5}\n\nuseEffect(() => {\n\nconsole.log('✅ Setting up an interval with delay ', delay)\n\nconst id = setInterval(onTick, delay);\n\nreturn () => {\n\nconsole.log('❌ Clearing an interval with delay ', delay)\n\nclearInterval(id);\n\n};\n\n}, [onTick, delay]);\n\n```\n\nDo the logs match what you expect to happen? If some of your Effects seem to re-synchronize unnecessarily, can you guess which dependency is causing that to happen? Is there some way to [remove that dependency](/learn/removing-effect-dependencies) from your Effect?\n\nAfter you fix the issue, you should expect the page background to update every two seconds.\n\n<Hint>\n\nIt looks like your `useInterval` Hook accepts an event listener as an argument. Can you think of some way to wrap that event listener so that it doesn't need to be a dependency of your Effect?\n\n</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"870":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useCounter } from './useCounter.js';\n\nimport { useInterval } from './useInterval.js';\n\nexport default function Counter() {\n\nconst count = useCounter(1000);\n\nuseInterval(() => {\n\nconst randomColor = `hsla(${Math.random() * 360}, 100%, 50%, 0.2)`;\n\ndocument.body.style.backgroundColor = randomColor;\n\n}, 2000);\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState } from 'react';\n\nimport { useInterval } from './useInterval.js';\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn count;\n\n}\n\n```\n\n```js useInterval.js\n\nimport { useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"871":{"pageContent":"export function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn count;\n\n}\n\n```\n\n```js useInterval.js\n\nimport { useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport function useInterval(onTick, delay) {\n\nuseEffect(() => {\n\nconst id = setInterval(onTick, delay);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n}, [onTick, delay]);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nInside `useInterval`, wrap the tick callback into an Effect Event, as you did [earlier on this page.](/learn/reusing-logic-with-custom-hooks#passing-event-handlers-to-custom-hooks)\n\nThis will allow you to omit `onTick` from dependencies of your Effect. The Effect won't re-synchronize on every re-render of the component, so the page background color change interval won't get reset every second before it has a chance to fire.\n\nWith this change, both intervals work as expected and don't interfere with each other:\n\n<Sandpack>\n\n```json package.json hidden\n\n{","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"872":{"pageContent":"With this change, both intervals work as expected and don't interfere with each other:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useCounter } from './useCounter.js';\n\nimport { useInterval } from './useInterval.js';\n\nexport default function Counter() {\n\nconst count = useCounter(1000);\n\nuseInterval(() => {\n\nconst randomColor = `hsla(${Math.random() * 360}, 100%, 50%, 0.2)`;\n\ndocument.body.style.backgroundColor = randomColor;\n\n}, 2000);\n\nreturn <h1>Seconds passed: {count}</h1>;\n\n}\n\n```\n\n```js useCounter.js\n\nimport { useState } from 'react';\n\nimport { useInterval } from './useInterval.js';\n\nexport function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn count;\n\n}\n\n```\n\n```js useInterval.js active","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"873":{"pageContent":"export function useCounter(delay) {\n\nconst [count, setCount] = useState(0);\n\nuseInterval(() => {\n\nsetCount(c => c + 1);\n\n}, delay);\n\nreturn count;\n\n}\n\n```\n\n```js useInterval.js active\n\nimport { useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport function useInterval(callback, delay) {\n\nconst onTick = useEffectEvent(callback);\n\nuseEffect(() => {\n\nconst id = setInterval(onTick, delay);\n\nreturn () => clearInterval(id);\n\n}, [delay]);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Implement a staggering movement {/*implement-a-staggering-movement*/}\n\nIn this example, the `usePointerPosition()` Hook tracks the current pointer position. Try moving your cursor or your finger over the preview area and see the red dot follow your movement. Its position is saved in the `pos1` variable.","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"874":{"pageContent":"In fact, there are five (!) different red dots being rendered. You don't see them because currently they all appear at the same position. This is what you need to fix. What you want to implement instead is a \"staggered\" movement: each dot should \"follow\" the previous dot's path. For example, if you quickly move your cursor, the first dot should follow it immediately, the second dot should follow the first dot with a small delay, the third dot should follow the second dot, and so on.\n\nYou need to implement the `useDelayedValue` custom Hook. Its current implementation returns the `value` provided to it. Instead, you want to return the value back from `delay` milliseconds ago. You might need some state and an Effect to do this.\n\nAfter you implement `useDelayedValue`, you should see the dots move following one another.\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"875":{"pageContent":"After you implement `useDelayedValue`, you should see the dots move following one another.\n\n<Hint>\n\nYou'll need to store the `delayedValue` as a state variable inside your custom Hook. When the `value` changes, you'll want to run an Effect. This Effect should update `delayedValue` after the `delay`. You might find it helpful to call `setTimeout`.\n\nDoes this Effect need cleanup? Why or why not?\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { usePointerPosition } from './usePointerPosition.js';\n\nfunction useDelayedValue(value, delay) {\n\n// TODO: Implement this Hook\n\nreturn value;\n\n}\n\nexport default function Canvas() {\n\nconst pos1 = usePointerPosition();\n\nconst pos2 = useDelayedValue(pos1, 100);\n\nconst pos3 = useDelayedValue(pos2, 200);\n\nconst pos4 = useDelayedValue(pos3, 100);\n\nconst pos5 = useDelayedValue(pos3, 50);\n\nreturn (\n\n<>\n\n<Dot position={pos1} opacity={1} />\n\n<Dot position={pos2} opacity={0.8} />\n\n<Dot position={pos3} opacity={0.6} />\n\n<Dot position={pos4} opacity={0.4} />\n\n<Dot position={pos5} opacity={0.2} />\n\n</>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"876":{"pageContent":"return (\n\n<>\n\n<Dot position={pos1} opacity={1} />\n\n<Dot position={pos2} opacity={0.8} />\n\n<Dot position={pos3} opacity={0.6} />\n\n<Dot position={pos4} opacity={0.4} />\n\n<Dot position={pos5} opacity={0.2} />\n\n</>\n\n);\n\n}\n\nfunction Dot({ position, opacity }) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```js usePointerPosition.js\n\nimport { useState, useEffect } from 'react';\n\nexport function usePointerPosition() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, []);\n\nreturn position;\n\n}\n\n```\n\n```css\n\nbody { min-height: 300px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"877":{"pageContent":"return () => window.removeEventListener('pointermove', handleMove);\n\n}, []);\n\nreturn position;\n\n}\n\n```\n\n```css\n\nbody { min-height: 300px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHere is a working version. You keep the `delayedValue` as a state variable. When `value` updates, your Effect schedules a timeout to update the `delayedValue`. This is why the `delayedValue` always \"lags behind\" the actual `value`.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { usePointerPosition } from './usePointerPosition.js';\n\nfunction useDelayedValue(value, delay) {\n\nconst [delayedValue, setDelayedValue] = useState(value);\n\nuseEffect(() => {\n\nsetTimeout(() => {\n\nsetDelayedValue(value);\n\n}, delay);\n\n}, [value, delay]);\n\nreturn delayedValue;\n\n}\n\nexport default function Canvas() {\n\nconst pos1 = usePointerPosition();\n\nconst pos2 = useDelayedValue(pos1, 100);\n\nconst pos3 = useDelayedValue(pos2, 200);\n\nconst pos4 = useDelayedValue(pos3, 100);\n\nconst pos5 = useDelayedValue(pos3, 50);\n\nreturn (\n\n<>\n\n<Dot position={pos1} opacity={1} />","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"878":{"pageContent":"const pos3 = useDelayedValue(pos2, 200);\n\nconst pos4 = useDelayedValue(pos3, 100);\n\nconst pos5 = useDelayedValue(pos3, 50);\n\nreturn (\n\n<>\n\n<Dot position={pos1} opacity={1} />\n\n<Dot position={pos2} opacity={0.8} />\n\n<Dot position={pos3} opacity={0.6} />\n\n<Dot position={pos4} opacity={0.4} />\n\n<Dot position={pos5} opacity={0.2} />\n\n</>\n\n);\n\n}\n\nfunction Dot({ position, opacity }) {\n\nreturn (\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n);\n\n}\n\n```\n\n```js usePointerPosition.js\n\nimport { useState, useEffect } from 'react';\n\nexport function usePointerPosition() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, []);\n\nreturn position;\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"879":{"pageContent":"setPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, []);\n\nreturn position;\n\n}\n\n```\n\n```css\n\nbody { min-height: 300px; }\n\n```\n\n</Sandpack>\n\nNote that this Effect *does not* need cleanup. If you called `clearTimeout` in the cleanup function, then each time the `value` changes, it would reset the already scheduled timeout. To keep the movement continuous, you want all the timeouts to fire.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/reusing-logic-with-custom-hooks.md"}},"880":{"pageContent":"--\n\ntitle: 'Lifecycle of Reactive Effects'\n\n--\n\n<Intro>\n\nEffects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time. React provides a linter rule to check that you've specified your Effect's dependencies correctly. This keeps your Effect synchronized to the latest props and state.\n\n</Intro>\n\n<YouWillLearn>\n\nHow an Effect's lifecycle is different from a component's lifecycle\n\nHow to think about each individual Effect in isolation\n\nWhen your Effect needs to re-synchronize, and why\n\nHow your Effect's dependencies are determined\n\nWhat it means for a value to be reactive\n\nWhat an empty dependency array means\n\nHow React verifies your dependencies are correct with a linter\n\nWhat to do when you disagree with the linter\n\n</YouWillLearn>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"881":{"pageContent":"What it means for a value to be reactive\n\nWhat an empty dependency array means\n\nHow React verifies your dependencies are correct with a linter\n\nWhat to do when you disagree with the linter\n\n</YouWillLearn>\n\n## The lifecycle of an Effect {/*the-lifecycle-of-an-effect*/}\n\nEvery React component goes through the same lifecycle:\n\nA component _mounts_ when it's added to the screen.\n\nA component _updates_ when it receives new props or state. This usually happens in response to an interaction.\n\nA component _unmounts_ when it's removed from the screen.\n\n*It's a good way to think about components, but _not_ about Effects.** Instead, try to think about each Effect independently from your component's lifecycle. An Effect describes how to [synchronize an external system](/learn/synchronizing-with-effects) to the current props and state. As your code changes, this synchronization will need to happen more or less often.\n\nTo illustrate this point, consider this Effect connecting your component to a chat server:\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"882":{"pageContent":"To illustrate this point, consider this Effect connecting your component to a chat server:\n\n```js\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\nYour Effect's body specifies how to **start synchronizing:**\n\n```js {2-3}\n\n// ...\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n// ...\n\n```\n\nThe cleanup function returned by your Effect specifies how to **stop synchronizing:**\n\n```js {5}\n\n// ...\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"883":{"pageContent":"```js {5}\n\n// ...\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n// ...\n\n```\n\nIntuitively, you might think that React would **start synchronizing** when your component mounts and **stop synchronizing** when your component unmounts. However, this is not the end of the story! Sometimes, it may also be necessary to **start and stop synchronizing multiple times** while the component remains mounted.\n\nLet's look at _why_ this is necessary, _when_ it happens, and _how_ you can control this behavior.\n\n<Note>\n\nSome Effects don't return a cleanup function at all. [More often than not,](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development) you'll want to return one--but if you don't, React will behave as if you returned an empty cleanup function that doesn't do anything.\n\n</Note>\n\n### Why synchronization may need to happen more than once {/*why-synchronization-may-need-to-happen-more-than-once*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"884":{"pageContent":"</Note>\n\n### Why synchronization may need to happen more than once {/*why-synchronization-may-need-to-happen-more-than-once*/}\n\nImagine this `ChatRoom` component receives a `roomId` prop that the user picks in a dropdown. Let's say that initially the user picks the `\"general\"` room as the `roomId`. Your app displays the `\"general\"` chat room:\n\n```js {3}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n\n// ...\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\nAfter the UI is displayed, React will run your Effect to **start synchronizing.** It connects to the `\"general\"` room:\n\n```js {3,4}\n\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect(); // Disconnects from the \"general\" room\n\n};\n\n}, [roomId]);\n\n// ...\n\n```\n\nSo far, so good.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"885":{"pageContent":"connection.connect();\n\nreturn () => {\n\nconnection.disconnect(); // Disconnects from the \"general\" room\n\n};\n\n}, [roomId]);\n\n// ...\n\n```\n\nSo far, so good.\n\nLater, the user picks a different room in the dropdown (for example, `\"travel\"`). First, React will update the UI:\n\n```js {1}\n\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n\n// ...\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\nPause to think about what should happen next. The user sees that `\"travel\"` is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the `\"general\"` room. **The `roomId` prop has changed, so whatever your Effect did back then (connecting to the `\"general\"` room) no longer matches the UI.**\n\nAt this point, you want React to do two things:\n\n1. Stop synchronizing with the old `roomId` (disconnect from the `\"general\"` room)\n\n2. Start synchronizing with the new `roomId` (connect to the `\"travel\"` room)","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"886":{"pageContent":"1. Stop synchronizing with the old `roomId` (disconnect from the `\"general\"` room)\n\n2. Start synchronizing with the new `roomId` (connect to the `\"travel\"` room)\n\n*Luckily, you've already taught React how to do both of these things!** Your Effect's body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let's see how exactly that happens.\n\n### How React re-synchronizes your Effect {/*how-react-re-synchronizes-your-effect*/}\n\nRecall that your `ChatRoom` component has received a new value for its `roomId` prop. It used to be `\"general\"`, and now it is `\"travel\"`. React needs to re-synchronize your Effect to re-connect you to a different room.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"887":{"pageContent":"To **stop synchronizing,** React will call the cleanup function that your Effect returned after connecting to the `\"general\"` room. Since `roomId` was `\"general\"`, the cleanup function disconnects from the `\"general\"` room:\n\n```js {6}\n\nfunction ChatRoom({ roomId /* \"general\" */ }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect(); // Disconnects from the \"general\" room\n\n};\n\n// ...\n\n```\n\nThen React will run the Effect that you've provided during this render. This time, `roomId` is `\"travel\"` so it will **start synchronizing** to the `\"travel\"` chat room (until its cleanup function is eventually called too):\n\n```js {3,4}\n\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room\n\nconnection.connect();\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"888":{"pageContent":"```js {3,4}\n\nfunction ChatRoom({ roomId /* \"travel\" */ }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room\n\nconnection.connect();\n\n// ...\n\n```\n\nThanks to this, you're now connected to the same room that the user chose in the UI. Disaster averted!\n\nEvery time after your component re-renders with a different `roomId`, your Effect will re-synchronize. For example, let's say the user changes `roomId` from `\"travel\"` to `\"music\"`. React will again **stop synchronizing** your Effect by calling its cleanup function (disconnecting you from the `\"travel\"` room). Then it will **start synchronizing** again by running its body with the new `roomId` prop (connecting you to the `\"music\"` room).\n\nFinally, when the user goes to a different screen, `ChatRoom` unmounts. Now there is no need to stay connected at all. React will **stop synchronizing** your Effect one last time and disconnect you from the `\"music\"` chat room.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"889":{"pageContent":"### Thinking from the Effect's perspective {/*thinking-from-the-effects-perspective*/}\n\nLet's recap everything that's happened from the `ChatRoom` component's perspective:\n\n1. `ChatRoom` mounted with `roomId` set to `\"general\"`\n\n1. `ChatRoom` updated with `roomId` set to `\"travel\"`\n\n1. `ChatRoom` updated with `roomId` set to `\"music\"`\n\n1. `ChatRoom` unmounted\n\nDuring each of these points in the component's lifecycle, your Effect did different things:\n\n1. Your Effect connected to the `\"general\"` room\n\n1. Your Effect disconnected from the `\"general\"` room and connected to the `\"travel\"` room\n\n1. Your Effect disconnected from the `\"travel\"` room and connected to the `\"music\"` room\n\n1. Your Effect disconnected from the `\"music\"` room\n\nNow let's think about what happened from the perspective of the Effect itself:\n\n```js\n\nuseEffect(() => {\n\n// Your Effect connected to the room specified with roomId...\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\n// ...until it disconnected","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"890":{"pageContent":"```js\n\nuseEffect(() => {\n\n// Your Effect connected to the room specified with roomId...\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\n// ...until it disconnected\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n```\n\nThis code's structure might inspire you to see what happened as a sequence of non-overlapping time periods:\n\n1. Your Effect connected to the `\"general\"` room (until it disconnected)\n\n1. Your Effect connected to the `\"travel\"` room (until it disconnected)\n\n1. Your Effect connected to the `\"music\"` room (until it disconnected)\n\nPreviously, you were thinking from the component's perspective. When you looked from the component's perspective, it was tempting to think of Effects as \"callbacks\" or \"lifecycle events\" that fire at a specific time like \"after a render\" or \"before unmount\". This way of thinking gets complicated very fast, so it's best to avoid it.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"891":{"pageContent":"*Instead, always focus on a single start/stop cycle at a time. It shouldn't matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it's needed.**\n\nThis might remind you how you don't think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and React [figures out the rest.](/learn/reacting-to-input-with-state)\n\n### How React verifies that your Effect can re-synchronize {/*how-react-verifies-that-your-effect-can-re-synchronize*/}\n\nHere is a live example that you can play with. Press \"Open chat\" to mount the `ChatRoom` component:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"892":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"893":{"pageContent":"</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nNotice that when the component mounts for the first time, you see three logs:\n\n1. `✅ Connecting to \"general\" room at https://localhost:1234...` *(development-only)*\n\n1. `❌ Disconnected from \"general\" room at https://localhost:1234.` *(development-only)*\n\n1. `✅ Connecting to \"general\" room at https://localhost:1234...`","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"894":{"pageContent":"1. `❌ Disconnected from \"general\" room at https://localhost:1234.` *(development-only)*\n\n1. `✅ Connecting to \"general\" room at https://localhost:1234...`\n\nThe first two logs are development-only. In development, React always remounts each component once. **In other words, React verifies that your Effect can re-synchronize by forcing it to do that immediately in development.** This might remind you how you might open the door and close it an extra time to check that the door lock works. React starts and stops your Effect one extra time in development to check [you've implemented its cleanup well.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)\n\nThe main reason your Effect will re-synchronize in practice is if some data it uses has changed. In the sandbox above, change the selected chat room. Notice how, when the `roomId` changes, your Effect re-synchronizes.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"895":{"pageContent":"However, there are also more unusual cases in which re-synchronization is necessary. For example, try editing the `serverUrl` in the sandbox above while the chat is open. Notice how the Effect re-synchronizes in response to your edits to the code. In the future, React may add more features that take advantage of re-synchronization.\n\n### How React knows that it needs to re-synchronize the Effect {/*how-react-knows-that-it-needs-to-re-synchronize-the-effect*/}\n\nYou might be wondering how React knew that your Effect needed to re-synchronize after `roomId` changes. It's because *you told React* that this Effect's code depends on `roomId` by including it in the [list of dependencies:](/learn/synchronizing-with-effects#step-2-specify-the-effect-dependencies)\n\n```js {1,3,8}\n\nfunction ChatRoom({ roomId }) { // The roomId prop may change over time\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // This Effect reads roomId\n\nconnection.connect();\n\nreturn () => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"896":{"pageContent":"useEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // This Effect reads roomId\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]); // So you tell React that this Effect \"depends on\" roomId\n\n// ...\n\n```\n\nHere's how this works:\n\n1. You knew `roomId` is a prop, which means it can change over time.\n\n2. You knew that your Effect reads `roomId` (so its logic depends on a value that may change later).\n\n3. This is why you specified it as your Effect's dependency (so that it re-synchronizes when `roomId` changes).","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"897":{"pageContent":"3. This is why you specified it as your Effect's dependency (so that it re-synchronizes when `roomId` changes).\n\nEvery time after your component re-renders, React will look at the array of dependencies that you have passed. If any of the values in the array is different from the value at the same spot that you passed during the previous render, React will re-synchronize your Effect. For example, if you passed `[\"general\"]` during the initial render, and later you passed `[\"travel\"]` during the next render, React will compare `\"general\"` and `\"travel\"`. These are different values (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), so React will re-synchronize your Effect. On the other hand, if your component re-renders but `roomId` has not changed, your Effect will remain connected to the same room.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"898":{"pageContent":"### Each Effect represents a separate synchronization process {/*each-effect-represents-a-separate-synchronization-process*/}\n\nResist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let's say you want to send an analytics event when the user visits the room. You already have an Effect that depends on `roomId`, so you might feel tempted to add the analytics call right there:\n\n```js {3}\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nlogVisit(roomId);\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"899":{"pageContent":"useEffect(() => {\n\nlogVisit(roomId);\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\nBut imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call `logVisit(roomId)` for the same room, which you did not intend. Logging the visit **is a separate process** from connecting. This is why they should be written as two separate Effects:\n\n```js {2-4}\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nlogVisit(roomId);\n\n}, [roomId]);\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\n// ...\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\n*Each Effect in your code should represent a separate and independent synchronization process.**","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"900":{"pageContent":"useEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\n// ...\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\n*Each Effect in your code should represent a separate and independent synchronization process.**\n\nIn the above example, deleting one Effect wouldn’t break the other Effect's logic. This is a good indication that they synchronize different things, and so it made sense to split them up. On the other hand, if you split up a cohesive piece of logic into separate Effects, the code may look \"cleaner\" but will be [more difficult to maintain.](/learn/you-might-not-need-an-effect#chains-of-computations) This is why you should think whether the processes are same or separate, not whether the code looks cleaner.\n\n## Effects \"react\" to reactive values {/*effects-react-to-reactive-values*/}\n\nYour Effect reads two variables (`serverUrl` and `roomId`), but you only specified `roomId` as a dependency:\n\n```js {5,10}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"901":{"pageContent":"```js {5,10}\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\nWhy doesn't `serverUrl` need to be a dependency?\n\nThis is because the `serverUrl` never changes due to a re-render. It's always the same no matter how many times and with which props and state the component re-renders. Since `serverUrl` never changes, it wouldn't make sense to specify it as a dependency. After all, dependencies only do something when they change over time!\n\nOn the other hand, `roomId` may be different on a re-render. **Props, state, and other values declared inside the component are _reactive_ because they're calculated during rendering and participate in the React data flow.**\n\nIf `serverUrl` was a state variable, it would be reactive. Reactive values must be included in dependencies:\n\n```js {2,5,10}","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"902":{"pageContent":"If `serverUrl` was a state variable, it would be reactive. Reactive values must be included in dependencies:\n\n```js {2,5,10}\n\nfunction ChatRoom({ roomId }) { // Props change over time\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234'); // State may change over time\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // Your Effect reads props and state\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId, serverUrl]); // So you tell React that this Effect \"depends on\" on props and state\n\n// ...\n\n}\n\n```\n\nBy including `serverUrl` as a dependency, you ensure that the Effect re-synchronizes after it changes.\n\nTry changing the selected chat room or edit the server URL in this sandbox:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"903":{"pageContent":"import { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, serverUrl]);\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"904":{"pageContent":"</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nWhenever you change a reactive value like `roomId` or `serverUrl`, the Effect re-connects to the chat server.\n\n### What an Effect with empty dependencies means {/*what-an-effect-with-empty-dependencies-means*/}\n\nWhat happens if you move both `serverUrl` and `roomId` outside the component?\n\n```js {1,2}\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'general';\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"905":{"pageContent":"const roomId = 'general';\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nNow your Effect's code does not use *any* reactive values, so its dependencies can be empty (`[]`).\n\nIf you think from the component's perspective, the empty `[]` dependency array means this Effect connects to the chat room only when the component mounts, and disconnects only when the component unmounts. (Keep in mind that React would still [re-synchronize it an extra time](#how-react-verifies-that-your-effect-can-re-synchronize) in development to stress-test your Effect's logic.)\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nconst roomId = 'general';\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"906":{"pageContent":"const serverUrl = 'https://localhost:1234';\n\nconst roomId = 'general';\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"907":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nHowever, if you [think from the Effect's perspective,](#thinking-from-the-effects-perspective) you don't need to think about mounting and unmounting at all. What's important is you've specified what your Effect does to start and stop synchronizing. Today, it has no reactive dependencies. But if you ever want the user to change `roomId` or `serverUrl` over time (and so they'd have to become reactive), your Effect's code won't change. You will only need to add them to the dependencies.\n\n### All variables declared in the component body are reactive {/*all-variables-declared-in-the-component-body-are-reactive*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"908":{"pageContent":"### All variables declared in the component body are reactive {/*all-variables-declared-in-the-component-body-are-reactive*/}\n\nProps and state aren't the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change. This is why all variables from the component body used by the Effect should also be in the Effect dependency list.\n\nLet's say that the user can pick a chat server in the dropdown, but they can also configure a default server in settings. Suppose you've already put the settings state in a [context](/learn/scaling-up-with-reducer-and-context) so you read the `settings` from that context. Now you calculate the `serverUrl` based on the selected server from props and the default server from context:\n\n```js {3,5,10}\n\nfunction ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive\n\nconst settings = useContext(SettingsContext); // settings is reactive","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"909":{"pageContent":"```js {3,5,10}\n\nfunction ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive\n\nconst settings = useContext(SettingsContext); // settings is reactive\n\nconst serverUrl = selectedServerUrl ?? settings.defaultServerUrl; // serverUrl is reactive\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId); // Your Effect reads roomId and serverUrl\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId, serverUrl]); // So it needs to re-synchronize when either of them changes!\n\n// ...\n\n}\n\n```\n\nIn this example, `serverUrl` is not a prop or a state variable. It's a regular variable that you calculate during rendering. But it's calculated during rendering, so it can change due to a re-render. This is why it's reactive.\n\n*All values inside the component (including props, state, and variables in your component's body) are reactive. Any reactive value can change on a re-render, so you need to include reactive values as Effect's dependencies.**","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"910":{"pageContent":"In other words, Effects \"react\" to all values from the component body.\n\n<DeepDive>\n\n#### Can global or mutable values be dependencies? {/*can-global-or-mutable-values-be-dependencies*/}\n\nMutable values (including global variables) aren't reactive.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"911":{"pageContent":"<DeepDive>\n\n#### Can global or mutable values be dependencies? {/*can-global-or-mutable-values-be-dependencies*/}\n\nMutable values (including global variables) aren't reactive.\n\n*A mutable value like [`location.pathname`](https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname) can't be a dependency.** It's mutable, so it can change at any time completely outside of the React rendering data flow. Changing it wouldn't trigger a re-render of your component. Therefore, even if you specified it in the dependencies, React *wouldn't know* to re-synchronize the Effect when it changes. This also breaks the rules of React because reading mutable data during rendering (which is when you calculate the dependencies) breaks [purity of rendering.](/learn/keeping-components-pure) Instead, you should read and subscribe to an external mutable value with [`useSyncExternalStore`.](/learn/you-might-not-need-an-effect#subscribing-to-an-external-store)","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"912":{"pageContent":"*A mutable value like [`ref.current`](/reference/react/useRef#reference) or things you read from it also can't be a dependency.** The ref object returned by `useRef` itself can be a dependency, but its `current` property is intentionally mutable. It lets you [keep track of something without triggering a re-render.](/learn/referencing-values-with-refs) But since changing it doesn't trigger a re-render, it's not a reactive value, and React won't know to re-run your Effect when it changes.\n\nAs you'll learn below on this page, a linter will check for these issues automatically.\n\n</DeepDive>\n\n### React verifies that you specified every reactive value as a dependency {/*react-verifies-that-you-specified-every-reactive-value-as-a-dependency*/}\n\nIf your linter is [configured for React,](/learn/editor-setup#linting) it will check that every reactive value used by your Effect's code is declared as its dependency. For example, this is a lint error because both `roomId` and `serverUrl` are reactive:","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"913":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nfunction ChatRoom({ roomId }) { // roomId is reactive\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []); // <-- Something's wrong here!\n\nreturn (\n\n<>\n\n<label>\n\nServer URL:{' '}\n\n<input\n\nvalue={serverUrl}\n\nonChange={e => setServerUrl(e.target.value)}\n\n/>\n\n</label>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"914":{"pageContent":"<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\nThis may look like a React error, but really React is pointing out a bug in your code. Both `roomId` and `serverUrl` may change over time, but you're forgetting to re-synchronize your Effect when they change. As a result, you will remain connected to the initial `roomId` and `serverUrl` even after the user picks different values in the UI.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"915":{"pageContent":"To fix the bug, follow the linter's suggestion to specify `roomId` and `serverUrl` as dependencies of your Effect:\n\n```js {9}\n\nfunction ChatRoom({ roomId, serverUrl }) {\n\nconst [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [serverUrl, roomId]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nTry this fix in the sandbox above. Verify that the linter error is gone, and that the chat re-connects when needed.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"916":{"pageContent":"};\n\n}, [serverUrl, roomId]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nTry this fix in the sandbox above. Verify that the linter error is gone, and that the chat re-connects when needed.\n\n<Note>\n\nIn some cases, React *knows* that a value never changes even though it's declared inside the component. For example, the [`set` function](/reference/react/useState#setstate) returned from `useState` and the ref object returned by [`useRef`](/reference/react/useRef) are *stable*--they are guaranteed to not change on a re-render. Stable values aren't reactive, so the linter lets you omit them from the list. However, including them is allowed: they won't change, so it doesn't matter.\n\n</Note>\n\n### What to do when you don't want to re-synchronize {/*what-to-do-when-you-dont-want-to-re-synchronize*/}\n\nIn the previous example, you've fixed the lint error by listing `roomId` and `serverUrl` as dependencies.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"917":{"pageContent":"In the previous example, you've fixed the lint error by listing `roomId` and `serverUrl` as dependencies.\n\n*However, you could instead \"prove\" to the linter that these values aren't reactive values,** i.e. that they *can't* change as a result of a re-render. For example, if `serverUrl` and `roomId` don't depend on rendering and always have the same values, you can move them outside the component. Now they don't need to be dependencies:\n\n```js {1,2,11}\n\nconst serverUrl = 'https://localhost:1234'; // serverUrl is not reactive\n\nconst roomId = 'general'; // roomId is not reactive\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nYou can also move them *inside the Effect.* They aren't calculated during rendering, so they're not reactive:\n\n```js {3,4,10}\n\nfunction ChatRoom() {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"918":{"pageContent":"// ...\n\n}\n\n```\n\nYou can also move them *inside the Effect.* They aren't calculated during rendering, so they're not reactive:\n\n```js {3,4,10}\n\nfunction ChatRoom() {\n\nuseEffect(() => {\n\nconst serverUrl = 'https://localhost:1234'; // serverUrl is not reactive\n\nconst roomId = 'general'; // roomId is not reactive\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, []); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\n*Effects are reactive blocks of code.** They re-synchronize when the values you read inside of them change. Unlike event handlers, which only run once per interaction, Effects run whenever synchronization is necessary.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"919":{"pageContent":"*You can't \"choose\" your dependencies.** Your dependencies must include every [reactive value](#all-variables-declared-in-the-component-body-are-reactive) you read in the Effect. The linter enforces this. Sometimes this may lead to problems like infinite loops and to your Effect re-synchronizing too often. Don't fix these problems by suppressing the linter! Here's what to try instead:\n\n**Check that your Effect represents an independent synchronization process.** If your Effect doesn't synchronize anything, [it might be unnecessary.](/learn/you-might-not-need-an-effect) If it synchronizes several independent things, [split it up.](#each-effect-represents-a-separate-synchronization-process)","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"920":{"pageContent":"**If you want to read the latest value of props or state without \"reacting\" to it and re-synchronizing the Effect,** you can split your Effect into a reactive part (which you'll keep in the Effect) and a non-reactive part (which you'll extract into something called an _Event function_). [Read more about separating Events from Effects.](/learn/separating-events-from-effects)\n\n**Avoid relying on objects and functions as dependencies.** If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. [Read more about removing unnecessary dependencies from your Effects.](/learn/removing-effect-dependencies)\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"921":{"pageContent":"<Pitfall>\n\nThe linter is your friend, but its powers are limited. The linter only knows when the dependencies are *wrong*. It doesn't know *the best* way to solve each case. If the linter suggests a dependency, but adding it causes a loop, it doesn't mean the linter should be ignored. It means you need to change the code inside (or outside) the Effect so that that value isn't reactive and doesn't *need* to be a dependency.\n\nIf you have an existing codebase, you might have some Effects that suppress the linter like this:\n\n```js {3-4}\n\nuseEffect(() => {\n\n// ...\n\n// 🔴 Avoid suppressing the linter like this:\n\n// eslint-ignore-next-line react-hooks/exhaustive-deps\n\n}, []);\n\n```\n\nOn the [next](/learn/separating-events-from-effects) [pages](/learn/removing-effect-dependencies), you'll learn how to fix this code without breaking the rules. It's always worth fixing!\n\n</Pitfall>\n\n<Recap>\n\nComponents can mount, update, and unmount.\n\nEach Effect has a separate lifecycle from the surrounding component.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"922":{"pageContent":"</Pitfall>\n\n<Recap>\n\nComponents can mount, update, and unmount.\n\nEach Effect has a separate lifecycle from the surrounding component.\n\nEach Effect describes a separate synchronization process that can *start* and *stop*.\n\nWhen you write and read Effects, you should think from each individual Effect's perspective (how to start and stop synchronization) rather than from the component's perspective (how it mounts, updates, or unmounts).\n\nValues declared inside the component body are \"reactive\".\n\nReactive values should re-synchronize the Effect because they can change over time.\n\nThe linter verifies that all reactive values used inside the Effect are specified as dependencies.\n\nAll errors flagged by the linter are legitimate. There's always a way to fix the code that doesn't break the rules.\n\n</Recap>\n\n<Challenges>\n\n#### Fix reconnecting on every keystroke {/*fix-reconnecting-on-every-keystroke*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"923":{"pageContent":"</Recap>\n\n<Challenges>\n\n#### Fix reconnecting on every keystroke {/*fix-reconnecting-on-every-keystroke*/}\n\nIn this example, the `ChatRoom` component connects to the chat room when the component mounts, disconnects when it unmounts, and reconnects when you select a different chat room. This behavior is correct, so you need to keep it working.\n\nHowever, there is a problem. Whenever you type into the message box input at the bottom, `ChatRoom` *also* reconnects to the chat. (You can notice this by clearing the console and typing into the input.) Fix the issue so that this doesn't happen.\n\n<Hint>\n\nYou might need to add a dependency array for this Effect. What dependencies should be there?\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"924":{"pageContent":"const serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n});\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"925":{"pageContent":"// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThis Effect didn't have a dependency array at all, so it re-synchronized after every re-render. First, add a dependency array. Then, make sure that every reactive value used by the Effect is specified in the array. For example, `roomId` is reactive (because it's a prop), so it should be included in the array. This ensures that when the user selects a different room, the chat reconnects. On the other hand, `serverUrl` is defined outside the component. This is why it doesn't need to be in the array.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"926":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"927":{"pageContent":"</label>\n\n<hr />\n\n<ChatRoom roomId={roomId} />\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\nbutton { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Switch synchronization on and off {/*switch-synchronization-on-and-off*/}\n\nIn this example, an Effect subscribes to the window [`pointermove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event) event to move a pink dot on the screen. Try hovering over the preview area (or touching the screen if you're on a mobile device), and see how the pink dot follows your movement.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"928":{"pageContent":"There is also a checkbox. Ticking the checkbox toggles the `canMove` state variable, but this state variable is not used anywhere in the code. Your task is to change the code so that when `canMove` is `false` (the checkbox is ticked off), the dot should stop moving. After you toggle the checkbox back on (and set `canMove` to `true`), the box should follow the movement again. In other words, whether the dot can move or not should stay synchronized to whether the checkbox is checked.\n\n<Hint>\n\nYou can't declare an Effect conditionally. However, the code inside the Effect can use conditions!\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"929":{"pageContent":"function handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, []);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nOne solution is to wrap the `setPosition` call into an `if (canMove) { ... }` condition:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"930":{"pageContent":"const [canMove, setCanMove] = useState(true);\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, [canMove]);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nAlternatively, you could wrap the *event subscription* logic into an `if (canMove) { ... }` condition:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"931":{"pageContent":"```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\nif (canMove) {\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}\n\n}, [canMove]);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"932":{"pageContent":"opacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nIn both of these cases, `canMove` is a reactive variable that you read inside the Effect. This is why it must be specified in the list of Effect dependencies. This ensures that the Effect re-synchronizes after every change to its value.\n\n</Solution>\n\n#### Investigate a stale value bug {/*investigate-a-stale-value-bug*/}\n\nIn this example, the pink dot should move when the checkbox is on, and should stop moving when the checkbox is off. The logic for this has already been implemented: the `handleMove` event handler checks the `canMove` state variable.\n\nHowever, for some reason, the `canMove` state variable inside `handleMove` appears to be \"stale\": it's always `true`, even after you tick off the checkbox. How is this possible? Find the mistake in the code and fix it.\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"933":{"pageContent":"<Hint>\n\nIf you see a linter rule being suppressed, remove the suppression! That's where the mistakes usually are.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nfunction handleMove(e) {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n}\n\nuseEffect(() => {\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, []);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"934":{"pageContent":"opacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem with the original code was suppressing the dependency linter. If you remove the suppression, you'll see that this Effect depends on the `handleMove` function. This makes sense: `handleMove` is declared inside the component body, which makes it a reactive value. Every reactive value must be specified as a depedency, or it can potentially get stale over time!","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"935":{"pageContent":"The author of the original code has \"lied\" to React by saying that the Effect does not depend (`[]`) on any reactive values. This is why React did not re-synchronize the Effect after `canMove` has changed (and `handleMove` with it). Because React did not re-synchronize the Effect, the `handleMove` attached as a listener is the `handleMove` function created during the initial render. During the initial render, `canMove` was `true`, which is why `handleMove` from the initial render will forever see that value.\n\n*If you never suppress the linter, you will never see problems with stale values.** There are a few different ways to solve this bug, but you should always start by removing the linter suppression. Then change the code to fix the lint error.\n\nYou can change the Effect dependencies to `[handleMove]`, but since it's going to be a newly defined function for every render, you might as well remove dependencies array altogether. Then the Effect *will* re-synchronize after every re-render:","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"936":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nfunction handleMove(e) {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n}\n\nuseEffect(() => {\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n});\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"937":{"pageContent":"opacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nThis solution works, but it's not ideal. If you put `console.log('Resubscribing')` inside the Effect, you'll notice that it resubscribes after every re-render. Resubscribing is fast, but it would still be nice to avoid doing it so often.\n\nA better fix would be to move the `handleMove` function *inside* the Effect. Then `handleMove` won't be a reactive value, and so your Effect won't depend on a function. Instead, it will need to depend on `canMove` which your code now reads from inside the Effect. This matches the behavior you wanted, since your Effect will now stay synchronized with the value of `canMove`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"938":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nuseEffect(() => {\n\nfunction handleMove(e) {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n}\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n}, [canMove]);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"939":{"pageContent":"opacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nTry adding `console.log('Resubscribing')` inside the Effect body and notice that now it only resubscribes when you toggle the checkbox (`canMove` changes) or edit the code. This makes it better than the previous approach that always resubscribed.\n\nYou'll learn a more general approach to this type of problem in [Separating Events from Effects.](/learn/separating-events-from-effects)\n\n</Solution>\n\n#### Fix a connection switch {/*fix-a-connection-switch*/}\n\nIn this example, the chat service in `chat.js` exposes two different APIs: `createEncryptedConnection` and `createUnencryptedConnection`. The root `App` component lets the user choose whether to use encryption or not, and then passes down the corresponding API method to the child `ChatRoom` component as the `createConnection` prop.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"940":{"pageContent":"Notice that initially, the console logs say the connection is not encrypted. Try toggling the checkbox on: nothing will happen. However, if you change the selected room after that, then the chat will reconnect *and* enable encryption (as you'll see from the console messages). This is a bug. Fix the bug so that toggling the checkbox *also* causes the chat to reconnect.\n\n<Hint>\n\nSuppressing the linter is always suspicious. Could this be a bug?\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nimport {\n\ncreateEncryptedConnection,\n\ncreateUnencryptedConnection,\n\n} from './chat.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isEncrypted, setIsEncrypted] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"941":{"pageContent":"value={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isEncrypted}\n\nonChange={e => setIsEncrypted(e.target.checked)}\n\n/>\n\nEnable encryption\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ncreateConnection={isEncrypted ?\n\ncreateEncryptedConnection :\n\ncreateUnencryptedConnection\n\n}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nexport default function ChatRoom({ roomId, createConnection }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"942":{"pageContent":"return <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ 🔐 Connecting to \"' + roomId + '... (encrypted)');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n\n}\n\n};\n\n}\n\nexport function createUnencryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '... (unencrypted)');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"943":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nIf you remove the linter suppression, you will see a lint error. The problem is that `createConnection` is a prop, so it's a reactive value. It can change over time! (And indeed, it should--when the user ticks the checkbox, the parent component passes a different value of the `createConnection` prop.) This is why it should be a dependency. Include it in the list to fix the bug:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nimport {\n\ncreateEncryptedConnection,\n\ncreateUnencryptedConnection,\n\n} from './chat.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isEncrypted, setIsEncrypted] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"944":{"pageContent":"const [isEncrypted, setIsEncrypted] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isEncrypted}\n\nonChange={e => setIsEncrypted(e.target.checked)}\n\n/>\n\nEnable encryption\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ncreateConnection={isEncrypted ?\n\ncreateEncryptedConnection :\n\ncreateUnencryptedConnection\n\n}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nexport default function ChatRoom({ roomId, createConnection }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, createConnection]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"945":{"pageContent":"return <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ 🔐 Connecting to \"' + roomId + '... (encrypted)');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n\n}\n\n};\n\n}\n\nexport function createUnencryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '... (unencrypted)');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"946":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nIt is correct that `createConnection` is a dependency. However, this code is a bit fragile because someone could edit the `App` component to pass an inline function as the value of this prop. In that case, its value would be different every time the `App` component re-renders, so the Effect might re-synchronize too often. To avoid this, you can pass `isEncrypted` down instead:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ChatRoom from './ChatRoom.js';\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isEncrypted, setIsEncrypted] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"947":{"pageContent":"<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isEncrypted}\n\nonChange={e => setIsEncrypted(e.target.checked)}\n\n/>\n\nEnable encryption\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\nisEncrypted={isEncrypted}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ChatRoom.js active\n\nimport { useState, useEffect } from 'react';\n\nimport {\n\ncreateEncryptedConnection,\n\ncreateUnencryptedConnection,\n\n} from './chat.js';\n\nexport default function ChatRoom({ roomId, isEncrypted }) {\n\nuseEffect(() => {\n\nconst createConnection = isEncrypted ?\n\ncreateEncryptedConnection :\n\ncreateUnencryptedConnection;\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, isEncrypted]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection(roomId) {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"948":{"pageContent":"connection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, isEncrypted]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createEncryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ 🔐 Connecting to \"' + roomId + '... (encrypted)');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ 🔐 Disconnected from \"' + roomId + '\" room (encrypted)');\n\n}\n\n};\n\n}\n\nexport function createUnencryptedConnection(roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '... (unencrypted)');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"949":{"pageContent":"},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room (unencrypted)');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nIn this version, the `App` component passes a boolean prop instead of a function. Inside the Effect, you decide which function to use. Since both `createEncryptedConnection` and `createUnencryptedConnection` are declared outside the component, they aren't reactive, and don't need to be dependencies. You'll learn more about this in [Removing Effect Dependencies.](/learn/removing-effect-dependencies)\n\n</Solution>\n\n#### Populate a chain of select boxes {/*populate-a-chain-of-select-boxes*/}\n\nIn this example, there are two select boxes. One select box lets the user pick a planet. Another select box lets the user pick a place *on that planet.* The second box doesn't work yet. Your task is to make it show the places on the chosen planet.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"950":{"pageContent":"Look at how the first select box works. It populates the `planetList` state with the result from the `\"/planets\"` API call. The currently selected planet's ID is kept in the `planetId` state variable. You need to find where to add some additional code so that the `placeList` state variable is populated with the result of the `\"/planets/\" + planetId + \"/places\"` API call.\n\nIf you implement this right, selecting a planet should populate the place list. Changing a planet should change the place list.\n\n<Hint>\n\nIf you have two independent synchronization processes, you need to write two separate Effects.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchData } from './api.js';\n\nexport default function Page() {\n\nconst [planetList, setPlanetList] = useState([])\n\nconst [planetId, setPlanetId] = useState('');\n\nconst [placeList, setPlaceList] = useState([]);\n\nconst [placeId, setPlaceId] = useState('');\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetchData('/planets').then(result => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"951":{"pageContent":"const [placeList, setPlaceList] = useState([]);\n\nconst [placeId, setPlaceId] = useState('');\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetchData('/planets').then(result => {\n\nif (!ignore) {\n\nconsole.log('Fetched a list of planets.');\n\nsetPlanetList(result);\n\nsetPlanetId(result[0].id); // Select the first planet\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, []);\n\nreturn (\n\n<>\n\n<label>\n\nPick a planet:{' '}\n\n<select value={planetId} onChange={e => {\n\nsetPlanetId(e.target.value);\n\n}}>\n\n{planetList.map(planet =>\n\n<option key={planet.id} value={planet.id}>{planet.name}</option>\n\n)}\n\n</select>\n\n</label>\n\n<label>\n\nPick a place:{' '}\n\n<select value={placeId} onChange={e => {\n\nsetPlaceId(e.target.value);\n\n}}>\n\n{placeList.map(place =>\n\n<option key={place.id} value={place.id}>{place.name}</option>\n\n)}\n\n</select>\n\n</label>\n\n<hr />\n\n<p>You are going to: {placeId || '???'} on {planetId || '???'} </p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport function fetchData(url) {\n\nif (url === '/planets') {\n\nreturn fetchPlanets();\n\n} else if (url.startsWith('/planets/')) {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"952":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport function fetchData(url) {\n\nif (url === '/planets') {\n\nreturn fetchPlanets();\n\n} else if (url.startsWith('/planets/')) {\n\nconst match = url.match(/^\\/planets\\/([\\w-]+)\\/places(\\/)?$/);\n\nif (!match || !match[1] || !match[1].length) {\n\nthrow Error('Expected URL like \"/planets/earth/places\". Received: \"' + url + '\".');\n\n}\n\nreturn fetchPlaces(match[1]);\n\n} else throw Error('Expected URL like \"/planets\" or \"/planets/earth/places\". Received: \"' + url + '\".');\n\n}\n\nasync function fetchPlanets() {\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve([{\n\nid: 'earth',\n\nname: 'Earth'\n\n}, {\n\nid: 'venus',\n\nname: 'Venus'\n\n}, {\n\nid: 'mars',\n\nname: 'Mars'\n\n}]);\n\n}, 1000);\n\n});\n\n}\n\nasync function fetchPlaces(planetId) {\n\nif (typeof planetId !== 'string') {\n\nthrow Error(\n\n'fetchPlaces(planetId) expects a string argument. ' +\n\n'Instead received: ' + planetId + '.'\n\n);\n\n}\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nif (planetId === 'earth') {\n\nresolve([{\n\nid: 'laos',\n\nname: 'Laos'\n\n}, {\n\nid: 'spain',\n\nname: 'Spain'\n\n}, {\n\nid: 'vietnam',","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"953":{"pageContent":"'Instead received: ' + planetId + '.'\n\n);\n\n}\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nif (planetId === 'earth') {\n\nresolve([{\n\nid: 'laos',\n\nname: 'Laos'\n\n}, {\n\nid: 'spain',\n\nname: 'Spain'\n\n}, {\n\nid: 'vietnam',\n\nname: 'Vietnam'\n\n}]);\n\n} else if (planetId === 'venus') {\n\nresolve([{\n\nid: 'aurelia',\n\nname: 'Aurelia'\n\n}, {\n\nid: 'diana-chasma',\n\nname: 'Diana Chasma'\n\n}, {\n\nid: 'kumsong-vallis',\n\nname: 'Kŭmsŏng Vallis'\n\n}]);\n\n} else if (planetId === 'mars') {\n\nresolve([{\n\nid: 'aluminum-city',\n\nname: 'Aluminum City'\n\n}, {\n\nid: 'new-new-york',\n\nname: 'New New York'\n\n}, {\n\nid: 'vishniac',\n\nname: 'Vishniac'\n\n}]);\n\n} else throw Error('Uknown planet ID: ' + planetId);\n\n}, 1000);\n\n});\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThere are two independent synchronization processes:\n\nThe first select box is synchronized to the remote list of planets.\n\nThe second select box is synchronized to the remote list of places for the current `planetId`.","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"954":{"pageContent":"The first select box is synchronized to the remote list of planets.\n\nThe second select box is synchronized to the remote list of places for the current `planetId`.\n\nThis is why it makes sense to describe them as two separate Effects. Here's an example of how you could do this:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchData } from './api.js';\n\nexport default function Page() {\n\nconst [planetList, setPlanetList] = useState([])\n\nconst [planetId, setPlanetId] = useState('');\n\nconst [placeList, setPlaceList] = useState([]);\n\nconst [placeId, setPlaceId] = useState('');\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetchData('/planets').then(result => {\n\nif (!ignore) {\n\nconsole.log('Fetched a list of planets.');\n\nsetPlanetList(result);\n\nsetPlanetId(result[0].id); // Select the first planet\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, []);\n\nuseEffect(() => {\n\nif (planetId === '') {\n\n// Nothing is selected in the first box yet\n\nreturn;\n\n}\n\nlet ignore = false;","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"955":{"pageContent":"}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, []);\n\nuseEffect(() => {\n\nif (planetId === '') {\n\n// Nothing is selected in the first box yet\n\nreturn;\n\n}\n\nlet ignore = false;\n\nfetchData('/planets/' + planetId + '/places').then(result => {\n\nif (!ignore) {\n\nconsole.log('Fetched a list of places on \"' + planetId + '\".');\n\nsetPlaceList(result);\n\nsetPlaceId(result[0].id); // Select the first place\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, [planetId]);\n\nreturn (\n\n<>\n\n<label>\n\nPick a planet:{' '}\n\n<select value={planetId} onChange={e => {\n\nsetPlanetId(e.target.value);\n\n}}>\n\n{planetList.map(planet =>\n\n<option key={planet.id} value={planet.id}>{planet.name}</option>\n\n)}\n\n</select>\n\n</label>\n\n<label>\n\nPick a place:{' '}\n\n<select value={placeId} onChange={e => {\n\nsetPlaceId(e.target.value);\n\n}}>\n\n{placeList.map(place =>\n\n<option key={place.id} value={place.id}>{place.name}</option>\n\n)}\n\n</select>\n\n</label>\n\n<hr />\n\n<p>You are going to: {placeId || '???'} on {planetId || '???'} </p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport function fetchData(url) {\n\nif (url === '/planets') {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"956":{"pageContent":")}\n\n</select>\n\n</label>\n\n<hr />\n\n<p>You are going to: {placeId || '???'} on {planetId || '???'} </p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport function fetchData(url) {\n\nif (url === '/planets') {\n\nreturn fetchPlanets();\n\n} else if (url.startsWith('/planets/')) {\n\nconst match = url.match(/^\\/planets\\/([\\w-]+)\\/places(\\/)?$/);\n\nif (!match || !match[1] || !match[1].length) {\n\nthrow Error('Expected URL like \"/planets/earth/places\". Received: \"' + url + '\".');\n\n}\n\nreturn fetchPlaces(match[1]);\n\n} else throw Error('Expected URL like \"/planets\" or \"/planets/earth/places\". Received: \"' + url + '\".');\n\n}\n\nasync function fetchPlanets() {\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve([{\n\nid: 'earth',\n\nname: 'Earth'\n\n}, {\n\nid: 'venus',\n\nname: 'Venus'\n\n}, {\n\nid: 'mars',\n\nname: 'Mars'\n\n}]);\n\n}, 1000);\n\n});\n\n}\n\nasync function fetchPlaces(planetId) {\n\nif (typeof planetId !== 'string') {\n\nthrow Error(\n\n'fetchPlaces(planetId) expects a string argument. ' +\n\n'Instead received: ' + planetId + '.'\n\n);\n\n}\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"957":{"pageContent":"if (typeof planetId !== 'string') {\n\nthrow Error(\n\n'fetchPlaces(planetId) expects a string argument. ' +\n\n'Instead received: ' + planetId + '.'\n\n);\n\n}\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nif (planetId === 'earth') {\n\nresolve([{\n\nid: 'laos',\n\nname: 'Laos'\n\n}, {\n\nid: 'spain',\n\nname: 'Spain'\n\n}, {\n\nid: 'vietnam',\n\nname: 'Vietnam'\n\n}]);\n\n} else if (planetId === 'venus') {\n\nresolve([{\n\nid: 'aurelia',\n\nname: 'Aurelia'\n\n}, {\n\nid: 'diana-chasma',\n\nname: 'Diana Chasma'\n\n}, {\n\nid: 'kumsong-vallis',\n\nname: 'Kŭmsŏng Vallis'\n\n}]);\n\n} else if (planetId === 'mars') {\n\nresolve([{\n\nid: 'aluminum-city',\n\nname: 'Aluminum City'\n\n}, {\n\nid: 'new-new-york',\n\nname: 'New New York'\n\n}, {\n\nid: 'vishniac',\n\nname: 'Vishniac'\n\n}]);\n\n} else throw Error('Uknown planet ID: ' + planetId);\n\n}, 1000);\n\n});\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"958":{"pageContent":"name: 'New New York'\n\n}, {\n\nid: 'vishniac',\n\nname: 'Vishniac'\n\n}]);\n\n} else throw Error('Uknown planet ID: ' + planetId);\n\n}, 1000);\n\n});\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nThis code is a bit repetitive. However, that's not a good reason to combine it into a single Effect! If you did this, you'd have to combine both Effect's dependencies into one list, and then changing the planet would refetch the list of all planets. Effects are not a tool for code reuse.\n\nInstead, to reduce repetition, you can extract some logic into a custom Hook like `useSelectOptions` below:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { useSelectOptions } from './useSelectOptions.js';\n\nexport default function Page() {\n\nconst [\n\nplanetList,\n\nplanetId,\n\nsetPlanetId\n\n] = useSelectOptions('/planets');\n\nconst [\n\nplaceList,\n\nplaceId,\n\nsetPlaceId\n\n] = useSelectOptions(planetId ? `/planets/${planetId}/places` : null);\n\nreturn (\n\n<>\n\n<label>\n\nPick a planet:{' '}\n\n<select value={planetId} onChange={e => {","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"959":{"pageContent":"const [\n\nplaceList,\n\nplaceId,\n\nsetPlaceId\n\n] = useSelectOptions(planetId ? `/planets/${planetId}/places` : null);\n\nreturn (\n\n<>\n\n<label>\n\nPick a planet:{' '}\n\n<select value={planetId} onChange={e => {\n\nsetPlanetId(e.target.value);\n\n}}>\n\n{planetList?.map(planet =>\n\n<option key={planet.id} value={planet.id}>{planet.name}</option>\n\n)}\n\n</select>\n\n</label>\n\n<label>\n\nPick a place:{' '}\n\n<select value={placeId} onChange={e => {\n\nsetPlaceId(e.target.value);\n\n}}>\n\n{placeList?.map(place =>\n\n<option key={place.id} value={place.id}>{place.name}</option>\n\n)}\n\n</select>\n\n</label>\n\n<hr />\n\n<p>You are going to: {placeId || '...'} on {planetId || '...'} </p>\n\n</>\n\n);\n\n}\n\n```\n\n```js useSelectOptions.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchData } from './api.js';\n\nexport function useSelectOptions(url) {\n\nconst [list, setList] = useState(null);\n\nconst [selectedId, setSelectedId] = useState('');\n\nuseEffect(() => {\n\nif (url === null) {\n\nreturn;\n\n}\n\nlet ignore = false;\n\nfetchData(url).then(result => {\n\nif (!ignore) {\n\nsetList(result);\n\nsetSelectedId(result[0].id);\n\n}\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"960":{"pageContent":"useEffect(() => {\n\nif (url === null) {\n\nreturn;\n\n}\n\nlet ignore = false;\n\nfetchData(url).then(result => {\n\nif (!ignore) {\n\nsetList(result);\n\nsetSelectedId(result[0].id);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, [url]);\n\nreturn [list, selectedId, setSelectedId];\n\n}\n\n```\n\n```js api.js hidden\n\nexport function fetchData(url) {\n\nif (url === '/planets') {\n\nreturn fetchPlanets();\n\n} else if (url.startsWith('/planets/')) {\n\nconst match = url.match(/^\\/planets\\/([\\w-]+)\\/places(\\/)?$/);\n\nif (!match || !match[1] || !match[1].length) {\n\nthrow Error('Expected URL like \"/planets/earth/places\". Received: \"' + url + '\".');\n\n}\n\nreturn fetchPlaces(match[1]);\n\n} else throw Error('Expected URL like \"/planets\" or \"/planets/earth/places\". Received: \"' + url + '\".');\n\n}\n\nasync function fetchPlanets() {\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve([{\n\nid: 'earth',\n\nname: 'Earth'\n\n}, {\n\nid: 'venus',\n\nname: 'Venus'\n\n}, {\n\nid: 'mars',\n\nname: 'Mars'\n\n}]);\n\n}, 1000);\n\n});\n\n}\n\nasync function fetchPlaces(planetId) {\n\nif (typeof planetId !== 'string') {\n\nthrow Error(","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"961":{"pageContent":"resolve([{\n\nid: 'earth',\n\nname: 'Earth'\n\n}, {\n\nid: 'venus',\n\nname: 'Venus'\n\n}, {\n\nid: 'mars',\n\nname: 'Mars'\n\n}]);\n\n}, 1000);\n\n});\n\n}\n\nasync function fetchPlaces(planetId) {\n\nif (typeof planetId !== 'string') {\n\nthrow Error(\n\n'fetchPlaces(planetId) expects a string argument. ' +\n\n'Instead received: ' + planetId + '.'\n\n);\n\n}\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nif (planetId === 'earth') {\n\nresolve([{\n\nid: 'laos',\n\nname: 'Laos'\n\n}, {\n\nid: 'spain',\n\nname: 'Spain'\n\n}, {\n\nid: 'vietnam',\n\nname: 'Vietnam'\n\n}]);\n\n} else if (planetId === 'venus') {\n\nresolve([{\n\nid: 'aurelia',\n\nname: 'Aurelia'\n\n}, {\n\nid: 'diana-chasma',\n\nname: 'Diana Chasma'\n\n}, {\n\nid: 'kumsong-vallis',\n\nname: 'Kŭmsŏng Vallis'\n\n}]);\n\n} else if (planetId === 'mars') {\n\nresolve([{\n\nid: 'aluminum-city',\n\nname: 'Aluminum City'\n\n}, {\n\nid: 'new-new-york',\n\nname: 'New New York'\n\n}, {\n\nid: 'vishniac',\n\nname: 'Vishniac'\n\n}]);\n\n} else throw Error('Uknown planet ID: ' + planetId);\n\n}, 1000);\n\n});\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"962":{"pageContent":"name: 'New New York'\n\n}, {\n\nid: 'vishniac',\n\nname: 'Vishniac'\n\n}]);\n\n} else throw Error('Uknown planet ID: ' + planetId);\n\n}, 1000);\n\n});\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nCheck the `useSelectOptions.js` tab in the sandbox to see how it works. Ideally, most Effects in your application should eventually be replaced by custom Hooks, whether written by you or by the community. Custom Hooks hide the synchronization logic, so the calling component doesn't know about the Effect. As you keep working on your app, you'll develop a palette of Hooks to choose from, and eventually you won't need to write Effects in your components very often.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/lifecycle-of-reactive-effects.md"}},"963":{"pageContent":"--\n\ntitle: Choosing the State Structure\n\n--\n\n<Intro>\n\nStructuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.\n\n</Intro>\n\n<YouWillLearn>\n\nWhen to use a single vs multiple state variables\n\nWhat to avoid when organizing state\n\nHow to fix common issues with the state structure\n\n</YouWillLearn>\n\n## Principles for structuring state {/*principles-for-structuring-state*/}\n\nWhen you write a component that holds some state, you'll have to make choices about how many state variables to use and what the shape of their data should be. While it's possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:\n\n1. **Group related state.** If you always update two or more state variables at the same time, consider merging them into a single state variable.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"964":{"pageContent":"1. **Group related state.** If you always update two or more state variables at the same time, consider merging them into a single state variable.\n\n2. **Avoid contradictions in state.** When the state is structured in a way that several pieces of state may contradict and \"disagree\" with each other, you leave room for mistakes. Try to avoid this.\n\n3. **Avoid redundant state.** If you can calculate some information from the component's props or its existing state variables during rendering, you should not put that information into that component's state.\n\n4. **Avoid duplication in state.** When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.\n\n5. **Avoid deeply nested state.** Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"965":{"pageContent":"5. **Avoid deeply nested state.** Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.\n\nThe goal behind these principles is to *make state easy to update without introducing mistakes*. Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to [\"normalize\" the database structure](https://docs.microsoft.com/en-us/office/troubleshoot/access/database-normalization-description) to reduce the chance of bugs. To paraphrase Albert Einstein, **\"Make your state as simple as it can be--but no simpler.\"**\n\nNow let's see how these principles apply in action.\n\n## Group related state {/*group-related-state*/}\n\nYou might sometimes be unsure between using a single or multiple state variables.\n\nShould you do this?\n\n```js\n\nconst [x, setX] = useState(0);\n\nconst [y, setY] = useState(0);\n\n```\n\nOr this?\n\n```js\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"966":{"pageContent":"Should you do this?\n\n```js\n\nconst [x, setX] = useState(0);\n\nconst [y, setY] = useState(0);\n\n```\n\nOr this?\n\n```js\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\n```\n\nTechnically, you can use either of these approaches. But **if some two state variables always change together, it might be a good idea to unify them into a single state variable.** Then you won't forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MovingDot() {\n\nconst [position, setPosition] = useState({\n\nx: 0,\n\ny: 0\n\n});\n\nreturn (\n\n<div\n\nonPointerMove={e => {\n\nsetPosition({\n\nx: e.clientX,\n\ny: e.clientY\n\n});\n\n}}\n\nstyle={{\n\nposition: 'relative',\n\nwidth: '100vw',\n\nheight: '100vh',\n\n}}>\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'red',\n\nborderRadius: '50%',\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\nleft: -10,\n\ntop: -10,\n\nwidth: 20,\n\nheight: 20,\n\n}} />\n\n</div>\n\n)\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"967":{"pageContent":"borderRadius: '50%',\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\nleft: -10,\n\ntop: -10,\n\nwidth: 20,\n\nheight: 20,\n\n}} />\n\n</div>\n\n)\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n```\n\n</Sandpack>\n\nAnother case where you'll group data into an object or an array is when you don't know how many different pieces of state you'll need. For example, it's helpful when you have a form where the user can add custom fields.\n\n<Pitfall>\n\nIf your state variable is an object, remember that [you can't update only one field in it](/learn/updating-objects-in-state) without explicitly copying the other fields. For example, you can't do `setPosition({ x: 100 })` in the above example because it would not have the `y` property at all! Instead, if you wanted to set `x` alone, you would either do `setPosition({ ...position, x: 100 })`, or split them into two state variables and do `setX(100)`.\n\n</Pitfall>\n\n## Avoid contradictions in state {/*avoid-contradictions-in-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"968":{"pageContent":"</Pitfall>\n\n## Avoid contradictions in state {/*avoid-contradictions-in-state*/}\n\nHere is a hotel feedback form with `isSending` and `isSent` state variables:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nconst [text, setText] = useState('');\n\nconst [isSending, setIsSending] = useState(false);\n\nconst [isSent, setIsSent] = useState(false);\n\nasync function handleSubmit(e) {\n\ne.preventDefault();\n\nsetIsSending(true);\n\nawait sendMessage(text);\n\nsetIsSending(false);\n\nsetIsSent(true);\n\n}\n\nif (isSent) {\n\nreturn <h1>Thanks for feedback!</h1>\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<p>How was your stay at The Prancing Pony?</p>\n\n<textarea\n\ndisabled={isSending}\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<br />\n\n<button\n\ndisabled={isSending}\n\ntype=\"submit\"\n\n>\n\nSend\n\n</button>\n\n{isSending && <p>Sending...</p>}\n\n</form>\n\n);\n\n}\n\n// Pretend to send a message.\n\nfunction sendMessage(text) {\n\nreturn new Promise(resolve => {\n\nsetTimeout(resolve, 2000);\n\n});\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"969":{"pageContent":">\n\nSend\n\n</button>\n\n{isSending && <p>Sending...</p>}\n\n</form>\n\n);\n\n}\n\n// Pretend to send a message.\n\nfunction sendMessage(text) {\n\nreturn new Promise(resolve => {\n\nsetTimeout(resolve, 2000);\n\n});\n\n}\n\n```\n\n</Sandpack>\n\nWhile this code works, it leaves the door open for \"impossible\" states. For example, if you forget to call `setIsSent` and `setIsSending` together, you may end up in a situation where both `isSending` and `isSent` are `true` at the same time. The more complex your component is, the harder it will be to understand what happened.\n\n*Since `isSending` and `isSent` should never be `true` at the same time, it is better to replace them with one `status` state variable that may take one of *three* valid states:** `'typing'` (initial), `'sending'`, and `'sent'`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nconst [text, setText] = useState('');\n\nconst [status, setStatus] = useState('typing');\n\nasync function handleSubmit(e) {\n\ne.preventDefault();\n\nsetStatus('sending');","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"970":{"pageContent":"export default function FeedbackForm() {\n\nconst [text, setText] = useState('');\n\nconst [status, setStatus] = useState('typing');\n\nasync function handleSubmit(e) {\n\ne.preventDefault();\n\nsetStatus('sending');\n\nawait sendMessage(text);\n\nsetStatus('sent');\n\n}\n\nconst isSending = status === 'sending';\n\nconst isSent = status === 'sent';\n\nif (isSent) {\n\nreturn <h1>Thanks for feedback!</h1>\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<p>How was your stay at The Prancing Pony?</p>\n\n<textarea\n\ndisabled={isSending}\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<br />\n\n<button\n\ndisabled={isSending}\n\ntype=\"submit\"\n\n>\n\nSend\n\n</button>\n\n{isSending && <p>Sending...</p>}\n\n</form>\n\n);\n\n}\n\n// Pretend to send a message.\n\nfunction sendMessage(text) {\n\nreturn new Promise(resolve => {\n\nsetTimeout(resolve, 2000);\n\n});\n\n}\n\n```\n\n</Sandpack>\n\nYou can still declare some constants for readability:\n\n```js\n\nconst isSending = status === 'sending';\n\nconst isSent = status === 'sent';\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"971":{"pageContent":"setTimeout(resolve, 2000);\n\n});\n\n}\n\n```\n\n</Sandpack>\n\nYou can still declare some constants for readability:\n\n```js\n\nconst isSending = status === 'sending';\n\nconst isSent = status === 'sent';\n\n```\n\nBut they're not state variables, so you don't need to worry about them getting out of sync with each other.\n\n## Avoid redundant state {/*avoid-redundant-state*/}\n\nIf you can calculate some information from the component's props or its existing state variables during rendering, you **should not** put that information into that component's state.\n\nFor example, take this form. It works, but can you find any redundant state in it?\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nconst [fullName, setFullName] = useState('');\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\nsetFullName(e.target.value + ' ' + lastName);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"972":{"pageContent":"function handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\nsetFullName(e.target.value + ' ' + lastName);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\nsetFullName(firstName + ' ' + e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>Let’s check you in</h2>\n\n<label>\n\nFirst name:{' '}\n\n<input\n\nvalue={firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:{' '}\n\n<input\n\nvalue={lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n<p>\n\nYour ticket will be issued to: <b>{fullName}</b>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nThis form has three state variables: `firstName`, `lastName`, and `fullName`. However, `fullName` is redundant. **You can always calculate `fullName` from `firstName` and `lastName` during render, so remove it from state.**\n\nThis is how you can do it:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"973":{"pageContent":"This is how you can do it:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nconst fullName = firstName + ' ' + lastName;\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>Let’s check you in</h2>\n\n<label>\n\nFirst name:{' '}\n\n<input\n\nvalue={firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:{' '}\n\n<input\n\nvalue={lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n<p>\n\nYour ticket will be issued to: <b>{fullName}</b>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nHere, `fullName` is *not* a state variable. Instead, it's calculated during render:\n\n```js\n\nconst fullName = firstName + ' ' + lastName;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"974":{"pageContent":"```css\n\nlabel { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nHere, `fullName` is *not* a state variable. Instead, it's calculated during render:\n\n```js\n\nconst fullName = firstName + ' ' + lastName;\n\n```\n\nAs a result, the change handlers don't need to do anything special to update it. When you call `setFirstName` or `setLastName`, you trigger a re-render, and then the next `fullName` will be calculated from the fresh data.\n\n<DeepDive>\n\n#### Don't mirror props in state {/*don-t-mirror-props-in-state*/}\n\nA common example of redundant state is code like this:\n\n```js\n\nfunction Message({ messageColor }) {\n\nconst [color, setColor] = useState(messageColor);\n\n```\n\nHere, a `color` state variable is initialized to the `messageColor` prop. The problem is that **if the parent component passes a different value of `messageColor` later (for example, `'red'` instead of `'blue'`), the `color` *state variable* would not be updated!** The state is only initialized during the first render.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"975":{"pageContent":"This is why \"mirroring\" some prop in a state variable can lead to confusion. Instead, use the `messageColor` prop directly in your code. If you want to give it a shorter name, use a constant:\n\n```js\n\nfunction Message({ messageColor }) {\n\nconst color = messageColor;\n\n```\n\nThis way it won't get out of sync with the prop passed from the parent component.\n\n\"Mirroring\" props into state only makes sense when you *want* to ignore all updates for a specific prop. By convention, start the prop name with `initial` or `default` to clarify that its new values are ignored:\n\n```js\n\nfunction Message({ initialColor }) {\n\n// The `color` state variable holds the *first* value of `initialColor`.\n\n// Further changes to the `initialColor` prop are ignored.\n\nconst [color, setColor] = useState(initialColor);\n\n```\n\n</DeepDive>\n\n## Avoid duplication in state {/*avoid-duplication-in-state*/}\n\nThis menu list component lets you choose a single travel snack out of several:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialItems = [","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"976":{"pageContent":"This menu list component lets you choose a single travel snack out of several:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialItems = [\n\n{ title: 'pretzels', id: 0 },\n\n{ title: 'crispy seaweed', id: 1 },\n\n{ title: 'granola bar', id: 2 },\n\n];\n\nexport default function Menu() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst [selectedItem, setSelectedItem] = useState(\n\nitems[0]\n\n);\n\nreturn (\n\n<>\n\n<h2>What's your travel snack?</h2>\n\n<ul>\n\n{items.map(item => (\n\n<li key={item.id}>\n\n{item.title}\n\n{' '}\n\n<button onClick={() => {\n\nsetSelectedItem(item);\n\n}}>Choose</button>\n\n</li>\n\n))}\n\n</ul>\n\n<p>You picked {selectedItem.title}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nCurrently, it stores the selected item as an object in the `selectedItem` state variable. However, this is not great: **the contents of the `selectedItem` is the same object as one of the items inside the `items` list.** This means that the information about the item itself is duplicated in two places.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"977":{"pageContent":"Why is this a problem? Let's make each item editable:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialItems = [\n\n{ title: 'pretzels', id: 0 },\n\n{ title: 'crispy seaweed', id: 1 },\n\n{ title: 'granola bar', id: 2 },\n\n];\n\nexport default function Menu() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst [selectedItem, setSelectedItem] = useState(\n\nitems[0]\n\n);\n\nfunction handleItemChange(id, e) {\n\nsetItems(items.map(item => {\n\nif (item.id === id) {\n\nreturn {\n\n...item,\n\ntitle: e.target.value,\n\n};\n\n} else {\n\nreturn item;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h2>What's your travel snack?</h2>\n\n<ul>\n\n{items.map((item, index) => (\n\n<li key={item.id}>\n\n<input\n\nvalue={item.title}\n\nonChange={e => {\n\nhandleItemChange(item.id, e)\n\n}}\n\n/>\n\n{' '}\n\n<button onClick={() => {\n\nsetSelectedItem(item);\n\n}}>Choose</button>\n\n</li>\n\n))}\n\n</ul>\n\n<p>You picked {selectedItem.title}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-top: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"978":{"pageContent":"}}\n\n/>\n\n{' '}\n\n<button onClick={() => {\n\nsetSelectedItem(item);\n\n}}>Choose</button>\n\n</li>\n\n))}\n\n</ul>\n\n<p>You picked {selectedItem.title}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nNotice how if you first click \"Choose\" on an item and *then* edit it, **the input updates but the label at the bottom does not reflect the edits.** This is because you have duplicated state, and you forgot to update `selectedItem`.\n\nAlthough you could update `selectedItem` too, an easier fix is to remove duplication. In this example, instead of a `selectedItem` object (which creates a duplication with objects inside `items`), you hold the `selectedId` in state, and *then* get the `selectedItem` by searching the `items` array for an item with that ID:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialItems = [\n\n{ title: 'pretzels', id: 0 },\n\n{ title: 'crispy seaweed', id: 1 },\n\n{ title: 'granola bar', id: 2 },\n\n];\n\nexport default function Menu() {\n\nconst [items, setItems] = useState(initialItems);","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"979":{"pageContent":"{ title: 'pretzels', id: 0 },\n\n{ title: 'crispy seaweed', id: 1 },\n\n{ title: 'granola bar', id: 2 },\n\n];\n\nexport default function Menu() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst [selectedId, setSelectedId] = useState(0);\n\nconst selectedItem = items.find(item =>\n\nitem.id === selectedId\n\n);\n\nfunction handleItemChange(id, e) {\n\nsetItems(items.map(item => {\n\nif (item.id === id) {\n\nreturn {\n\n...item,\n\ntitle: e.target.value,\n\n};\n\n} else {\n\nreturn item;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h2>What's your travel snack?</h2>\n\n<ul>\n\n{items.map((item, index) => (\n\n<li key={item.id}>\n\n<input\n\nvalue={item.title}\n\nonChange={e => {\n\nhandleItemChange(item.id, e)\n\n}}\n\n/>\n\n{' '}\n\n<button onClick={() => {\n\nsetSelectedId(item.id);\n\n}}>Choose</button>\n\n</li>\n\n))}\n\n</ul>\n\n<p>You picked {selectedItem.title}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n(Alternatively, you may hold the selected index in state.)\n\nThe state used to be duplicated like this:\n\n`items = [{ id: 0, title: 'pretzels'}, ...]`\n\n`selectedItem = {id: 0, title: 'pretzels'}`","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"980":{"pageContent":"</Sandpack>\n\n(Alternatively, you may hold the selected index in state.)\n\nThe state used to be duplicated like this:\n\n`items = [{ id: 0, title: 'pretzels'}, ...]`\n\n`selectedItem = {id: 0, title: 'pretzels'}`\n\nBut after the change it's like this:\n\n`items = [{ id: 0, title: 'pretzels'}, ...]`\n\n`selectedId = 0`\n\nThe duplication is gone, and you only keep the essential state!\n\nNow if you edit the *selected* item, the message below will update immediately. This is because `setItems` triggers a re-render, and `items.find(...)` would find the item with the updated title. You didn't need to hold *the selected item* in state, because only the *selected ID* is essential. The rest could be calculated during render.\n\n## Avoid deeply nested state {/*avoid-deeply-nested-state*/}\n\nImagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"981":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { initialTravelPlan } from './places.js';\n\nfunction PlaceTree({ place }) {\n\nconst childPlaces = place.childPlaces;\n\nreturn (\n\n<li>\n\n{place.title}\n\n{childPlaces.length > 0 && (\n\n<ol>\n\n{childPlaces.map(place => (\n\n<PlaceTree key={place.id} place={place} />\n\n))}\n\n</ol>\n\n)}\n\n</li>\n\n);\n\n}\n\nexport default function TravelPlan() {\n\nconst [plan, setPlan] = useState(initialTravelPlan);\n\nconst planets = plan.childPlaces;\n\nreturn (\n\n<>\n\n<h2>Places to visit</h2>\n\n<ol>\n\n{planets.map(place => (\n\n<PlaceTree key={place.id} place={place} />\n\n))}\n\n</ol>\n\n</>\n\n);\n\n}\n\n```\n\n```js places.js active\n\nexport const initialTravelPlan = {\n\nid: 0,\n\ntitle: '(Root)',\n\nchildPlaces: [{\n\nid: 1,\n\ntitle: 'Earth',\n\nchildPlaces: [{\n\nid: 2,\n\ntitle: 'Africa',\n\nchildPlaces: [{\n\nid: 3,\n\ntitle: 'Botswana',\n\nchildPlaces: []\n\n}, {\n\nid: 4,\n\ntitle: 'Egypt',\n\nchildPlaces: []\n\n}, {\n\nid: 5,\n\ntitle: 'Kenya',\n\nchildPlaces: []\n\n}, {\n\nid: 6,\n\ntitle: 'Madagascar',\n\nchildPlaces: []\n\n}, {\n\nid: 7,\n\ntitle: 'Morocco',\n\nchildPlaces: []\n\n}, {\n\nid: 8,\n\ntitle: 'Nigeria',\n\nchildPlaces: []\n\n}, {\n\nid: 9,\n\ntitle: 'South Africa',","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"982":{"pageContent":"id: 5,\n\ntitle: 'Kenya',\n\nchildPlaces: []\n\n}, {\n\nid: 6,\n\ntitle: 'Madagascar',\n\nchildPlaces: []\n\n}, {\n\nid: 7,\n\ntitle: 'Morocco',\n\nchildPlaces: []\n\n}, {\n\nid: 8,\n\ntitle: 'Nigeria',\n\nchildPlaces: []\n\n}, {\n\nid: 9,\n\ntitle: 'South Africa',\n\nchildPlaces: []\n\n}]\n\n}, {\n\nid: 10,\n\ntitle: 'Americas',\n\nchildPlaces: [{\n\nid: 11,\n\ntitle: 'Argentina',\n\nchildPlaces: []\n\n}, {\n\nid: 12,\n\ntitle: 'Brazil',\n\nchildPlaces: []\n\n}, {\n\nid: 13,\n\ntitle: 'Barbados',\n\nchildPlaces: []\n\n}, {\n\nid: 14,\n\ntitle: 'Canada',\n\nchildPlaces: []\n\n}, {\n\nid: 15,\n\ntitle: 'Jamaica',\n\nchildPlaces: []\n\n}, {\n\nid: 16,\n\ntitle: 'Mexico',\n\nchildPlaces: []\n\n}, {\n\nid: 17,\n\ntitle: 'Trinidad and Tobago',\n\nchildPlaces: []\n\n}, {\n\nid: 18,\n\ntitle: 'Venezuela',\n\nchildPlaces: []\n\n}]\n\n}, {\n\nid: 19,\n\ntitle: 'Asia',\n\nchildPlaces: [{\n\nid: 20,\n\ntitle: 'China',\n\nchildPlaces: []\n\n}, {\n\nid: 21,\n\ntitle: 'Hong Kong',\n\nchildPlaces: []\n\n}, {\n\nid: 22,\n\ntitle: 'India',\n\nchildPlaces: []\n\n}, {\n\nid: 23,\n\ntitle: 'Singapore',\n\nchildPlaces: []\n\n}, {\n\nid: 24,\n\ntitle: 'South Korea',\n\nchildPlaces: []\n\n}, {\n\nid: 25,\n\ntitle: 'Thailand',\n\nchildPlaces: []\n\n}, {\n\nid: 26,\n\ntitle: 'Vietnam',\n\nchildPlaces: []\n\n}]\n\n}, {\n\nid: 27,\n\ntitle: 'Europe',","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"983":{"pageContent":"title: 'Singapore',\n\nchildPlaces: []\n\n}, {\n\nid: 24,\n\ntitle: 'South Korea',\n\nchildPlaces: []\n\n}, {\n\nid: 25,\n\ntitle: 'Thailand',\n\nchildPlaces: []\n\n}, {\n\nid: 26,\n\ntitle: 'Vietnam',\n\nchildPlaces: []\n\n}]\n\n}, {\n\nid: 27,\n\ntitle: 'Europe',\n\nchildPlaces: [{\n\nid: 28,\n\ntitle: 'Croatia',\n\nchildPlaces: [],\n\n}, {\n\nid: 29,\n\ntitle: 'France',\n\nchildPlaces: [],\n\n}, {\n\nid: 30,\n\ntitle: 'Germany',\n\nchildPlaces: [],\n\n}, {\n\nid: 31,\n\ntitle: 'Italy',\n\nchildPlaces: [],\n\n}, {\n\nid: 32,\n\ntitle: 'Portugal',\n\nchildPlaces: [],\n\n}, {\n\nid: 33,\n\ntitle: 'Spain',\n\nchildPlaces: [],\n\n}, {\n\nid: 34,\n\ntitle: 'Turkey',\n\nchildPlaces: [],\n\n}]\n\n}, {\n\nid: 35,\n\ntitle: 'Oceania',\n\nchildPlaces: [{\n\nid: 36,\n\ntitle: 'Australia',\n\nchildPlaces: [],\n\n}, {\n\nid: 37,\n\ntitle: 'Bora Bora (French Polynesia)',\n\nchildPlaces: [],\n\n}, {\n\nid: 38,\n\ntitle: 'Easter Island (Chile)',\n\nchildPlaces: [],\n\n}, {\n\nid: 39,\n\ntitle: 'Fiji',\n\nchildPlaces: [],\n\n}, {\n\nid: 40,\n\ntitle: 'Hawaii (the USA)',\n\nchildPlaces: [],\n\n}, {\n\nid: 41,\n\ntitle: 'New Zealand',\n\nchildPlaces: [],\n\n}, {\n\nid: 42,\n\ntitle: 'Vanuatu',\n\nchildPlaces: [],\n\n}]\n\n}]\n\n}, {\n\nid: 43,\n\ntitle: 'Moon',\n\nchildPlaces: [{\n\nid: 44,\n\ntitle: 'Rheita',\n\nchildPlaces: []\n\n}, {","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"984":{"pageContent":"childPlaces: [],\n\n}, {\n\nid: 41,\n\ntitle: 'New Zealand',\n\nchildPlaces: [],\n\n}, {\n\nid: 42,\n\ntitle: 'Vanuatu',\n\nchildPlaces: [],\n\n}]\n\n}]\n\n}, {\n\nid: 43,\n\ntitle: 'Moon',\n\nchildPlaces: [{\n\nid: 44,\n\ntitle: 'Rheita',\n\nchildPlaces: []\n\n}, {\n\nid: 45,\n\ntitle: 'Piccolomini',\n\nchildPlaces: []\n\n}, {\n\nid: 46,\n\ntitle: 'Tycho',\n\nchildPlaces: []\n\n}]\n\n}, {\n\nid: 47,\n\ntitle: 'Mars',\n\nchildPlaces: [{\n\nid: 48,\n\ntitle: 'Corn Town',\n\nchildPlaces: []\n\n}, {\n\nid: 49,\n\ntitle: 'Green Hill',\n\nchildPlaces: []\n\n}]\n\n}]\n\n};\n\n```\n\n</Sandpack>\n\nNow let's say you want to add a button to delete a place you've already visited. How would you go about it? [Updating nested state](/learn/updating-objects-in-state#updating-a-nested-object) involves making copies of objects all the way up from the part that changed. Deleting a deeply nested place would involve copying its entire parent place chain. Such code can be very verbose.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"985":{"pageContent":"*If the state is too nested to update easily, consider making it \"flat\".** Here is one way you can restructure this data. Instead of a tree-like structure where each `place` has an array of *its child places*, you can have each place hold an array of *its child place IDs*. Then you can store a mapping from each place ID to the corresponding place.\n\nThis data restructuring might remind you of seeing a database table:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { initialTravelPlan } from './places.js';\n\nfunction PlaceTree({ id, placesById }) {\n\nconst place = placesById[id];\n\nconst childIds = place.childIds;\n\nreturn (\n\n<li>\n\n{place.title}\n\n{childIds.length > 0 && (\n\n<ol>\n\n{childIds.map(childId => (\n\n<PlaceTree\n\nkey={childId}\n\nid={childId}\n\nplacesById={placesById}\n\n/>\n\n))}\n\n</ol>\n\n)}\n\n</li>\n\n);\n\n}\n\nexport default function TravelPlan() {\n\nconst [plan, setPlan] = useState(initialTravelPlan);\n\nconst root = plan[0];\n\nconst planetIds = root.childIds;\n\nreturn (\n\n<>\n\n<h2>Places to visit</h2>\n\n<ol>\n\n{planetIds.map(id => (\n\n<PlaceTree\n\nkey={id}","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"986":{"pageContent":"const [plan, setPlan] = useState(initialTravelPlan);\n\nconst root = plan[0];\n\nconst planetIds = root.childIds;\n\nreturn (\n\n<>\n\n<h2>Places to visit</h2>\n\n<ol>\n\n{planetIds.map(id => (\n\n<PlaceTree\n\nkey={id}\n\nid={id}\n\nplacesById={plan}\n\n/>\n\n))}\n\n</ol>\n\n</>\n\n);\n\n}\n\n```\n\n```js places.js active\n\nexport const initialTravelPlan = {\n\n0: {\n\nid: 0,\n\ntitle: '(Root)',\n\nchildIds: [1, 43, 47],\n\n},\n\n1: {\n\nid: 1,\n\ntitle: 'Earth',\n\nchildIds: [2, 10, 19, 27, 35]\n\n},\n\n2: {\n\nid: 2,\n\ntitle: 'Africa',\n\nchildIds: [3, 4, 5, 6 , 7, 8, 9]\n\n},\n\n3: {\n\nid: 3,\n\ntitle: 'Botswana',\n\nchildIds: []\n\n},\n\n4: {\n\nid: 4,\n\ntitle: 'Egypt',\n\nchildIds: []\n\n},\n\n5: {\n\nid: 5,\n\ntitle: 'Kenya',\n\nchildIds: []\n\n},\n\n6: {\n\nid: 6,\n\ntitle: 'Madagascar',\n\nchildIds: []\n\n},\n\n7: {\n\nid: 7,\n\ntitle: 'Morocco',\n\nchildIds: []\n\n},\n\n8: {\n\nid: 8,\n\ntitle: 'Nigeria',\n\nchildIds: []\n\n},\n\n9: {\n\nid: 9,\n\ntitle: 'South Africa',\n\nchildIds: []\n\n},\n\n10: {\n\nid: 10,\n\ntitle: 'Americas',\n\nchildIds: [11, 12, 13, 14, 15, 16, 17, 18],\n\n},\n\n11: {\n\nid: 11,\n\ntitle: 'Argentina',\n\nchildIds: []\n\n},\n\n12: {\n\nid: 12,\n\ntitle: 'Brazil',\n\nchildIds: []\n\n},\n\n13: {\n\nid: 13,\n\ntitle: 'Barbados',\n\nchildIds: []\n\n},\n\n14: {\n\nid: 14,\n\ntitle: 'Canada',\n\nchildIds: []\n\n},\n\n15: {","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"987":{"pageContent":"},\n\n11: {\n\nid: 11,\n\ntitle: 'Argentina',\n\nchildIds: []\n\n},\n\n12: {\n\nid: 12,\n\ntitle: 'Brazil',\n\nchildIds: []\n\n},\n\n13: {\n\nid: 13,\n\ntitle: 'Barbados',\n\nchildIds: []\n\n},\n\n14: {\n\nid: 14,\n\ntitle: 'Canada',\n\nchildIds: []\n\n},\n\n15: {\n\nid: 15,\n\ntitle: 'Jamaica',\n\nchildIds: []\n\n},\n\n16: {\n\nid: 16,\n\ntitle: 'Mexico',\n\nchildIds: []\n\n},\n\n17: {\n\nid: 17,\n\ntitle: 'Trinidad and Tobago',\n\nchildIds: []\n\n},\n\n18: {\n\nid: 18,\n\ntitle: 'Venezuela',\n\nchildIds: []\n\n},\n\n19: {\n\nid: 19,\n\ntitle: 'Asia',\n\nchildIds: [20, 21, 22, 23, 24, 25, 26],\n\n},\n\n20: {\n\nid: 20,\n\ntitle: 'China',\n\nchildIds: []\n\n},\n\n21: {\n\nid: 21,\n\ntitle: 'Hong Kong',\n\nchildIds: []\n\n},\n\n22: {\n\nid: 22,\n\ntitle: 'India',\n\nchildIds: []\n\n},\n\n23: {\n\nid: 23,\n\ntitle: 'Singapore',\n\nchildIds: []\n\n},\n\n24: {\n\nid: 24,\n\ntitle: 'South Korea',\n\nchildIds: []\n\n},\n\n25: {\n\nid: 25,\n\ntitle: 'Thailand',\n\nchildIds: []\n\n},\n\n26: {\n\nid: 26,\n\ntitle: 'Vietnam',\n\nchildIds: []\n\n},\n\n27: {\n\nid: 27,\n\ntitle: 'Europe',\n\nchildIds: [28, 29, 30, 31, 32, 33, 34],\n\n},\n\n28: {\n\nid: 28,\n\ntitle: 'Croatia',\n\nchildIds: []\n\n},\n\n29: {\n\nid: 29,\n\ntitle: 'France',\n\nchildIds: []\n\n},\n\n30: {\n\nid: 30,\n\ntitle: 'Germany',\n\nchildIds: []\n\n},\n\n31: {\n\nid: 31,\n\ntitle: 'Italy',\n\nchildIds: []\n\n},\n\n32: {\n\nid: 32,","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"988":{"pageContent":"},\n\n28: {\n\nid: 28,\n\ntitle: 'Croatia',\n\nchildIds: []\n\n},\n\n29: {\n\nid: 29,\n\ntitle: 'France',\n\nchildIds: []\n\n},\n\n30: {\n\nid: 30,\n\ntitle: 'Germany',\n\nchildIds: []\n\n},\n\n31: {\n\nid: 31,\n\ntitle: 'Italy',\n\nchildIds: []\n\n},\n\n32: {\n\nid: 32,\n\ntitle: 'Portugal',\n\nchildIds: []\n\n},\n\n33: {\n\nid: 33,\n\ntitle: 'Spain',\n\nchildIds: []\n\n},\n\n34: {\n\nid: 34,\n\ntitle: 'Turkey',\n\nchildIds: []\n\n},\n\n35: {\n\nid: 35,\n\ntitle: 'Oceania',\n\nchildIds: [36, 37, 38, 39, 40, 41, 42],\n\n},\n\n36: {\n\nid: 36,\n\ntitle: 'Australia',\n\nchildIds: []\n\n},\n\n37: {\n\nid: 37,\n\ntitle: 'Bora Bora (French Polynesia)',\n\nchildIds: []\n\n},\n\n38: {\n\nid: 38,\n\ntitle: 'Easter Island (Chile)',\n\nchildIds: []\n\n},\n\n39: {\n\nid: 39,\n\ntitle: 'Fiji',\n\nchildIds: []\n\n},\n\n40: {\n\nid: 40,\n\ntitle: 'Hawaii (the USA)',\n\nchildIds: []\n\n},\n\n41: {\n\nid: 41,\n\ntitle: 'New Zealand',\n\nchildIds: []\n\n},\n\n42: {\n\nid: 42,\n\ntitle: 'Vanuatu',\n\nchildIds: []\n\n},\n\n43: {\n\nid: 43,\n\ntitle: 'Moon',\n\nchildIds: [44, 45, 46]\n\n},\n\n44: {\n\nid: 44,\n\ntitle: 'Rheita',\n\nchildIds: []\n\n},\n\n45: {\n\nid: 45,\n\ntitle: 'Piccolomini',\n\nchildIds: []\n\n},\n\n46: {\n\nid: 46,\n\ntitle: 'Tycho',\n\nchildIds: []\n\n},\n\n47: {\n\nid: 47,\n\ntitle: 'Mars',\n\nchildIds: [48, 49]\n\n},\n\n48: {\n\nid: 48,\n\ntitle: 'Corn Town',\n\nchildIds: []\n\n},\n\n49: {\n\nid: 49,","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"989":{"pageContent":"},\n\n45: {\n\nid: 45,\n\ntitle: 'Piccolomini',\n\nchildIds: []\n\n},\n\n46: {\n\nid: 46,\n\ntitle: 'Tycho',\n\nchildIds: []\n\n},\n\n47: {\n\nid: 47,\n\ntitle: 'Mars',\n\nchildIds: [48, 49]\n\n},\n\n48: {\n\nid: 48,\n\ntitle: 'Corn Town',\n\nchildIds: []\n\n},\n\n49: {\n\nid: 49,\n\ntitle: 'Green Hill',\n\nchildIds: []\n\n}\n\n};\n\n```\n\n</Sandpack>\n\n*Now that the state is \"flat\" (also known as \"normalized\"), updating nested items becomes easier.**\n\nIn order to remove a place now, you only need to update two levels of state:\n\nThe updated version of its *parent* place should exclude the removed ID from its `childIds` array.\n\nThe updated version of the root \"table\" object should include the updated version of the parent place.\n\nHere is an example of how you could go about it:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { initialTravelPlan } from './places.js';\n\nexport default function TravelPlan() {\n\nconst [plan, setPlan] = useState(initialTravelPlan);\n\nfunction handleComplete(parentId, childId) {\n\nconst parent = plan[parentId];\n\n// Create a new version of the parent place","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"990":{"pageContent":"const [plan, setPlan] = useState(initialTravelPlan);\n\nfunction handleComplete(parentId, childId) {\n\nconst parent = plan[parentId];\n\n// Create a new version of the parent place\n\n// that doesn't include this child ID.\n\nconst nextParent = {\n\n...parent,\n\nchildIds: parent.childIds\n\n.filter(id => id !== childId)\n\n};\n\n// Update the root state object...\n\nsetPlan({\n\n...plan,\n\n// ...so that it has the updated parent.\n\n[parentId]: nextParent\n\n});\n\n}\n\nconst root = plan[0];\n\nconst planetIds = root.childIds;\n\nreturn (\n\n<>\n\n<h2>Places to visit</h2>\n\n<ol>\n\n{planetIds.map(id => (\n\n<PlaceTree\n\nkey={id}\n\nid={id}\n\nparentId={0}\n\nplacesById={plan}\n\nonComplete={handleComplete}\n\n/>\n\n))}\n\n</ol>\n\n</>\n\n);\n\n}\n\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\n\nconst place = placesById[id];\n\nconst childIds = place.childIds;\n\nreturn (\n\n<li>\n\n{place.title}\n\n<button onClick={() => {\n\nonComplete(parentId, id);\n\n}}>\n\nComplete\n\n</button>\n\n{childIds.length > 0 &&\n\n<ol>\n\n{childIds.map(childId => (\n\n<PlaceTree\n\nkey={childId}\n\nid={childId}\n\nparentId={id}\n\nplacesById={placesById}\n\nonComplete={onComplete}\n\n/>\n\n))}\n\n</ol>\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"991":{"pageContent":"}}>\n\nComplete\n\n</button>\n\n{childIds.length > 0 &&\n\n<ol>\n\n{childIds.map(childId => (\n\n<PlaceTree\n\nkey={childId}\n\nid={childId}\n\nparentId={id}\n\nplacesById={placesById}\n\nonComplete={onComplete}\n\n/>\n\n))}\n\n</ol>\n\n}\n\n</li>\n\n);\n\n}\n\n```\n\n```js places.js\n\nexport const initialTravelPlan = {\n\n0: {\n\nid: 0,\n\ntitle: '(Root)',\n\nchildIds: [1, 43, 47],\n\n},\n\n1: {\n\nid: 1,\n\ntitle: 'Earth',\n\nchildIds: [2, 10, 19, 27, 35]\n\n},\n\n2: {\n\nid: 2,\n\ntitle: 'Africa',\n\nchildIds: [3, 4, 5, 6 , 7, 8, 9]\n\n},\n\n3: {\n\nid: 3,\n\ntitle: 'Botswana',\n\nchildIds: []\n\n},\n\n4: {\n\nid: 4,\n\ntitle: 'Egypt',\n\nchildIds: []\n\n},\n\n5: {\n\nid: 5,\n\ntitle: 'Kenya',\n\nchildIds: []\n\n},\n\n6: {\n\nid: 6,\n\ntitle: 'Madagascar',\n\nchildIds: []\n\n},\n\n7: {\n\nid: 7,\n\ntitle: 'Morocco',\n\nchildIds: []\n\n},\n\n8: {\n\nid: 8,\n\ntitle: 'Nigeria',\n\nchildIds: []\n\n},\n\n9: {\n\nid: 9,\n\ntitle: 'South Africa',\n\nchildIds: []\n\n},\n\n10: {\n\nid: 10,\n\ntitle: 'Americas',\n\nchildIds: [11, 12, 13, 14, 15, 16, 17, 18],\n\n},\n\n11: {\n\nid: 11,\n\ntitle: 'Argentina',\n\nchildIds: []\n\n},\n\n12: {\n\nid: 12,\n\ntitle: 'Brazil',\n\nchildIds: []\n\n},\n\n13: {\n\nid: 13,\n\ntitle: 'Barbados',\n\nchildIds: []\n\n},\n\n14: {\n\nid: 14,\n\ntitle: 'Canada',\n\nchildIds: []\n\n},\n\n15: {\n\nid: 15,\n\ntitle: 'Jamaica',\n\nchildIds: []\n\n},\n\n16: {\n\nid: 16,","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"992":{"pageContent":"childIds: []\n\n},\n\n12: {\n\nid: 12,\n\ntitle: 'Brazil',\n\nchildIds: []\n\n},\n\n13: {\n\nid: 13,\n\ntitle: 'Barbados',\n\nchildIds: []\n\n},\n\n14: {\n\nid: 14,\n\ntitle: 'Canada',\n\nchildIds: []\n\n},\n\n15: {\n\nid: 15,\n\ntitle: 'Jamaica',\n\nchildIds: []\n\n},\n\n16: {\n\nid: 16,\n\ntitle: 'Mexico',\n\nchildIds: []\n\n},\n\n17: {\n\nid: 17,\n\ntitle: 'Trinidad and Tobago',\n\nchildIds: []\n\n},\n\n18: {\n\nid: 18,\n\ntitle: 'Venezuela',\n\nchildIds: []\n\n},\n\n19: {\n\nid: 19,\n\ntitle: 'Asia',\n\nchildIds: [20, 21, 22, 23, 24, 25, 26],\n\n},\n\n20: {\n\nid: 20,\n\ntitle: 'China',\n\nchildIds: []\n\n},\n\n21: {\n\nid: 21,\n\ntitle: 'Hong Kong',\n\nchildIds: []\n\n},\n\n22: {\n\nid: 22,\n\ntitle: 'India',\n\nchildIds: []\n\n},\n\n23: {\n\nid: 23,\n\ntitle: 'Singapore',\n\nchildIds: []\n\n},\n\n24: {\n\nid: 24,\n\ntitle: 'South Korea',\n\nchildIds: []\n\n},\n\n25: {\n\nid: 25,\n\ntitle: 'Thailand',\n\nchildIds: []\n\n},\n\n26: {\n\nid: 26,\n\ntitle: 'Vietnam',\n\nchildIds: []\n\n},\n\n27: {\n\nid: 27,\n\ntitle: 'Europe',\n\nchildIds: [28, 29, 30, 31, 32, 33, 34],\n\n},\n\n28: {\n\nid: 28,\n\ntitle: 'Croatia',\n\nchildIds: []\n\n},\n\n29: {\n\nid: 29,\n\ntitle: 'France',\n\nchildIds: []\n\n},\n\n30: {\n\nid: 30,\n\ntitle: 'Germany',\n\nchildIds: []\n\n},\n\n31: {\n\nid: 31,\n\ntitle: 'Italy',\n\nchildIds: []\n\n},\n\n32: {\n\nid: 32,\n\ntitle: 'Portugal',\n\nchildIds: []\n\n},\n\n33: {\n\nid: 33,","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"993":{"pageContent":"childIds: []\n\n},\n\n29: {\n\nid: 29,\n\ntitle: 'France',\n\nchildIds: []\n\n},\n\n30: {\n\nid: 30,\n\ntitle: 'Germany',\n\nchildIds: []\n\n},\n\n31: {\n\nid: 31,\n\ntitle: 'Italy',\n\nchildIds: []\n\n},\n\n32: {\n\nid: 32,\n\ntitle: 'Portugal',\n\nchildIds: []\n\n},\n\n33: {\n\nid: 33,\n\ntitle: 'Spain',\n\nchildIds: []\n\n},\n\n34: {\n\nid: 34,\n\ntitle: 'Turkey',\n\nchildIds: []\n\n},\n\n35: {\n\nid: 35,\n\ntitle: 'Oceania',\n\nchildIds: [36, 37, 38, 39, 40, 41,, 42],\n\n},\n\n36: {\n\nid: 36,\n\ntitle: 'Australia',\n\nchildIds: []\n\n},\n\n37: {\n\nid: 37,\n\ntitle: 'Bora Bora (French Polynesia)',\n\nchildIds: []\n\n},\n\n38: {\n\nid: 38,\n\ntitle: 'Easter Island (Chile)',\n\nchildIds: []\n\n},\n\n39: {\n\nid: 39,\n\ntitle: 'Fiji',\n\nchildIds: []\n\n},\n\n40: {\n\nid: 40,\n\ntitle: 'Hawaii (the USA)',\n\nchildIds: []\n\n},\n\n41: {\n\nid: 41,\n\ntitle: 'New Zealand',\n\nchildIds: []\n\n},\n\n42: {\n\nid: 42,\n\ntitle: 'Vanuatu',\n\nchildIds: []\n\n},\n\n43: {\n\nid: 43,\n\ntitle: 'Moon',\n\nchildIds: [44, 45, 46]\n\n},\n\n44: {\n\nid: 44,\n\ntitle: 'Rheita',\n\nchildIds: []\n\n},\n\n45: {\n\nid: 45,\n\ntitle: 'Piccolomini',\n\nchildIds: []\n\n},\n\n46: {\n\nid: 46,\n\ntitle: 'Tycho',\n\nchildIds: []\n\n},\n\n47: {\n\nid: 47,\n\ntitle: 'Mars',\n\nchildIds: [48, 49]\n\n},\n\n48: {\n\nid: 48,\n\ntitle: 'Corn Town',\n\nchildIds: []\n\n},\n\n49: {\n\nid: 49,\n\ntitle: 'Green Hill',","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"994":{"pageContent":"title: 'Piccolomini',\n\nchildIds: []\n\n},\n\n46: {\n\nid: 46,\n\ntitle: 'Tycho',\n\nchildIds: []\n\n},\n\n47: {\n\nid: 47,\n\ntitle: 'Mars',\n\nchildIds: [48, 49]\n\n},\n\n48: {\n\nid: 48,\n\ntitle: 'Corn Town',\n\nchildIds: []\n\n},\n\n49: {\n\nid: 49,\n\ntitle: 'Green Hill',\n\nchildIds: []\n\n}\n\n};\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\nYou can nest state as much as you like, but making it \"flat\" can solve numerous problems. It makes state easier to update, and it helps ensure you don't have duplication in different parts of a nested object.\n\n<DeepDive>\n\n#### Improving memory usage {/*improving-memory-usage*/}\n\nIdeally, you would also remove the deleted items (and their children!) from the \"table\" object to improve memory usage. This version does that. It also [uses Immer](/learn/updating-objects-in-state#write-concise-update-logic-with-immer) to make the update logic more concise.\n\n<Sandpack>\n\n```js\n\nimport { useImmer } from 'use-immer';\n\nimport { initialTravelPlan } from './places.js';\n\nexport default function TravelPlan() {","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"995":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useImmer } from 'use-immer';\n\nimport { initialTravelPlan } from './places.js';\n\nexport default function TravelPlan() {\n\nconst [plan, updatePlan] = useImmer(initialTravelPlan);\n\nfunction handleComplete(parentId, childId) {\n\nupdatePlan(draft => {\n\n// Remove from the parent place's child IDs.\n\nconst parent = draft[parentId];\n\nparent.childIds = parent.childIds\n\n.filter(id => id !== childId);\n\n// Forget this place and all its subtree.\n\ndeleteAllChildren(childId);\n\nfunction deleteAllChildren(id) {\n\nconst place = draft[id];\n\nplace.childIds.forEach(deleteAllChildren);\n\ndelete draft[id];\n\n}\n\n});\n\n}\n\nconst root = plan[0];\n\nconst planetIds = root.childIds;\n\nreturn (\n\n<>\n\n<h2>Places to visit</h2>\n\n<ol>\n\n{planetIds.map(id => (\n\n<PlaceTree\n\nkey={id}\n\nid={id}\n\nparentId={0}\n\nplacesById={plan}\n\nonComplete={handleComplete}\n\n/>\n\n))}\n\n</ol>\n\n</>\n\n);\n\n}\n\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\n\nconst place = placesById[id];\n\nconst childIds = place.childIds;\n\nreturn (\n\n<li>\n\n{place.title}\n\n<button onClick={() => {\n\nonComplete(parentId, id);\n\n}}>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"996":{"pageContent":"function PlaceTree({ id, parentId, placesById, onComplete }) {\n\nconst place = placesById[id];\n\nconst childIds = place.childIds;\n\nreturn (\n\n<li>\n\n{place.title}\n\n<button onClick={() => {\n\nonComplete(parentId, id);\n\n}}>\n\nComplete\n\n</button>\n\n{childIds.length > 0 &&\n\n<ol>\n\n{childIds.map(childId => (\n\n<PlaceTree\n\nkey={childId}\n\nid={childId}\n\nparentId={id}\n\nplacesById={placesById}\n\nonComplete={onComplete}\n\n/>\n\n))}\n\n</ol>\n\n}\n\n</li>\n\n);\n\n}\n\n```\n\n```js places.js\n\nexport const initialTravelPlan = {\n\n0: {\n\nid: 0,\n\ntitle: '(Root)',\n\nchildIds: [1, 43, 47],\n\n},\n\n1: {\n\nid: 1,\n\ntitle: 'Earth',\n\nchildIds: [2, 10, 19, 27, 35]\n\n},\n\n2: {\n\nid: 2,\n\ntitle: 'Africa',\n\nchildIds: [3, 4, 5, 6 , 7, 8, 9]\n\n},\n\n3: {\n\nid: 3,\n\ntitle: 'Botswana',\n\nchildIds: []\n\n},\n\n4: {\n\nid: 4,\n\ntitle: 'Egypt',\n\nchildIds: []\n\n},\n\n5: {\n\nid: 5,\n\ntitle: 'Kenya',\n\nchildIds: []\n\n},\n\n6: {\n\nid: 6,\n\ntitle: 'Madagascar',\n\nchildIds: []\n\n},\n\n7: {\n\nid: 7,\n\ntitle: 'Morocco',\n\nchildIds: []\n\n},\n\n8: {\n\nid: 8,\n\ntitle: 'Nigeria',\n\nchildIds: []\n\n},\n\n9: {\n\nid: 9,\n\ntitle: 'South Africa',\n\nchildIds: []\n\n},\n\n10: {\n\nid: 10,\n\ntitle: 'Americas',\n\nchildIds: [11, 12, 13, 14, 15, 16, 17, 18],\n\n},\n\n11: {\n\nid: 11,\n\ntitle: 'Argentina',","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"997":{"pageContent":"},\n\n8: {\n\nid: 8,\n\ntitle: 'Nigeria',\n\nchildIds: []\n\n},\n\n9: {\n\nid: 9,\n\ntitle: 'South Africa',\n\nchildIds: []\n\n},\n\n10: {\n\nid: 10,\n\ntitle: 'Americas',\n\nchildIds: [11, 12, 13, 14, 15, 16, 17, 18],\n\n},\n\n11: {\n\nid: 11,\n\ntitle: 'Argentina',\n\nchildIds: []\n\n},\n\n12: {\n\nid: 12,\n\ntitle: 'Brazil',\n\nchildIds: []\n\n},\n\n13: {\n\nid: 13,\n\ntitle: 'Barbados',\n\nchildIds: []\n\n},\n\n14: {\n\nid: 14,\n\ntitle: 'Canada',\n\nchildIds: []\n\n},\n\n15: {\n\nid: 15,\n\ntitle: 'Jamaica',\n\nchildIds: []\n\n},\n\n16: {\n\nid: 16,\n\ntitle: 'Mexico',\n\nchildIds: []\n\n},\n\n17: {\n\nid: 17,\n\ntitle: 'Trinidad and Tobago',\n\nchildIds: []\n\n},\n\n18: {\n\nid: 18,\n\ntitle: 'Venezuela',\n\nchildIds: []\n\n},\n\n19: {\n\nid: 19,\n\ntitle: 'Asia',\n\nchildIds: [20, 21, 22, 23, 24, 25, 26],\n\n},\n\n20: {\n\nid: 20,\n\ntitle: 'China',\n\nchildIds: []\n\n},\n\n21: {\n\nid: 21,\n\ntitle: 'Hong Kong',\n\nchildIds: []\n\n},\n\n22: {\n\nid: 22,\n\ntitle: 'India',\n\nchildIds: []\n\n},\n\n23: {\n\nid: 23,\n\ntitle: 'Singapore',\n\nchildIds: []\n\n},\n\n24: {\n\nid: 24,\n\ntitle: 'South Korea',\n\nchildIds: []\n\n},\n\n25: {\n\nid: 25,\n\ntitle: 'Thailand',\n\nchildIds: []\n\n},\n\n26: {\n\nid: 26,\n\ntitle: 'Vietnam',\n\nchildIds: []\n\n},\n\n27: {\n\nid: 27,\n\ntitle: 'Europe',\n\nchildIds: [28, 29, 30, 31, 32, 33, 34],\n\n},\n\n28: {\n\nid: 28,\n\ntitle: 'Croatia',","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"998":{"pageContent":"childIds: []\n\n},\n\n25: {\n\nid: 25,\n\ntitle: 'Thailand',\n\nchildIds: []\n\n},\n\n26: {\n\nid: 26,\n\ntitle: 'Vietnam',\n\nchildIds: []\n\n},\n\n27: {\n\nid: 27,\n\ntitle: 'Europe',\n\nchildIds: [28, 29, 30, 31, 32, 33, 34],\n\n},\n\n28: {\n\nid: 28,\n\ntitle: 'Croatia',\n\nchildIds: []\n\n},\n\n29: {\n\nid: 29,\n\ntitle: 'France',\n\nchildIds: []\n\n},\n\n30: {\n\nid: 30,\n\ntitle: 'Germany',\n\nchildIds: []\n\n},\n\n31: {\n\nid: 31,\n\ntitle: 'Italy',\n\nchildIds: []\n\n},\n\n32: {\n\nid: 32,\n\ntitle: 'Portugal',\n\nchildIds: []\n\n},\n\n33: {\n\nid: 33,\n\ntitle: 'Spain',\n\nchildIds: []\n\n},\n\n34: {\n\nid: 34,\n\ntitle: 'Turkey',\n\nchildIds: []\n\n},\n\n35: {\n\nid: 35,\n\ntitle: 'Oceania',\n\nchildIds: [36, 37, 38, 39, 40, 41,, 42],\n\n},\n\n36: {\n\nid: 36,\n\ntitle: 'Australia',\n\nchildIds: []\n\n},\n\n37: {\n\nid: 37,\n\ntitle: 'Bora Bora (French Polynesia)',\n\nchildIds: []\n\n},\n\n38: {\n\nid: 38,\n\ntitle: 'Easter Island (Chile)',\n\nchildIds: []\n\n},\n\n39: {\n\nid: 39,\n\ntitle: 'Fiji',\n\nchildIds: []\n\n},\n\n40: {\n\nid: 40,\n\ntitle: 'Hawaii (the USA)',\n\nchildIds: []\n\n},\n\n41: {\n\nid: 41,\n\ntitle: 'New Zealand',\n\nchildIds: []\n\n},\n\n42: {\n\nid: 42,\n\ntitle: 'Vanuatu',\n\nchildIds: []\n\n},\n\n43: {\n\nid: 43,\n\ntitle: 'Moon',\n\nchildIds: [44, 45, 46]\n\n},\n\n44: {\n\nid: 44,\n\ntitle: 'Rheita',\n\nchildIds: []\n\n},\n\n45: {\n\nid: 45,","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"999":{"pageContent":"},\n\n41: {\n\nid: 41,\n\ntitle: 'New Zealand',\n\nchildIds: []\n\n},\n\n42: {\n\nid: 42,\n\ntitle: 'Vanuatu',\n\nchildIds: []\n\n},\n\n43: {\n\nid: 43,\n\ntitle: 'Moon',\n\nchildIds: [44, 45, 46]\n\n},\n\n44: {\n\nid: 44,\n\ntitle: 'Rheita',\n\nchildIds: []\n\n},\n\n45: {\n\nid: 45,\n\ntitle: 'Piccolomini',\n\nchildIds: []\n\n},\n\n46: {\n\nid: 46,\n\ntitle: 'Tycho',\n\nchildIds: []\n\n},\n\n47: {\n\nid: 47,\n\ntitle: 'Mars',\n\nchildIds: [48, 49]\n\n},\n\n48: {\n\nid: 48,\n\ntitle: 'Corn Town',\n\nchildIds: []\n\n},\n\n49: {\n\nid: 49,\n\ntitle: 'Green Hill',\n\nchildIds: []\n\n}\n\n};\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n</DeepDive>\n\nSometimes, you can also reduce state nesting by moving some of the nested state into the child components. This works well for ephemeral UI state that doesn't need to be stored, like whether an item is hovered.\n\n<Recap>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1000":{"pageContent":"<Recap>\n\nIf two state variables always update together, consider merging them into one.\n\nChoose your state variables carefully to avoid creating \"impossible\" states.\n\nStructure your state in a way that reduces the chances that you'll make a mistake updating it.\n\nAvoid redundant and duplicate state so that you don't need to keep it in sync.\n\nDon't put props *into* state unless you specifically want to prevent updates.\n\nFor UI patterns like selection, keep ID or index in state instead of the object itself.\n\nIf updating deeply nested state is complicated, try flattening it.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a component that's not updating {/*fix-a-component-thats-not-updating*/}\n\nThis `Clock` component receives two props: `color` and `time`. When you select a different color in the select box, the `Clock` component receives a different `color` prop from its parent component. However, for some reason, the displayed color doesn't update. Why? Fix the problem.\n\n<Sandpack>\n\n```js Clock.js active","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1001":{"pageContent":"<Sandpack>\n\n```js Clock.js active\n\nimport { useState } from 'react';\n\nexport default function Clock(props) {\n\nconst [color, setColor] = useState(props.color);\n\nreturn (\n\n<h1 style={{ color: color }}>\n\n{props.time}\n\n</h1>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nconst [color, setColor] = useState('lightcoral');\n\nreturn (\n\n<div>\n\n<p>\n\nPick a color:{' '}\n\n<select value={color} onChange={e => setColor(e.target.value)}>\n\n<option value=\"lightcoral\">lightcoral</option>\n\n<option value=\"midnightblue\">midnightblue</option>\n\n<option value=\"rebeccapurple\">rebeccapurple</option>\n\n</select>\n\n</p>\n\n<Clock color={color} time={time.toLocaleTimeString()} />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1002":{"pageContent":"<option value=\"rebeccapurple\">rebeccapurple</option>\n\n</select>\n\n</p>\n\n<Clock color={color} time={time.toLocaleTimeString()} />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe issue is that this component has `color` state initialized with the initial value of the `color` prop. But when the `color` prop changes, this does not affect the state variable! So they get out of sync. To fix this issue, remove the state variable altogether, and use the `color` prop directly.\n\n<Sandpack>\n\n```js Clock.js active\n\nimport { useState } from 'react';\n\nexport default function Clock(props) {\n\nreturn (\n\n<h1 style={{ color: props.color }}>\n\n{props.time}\n\n</h1>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1003":{"pageContent":"useEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nconst [color, setColor] = useState('lightcoral');\n\nreturn (\n\n<div>\n\n<p>\n\nPick a color:{' '}\n\n<select value={color} onChange={e => setColor(e.target.value)}>\n\n<option value=\"lightcoral\">lightcoral</option>\n\n<option value=\"midnightblue\">midnightblue</option>\n\n<option value=\"rebeccapurple\">rebeccapurple</option>\n\n</select>\n\n</p>\n\n<Clock color={color} time={time.toLocaleTimeString()} />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nOr, using the destructuring syntax:\n\n<Sandpack>\n\n```js Clock.js active\n\nimport { useState } from 'react';\n\nexport default function Clock({ color, time }) {\n\nreturn (\n\n<h1 style={{ color: color }}>\n\n{time}\n\n</h1>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1004":{"pageContent":"import { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nconst [color, setColor] = useState('lightcoral');\n\nreturn (\n\n<div>\n\n<p>\n\nPick a color:{' '}\n\n<select value={color} onChange={e => setColor(e.target.value)}>\n\n<option value=\"lightcoral\">lightcoral</option>\n\n<option value=\"midnightblue\">midnightblue</option>\n\n<option value=\"rebeccapurple\">rebeccapurple</option>\n\n</select>\n\n</p>\n\n<Clock color={color} time={time.toLocaleTimeString()} />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix a broken packing list {/*fix-a-broken-packing-list*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1005":{"pageContent":"</select>\n\n</p>\n\n<Clock color={color} time={time.toLocaleTimeString()} />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix a broken packing list {/*fix-a-broken-packing-list*/}\n\nThis packing list has a footer that shows how many items are packed, and how many items there are overall. It seems to work at first, but it is buggy. For example, if you mark an item as packed and then delete it, the counter will not be updated correctly. Fix the counter so that it's always correct.\n\n<Hint>\n\nIs any state in this example redundant?\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AddItem from './AddItem.js';\n\nimport PackingList from './PackingList.js';\n\nlet nextId = 3;\n\nconst initialItems = [\n\n{ id: 0, title: 'Warm socks', packed: true },\n\n{ id: 1, title: 'Travel journal', packed: false },\n\n{ id: 2, title: 'Watercolors', packed: false },\n\n];\n\nexport default function TravelPlan() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst [total, setTotal] = useState(3);\n\nconst [packed, setPacked] = useState(1);","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1006":{"pageContent":"];\n\nexport default function TravelPlan() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst [total, setTotal] = useState(3);\n\nconst [packed, setPacked] = useState(1);\n\nfunction handleAddItem(title) {\n\nsetTotal(total + 1);\n\nsetItems([\n\n...items,\n\n{\n\nid: nextId++,\n\ntitle: title,\n\npacked: false\n\n}\n\n]);\n\n}\n\nfunction handleChangeItem(nextItem) {\n\nif (nextItem.packed) {\n\nsetPacked(packed + 1);\n\n} else {\n\nsetPacked(packed - 1);\n\n}\n\nsetItems(items.map(item => {\n\nif (item.id === nextItem.id) {\n\nreturn nextItem;\n\n} else {\n\nreturn item;\n\n}\n\n}));\n\n}\n\nfunction handleDeleteItem(itemId) {\n\nsetTotal(total - 1);\n\nsetItems(\n\nitems.filter(item => item.id !== itemId)\n\n);\n\n}\n\nreturn (\n\n<>\n\n<AddItem\n\nonAddItem={handleAddItem}\n\n/>\n\n<PackingList\n\nitems={items}\n\nonChangeItem={handleChangeItem}\n\nonDeleteItem={handleDeleteItem}\n\n/>\n\n<hr />\n\n<b>{packed} out of {total} packed!</b>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddItem.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddItem({ onAddItem }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add item\"\n\nvalue={title}","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1007":{"pageContent":");\n\n}\n\n```\n\n```js AddItem.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddItem({ onAddItem }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add item\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddItem(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js PackingList.js hidden\n\nimport { useState } from 'react';\n\nexport default function PackingList({\n\nitems,\n\nonChangeItem,\n\nonDeleteItem\n\n}) {\n\nreturn (\n\n<ul>\n\n{items.map(item => (\n\n<li key={item.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={item.packed}\n\nonChange={e => {\n\nonChangeItem({\n\n...item,\n\npacked: e.target.checked\n\n});\n\n}}\n\n/>\n\n{' '}\n\n{item.title}\n\n</label>\n\n<button onClick={() => onDeleteItem(item.id)}>\n\nDelete\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1008":{"pageContent":"<button onClick={() => onDeleteItem(item.id)}>\n\nDelete\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nAlthough you could carefully change each event handler to update the `total` and `packed` counters correctly, the root problem is that these state variables exist at all. They are redundant because you can always calculate the number of items (packed or total) from the `items` array itself. Remove the redundant state to fix the bug:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AddItem from './AddItem.js';\n\nimport PackingList from './PackingList.js';\n\nlet nextId = 3;\n\nconst initialItems = [\n\n{ id: 0, title: 'Warm socks', packed: true },\n\n{ id: 1, title: 'Travel journal', packed: false },\n\n{ id: 2, title: 'Watercolors', packed: false },\n\n];\n\nexport default function TravelPlan() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst total = items.length;\n\nconst packed = items","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1009":{"pageContent":"{ id: 2, title: 'Watercolors', packed: false },\n\n];\n\nexport default function TravelPlan() {\n\nconst [items, setItems] = useState(initialItems);\n\nconst total = items.length;\n\nconst packed = items\n\n.filter(item => item.packed)\n\n.length;\n\nfunction handleAddItem(title) {\n\nsetItems([\n\n...items,\n\n{\n\nid: nextId++,\n\ntitle: title,\n\npacked: false\n\n}\n\n]);\n\n}\n\nfunction handleChangeItem(nextItem) {\n\nsetItems(items.map(item => {\n\nif (item.id === nextItem.id) {\n\nreturn nextItem;\n\n} else {\n\nreturn item;\n\n}\n\n}));\n\n}\n\nfunction handleDeleteItem(itemId) {\n\nsetItems(\n\nitems.filter(item => item.id !== itemId)\n\n);\n\n}\n\nreturn (\n\n<>\n\n<AddItem\n\nonAddItem={handleAddItem}\n\n/>\n\n<PackingList\n\nitems={items}\n\nonChangeItem={handleChangeItem}\n\nonDeleteItem={handleDeleteItem}\n\n/>\n\n<hr />\n\n<b>{packed} out of {total} packed!</b>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddItem.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddItem({ onAddItem }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add item\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1010":{"pageContent":"const [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add item\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddItem(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js PackingList.js hidden\n\nimport { useState } from 'react';\n\nexport default function PackingList({\n\nitems,\n\nonChangeItem,\n\nonDeleteItem\n\n}) {\n\nreturn (\n\n<ul>\n\n{items.map(item => (\n\n<li key={item.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={item.packed}\n\nonChange={e => {\n\nonChangeItem({\n\n...item,\n\npacked: e.target.checked\n\n});\n\n}}\n\n/>\n\n{' '}\n\n{item.title}\n\n</label>\n\n<button onClick={() => onDeleteItem(item.id)}>\n\nDelete\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\nNotice how the event handlers are only concerned with calling `setItems` after this change. The item counts are now calculated during the next render from `items`, so they are always up-to-date.\n\n</Solution>\n\n#### Fix the disappearing selection {/*fix-the-disappearing-selection*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1011":{"pageContent":"</Solution>\n\n#### Fix the disappearing selection {/*fix-the-disappearing-selection*/}\n\nThere is a list of `letters` in state. When you hover or focus a particular letter, it gets highlighted. The currently highlighted letter is stored in the `highlightedLetter` state variable. You can \"star\" and \"unstar\" individual letters, which updates the `letters` array in state.\n\nThis code works, but there is a minor UI glitch. When you press \"Star\" or \"Unstar\", the highlighting disappears for a moment. However, it reappears as soon as you move your pointer or switch to another letter with keyboard. Why is this happening? Fix it so that the highlighting doesn't disappear after the button click.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { initialLetters } from './data.js';\n\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n\nconst [letters, setLetters] = useState(initialLetters);\n\nconst [highlightedLetter, setHighlightedLetter] = useState(null);","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1012":{"pageContent":"import Letter from './Letter.js';\n\nexport default function MailClient() {\n\nconst [letters, setLetters] = useState(initialLetters);\n\nconst [highlightedLetter, setHighlightedLetter] = useState(null);\n\nfunction handleHover(letter) {\n\nsetHighlightedLetter(letter);\n\n}\n\nfunction handleStar(starred) {\n\nsetLetters(letters.map(letter => {\n\nif (letter.id === starred.id) {\n\nreturn {\n\n...letter,\n\nisStarred: !letter.isStarred\n\n};\n\n} else {\n\nreturn letter;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>\n\n{letters.map(letter => (\n\n<Letter\n\nkey={letter.id}\n\nletter={letter}\n\nisHighlighted={\n\nletter === highlightedLetter\n\n}\n\nonHover={handleHover}\n\nonToggleStar={handleStar}\n\n/>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js Letter.js\n\nexport default function Letter({\n\nletter,\n\nisHighlighted,\n\nonHover,\n\nonToggleStar,\n\n}) {\n\nreturn (\n\n<li\n\nclassName={\n\nisHighlighted ? 'highlighted' : ''\n\n}\n\nonFocus={() => {\n\nonHover(letter);\n\n}}\n\nonPointerMove={() => {\n\nonHover(letter);\n\n}}\n\n>\n\n<button onClick={() => {\n\nonToggleStar(letter);\n\n}}>\n\n{letter.isStarred ? 'Unstar' : 'Star'}\n\n</button>\n\n{letter.subject}\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1013":{"pageContent":"onHover(letter);\n\n}}\n\nonPointerMove={() => {\n\nonHover(letter);\n\n}}\n\n>\n\n<button onClick={() => {\n\nonToggleStar(letter);\n\n}}>\n\n{letter.isStarred ? 'Unstar' : 'Star'}\n\n</button>\n\n{letter.subject}\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js\n\nexport const initialLetters = [{\n\nid: 0,\n\nsubject: 'Ready for adventure?',\n\nisStarred: true,\n\n}, {\n\nid: 1,\n\nsubject: 'Time to check in!',\n\nisStarred: false,\n\n}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { border-radius: 5px; }\n\n.highlighted { background: #d2eaff; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1014":{"pageContent":"}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { border-radius: 5px; }\n\n.highlighted { background: #d2eaff; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem is that you're holding the letter object in `highlightedLetter`. But you're also holding the same information in the `letters` array. So your state has duplication! When you update the `letters` array after the button click, you create a new letter object which is different from `highlightedLetter`. This is why `highlightedLetter === letter` check becomes `false`, and the highlight disappears. It reappears the next time you call `setHighlightedLetter` when the pointer moves.\n\nTo fix the issue, remove the duplication from state. Instead of storing *the letter itself* in two places, store the `highlightedId` instead. Then you can check `isHighlighted` for each letter with `letter.id === highlightedId`, which will work even if the `letter` object has changed since the last render.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1015":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { initialLetters } from './data.js';\n\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n\nconst [letters, setLetters] = useState(initialLetters);\n\nconst [highlightedId, setHighlightedId ] = useState(null);\n\nfunction handleHover(letterId) {\n\nsetHighlightedId(letterId);\n\n}\n\nfunction handleStar(starredId) {\n\nsetLetters(letters.map(letter => {\n\nif (letter.id === starredId) {\n\nreturn {\n\n...letter,\n\nisStarred: !letter.isStarred\n\n};\n\n} else {\n\nreturn letter;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>\n\n{letters.map(letter => (\n\n<Letter\n\nkey={letter.id}\n\nletter={letter}\n\nisHighlighted={\n\nletter.id === highlightedId\n\n}\n\nonHover={handleHover}\n\nonToggleStar={handleStar}\n\n/>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js Letter.js\n\nexport default function Letter({\n\nletter,\n\nisHighlighted,\n\nonHover,\n\nonToggleStar,\n\n}) {\n\nreturn (\n\n<li\n\nclassName={\n\nisHighlighted ? 'highlighted' : ''\n\n}\n\nonFocus={() => {\n\nonHover(letter.id);\n\n}}\n\nonPointerMove={() => {\n\nonHover(letter.id);\n\n}}\n\n>\n\n<button onClick={() => {\n\nonToggleStar(letter.id);\n\n}}>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1016":{"pageContent":"}) {\n\nreturn (\n\n<li\n\nclassName={\n\nisHighlighted ? 'highlighted' : ''\n\n}\n\nonFocus={() => {\n\nonHover(letter.id);\n\n}}\n\nonPointerMove={() => {\n\nonHover(letter.id);\n\n}}\n\n>\n\n<button onClick={() => {\n\nonToggleStar(letter.id);\n\n}}>\n\n{letter.isStarred ? 'Unstar' : 'Star'}\n\n</button>\n\n{letter.subject}\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js\n\nexport const initialLetters = [{\n\nid: 0,\n\nsubject: 'Ready for adventure?',\n\nisStarred: true,\n\n}, {\n\nid: 1,\n\nsubject: 'Time to check in!',\n\nisStarred: false,\n\n}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { border-radius: 5px; }\n\n.highlighted { background: #d2eaff; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Implement multiple selection {/*implement-multiple-selection*/}\n\nIn this example, each `Letter` has an `isSelected` prop and an `onToggle` handler that marks it as selected. This works, but the state is stored as a `selectedId` (either `null` or an ID), so only one letter can get selected at any given time.","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1017":{"pageContent":"Change the state structure to support multiple selection. (How would you structure it? Think about this before writing the code.) Each checkbox should become independent from the others. Clicking a selected letter should uncheck it. Finally, the footer should show the correct number of the selected items.\n\n<Hint>\n\nInstead of a single selected ID, you might want to hold an array or a [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) of selected IDs in state.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { letters } from './data.js';\n\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n\nconst [selectedId, setSelectedId] = useState(null);\n\n// TODO: allow multiple selection\n\nconst selectedCount = 1;\n\nfunction handleToggle(toggledId) {\n\n// TODO: allow multiple selection\n\nsetSelectedId(toggledId);\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>\n\n{letters.map(letter => (\n\n<Letter\n\nkey={letter.id}\n\nletter={letter}\n\nisSelected={","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1018":{"pageContent":"function handleToggle(toggledId) {\n\n// TODO: allow multiple selection\n\nsetSelectedId(toggledId);\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>\n\n{letters.map(letter => (\n\n<Letter\n\nkey={letter.id}\n\nletter={letter}\n\nisSelected={\n\n// TODO: allow multiple selection\n\nletter.id === selectedId\n\n}\n\nonToggle={handleToggle}\n\n/>\n\n))}\n\n<hr />\n\n<p>\n\n<b>\n\nYou selected {selectedCount} letters\n\n</b>\n\n</p>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js Letter.js\n\nexport default function Letter({\n\nletter,\n\nonToggle,\n\nisSelected,\n\n}) {\n\nreturn (\n\n<li className={\n\nisSelected ? 'selected' : ''\n\n}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isSelected}\n\nonChange={() => {\n\nonToggle(letter.id);\n\n}}\n\n/>\n\n{letter.subject}\n\n</label>\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js\n\nexport const letters = [{\n\nid: 0,\n\nsubject: 'Ready for adventure?',\n\nisStarred: true,\n\n}, {\n\nid: 1,\n\nsubject: 'Time to check in!',\n\nisStarred: false,\n\n}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nli { border-radius: 5px; }\n\nlabel { width: 100%; padding: 5px; display: inline-block; }\n\n.selected { background: #d2eaff; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1019":{"pageContent":"isStarred: false,\n\n}];\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nli { border-radius: 5px; }\n\nlabel { width: 100%; padding: 5px; display: inline-block; }\n\n.selected { background: #d2eaff; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nInstead of a single `selectedId`, keep a `selectedIds` *array* in state. For example, if you select the first and the last letter, it would contain `[0, 2]`. When nothing is selected, it would be an empty `[]` array:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { letters } from './data.js';\n\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n\nconst [selectedIds, setSelectedIds] = useState([]);\n\nconst selectedCount = selectedIds.length;\n\nfunction handleToggle(toggledId) {\n\n// Was it previously selected?\n\nif (selectedIds.includes(toggledId)) {\n\n// Then remove this ID from the array.\n\nsetSelectedIds(selectedIds.filter(id =>\n\nid !== toggledId\n\n));\n\n} else {\n\n// Otherwise, add this ID to the array.\n\nsetSelectedIds([\n\n...selectedIds,\n\ntoggledId\n\n]);\n\n}\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1020":{"pageContent":"setSelectedIds(selectedIds.filter(id =>\n\nid !== toggledId\n\n));\n\n} else {\n\n// Otherwise, add this ID to the array.\n\nsetSelectedIds([\n\n...selectedIds,\n\ntoggledId\n\n]);\n\n}\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>\n\n{letters.map(letter => (\n\n<Letter\n\nkey={letter.id}\n\nletter={letter}\n\nisSelected={\n\nselectedIds.includes(letter.id)\n\n}\n\nonToggle={handleToggle}\n\n/>\n\n))}\n\n<hr />\n\n<p>\n\n<b>\n\nYou selected {selectedCount} letters\n\n</b>\n\n</p>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js Letter.js\n\nexport default function Letter({\n\nletter,\n\nonToggle,\n\nisSelected,\n\n}) {\n\nreturn (\n\n<li className={\n\nisSelected ? 'selected' : ''\n\n}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isSelected}\n\nonChange={() => {\n\nonToggle(letter.id);\n\n}}\n\n/>\n\n{letter.subject}\n\n</label>\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js\n\nexport const letters = [{\n\nid: 0,\n\nsubject: 'Ready for adventure?',\n\nisStarred: true,\n\n}, {\n\nid: 1,\n\nsubject: 'Time to check in!',\n\nisStarred: false,\n\n}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nli { border-radius: 5px; }\n\nlabel { width: 100%; padding: 5px; display: inline-block; }","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1021":{"pageContent":"}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nli { border-radius: 5px; }\n\nlabel { width: 100%; padding: 5px; display: inline-block; }\n\n.selected { background: #d2eaff; }\n\n```\n\n</Sandpack>\n\nOne minor downside of using an array is that for each item, you're calling `selectedIds.includes(letter.id)` to check whether it's selected. If the array is very large, this can become a performance problem because array search with [`includes()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) takes linear time, and you're doing this search for each individual item.\n\nTo fix this, you can hold a [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) in state instead, which provides a fast [`has()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) operation:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1022":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { letters } from './data.js';\n\nimport Letter from './Letter.js';\n\nexport default function MailClient() {\n\nconst [selectedIds, setSelectedIds] = useState(\n\nnew Set()\n\n);\n\nconst selectedCount = selectedIds.size;\n\nfunction handleToggle(toggledId) {\n\n// Create a copy (to avoid mutation).\n\nconst nextIds = new Set(selectedIds);\n\nif (nextIds.has(toggledId)) {\n\nnextIds.delete(toggledId);\n\n} else {\n\nnextIds.add(toggledId);\n\n}\n\nsetSelectedIds(nextIds);\n\n}\n\nreturn (\n\n<>\n\n<h2>Inbox</h2>\n\n<ul>\n\n{letters.map(letter => (\n\n<Letter\n\nkey={letter.id}\n\nletter={letter}\n\nisSelected={\n\nselectedIds.has(letter.id)\n\n}\n\nonToggle={handleToggle}\n\n/>\n\n))}\n\n<hr />\n\n<p>\n\n<b>\n\nYou selected {selectedCount} letters\n\n</b>\n\n</p>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js Letter.js\n\nexport default function Letter({\n\nletter,\n\nonToggle,\n\nisSelected,\n\n}) {\n\nreturn (\n\n<li className={\n\nisSelected ? 'selected' : ''\n\n}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isSelected}\n\nonChange={() => {\n\nonToggle(letter.id);\n\n}}\n\n/>\n\n{letter.subject}\n\n</label>\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js\n\nexport const letters = [{","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1023":{"pageContent":"isSelected ? 'selected' : ''\n\n}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isSelected}\n\nonChange={() => {\n\nonToggle(letter.id);\n\n}}\n\n/>\n\n{letter.subject}\n\n</label>\n\n</li>\n\n)\n\n}\n\n```\n\n```js data.js\n\nexport const letters = [{\n\nid: 0,\n\nsubject: 'Ready for adventure?',\n\nisStarred: true,\n\n}, {\n\nid: 1,\n\nsubject: 'Time to check in!',\n\nisStarred: false,\n\n}, {\n\nid: 2,\n\nsubject: 'Festival Begins in Just SEVEN Days!',\n\nisStarred: false,\n\n}];\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nli { border-radius: 5px; }\n\nlabel { width: 100%; padding: 5px; display: inline-block; }\n\n.selected { background: #d2eaff; }\n\n```\n\n</Sandpack>\n\nNow each item does a `selectedIds.has(letter.id)` check, which is very fast.\n\nKeep in mind that you [should not mutate objects in state](/learn/updating-objects-in-state), and that includes Sets, too. This is why the `handleToggle` function creates a *copy* of the Set first, and then updates that copy.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/choosing-the-state-structure.md"}},"1024":{"pageContent":"--\n\ntitle: Extracting State Logic into a Reducer\n\n--\n\n<Intro>\n\nComponents with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called a _reducer._\n\n</Intro>\n\n<YouWillLearn>\n\nWhat a reducer function is\n\nHow to refactor `useState` to `useReducer`\n\nWhen to use a reducer\n\nHow to write one well\n\n</YouWillLearn>\n\n## Consolidate state logic with a reducer {/*consolidate-state-logic-with-a-reducer*/}\n\nAs your components grow in complexity, it can get harder to see at a glance all the different ways in which a component's state gets updated. For example, the `TaskApp` component below holds an array of `tasks` in state and uses three different event handlers to add, remove, and edit tasks:\n\n<Sandpack>\n\n```js App.js\n\nimport {useState} from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1025":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport {useState} from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n\nconst [tasks, setTasks] = useState(initialTasks);\n\nfunction handleAddTask(text) {\n\nsetTasks([\n\n...tasks,\n\n{\n\nid: nextId++,\n\ntext: text,\n\ndone: false,\n\n},\n\n]);\n\n}\n\nfunction handleChangeTask(task) {\n\nsetTasks(\n\ntasks.map((t) => {\n\nif (t.id === task.id) {\n\nreturn task;\n\n} else {\n\nreturn t;\n\n}\n\n})\n\n);\n\n}\n\nfunction handleDeleteTask(taskId) {\n\nsetTasks(tasks.filter((t) => t.id !== taskId));\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask onAddTask={handleAddTask} />\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{id: 0, text: 'Visit Kafka Museum', done: true},\n\n{id: 1, text: 'Watch a puppet show', done: false},\n\n{id: 2, text: 'Lennon Wall pic', done: false},\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport {useState} from 'react';\n\nexport default function AddTask({onAddTask}) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1026":{"pageContent":"{id: 2, text: 'Lennon Wall pic', done: false},\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport {useState} from 'react';\n\nexport default function AddTask({onAddTask}) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={(e) => setText(e.target.value)}\n\n/>\n\n<button\n\nonClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport {useState} from 'react';\n\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\n\nreturn (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>\n\n<Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({task, onChange, onDelete}) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ntext: e.target.value,\n\n});\n\n}}\n\n/>\n\n<button onClick={() => setIsEditing(false)}>Save</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1027":{"pageContent":"<>\n\n<input\n\nvalue={task.text}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ntext: e.target.value,\n\n});\n\n}}\n\n/>\n\n<button onClick={() => setIsEditing(false)}>Save</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>Edit</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked,\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>Delete</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\nmargin: 5px;\n\n}\n\nli {\n\nlist-style-type: none;\n\n}\n\nul,\n\nli {\n\nmargin: 0;\n\npadding: 0;\n\n}\n\n```\n\n</Sandpack>\n\nEach of its event handlers calls `setTasks` in order to update the state. As this component grows, so does the amount of state logic sprinkled throughout it. To reduce this complexity and keep all your logic in one easy-to-access place, you can move that state logic into a single function outside your component, **called a \"reducer\".**\n\nReducers are a different way to handle state. You can migrate from `useState` to `useReducer` in three steps:","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1028":{"pageContent":"Reducers are a different way to handle state. You can migrate from `useState` to `useReducer` in three steps:\n\n1. **Move** from setting state to dispatching actions.\n\n2. **Write** a reducer function.\n\n3. **Use** the reducer from your component.\n\n### Step 1: Move from setting state to dispatching actions {/*step-1-move-from-setting-state-to-dispatching-actions*/}\n\nYour event handlers currently specify _what to do_ by setting state:\n\n```js\n\nfunction handleAddTask(text) {\n\nsetTasks([\n\n...tasks,\n\n{\n\nid: nextId++,\n\ntext: text,\n\ndone: false,\n\n},\n\n]);\n\n}\n\nfunction handleChangeTask(task) {\n\nsetTasks(\n\ntasks.map((t) => {\n\nif (t.id === task.id) {\n\nreturn task;\n\n} else {\n\nreturn t;\n\n}\n\n})\n\n);\n\n}\n\nfunction handleDeleteTask(taskId) {\n\nsetTasks(tasks.filter((t) => t.id !== taskId));\n\n}\n\n```\n\nRemove all the state setting logic. What you are left with are three event handlers:\n\n`handleAddTask(text)` is called when the user presses \"Add\".\n\n`handleChangeTask(task)` is called when the user toggles a task or presses \"Save\".","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1029":{"pageContent":"`handleAddTask(text)` is called when the user presses \"Add\".\n\n`handleChangeTask(task)` is called when the user toggles a task or presses \"Save\".\n\n`handleDeleteTask(taskId)` is called when the user presses \"Delete\".\n\nManaging state with reducers is slightly different from directly setting state. Instead of telling React \"what to do\" by setting state, you specify \"what the user just did\" by dispatching \"actions\" from your event handlers. (The state update logic will live elsewhere!) So instead of \"setting `tasks`\" via an event handler, you're dispatching an \"added/changed/deleted a task\" action. This is more descriptive of the user's intent.\n\n```js\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task,\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId,\n\n});\n\n}\n\n```\n\nThe object you pass to `dispatch` is called an \"action\":\n\n```js {3-7}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch(","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1030":{"pageContent":"});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId,\n\n});\n\n}\n\n```\n\nThe object you pass to `dispatch` is called an \"action\":\n\n```js {3-7}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch(\n\n// \"action\" object:\n\n{\n\ntype: 'deleted',\n\nid: taskId,\n\n}\n\n);\n\n}\n\n```\n\nIt is a regular JavaScript object. You decide what to put in it, but generally it should contain the minimal information about _what happened_. (You will add the `dispatch` function itself in a later step.)\n\n<Note>\n\nAn action object can have any shape.\n\nBy convention, it is common to give it a string `type` that describes what happened, and pass any additional information in other fields. The `type` is specific to a component, so in this example either `'added'` or `'added_task'` would be fine. Choose a name that says what happened!\n\n```js\n\ndispatch({\n\n// specific to component\n\ntype: 'what_happened',\n\n// other fields go here\n\n});\n\n```\n\n</Note>\n\n### Step 2: Write a reducer function {/*step-2-write-a-reducer-function*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1031":{"pageContent":"```js\n\ndispatch({\n\n// specific to component\n\ntype: 'what_happened',\n\n// other fields go here\n\n});\n\n```\n\n</Note>\n\n### Step 2: Write a reducer function {/*step-2-write-a-reducer-function*/}\n\nA reducer function is where you will put your state logic. It takes two arguments, the current state and the action object, and it returns the next state:\n\n```js\n\nfunction yourReducer(state, action) {\n\n// return next state for React to set\n\n}\n\n```\n\nReact will set the state to what you return from the reducer.\n\nTo move your state setting logic from your event handlers to a reducer function in this example, you will:\n\n1. Declare the current state (`tasks`) as the first argument.\n\n2. Declare the `action` object as the second argument.\n\n3. Return the _next_ state from the reducer (which React will set the state to).\n\nHere is all the state setting logic migrated to a reducer function:\n\n```js\n\nfunction tasksReducer(tasks, action) {\n\nif (action.type === 'added') {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n},\n\n];","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1032":{"pageContent":"```js\n\nfunction tasksReducer(tasks, action) {\n\nif (action.type === 'added') {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n},\n\n];\n\n} else if (action.type === 'changed') {\n\nreturn tasks.map((t) => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n} else if (action.type === 'deleted') {\n\nreturn tasks.filter((t) => t.id !== action.id);\n\n} else {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n```\n\n> Because the reducer function takes state (`tasks`) as an argument, you can **declare it outside of your component.** This decreases the indentation level and can make your code easier to read.\n\n<Note>\n\nThe code above uses if/else statements, but it's a convention to use [switch statements](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/switch) inside reducers. The result is the same, but it can be easier to read switch statements at a glance.\n\nWe'll be using them throughout the rest of this documentation like so:\n\n```js\n\nfunction tasksReducer(tasks, action) {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1033":{"pageContent":"We'll be using them throughout the rest of this documentation like so:\n\n```js\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n},\n\n];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map((t) => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\nWe recommend to wrap each `case` block into the `{` and `}` curly braces so that variables declared inside of different `case`s don't clash with each other. Also, a `case` should usually end with a `return`. If you forget to `return`, the code will \"fall through\" to the next `case`, which can lead to mistakes!\n\nIf you're not yet comfortable with switch statements, using if/else is completely fine.\n\n</Note>\n\n<DeepDive>\n\n#### Why are reducers called this way? {/*why-are-reducers-called-this-way*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1034":{"pageContent":"If you're not yet comfortable with switch statements, using if/else is completely fine.\n\n</Note>\n\n<DeepDive>\n\n#### Why are reducers called this way? {/*why-are-reducers-called-this-way*/}\n\nAlthough reducers can \"reduce\" the amount of code inside your component, they are actually named after the [`reduce()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce) operation that you can perform on arrays.\n\nThe `reduce()` operation lets you take an array and \"accumulate\" a single value out of many:\n\n```\n\nconst arr = [1, 2, 3, 4, 5];\n\nconst sum = arr.reduce(\n\n(result, number) => result + number\n\n); // 1 + 2 + 3 + 4 + 5\n\n```\n\nThe function you pass to `reduce` is known as a \"reducer\". It takes the _result so far_ and the _current item,_ then it returns the _next result._ React reducers are an example of the same idea: they take the _state so far_ and the _action_, and return the _next state._ In this way, they accumulate actions over time into state.","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1035":{"pageContent":"You could even use the `reduce()` method with an `initialState` and an array of `actions` to calculate the final state by passing your reducer function to it:\n\n<Sandpack>\n\n```js index.js active\n\nimport tasksReducer from './tasksReducer.js';\n\nlet initialState = [];\n\nlet actions = [\n\n{type: 'added', id: 1, text: 'Visit Kafka Museum'},\n\n{type: 'added', id: 2, text: 'Watch a puppet show'},\n\n{type: 'deleted', id: 1},\n\n{type: 'added', id: 3, text: 'Lennon Wall pic'},\n\n];\n\nlet finalState = actions.reduce(tasksReducer, initialState);\n\nconst output = document.getElementById('output');\n\noutput.textContent = JSON.stringify(finalState, null, 2);\n\n```\n\n```js tasksReducer.js\n\nexport default function tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n},\n\n];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map((t) => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1036":{"pageContent":"},\n\n];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map((t) => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```html public/index.html\n\n<pre id=\"output\"></pre>\n\n```\n\n</Sandpack>\n\nYou probably won't need to do this yourself, but this is similar to what React does!\n\n</DeepDive>\n\n### Step 3: Use the reducer from your component {/*step-3-use-the-reducer-from-your-component*/}\n\nFinally, you need to hook up the `tasksReducer` to your component. Make sure to import the `useReducer` Hook from React:\n\n```js\n\nimport {useReducer} from 'react';\n\n```\n\nThen you can replace `useState`:\n\n```js\n\nconst [tasks, setTasks] = useState(initialTasks);\n\n```\n\nwith `useReducer` like so:\n\n```js\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1037":{"pageContent":"```\n\nThen you can replace `useState`:\n\n```js\n\nconst [tasks, setTasks] = useState(initialTasks);\n\n```\n\nwith `useReducer` like so:\n\n```js\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n```\n\nThe `useReducer` Hook is similar to `useState`—you must pass it an initial state and it returns a stateful value and a way to set state (in this case, the dispatch function). But it's a little different.\n\nThe `useReducer` Hook takes two arguments:\n\n1. A reducer function\n\n2. An initial state\n\nAnd it returns:\n\n1. A stateful value\n\n2. A dispatch function (to \"dispatch\" user actions to the reducer)\n\nNow it's fully wired up! Here, the reducer is declared at the bottom of the component file:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1038":{"pageContent":"export default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task,\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId,\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask onAddTask={handleAddTask} />\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n},\n\n];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map((t) => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{id: 0, text: 'Visit Kafka Museum', done: true},","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1039":{"pageContent":"return tasks.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{id: 0, text: 'Visit Kafka Museum', done: true},\n\n{id: 1, text: 'Watch a puppet show', done: false},\n\n{id: 2, text: 'Lennon Wall pic', done: false},\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport {useState} from 'react';\n\nexport default function AddTask({onAddTask}) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={(e) => setText(e.target.value)}\n\n/>\n\n<button\n\nonClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport {useState} from 'react';\n\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\n\nreturn (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>\n\n<Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({task, onChange, onDelete}) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1040":{"pageContent":"</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({task, onChange, onDelete}) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ntext: e.target.value,\n\n});\n\n}}\n\n/>\n\n<button onClick={() => setIsEditing(false)}>Save</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>Edit</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked,\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>Delete</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\nmargin: 5px;\n\n}\n\nli {\n\nlist-style-type: none;\n\n}\n\nul,\n\nli {\n\nmargin: 0;\n\npadding: 0;\n\n}\n\n```\n\n</Sandpack>\n\nIf you want, you can even move the reducer to a different file:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport tasksReducer from './tasksReducer.js';\n\nexport default function TaskApp() {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1041":{"pageContent":"```js App.js\n\nimport {useReducer} from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport tasksReducer from './tasksReducer.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task,\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId,\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask onAddTask={handleAddTask} />\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{id: 0, text: 'Visit Kafka Museum', done: true},\n\n{id: 1, text: 'Watch a puppet show', done: false},\n\n{id: 2, text: 'Lennon Wall pic', done: false},\n\n];\n\n```\n\n```js tasksReducer.js\n\nexport default function tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1042":{"pageContent":"{id: 2, text: 'Lennon Wall pic', done: false},\n\n];\n\n```\n\n```js tasksReducer.js\n\nexport default function tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [\n\n...tasks,\n\n{\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n},\n\n];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map((t) => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js AddTask.js hidden\n\nimport {useState} from 'react';\n\nexport default function AddTask({onAddTask}) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={(e) => setText(e.target.value)}\n\n/>\n\n<button\n\nonClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport {useState} from 'react';\n\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\n\nreturn (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1043":{"pageContent":"Add\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport {useState} from 'react';\n\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\n\nreturn (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>\n\n<Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({task, onChange, onDelete}) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ntext: e.target.value,\n\n});\n\n}}\n\n/>\n\n<button onClick={() => setIsEditing(false)}>Save</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>Edit</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked,\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>Delete</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\nmargin: 5px;\n\n}\n\nli {\n\nlist-style-type: none;\n\n}\n\nul,\n\nli {\n\nmargin: 0;\n\npadding: 0;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1044":{"pageContent":"});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>Delete</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\nmargin: 5px;\n\n}\n\nli {\n\nlist-style-type: none;\n\n}\n\nul,\n\nli {\n\nmargin: 0;\n\npadding: 0;\n\n}\n\n```\n\n</Sandpack>\n\nComponent logic can be easier to read when you separate concerns like this. Now the event handlers only specify _what happened_ by dispatching actions, and the reducer function determines _how the state updates_ in response to them.\n\n## Comparing `useState` and `useReducer` {/*comparing-usestate-and-usereducer*/}\n\nReducers are not without downsides! Here's a few ways you can compare them:\n\n**Code size:** Generally, with `useState` you have to write less code upfront. With `useReducer`, you have to write both a reducer function _and_ dispatch actions. However, `useReducer` can help cut down on the code if many event handlers modify state in a similar way.","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1045":{"pageContent":"**Readability:** `useState` is very easy to read when the state updates are simple. When they get more complex, they can bloat your component's code and make it difficult to scan. In this case, `useReducer` lets you cleanly separate the _how_ of update logic from the _what happened_ of event handlers.\n\n**Debugging:** When you have a bug with `useState`, it can be difficult to tell _where_ the state was set incorrectly, and _why_. With `useReducer`, you can add a console log into your reducer to see every state update, and _why_ it happened (due to which `action`). If each `action` is correct, you'll know that the mistake is in the reducer logic itself. However, you have to step through more code than with `useState`.","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1046":{"pageContent":"**Testing:** A reducer is a pure function that doesn't depend on your component. This means that you can export and test it separately in isolation. While generally it's best to test components in a more realistic environment, for complex state update logic it can be useful to assert that your reducer returns a particular state for a particular initial state and action.\n\n**Personal preference:** Some people like reducers, others don't. That's okay. It's a matter of preference. You can always convert between `useState` and `useReducer` back and forth: they are equivalent!\n\nWe recommend using a reducer if you often encounter bugs due to incorrect state updates in some component, and want to introduce more structure to its code. You don't have to use reducers for everything: feel free to mix and match! You can even `useState` and `useReducer` in the same component.\n\n## Writing reducers well {/*writing-reducers-well*/}\n\nKeep these two tips in mind when writing reducers:","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1047":{"pageContent":"## Writing reducers well {/*writing-reducers-well*/}\n\nKeep these two tips in mind when writing reducers:\n\n**Reducers must be pure.** Similar to [state updater functions](/learn/queueing-a-series-of-state-updates), reducers run during rendering! (Actions are queued until the next render.) This means that reducers [must be pure](/learn/keeping-components-pure)—same inputs always result in the same output. They should not send requests, schedule timeouts, or perform any side effects (operations that impact things outside the component). They should update [objects](/learn/updating-objects-in-state) and [arrays](/learn/updating-arrays-in-state) without mutations.","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1048":{"pageContent":"**Each action describes a single user interaction, even if that leads to multiple changes in the data.** For example, if a user presses \"Reset\" on a form with five fields managed by a reducer, it makes more sense to dispatch one `reset_form` action rather than five separate `set_field` actions. If you log every action in a reducer, that log should be clear enough for you to reconstruct what interactions or responses happened in what order. This helps with debugging!\n\n## Writing concise reducers with Immer {/*writing-concise-reducers-with-immer*/}\n\nJust like with [updating objects](/learn/updating-objects-in-state#write-concise-update-logic-with-immer) and [arrays](/learn/updating-arrays-in-state#write-concise-update-logic-with-immer) in regular state, you can use the Immer library to make reducers more concise. Here, [`useImmerReducer`](https://github.com/immerjs/use-immer#useimmerreducer) lets you mutate the state with `push` or `arr[i] =` assignment:\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1049":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport {useImmerReducer} from 'use-immer';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nfunction tasksReducer(draft, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\ndraft.push({\n\nid: action.id,\n\ntext: action.text,\n\ndone: false,\n\n});\n\nbreak;\n\n}\n\ncase 'changed': {\n\nconst index = draft.findIndex((t) => t.id === action.task.id);\n\ndraft[index] = action.task;\n\nbreak;\n\n}\n\ncase 'deleted': {\n\nreturn draft.filter((t) => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useImmerReducer(tasksReducer, initialTasks);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task,\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId,\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask onAddTask={handleAddTask} />\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1050":{"pageContent":"dispatch({\n\ntype: 'deleted',\n\nid: taskId,\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask onAddTask={handleAddTask} />\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{id: 0, text: 'Visit Kafka Museum', done: true},\n\n{id: 1, text: 'Watch a puppet show', done: false},\n\n{id: 2, text: 'Lennon Wall pic', done: false},\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport {useState} from 'react';\n\nexport default function AddTask({onAddTask}) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={(e) => setText(e.target.value)}\n\n/>\n\n<button\n\nonClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport {useState} from 'react';\n\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\n\nreturn (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>\n\n<Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1051":{"pageContent":"return (\n\n<ul>\n\n{tasks.map((task) => (\n\n<li key={task.id}>\n\n<Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({task, onChange, onDelete}) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ntext: e.target.value,\n\n});\n\n}}\n\n/>\n\n<button onClick={() => setIsEditing(false)}>Save</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>Edit</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={(e) => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked,\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>Delete</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\nmargin: 5px;\n\n}\n\nli {\n\nlist-style-type: none;\n\n}\n\nul,\n\nli {\n\nmargin: 0;\n\npadding: 0;\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1052":{"pageContent":"}\n\nul,\n\nli {\n\nmargin: 0;\n\npadding: 0;\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nReducers must be pure, so they shouldn't mutate state. But Immer provides you with a special `draft` object which is safe to mutate. Under the hood, Immer will create a copy of your state with the changes you made to the `draft`. This is why reducers managed by `useImmerReducer` can mutate their first argument and don't need to return state.\n\n<Recap>\n\nTo convert from `useState` to `useReducer`:\n\n1. Dispatch actions from event handlers.\n\n2. Write a reducer function that returns the next state for a given state and action.\n\n3. Replace `useState` with `useReducer`.\n\nReducers require you to write a bit more code, but they help with debugging and testing.","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1053":{"pageContent":"3. Replace `useState` with `useReducer`.\n\nReducers require you to write a bit more code, but they help with debugging and testing.\n\nReducers must be pure.\n\nEach action describes a single user interaction.\n\nUse Immer if you want to write reducers in a mutating style.\n\n</Recap>\n\n<Challenges>\n\n#### Dispatch actions from event handlers {/*dispatch-actions-from-event-handlers*/}\n\nCurrently, the event handlers in `ContactList.js` and `Chat.js` have `// TODO` comments. This is why typing into the input doesn't work, and clicking on the buttons doesn't change the selected recipient.\n\nReplace these two `// TODO`s with the code to `dispatch` the corresponding actions. To see the expected shape and the type of the actions, check the reducer in `messengerReducer.js`. The reducer is already written so you won't need to change it. You only need to dispatch the actions in `ContactList.js` and `Chat.js`.\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1054":{"pageContent":"<Hint>\n\nThe `dispatch` function is already available in both of these components because it was passed as a prop. So you need to call `dispatch` with the corresponding action object.\n\nTo check the action object shape, you can look at the reducer and see which `action` fields it expects to see. For example, the `changed_selection` case in the reducer looks like this:\n\n```js\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId\n\n};\n\n}\n\n```\n\nThis means that your action object should have a `type: 'changed_selection'`. You also see the `action.contactId` being used, so you need to include a `contactId` property into your action.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1055":{"pageContent":"export default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessage: 'Hello',\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1056":{"pageContent":"selectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\n// TODO: dispatch changed_selection\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\n// TODO: dispatch edited_message\n\n// (Read the input value from e.target.value)\n\n}}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1057":{"pageContent":"}}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nFrom the reducer code, you can infer that actions need to look like this:\n\n```js\n\n// When the user presses \"Alice\"\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: 1,\n\n});\n\n// When user types \"Hello!\"\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: 'Hello!',\n\n});\n\n```\n\nHere is the example updated to dispatch the corresponding messages:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1058":{"pageContent":"const [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessage: 'Hello',\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1059":{"pageContent":"...state,\n\nmessage: action.message,\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1060":{"pageContent":"</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Clear the input on sending a message {/*clear-the-input-on-sending-a-message*/}\n\nCurrently, pressing \"Send\" doesn't do anything. Add an event handler to the \"Send\" button that will:\n\n1. Show an `alert` with the recipient's email and the message.\n\n2. Clear the message input.\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1061":{"pageContent":"const message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessage: 'Hello',\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1062":{"pageContent":"}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js active\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1063":{"pageContent":"float: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThere are a couple of ways you could do it in the \"Send\" button event handler. One approach is to show an alert and then dispatch an `edited_message` action with an empty `message`:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1064":{"pageContent":"return (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessage: 'Hello',\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1065":{"pageContent":"return (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js active\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button\n\nonClick={() => {\n\nalert(`Sending \"${message}\" to ${contact.email}`);\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: '',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1066":{"pageContent":".chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nThis works and clears the input when you hit \"Send\".\n\nHowever, _from the user's perspective_, sending a message is a different action than editing the field. To reflect that, you could instead create a _new_ action called `sent_message`, and handle it separately in the reducer:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1067":{"pageContent":"const contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js active\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessage: 'Hello',\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ncase 'sent_message': {\n\nreturn {\n\n...state,\n\nmessage: '',\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1068":{"pageContent":"}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js active\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button\n\nonClick={() => {\n\nalert(`Sending \"${message}\" to ${contact.email}`);\n\ndispatch({\n\ntype: 'sent_message',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1069":{"pageContent":"dispatch({\n\ntype: 'sent_message',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nThe resulting behavior is the same. But keep in mind that action types should ideally describe \"what the user did\" rather than \"how you want the state to change\". This makes it easier to later add more features.\n\nWith either solution, it's important that you **don't** place the `alert` inside a reducer. The reducer should be a pure function--it should only calculate the next state. It should not \"do\" anything, including displaying messages to the user. That should happen in the event handler. (To help catch mistakes like this, React will call your reducers multiple times in Strict Mode. This is why, if you put an alert in a reducer, it fires twice.)\n\n</Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1070":{"pageContent":"</Solution>\n\n#### Restore input values when switching between tabs {/*restore-input-values-when-switching-between-tabs*/}\n\nIn this example, switching between different recipients always clears the text input:\n\n```js\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '' // Clears the input\n\n};\n\n```\n\nThis is because you don't want to share a single message draft between several recipients. But it would be better if your app \"remembered\" a draft for each contact separately, restoring them when you switch contacts.\n\nYour task is to change the way the state is structured so that you remember a separate message draft _per contact_. You would need to make a few changes to the reducer, the initial state, and the components.\n\n<Hint>\n\nYou can structure your state like this:\n\n```js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessages: {\n\n0: 'Hello, Taylor', // Draft for contactId = 0\n\n1: 'Hello, Alice', // Draft for contactId = 1\n\n},\n\n};\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1071":{"pageContent":"You can structure your state like this:\n\n```js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessages: {\n\n0: 'Hello, Taylor', // Draft for contactId = 0\n\n1: 'Hello, Alice', // Draft for contactId = 1\n\n},\n\n};\n\n```\n\nThe `[key]: value` [computed property](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names) syntax can help you update the `messages` object:\n\n```js\n\n{\n\n...state.messages,\n\n[id]: message\n\n}\n\n```\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.message;\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1072":{"pageContent":"return (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessage: 'Hello',\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\nmessage: '',\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessage: action.message,\n\n};\n\n}\n\ncase 'sent_message': {\n\nreturn {\n\n...state,\n\nmessage: '',\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1073":{"pageContent":"export default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button\n\nonClick={() => {\n\nalert(`Sending \"${message}\" to ${contact.email}`);\n\ndispatch({\n\ntype: 'sent_message',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1074":{"pageContent":");\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou'll need to update the reducer to store and update a separate message draft per contact:\n\n```js\n\n// When the input is edited\n\ncase 'edited_message': {\n\nreturn {\n\n// Keep other state like selection\n\n...state,\n\nmessages: {\n\n// Keep messages for other contacts\n\n...state.messages,\n\n// But change the selected contact's message\n\n[state.selectedId]: action.message\n\n}\n\n};\n\n}\n\n```\n\nYou would also update the `Messenger` component to read the message for the currently selected contact:\n\n```js\n\nconst message = state.messages[state.selectedId];\n\n```\n\nHere is the complete solution:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1075":{"pageContent":"import Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.messages[state.selectedId];\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessages: {\n\n0: 'Hello, Taylor',\n\n1: 'Hello, Alice',\n\n2: 'Hello, Bob',\n\n},\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\n};\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1076":{"pageContent":"1: 'Hello, Alice',\n\n2: 'Hello, Bob',\n\n},\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: action.message,\n\n},\n\n};\n\n}\n\ncase 'sent_message': {\n\nreturn {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: '',\n\n},\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1077":{"pageContent":"</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button\n\nonClick={() => {\n\nalert(`Sending \"${message}\" to ${contact.email}`);\n\ndispatch({\n\ntype: 'sent_message',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nNotably, you didn't need to change any of the event handlers to implement this different behavior. Without a reducer, you would have to change every event handler that updates the state.\n\n</Solution>\n\n#### Implement `useReducer` from scratch {/*implement-usereducer-from-scratch*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1078":{"pageContent":"</Solution>\n\n#### Implement `useReducer` from scratch {/*implement-usereducer-from-scratch*/}\n\nIn the earlier examples, you imported the `useReducer` Hook from React. This time, you will implement _the `useReducer` Hook itself!_ Here is a stub to get you started. It shouldn't take more than 10 lines of code.\n\nTo test your changes, try typing into the input or select a contact.\n\n<Hint>\n\nHere is a more detailed sketch of the implementation:\n\n```js\n\nexport function useReducer(reducer, initialState) {\n\nconst [state, setState] = useState(initialState);\n\nfunction dispatch(action) {\n\n// ???\n\n}\n\nreturn [state, dispatch];\n\n}\n\n```\n\nRecall that a reducer function takes two arguments--the current state and the action object--and it returns the next state. What should your `dispatch` implementation do with it?\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from './MyReact.js';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1079":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport {useReducer} from './MyReact.js';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.messages[state.selectedId];\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessages: {\n\n0: 'Hello, Taylor',\n\n1: 'Hello, Alice',\n\n2: 'Hello, Bob',\n\n},\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1080":{"pageContent":"selectedId: 0,\n\nmessages: {\n\n0: 'Hello, Taylor',\n\n1: 'Hello, Alice',\n\n2: 'Hello, Bob',\n\n},\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: action.message,\n\n},\n\n};\n\n}\n\ncase 'sent_message': {\n\nreturn {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: '',\n\n},\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js MyReact.js active\n\nimport {useState} from 'react';\n\nexport function useReducer(reducer, initialState) {\n\nconst [state, setState] = useState(initialState);\n\n// ???\n\nreturn [state, dispatch];\n\n}\n\n```\n\n```js ContactList.js hidden\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1081":{"pageContent":"return (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js hidden\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button\n\nonClick={() => {\n\nalert(`Sending \"${message}\" to ${contact.email}`);\n\ndispatch({\n\ntype: 'sent_message',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1082":{"pageContent":"float: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nDispatching an action calls a reducer with the current state and the action, and stores the result as the next state. This is what it looks like in code:\n\n<Sandpack>\n\n```js App.js\n\nimport {useReducer} from './MyReact.js';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nimport {initialState, messengerReducer} from './messengerReducer';\n\nexport default function Messenger() {\n\nconst [state, dispatch] = useReducer(messengerReducer, initialState);\n\nconst message = state.messages[state.selectedId];\n\nconst contact = contacts.find((c) => c.id === state.selectedId);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1083":{"pageContent":"return (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={state.selectedId}\n\ndispatch={dispatch}\n\n/>\n\n<Chat\n\nkey={contact.id}\n\nmessage={message}\n\ncontact={contact}\n\ndispatch={dispatch}\n\n/>\n\n</div>\n\n);\n\n}\n\nconst contacts = [\n\n{id: 0, name: 'Taylor', email: 'taylor@mail.com'},\n\n{id: 1, name: 'Alice', email: 'alice@mail.com'},\n\n{id: 2, name: 'Bob', email: 'bob@mail.com'},\n\n];\n\n```\n\n```js messengerReducer.js\n\nexport const initialState = {\n\nselectedId: 0,\n\nmessages: {\n\n0: 'Hello, Taylor',\n\n1: 'Hello, Alice',\n\n2: 'Hello, Bob',\n\n},\n\n};\n\nexport function messengerReducer(state, action) {\n\nswitch (action.type) {\n\ncase 'changed_selection': {\n\nreturn {\n\n...state,\n\nselectedId: action.contactId,\n\n};\n\n}\n\ncase 'edited_message': {\n\nreturn {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: action.message,\n\n},\n\n};\n\n}\n\ncase 'sent_message': {\n\nreturn {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: '',\n\n},\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js MyReact.js active\n\nimport {useState} from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1084":{"pageContent":"return {\n\n...state,\n\nmessages: {\n\n...state.messages,\n\n[state.selectedId]: '',\n\n},\n\n};\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\n```\n\n```js MyReact.js active\n\nimport {useState} from 'react';\n\nexport function useReducer(reducer, initialState) {\n\nconst [state, setState] = useState(initialState);\n\nfunction dispatch(action) {\n\nconst nextState = reducer(state, action);\n\nsetState(nextState);\n\n}\n\nreturn [state, dispatch];\n\n}\n\n```\n\n```js ContactList.js hidden\n\nexport default function ContactList({contacts, selectedId, dispatch}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map((contact) => (\n\n<li key={contact.id}>\n\n<button\n\nonClick={() => {\n\ndispatch({\n\ntype: 'changed_selection',\n\ncontactId: contact.id,\n\n});\n\n}}>\n\n{selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js hidden\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1085":{"pageContent":"</li>\n\n))}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js hidden\n\nimport {useState} from 'react';\n\nexport default function Chat({contact, message, dispatch}) {\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={message}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={(e) => {\n\ndispatch({\n\ntype: 'edited_message',\n\nmessage: e.target.value,\n\n});\n\n}}\n\n/>\n\n<br />\n\n<button\n\nonClick={() => {\n\nalert(`Sending \"${message}\" to ${contact.email}`);\n\ndispatch({\n\ntype: 'sent_message',\n\n});\n\n}}>\n\nSend to {contact.email}\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat,\n\n.contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nThough it doesn't matter in most cases, a slightly more accurate implementation looks like this:\n\n```js\n\nfunction dispatch(action) {\n\nsetState((s) => reducer(s, action));\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1086":{"pageContent":"height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nThough it doesn't matter in most cases, a slightly more accurate implementation looks like this:\n\n```js\n\nfunction dispatch(action) {\n\nsetState((s) => reducer(s, action));\n\n}\n\n```\n\nThis is because the dispatched actions are queued until the next render, [similar to the updater functions.](/learn/queueing-a-series-of-state-updates)\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/extracting-state-logic-into-a-reducer.md"}},"1087":{"pageContent":"--\n\ntitle: Sharing State Between Components\n\n--\n\n<Intro>\n\nSometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as *lifting state up,* and it's one of the most common things you will do writing React code.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to share state between components by lifting it up\n\nWhat are controlled and uncontrolled components\n\n</YouWillLearn>\n\n## Lifting state up by example {/*lifting-state-up-by-example*/}\n\nIn this example, a parent `Accordion` component renders two separate `Panel`s:\n\n`Accordion`\n\n`Panel`\n\n`Panel`\n\nEach `Panel` component has a boolean `isActive` state that determines whether its content is visible.\n\nPress the Show button for both panels:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nfunction Panel({ title, children }) {\n\nconst [isActive, setIsActive] = useState(false);\n\nreturn (\n\n<section className=\"panel\">\n\n<h3>{title}</h3>\n\n{isActive ? (","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1088":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nfunction Panel({ title, children }) {\n\nconst [isActive, setIsActive] = useState(false);\n\nreturn (\n\n<section className=\"panel\">\n\n<h3>{title}</h3>\n\n{isActive ? (\n\n<p>{children}</p>\n\n) : (\n\n<button onClick={() => setIsActive(true)}>\n\nShow\n\n</button>\n\n)}\n\n</section>\n\n);\n\n}\n\nexport default function Accordion() {\n\nreturn (\n\n<>\n\n<h2>Almaty, Kazakhstan</h2>\n\n<Panel title=\"About\">\n\nWith a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n\n</Panel>\n\n<Panel title=\"Etymology\">\n\nThe name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n\n</Panel>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1089":{"pageContent":"</Panel>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nNotice how pressing one panel's button does not affect the other panel--they are independent.\n\n<DiagramGroup>\n\n<Diagram name=\"sharing_state_child\" height={367} width={477} alt=\"Diagram showing a tree of three components, one parent labeled Accordion and two children labeled Panel. Both Panel components contain isActive with value false.\">\n\nInitially, each `Panel`'s `isActive` state is `false`, so they both appear collapsed\n\n</Diagram>\n\n<Diagram name=\"sharing_state_child_clicked\" height={367} width={480} alt=\"The same diagram as the previous, with the isActive of the first child Panel component highlighted indicating a click with the isActive value set to true. The second Panel component still contains value false.\" >\n\nClicking either `Panel`'s button will only update that `Panel`'s `isActive` state alone\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1090":{"pageContent":"Clicking either `Panel`'s button will only update that `Panel`'s `isActive` state alone\n\n</Diagram>\n\n</DiagramGroup>\n\n*But now let's say you want to change it so that only one panel is expanded at any given time.** With that design, expanding the second panel should collapse the first one. How would you do that?\n\nTo coordinate these two panels, you need to \"lift their state up\" to a parent component in three steps:\n\n1. **Remove** state from the child components.\n\n2. **Pass** hardcoded data from the common parent.\n\n3. **Add** state to the common parent and pass it down together with the event handlers.\n\nThis will allow the `Accordion` component to coordinate both `Panel`s and only expand one at a time.\n\n### Step 1: Remove state from the child components {/*step-1-remove-state-from-the-child-components*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1091":{"pageContent":"### Step 1: Remove state from the child components {/*step-1-remove-state-from-the-child-components*/}\n\nYou will give control of the `Panel`'s `isActive` to its parent component. This means that the parent component will pass `isActive` to `Panel` as a prop instead. Start by **removing this line** from the `Panel` component:\n\n```js\n\nconst [isActive, setIsActive] = useState(false);\n\n```\n\nAnd instead, add `isActive` to the `Panel`'s list of props:\n\n```js\n\nfunction Panel({ title, children, isActive }) {\n\n```\n\nNow the `Panel`'s parent component can *control* `isActive` by [passing it down as a prop.](/learn/passing-props-to-a-component) Conversely, the `Panel` component now has *no control* over the value of `isActive`--it's now up to the parent component!\n\n### Step 2: Pass hardcoded data from the common parent {/*step-2-pass-hardcoded-data-from-the-common-parent*/}\n\nTo lift state up, you must locate the closest common parent component of *both* of the child components that you want to coordinate:","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1092":{"pageContent":"To lift state up, you must locate the closest common parent component of *both* of the child components that you want to coordinate:\n\n`Accordion` *(closest common parent)*\n\n`Panel`\n\n`Panel`\n\nIn this example, it's the `Accordion` component. Since it's above both panels and can control their props, it will become the \"source of truth\" for which panel is currently active. Make the `Accordion` component pass a hardcoded value of `isActive` (for example, `true`) to both panels:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Accordion() {\n\nreturn (\n\n<>\n\n<h2>Almaty, Kazakhstan</h2>\n\n<Panel title=\"About\" isActive={true}>\n\nWith a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n\n</Panel>\n\n<Panel title=\"Etymology\" isActive={true}>","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1093":{"pageContent":"With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n\n</Panel>\n\n<Panel title=\"Etymology\" isActive={true}>\n\nThe name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n\n</Panel>\n\n</>\n\n);\n\n}\n\nfunction Panel({ title, children, isActive }) {\n\nreturn (\n\n<section className=\"panel\">\n\n<h3>{title}</h3>\n\n{isActive ? (\n\n<p>{children}</p>\n\n) : (\n\n<button onClick={() => setIsActive(true)}>\n\nShow\n\n</button>\n\n)}\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nTry editing the hardcoded `isActive` values in the `Accordion` component and see the result on the screen.","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1094":{"pageContent":"```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nTry editing the hardcoded `isActive` values in the `Accordion` component and see the result on the screen.\n\n### Step 3: Add state to the common parent {/*step-3-add-state-to-the-common-parent*/}\n\nLifting state up often changes the nature of what you're storing as state.\n\nIn this case, only one panel should be active at a time. This means that the `Accordion` common parent component needs to keep track of *which* panel is the active one. Instead of a `boolean` value, it could use a number as the index of the active `Panel` for the state variable:\n\n```js\n\nconst [activeIndex, setActiveIndex] = useState(0);\n\n```\n\nWhen the `activeIndex` is `0`, the first panel is active, and when it's `1`, it's the second one.","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1095":{"pageContent":"```js\n\nconst [activeIndex, setActiveIndex] = useState(0);\n\n```\n\nWhen the `activeIndex` is `0`, the first panel is active, and when it's `1`, it's the second one.\n\nClicking the \"Show\" button in either `Panel` needs to change the active index in `Accordion`. A `Panel` can't set the `activeIndex` state directly because it's defined inside the `Accordion`. The `Accordion` component needs to *explicitly allow* the `Panel` component to change its state by [passing an event handler down as a prop](/learn/responding-to-events#passing-event-handlers-as-props):\n\n```js\n\n<>\n\n<Panel\n\nisActive={activeIndex === 0}\n\nonShow={() => setActiveIndex(0)}\n\n>\n\n...\n\n</Panel>\n\n<Panel\n\nisActive={activeIndex === 1}\n\nonShow={() => setActiveIndex(1)}\n\n>\n\n...\n\n</Panel>\n\n</>\n\n```\n\nThe `<button>` inside the `Panel` will now use the `onShow` prop as its click event handler:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Accordion() {\n\nconst [activeIndex, setActiveIndex] = useState(0);\n\nreturn (\n\n<>\n\n<h2>Almaty, Kazakhstan</h2>\n\n<Panel","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1096":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Accordion() {\n\nconst [activeIndex, setActiveIndex] = useState(0);\n\nreturn (\n\n<>\n\n<h2>Almaty, Kazakhstan</h2>\n\n<Panel\n\ntitle=\"About\"\n\nisActive={activeIndex === 0}\n\nonShow={() => setActiveIndex(0)}\n\n>\n\nWith a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n\n</Panel>\n\n<Panel\n\ntitle=\"Etymology\"\n\nisActive={activeIndex === 1}\n\nonShow={() => setActiveIndex(1)}\n\n>\n\nThe name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n\n</Panel>\n\n</>\n\n);\n\n}\n\nfunction Panel({\n\ntitle,\n\nchildren,\n\nisActive,\n\nonShow\n\n}) {\n\nreturn (\n\n<section className=\"panel\">\n\n<h3>{title}</h3>\n\n{isActive ? (\n\n<p>{children}</p>\n\n) : (\n\n<button onClick={onShow}>\n\nShow\n\n</button>\n\n)}","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1097":{"pageContent":"</Panel>\n\n</>\n\n);\n\n}\n\nfunction Panel({\n\ntitle,\n\nchildren,\n\nisActive,\n\nonShow\n\n}) {\n\nreturn (\n\n<section className=\"panel\">\n\n<h3>{title}</h3>\n\n{isActive ? (\n\n<p>{children}</p>\n\n) : (\n\n<button onClick={onShow}>\n\nShow\n\n</button>\n\n)}\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nThis completes lifting state up! Moving state into the common parent component allowed you to coordinate the two panels. Using the active index instead of two \"is shown\" flags ensured that only one panel is active at a given time. And passing down the event handler to the child allowed the child to change the parent's state.\n\n<DiagramGroup>\n\n<Diagram name=\"sharing_state_parent\" height={385} width={487} alt=\"Diagram showing a tree of three components, one parent labeled Accordion and two children labeled Panel. Accordion contains an activeIndex value of zero which turns into isActive value of true passed to the first Panel, and isActive value of false passed to the second Panel.\" >","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1098":{"pageContent":"Initially, `Accordion`'s `activeIndex` is `0`, so the first `Panel` receives `isActive = true`\n\n</Diagram>\n\n<Diagram name=\"sharing_state_parent_clicked\" height={385} width={521} alt=\"The same diagram as the previous, with the activeIndex value of the parent Accordion component highlighted indicating a click with the value changed to one. The flow to both of the children Panel components is also highlighted, and the isActive value passed to each child is set to the opposite: false for the first Panel and true for the second one.\" >\n\nWhen `Accordion`'s `activeIndex` state changes to `1`, the second `Panel` receives `isActive = true` instead\n\n</Diagram>\n\n</DiagramGroup>\n\n<DeepDive>\n\n#### Controlled and uncontrolled components {/*controlled-and-uncontrolled-components*/}\n\nIt is common to call a component with some local state \"uncontrolled\". For example, the original `Panel` component with an `isActive` state variable is uncontrolled because its parent cannot influence whether the panel is active or not.","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1099":{"pageContent":"In contrast, you might say a component is \"controlled\" when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior. The final `Panel` component with the `isActive` prop is controlled by the `Accordion` component.\n\nUncontrolled components are easier to use within their parents because they require less configuration. But they're less flexible when you want to coordinate them together. Controlled components are maximally flexible, but they require the parent components to fully configure them with props.\n\nIn practice, \"controlled\" and \"uncontrolled\" aren't strict technical terms--each component usually has some mix of both local state and props. However, this is a useful way to talk about how components are designed and what capabilities they offer.","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1100":{"pageContent":"When writing a component, consider which information in it should be controlled (via props), and which information should be uncontrolled (via state). But you can always change your mind and refactor later.\n\n</DeepDive>\n\n## A single source of truth for each state {/*a-single-source-of-truth-for-each-state*/}\n\nIn a React application, many components will have their own state. Some state may \"live\" close to the leaf components (components at the bottom of the tree) like inputs. Other state may \"live\" closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1101":{"pageContent":"*For each unique piece of state, you will choose the component that \"owns\" it.** This principle is also known as having a [\"single source of truth\".](https://en.wikipedia.org/wiki/Single_source_of_truth) It doesn't mean that all state lives in one place--but that for _each_ piece of state, there is a _specific_ component that holds that piece of information. Instead of duplicating shared state between components, you will *lift it up* to their common shared parent, and *pass it down* to the children that need it.\n\nYour app will change as you work on it. It is common that you will move state down or back up while you're still figuring out where each piece of the state \"lives\". This is all part of the process!\n\nTo see what this feels like in practice with a few more components, read [Thinking in React.](/learn/thinking-in-react)\n\n<Recap>\n\nWhen you want to coordinate two components, move their state to their common parent.\n\nThen pass the information down through props from their common parent.","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1102":{"pageContent":"<Recap>\n\nWhen you want to coordinate two components, move their state to their common parent.\n\nThen pass the information down through props from their common parent.\n\nFinally, pass the event handlers down so that the children can change the parent's state.\n\nIt's useful to consider components as \"controlled\" (driven by props) or \"uncontrolled\" (driven by state).\n\n</Recap>\n\n<Challenges>\n\n#### Synced inputs {/*synced-inputs*/}\n\nThese two inputs are independent. Make them stay in sync: editing one input should update the other input with the same text, and vice versa.\n\n<Hint>\n\nYou'll need to lift their state up into the parent component.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function SyncedInputs() {\n\nreturn (\n\n<>\n\n<Input label=\"First input\" />\n\n<Input label=\"Second input\" />\n\n</>\n\n);\n\n}\n\nfunction Input({ label }) {\n\nconst [text, setText] = useState('');\n\nfunction handleChange(e) {\n\nsetText(e.target.value);\n\n}\n\nreturn (\n\n<label>\n\n{label}\n\n{' '}\n\n<input\n\nvalue={text}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1103":{"pageContent":"const [text, setText] = useState('');\n\nfunction handleChange(e) {\n\nsetText(e.target.value);\n\n}\n\nreturn (\n\n<label>\n\n{label}\n\n{' '}\n\n<input\n\nvalue={text}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nlabel { display: block; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nMove the `text` state variable into the parent component along with the `handleChange` handler. Then pass them down as props to both of the `Input` components. This will keep them in sync.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function SyncedInputs() {\n\nconst [text, setText] = useState('');\n\nfunction handleChange(e) {\n\nsetText(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<Input\n\nlabel=\"First input\"\n\nvalue={text}\n\nonChange={handleChange}\n\n/>\n\n<Input\n\nlabel=\"Second input\"\n\nvalue={text}\n\nonChange={handleChange}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction Input({ label, value, onChange }) {\n\nreturn (\n\n<label>\n\n{label}\n\n{' '}\n\n<input\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nlabel { display: block; }\n\n```\n\n</Sandpack>\n\n</Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1104":{"pageContent":"return (\n\n<label>\n\n{label}\n\n{' '}\n\n<input\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\nlabel { display: block; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Filtering a list {/*filtering-a-list*/}\n\nIn this example, the `SearchBar` has its own `query` state that controls the text input. Its parent `FilterableList` component displays a `List` of items, but it doesn't take the search query into account.\n\nUse the `filterItems(foods, query)` function to filter the list according to the search query. To test your changes, verify that typing \"s\" into the input filters down the list to \"Sushi\", \"Shish kebab\", and \"Dim sum\".\n\nNote that `filterItems` is already implemented and imported so you don't need to write it yourself!\n\n<Hint>\n\nYou will want to remove the `query` state and the `handleChange` handler from the `SearchBar`, and move them to the `FilterableList`. Then pass them down to `SearchBar` as `query` and `onChange` props.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1105":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { foods, filterItems } from './data.js';\n\nexport default function FilterableList() {\n\nreturn (\n\n<>\n\n<SearchBar />\n\n<hr />\n\n<List items={foods} />\n\n</>\n\n);\n\n}\n\nfunction SearchBar() {\n\nconst [query, setQuery] = useState('');\n\nfunction handleChange(e) {\n\nsetQuery(e.target.value);\n\n}\n\nreturn (\n\n<label>\n\nSearch:{' '}\n\n<input\n\nvalue={query}\n\nonChange={handleChange}\n\n/>\n\n</label>\n\n);\n\n}\n\nfunction List({ items }) {\n\nreturn (\n\n<table>\n\n<tbody>\n\n{items.map(food => (\n\n<tr key={food.id}>\n\n<td>{food.name}</td>\n\n<td>{food.description}</td>\n\n</tr>\n\n))}\n\n</tbody>\n\n</table>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport function filterItems(items, query) {\n\nquery = query.toLowerCase();\n\nreturn items.filter(item =>\n\nitem.name.split(' ').some(word =>\n\nword.toLowerCase().startsWith(query)\n\n)\n\n);\n\n}\n\nexport const foods = [{\n\nid: 0,\n\nname: 'Sushi',\n\ndescription: 'Sushi is a traditional Japanese dish of prepared vinegared rice'\n\n}, {\n\nid: 1,\n\nname: 'Dal',","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1106":{"pageContent":"word.toLowerCase().startsWith(query)\n\n)\n\n);\n\n}\n\nexport const foods = [{\n\nid: 0,\n\nname: 'Sushi',\n\ndescription: 'Sushi is a traditional Japanese dish of prepared vinegared rice'\n\n}, {\n\nid: 1,\n\nname: 'Dal',\n\ndescription: 'The most common way of preparing dal is in the form of a soup to which onions, tomatoes and various spices may be added'\n\n}, {\n\nid: 2,\n\nname: 'Pierogi',\n\ndescription: 'Pierogi are filled dumplings made by wrapping unleavened dough around a savoury or sweet filling and cooking in boiling water'\n\n}, {\n\nid: 3,\n\nname: 'Shish kebab',\n\ndescription: 'Shish kebab is a popular meal of skewered and grilled cubes of meat.'\n\n}, {\n\nid: 4,\n\nname: 'Dim sum',\n\ndescription: 'Dim sum is a large range of small dishes that Cantonese people traditionally enjoy in restaurants for breakfast and lunch'\n\n}];\n\n```\n\n</Sandpack>\n\n<Solution>\n\nLift the `query` state up into the `FilterableList` component. Call `filterItems(foods, query)` to get the filtered list and pass it down to the `List`. Now changing the query input is reflected in the list:","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1107":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { foods, filterItems } from './data.js';\n\nexport default function FilterableList() {\n\nconst [query, setQuery] = useState('');\n\nconst results = filterItems(foods, query);\n\nfunction handleChange(e) {\n\nsetQuery(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<SearchBar\n\nquery={query}\n\nonChange={handleChange}\n\n/>\n\n<hr />\n\n<List items={results} />\n\n</>\n\n);\n\n}\n\nfunction SearchBar({ query, onChange }) {\n\nreturn (\n\n<label>\n\nSearch:{' '}\n\n<input\n\nvalue={query}\n\nonChange={onChange}\n\n/>\n\n</label>\n\n);\n\n}\n\nfunction List({ items }) {\n\nreturn (\n\n<table>\n\n<tbody>\n\n{items.map(food => (\n\n<tr key={food.id}>\n\n<td>{food.name}</td>\n\n<td>{food.description}</td>\n\n</tr>\n\n))}\n\n</tbody>\n\n</table>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport function filterItems(items, query) {\n\nquery = query.toLowerCase();\n\nreturn items.filter(item =>\n\nitem.name.split(' ').some(word =>\n\nword.toLowerCase().startsWith(query)\n\n)\n\n);\n\n}\n\nexport const foods = [{\n\nid: 0,\n\nname: 'Sushi',\n\ndescription: 'Sushi is a traditional Japanese dish of prepared vinegared rice'\n\n}, {\n\nid: 1,\n\nname: 'Dal',","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1108":{"pageContent":"word.toLowerCase().startsWith(query)\n\n)\n\n);\n\n}\n\nexport const foods = [{\n\nid: 0,\n\nname: 'Sushi',\n\ndescription: 'Sushi is a traditional Japanese dish of prepared vinegared rice'\n\n}, {\n\nid: 1,\n\nname: 'Dal',\n\ndescription: 'The most common way of preparing dal is in the form of a soup to which onions, tomatoes and various spices may be added'\n\n}, {\n\nid: 2,\n\nname: 'Pierogi',\n\ndescription: 'Pierogi are filled dumplings made by wrapping unleavened dough around a savoury or sweet filling and cooking in boiling water'\n\n}, {\n\nid: 3,\n\nname: 'Shish kebab',\n\ndescription: 'Shish kebab is a popular meal of skewered and grilled cubes of meat.'\n\n}, {\n\nid: 4,\n\nname: 'Dim sum',\n\ndescription: 'Dim sum is a large range of small dishes that Cantonese people traditionally enjoy in restaurants for breakfast and lunch'\n\n}];\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/sharing-state-between-components.md"}},"1109":{"pageContent":"--\ntitle: Add React to a Website\n---\n\n\n\nYou don't have to build your whole website with React. Adding React to HTML doesn't require installation, takes a minute, and lets you start writing interactive components right away.\n\n\n\n\n\n* How to add React to an HTML page in one minute\n* What is the JSX syntax and how to quickly try it\n* How to set up a JSX preprocessor for production\n\n\n\n## Add React in one minute {/*add-react-in-one-minute*/}\n\nReact has been designed from the start for gradual adoption. Most websites aren't (and don't need to be) fully built with React. This guide shows how to add some sprinkles of interactivity to an existing HTML page.\n\nTry this out with your own website or [an empty HTML file.](https://gist.github.com/gaearon/edf814aeee85062bc9b9830aeaf27b88/archive/3b31c3cdcea7dfcfd38a81905a0052dd8e5f71ec.zip) All you need is an internet connection and a text editor like Notepad or VSCode. (Here's [how to configure your editor](/learn/editor-setup/) for syntax highlighting!)","metadata":{"source":"reactjs.org/beta/src/content/learn/add-react-to-a-website.md"}},"1110":{"pageContent":"### Step 1: Add a root HTML tag {/*step-1-add-a-root-html-tag*/}\n\nFirst, open the HTML page you want to edit. Add an empty `\n\n` tag to mark the spot where you want to display something with React. Give this `\n\n` a unique `id` attribute value. For example:\n\n```html {3}\n\n\n\n\n```\n\nIt's called a \"root\" because it's where the React tree will start. You can place a root HTML tag like this anywhere inside the `` tag. Leave it empty because React will replace its contents with your React component.\n\nYou may have as many root HTML tags as you need on one page.\n\n### Step 2: Add the script tags {/*step-2-add-the-script-tags*/}\n\nIn the HTML page, right before the closing `` tag, add three `\n\n```\n\n\n\nBefore deploying to a live website, make sure to replace `development.js` with `production.min.js`! Development builds of React provide more helpful error messages, but slow down your website *a lot.*\n\n\n\n### Step 3: Create a React component {/*step-3-create-a-react-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/add-react-to-a-website.md"}},"1111":{"pageContent":"### Step 3: Create a React component {/*step-3-create-a-react-component*/}\n\nCreate a file called **`like-button.js`** next to your HTML page, add this code snippet, and save the file. This code defines a React component called `LikeButton`. (Learn more about making components in the [Quick Start!](/learn))\n\n```js\n'use strict';\n\nfunction LikeButton() {\n  const [liked, setLiked] = React.useState(false);\n\n  if (liked) {\n    return 'You liked this!';\n  }\n\n  return React.createElement(\n    'button',\n    {\n      onClick: () => setLiked(true),\n    },\n    'Like'\n  );\n}\n```\n\n### Step 4: Add your React component to the page {/*step-4-add-your-react-component-to-the-page*/}\n\nLastly, add three lines to the bottom of **`like-button.js`.** These lines of code find the `\n\n` you added to the HTML in the first step, create a React root, and then display the \"Like\" button React component inside of it:","metadata":{"source":"reactjs.org/beta/src/content/learn/add-react-to-a-website.md"}},"1112":{"pageContent":"` you added to the HTML in the first step, create a React root, and then display the \"Like\" button React component inside of it:\n\n```js\nconst rootNode = document.getElementById('like-button-root');\nconst root = ReactDOM.createRoot(rootNode);\nroot.render(React.createElement(LikeButton));\n```\n\n**Congratulations! You have just rendered your first React component to your website!**\n\n- [View the full example source code](https://gist.github.com/gaearon/0b535239e7f39c524f9c7dc77c44f09e)\n- [Download the full example (2KB zipped)](https://gist.github.com/gaearon/0b535239e7f39c524f9c7dc77c44f09e/archive/651935b26a48ac68b2de032d874526f2d0896848.zip)\n\n#### You can reuse components! {/*you-can-reuse-components*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/add-react-to-a-website.md"}},"1113":{"pageContent":"#### You can reuse components! {/*you-can-reuse-components*/}\n\nYou might want to display React components in multiple places on the same HTML page. This is useful if React-powered parts of your page are separate from each other. You can do this by putting multiple root tags in your HTML and then rendering React components inside each of them with `ReactDOM.createRoot()`. For example:\n\n1. In **`index.html`,** add an additional container element `\n\n`.\n2. In **`like-button.js`,** add three more lines at the end:\n\n```js {6,7,8,9}\nconst anotherRootNode = document.getElementById('another-root');\nconst anotherRoot = ReactDOM.createRoot(anotherRootNode);\nanotherRoot.render(React.createElement(LikeButton));\n```\n\nIf you need to render the same component in many places, you can assign a CSS `class` instead of `id` to each root, and then find them all. Here is [an example that displays three \"Like\" buttons and passes data to each.](https://gist.github.com/gaearon/779b12e05ffd5f51ffadd50b7ded5bc8)","metadata":{"source":"reactjs.org/beta/src/content/learn/add-react-to-a-website.md"}},"1114":{"pageContent":"### Step 5: Minify JavaScript for production {/*step-5-minify-javascript-for-production*/}\n\nUnminified JavaScript can significantly slow down page load times for your users. Before deploying your website to production, it's a good idea to minify its scripts.\n\n- **If you don't have a minification step** for your scripts, [here's one way to set it up.](https://gist.github.com/gaearon/ee0201910608f15df3f8cd66aa83f98e)\n- **If you already minify** your application scripts, your site will be production-ready if you ensure that the deployed HTML loads the versions of React ending in `production.min.js` like so:\n\n```html","metadata":{"source":"reactjs.org/beta/src/content/learn/add-react-to-a-website.md"}},"1115":{"pageContent":"--\n\ntitle: 'Synchronizing with Effects'\n\n--\n\n<Intro>\n\nSome components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. *Effects* let you run some code after rendering so that you can synchronize your component with some system outside of React.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat Effects are\n\nHow Effects are different from events\n\nHow to declare an Effect in your component\n\nHow to skip re-running an Effect unnecessarily\n\nWhy Effects run twice in development and how to fix them\n\n</YouWillLearn>\n\n## What are Effects and how are they different from events? {/*what-are-effects-and-how-are-they-different-from-events*/}\n\nBefore getting to Effects, you need to be familiar with two types of logic inside React components:","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1116":{"pageContent":"Before getting to Effects, you need to be familiar with two types of logic inside React components:\n\n**Rendering code** (introduced in [Describing the UI](/learn/describing-the-ui)) lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. [Rendering code must be pure.](/learn/keeping-components-pure) Like a math formula, it should only _calculate_ the result, but not do anything else.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1117":{"pageContent":"**Event handlers** (introduced in [Adding Interactivity](/learn/adding-interactivity)) are nested functions inside your components that *do* things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain [\"side effects\"](https://en.wikipedia.org/wiki/Side_effect_(computer_science)) (they change the program's state) and are caused by a specific user action (for example, a button click or typing).\n\nSometimes this isn't enough. Consider a `ChatRoom` component that must connect to the chat server whenever it's visible on the screen. Connecting to a server is not a pure calculation (it's a side effect) so it can't happen during rendering. However, there is no single particular event like a click that causes `ChatRoom` to be displayed.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1118":{"pageContent":"**Effects* let you specify side effects that are caused by rendering itself, rather than by a particular event.** Sending a message in the chat is an *event* because it is directly caused by the user clicking a specific button. However, setting up a server connection is an *Effect* because it needs to happen regardless of which interaction caused the component to appear. Effects run at the end of the [rendering process](/learn/render-and-commit) after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).\n\n<Note>\n\nHere and later in this text, capitalized \"Effect\" refers to the React-specific definition above, i.e. a side effect caused by rendering. To refer to the broader programming concept, we'll say \"side effect\".\n\n</Note>\n\n## You might not need an Effect {/*you-might-not-need-an-effect*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1119":{"pageContent":"</Note>\n\n## You might not need an Effect {/*you-might-not-need-an-effect*/}\n\n*Don't rush to add Effects to your components.** Keep in mind that Effects are typically used to \"step out\" of your React code and synchronize with some *external* system. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state, [you might not need an Effect.](/learn/you-might-not-need-an-effect)\n\n## How to write an Effect {/*how-to-write-an-effect*/}\n\nTo write an Effect, follow these three steps:\n\n1. **Declare an Effect.** By default, your Effect will run after every render.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1120":{"pageContent":"## How to write an Effect {/*how-to-write-an-effect*/}\n\nTo write an Effect, follow these three steps:\n\n1. **Declare an Effect.** By default, your Effect will run after every render.\n\n2. **Specify the Effect dependencies.** Most Effects should only re-run *when needed* rather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifying *dependencies.*\n\n3. **Add cleanup if needed.** Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, \"connect\" needs \"disconnect\", \"subscribe\" needs \"unsubscribe\", and \"fetch\" needs either \"cancel\" or \"ignore\". You will learn how to do this by returning a *cleanup function*.\n\nLet's look at each of these steps in detail.\n\n### Step 1: Declare an Effect {/*step-1-declare-an-effect*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1121":{"pageContent":"Let's look at each of these steps in detail.\n\n### Step 1: Declare an Effect {/*step-1-declare-an-effect*/}\n\nTo declare an Effect in your component, import the [`useEffect` Hook](/reference/react/useEffect) from React:\n\n```js\n\nimport { useEffect } from 'react';\n\n```\n\nThen, call it at the top level of your component and put some code inside your Effect:\n\n```js {2-4}\n\nfunction MyComponent() {\n\nuseEffect(() => {\n\n// Code here will run after *every* render\n\n});\n\nreturn <div />;\n\n}\n\n```\n\nEvery time your component renders, React will update the screen *and then* run the code inside `useEffect`. In other words, **`useEffect` \"delays\" a piece of code from running until that render is reflected on the screen.**\n\nLet's see how you can use an Effect to synchronize with an external system. Consider a `<VideoPlayer>` React component. It would be nice to control whether it's playing or paused by passing an `isPlaying` prop to it:\n\n```js\n\n<VideoPlayer isPlaying={isPlaying} />;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1122":{"pageContent":"```js\n\n<VideoPlayer isPlaying={isPlaying} />;\n\n```\n\nYour custom `VideoPlayer` component renders the built-in browser [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) tag:\n\n```js\n\nfunction VideoPlayer({ src, isPlaying }) {\n\n// TODO: do something with isPlaying\n\nreturn <video src={src} />;\n\n}\n\n```\n\nHowever, the browser `<video>` tag does not have an `isPlaying` prop. The only way to control it is to manually call the [`play()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play) and [`pause()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause) methods on the DOM element. **You need to synchronize the value of `isPlaying` prop, which tells whether the video _should_ currently be playing, with imperative calls like `play()` and `pause()`.**\n\nWe'll need to first [get a ref](/learn/manipulating-the-dom-with-refs) to the `<video>` DOM node.\n\nYou might be tempted to try to call `play()` or `pause()` during rendering, but that isn't correct:","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1123":{"pageContent":"We'll need to first [get a ref](/learn/manipulating-the-dom-with-refs) to the `<video>` DOM node.\n\nYou might be tempted to try to call `play()` or `pause()` during rendering, but that isn't correct:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nif (isPlaying) {\n\nref.current.play();  // Calling these while rendering isn't allowed.\n\n} else {\n\nref.current.pause(); // Also, this crashes.\n\n}\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setIsPlaying(!isPlaying)}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<VideoPlayer\n\nisPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1124":{"pageContent":"isPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>\n\nThe reason this code isn't correct is that it tries to do something with the DOM node during rendering. In React, [rendering should be a pure calculation](/learn/keeping-components-pure) of JSX and should not contain side effects like modifying the DOM.\n\nMoreover, when `VideoPlayer` is called for the first time, its DOM does not exist yet! There isn't a DOM node yet to call `play()` or `pause()` on, because React doesn't know what DOM to create until after you return the JSX.\n\nThe solution here is to **wrap the side effect with `useEffect` to move it out of the rendering calculation:**\n\n```js {6,12}\n\nimport { useEffect, useRef } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1125":{"pageContent":"import { useEffect, useRef } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n});\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\n```\n\nBy wrapping the DOM update in an Effect, you let React update the screen first. Then your Effect runs.\n\nWhen your `VideoPlayer` component renders (either the first time or if it re-renders), a few things will happen. First, React will update the screen, ensuring the `<video>` tag is in the DOM with the right props. Then React will run your Effect. Finally, your Effect will call `play()` or `pause()` depending on the value of `isPlaying` prop.\n\nPress Play/Pause multiple times and see how the video player stays synchronized to the `isPlaying` value:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1126":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n});\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setIsPlaying(!isPlaying)}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<VideoPlayer\n\nisPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>\n\nIn this example, the \"external system\" you synchronized to React state was the browser media API. You can use a similar approach to wrap legacy non-React code (like jQuery plugins) into declarative React components.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1127":{"pageContent":"Note that controlling a video player is much more complex in practice. Calling `play()` may fail, the user might play or pause using the built-in browser controls, and so on. This example is very simplified and incomplete.\n\n<Pitfall>\n\nBy default, Effects run after *every* render. This is why code like this will **produce an infinite loop:**\n\n```js\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nsetCount(count + 1);\n\n});\n\n```\n\nEffects run as a *result* of rendering. Setting state *triggers* rendering. Setting state immediately in an Effect is like plugging a power outlet into itself. The Effect runs, it sets the state, which causes a re-render, which causes the Effect to run, it sets the state again, this causes another re-render, and so on.\n\nEffects should usually synchronize your components with an *external* system. If there's no external system and you only want to adjust some state based on other state, [you might not need an Effect.](/learn/you-might-not-need-an-effect)\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1128":{"pageContent":"</Pitfall>\n\n### Step 2: Specify the Effect dependencies {/*step-2-specify-the-effect-dependencies*/}\n\nBy default, Effects run after *every* render. Often, this is **not what you want:**\n\nSometimes, it's slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it's necessary. For example, you don't want to reconnect to the chat server on every keystroke.\n\nSometimes, it's wrong. For example, you don't want to trigger a component fade-in animation on every keystroke. The animation should only play once when the component appears for the first time.\n\nTo demonstrate the issue, here is the previous example with a few `console.log` calls and a text input that updates the parent component's state. Notice how typing causes the Effect to re-run:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nconsole.log('Calling video.play()');","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1129":{"pageContent":"```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nconsole.log('Calling video.play()');\n\nref.current.play();\n\n} else {\n\nconsole.log('Calling video.pause()');\n\nref.current.pause();\n\n}\n\n});\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={() => setIsPlaying(!isPlaying)}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<VideoPlayer\n\nisPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput, button { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1130":{"pageContent":"src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput, button { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>\n\nYou can tell React to **skip unnecessarily re-running the Effect** by specifying an array of *dependencies* as the second argument to the `useEffect` call. Start by adding an empty `[]` array to the above example on line 14:\n\n```js {3}\n\nuseEffect(() => {\n\n// ...\n\n}, []);\n\n```\n\nYou should see an error saying `React Hook useEffect has a missing dependency: 'isPlaying'`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nconsole.log('Calling video.play()');\n\nref.current.play();\n\n} else {\n\nconsole.log('Calling video.pause()');\n\nref.current.pause();\n\n}\n\n}, []); // This causes an error\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1131":{"pageContent":"ref.current.pause();\n\n}\n\n}, []); // This causes an error\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={() => setIsPlaying(!isPlaying)}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<VideoPlayer\n\nisPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput, button { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>\n\nThe problem is that the code inside of your Effect *depends on* the `isPlaying` prop to decide what to do, but this dependency was not explicitly declared. To fix this issue, add `isPlaying` to the dependency array:\n\n```js {2,7}\n\nuseEffect(() => {\n\nif (isPlaying) { // It's used here...\n\n// ...\n\n} else {\n\n// ...\n\n}\n\n}, [isPlaying]); // ...so it must be declared here!\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1132":{"pageContent":"```js {2,7}\n\nuseEffect(() => {\n\nif (isPlaying) { // It's used here...\n\n// ...\n\n} else {\n\n// ...\n\n}\n\n}, [isPlaying]); // ...so it must be declared here!\n\n```\n\nNow all dependencies are declared, so there is no error. Specifying `[isPlaying]` as the dependency array tells React that it should skip re-running your Effect if `isPlaying` is the same as it was during the previous render. With this change, typing into the input doesn't cause the Effect to re-run, but pressing Play/Pause does:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef, useEffect } from 'react';\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nconsole.log('Calling video.play()');\n\nref.current.play();\n\n} else {\n\nconsole.log('Calling video.pause()');\n\nref.current.pause();\n\n}\n\n}, [isPlaying]);\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1133":{"pageContent":"}\n\n}, [isPlaying]);\n\nreturn <video ref={ref} src={src} loop playsInline />;\n\n}\n\nexport default function App() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={() => setIsPlaying(!isPlaying)}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<VideoPlayer\n\nisPlaying={isPlaying}\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput, button { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1134":{"pageContent":"src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput, button { display: block; margin-bottom: 20px; }\n\nvideo { width: 250px; }\n\n```\n\n</Sandpack>\n\nThe dependency array can contain multiple dependencies. React will only skip re-running the Effect if *all* of the dependencies you specify have exactly the same values as they had during the previous render. React compares the dependency values using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. See the [`useEffect` API reference](/reference/react/useEffect#reference) for more details.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1135":{"pageContent":"*Notice that you can't \"choose\" your dependencies.** You will get a lint error if the dependencies you specified don't match what React expects based on the code inside your Effect. This helps catch many bugs in your code. If your Effect uses some value but you *don't* want to re-run the Effect when it changes, you'll need to [*edit the Effect code itself* to not \"need\" that dependency.](/learn/lifecycle-of-reactive-effects#what-to-do-when-you-dont-want-to-re-synchronize)\n\n<Pitfall>\n\nThe behaviors *without* the dependency array and with an *empty* `[]` dependency array are very different:\n\n```js {3,7,11}\n\nuseEffect(() => {\n\n// This runs after every render\n\n});\n\nuseEffect(() => {\n\n// This runs only on mount (when the component appears)\n\n}, []);\n\nuseEffect(() => {\n\n// This runs on mount *and also* if either a or b have changed since the last render\n\n}, [a, b]);\n\n```\n\nWe'll take a close look at what \"mount\" means in the next step.\n\n</Pitfall>\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1136":{"pageContent":"useEffect(() => {\n\n// This runs on mount *and also* if either a or b have changed since the last render\n\n}, [a, b]);\n\n```\n\nWe'll take a close look at what \"mount\" means in the next step.\n\n</Pitfall>\n\n<DeepDive>\n\n#### Why was the ref omitted from the dependency array? {/*why-was-the-ref-omitted-from-the-dependency-array*/}\n\nThis Effect uses _both_ `ref` and `isPlaying`, but only `isPlaying` is declared as a dependency:\n\n```js {9}\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n}, [isPlaying]);\n\n```\n\nThis is because the `ref` object has a *stable identity:* React guarantees [you'll always get the same object](/reference/react/useRef#returns) from the same `useRef` call on every render. It never changes, so it will never by itself cause the Effect to re-run. Therefore, it does not matter whether you include it or not. Including it is fine too:\n\n```js {9}\n\nfunction VideoPlayer({ src, isPlaying }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1137":{"pageContent":"```js {9}\n\nfunction VideoPlayer({ src, isPlaying }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (isPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n}, [isPlaying, ref]);\n\n```\n\nThe [`set` functions](/reference/react/useState#setstate) returned by `useState` also have stable identity, so you will often see them omitted from the dependencies too. If the linter lets you omit a dependency without errors, it is safe to do.\n\nOmitting always-stable dependencies only works when the linter can \"see\" that the object is stable. For example, if `ref` was passed from a parent component, you would have to specify it in the dependency array. However, this is good because you can't know whether the parent component always passes the same ref, or passes one of several refs conditionally. So your Effect _would_ depend on which ref is passed.\n\n</DeepDive>\n\n### Step 3: Add cleanup if needed {/*step-3-add-cleanup-if-needed*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1138":{"pageContent":"</DeepDive>\n\n### Step 3: Add cleanup if needed {/*step-3-add-cleanup-if-needed*/}\n\nConsider a different example. You're writing a `ChatRoom` component that needs to connect to the chat server when it appears. You are given a `createConnection()` API that returns an object with `connect()` and `disconnect()` methods. How do you keep the component connected while it is displayed to the user?\n\nStart by writing the Effect logic:\n\n```js\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\n});\n\n```\n\nIt would be slow to connect to the chat after every re-render, so you add the dependency array:\n\n```js {4}\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\n}, []);\n\n```\n\n*The code inside the Effect does not use any props or state, so your dependency array is `[]` (empty). This tells React to only run this code when the component \"mounts\", i.e. appears on the screen for the first time.**\n\nLet's try running this code:\n\n<Sandpack>\n\n```js\n\nimport { useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1139":{"pageContent":"Let's try running this code:\n\n<Sandpack>\n\n```js\n\nimport { useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\n}, []);\n\nreturn <h1>Welcome to the chat!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection() {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected.');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\nThis Effect only runs on mount, so you might expect `\"✅ Connecting...\"` to be printed once in the console. **However, if you check the console, `\"✅ Connecting...\"` gets printed twice. Why does it happen?**","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1140":{"pageContent":"Imagine the `ChatRoom` component is a part of a larger app with many different screens. The user starts their journey on the `ChatRoom` page. The component mounts and calls `connection.connect()`. Then imagine the user navigates to another screen--for example, to the Settings page. The `ChatRoom` component unmounts. Finally, the user clicks Back and `ChatRoom` mounts again. This would set up a second connection--but the first connection was never destroyed! As the user navigates across the app, the connections would keep piling up.\n\nBugs like this are easy to miss without extensive manual testing. To help you spot them quickly, in development React remounts every component once immediately after its initial mount. **Seeing the `\"✅ Connecting...\"` log twice helps you notice the real issue: your code doesn't close the connection when the component unmounts.**\n\nTo fix the issue, return a *cleanup function* from your Effect:\n\n```js {4-6}\n\nuseEffect(() => {\n\nconst connection = createConnection();","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1141":{"pageContent":"To fix the issue, return a *cleanup function* from your Effect:\n\n```js {4-6}\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, []);\n\n```\n\nReact will call your cleanup function each time before the Effect runs again, and one final time when the component unmounts (gets removed). Let's see what happens when the cleanup function is implemented:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection } from './chat.js';\n\nexport default function ChatRoom() {\n\nuseEffect(() => {\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, []);\n\nreturn <h1>Welcome to the chat!</h1>;\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection() {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected.');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1142":{"pageContent":"return {\n\nconnect() {\n\nconsole.log('✅ Connecting...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected.');\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\nNow you get three console logs in development:\n\n1. `\"✅ Connecting...\"`\n\n2. `\"❌ Disconnected.\"`\n\n3. `\"✅ Connecting...\"`\n\n*This is the correct behavior in development.** By remounting your component, React verifies that navigating away and back would not break your code. Disconnecting and then connecting again is exactly what should happen! When you implement the cleanup well, there should be no user-visible difference between running the Effect once vs running it, cleaning it up, and running it again. There's an extra connect/disconnect call pair because React is probing your code for bugs in development. This is normal and you shouldn't try to make it go away.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1143":{"pageContent":"*In production, you would only see `\"✅ Connecting...\"` printed once.** Remounting components only happens in development to help you find Effects that need cleanup. You can turn off [Strict Mode](/reference/react/StrictMode) to opt out of the development behavior, but we recommend keeping it on. This lets you find many bugs like the one above.\n\n## How to handle the Effect firing twice in development? {/*how-to-handle-the-effect-firing-twice-in-development*/}\n\nReact intentionally remounts your components in development to help you find bugs like in the last example. **The right question isn't \"how to run an Effect once\", but \"how to fix my Effect so that it works after remounting\".**","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1144":{"pageContent":"Usually, the answer is to implement the cleanup function.  The cleanup function should stop or undo whatever the Effect was doing. The rule of thumb is that the user shouldn't be able to distinguish between the Effect running once (as in production) and a _setup → cleanup → setup_ sequence (as you'd see in development).\n\nMost of the Effects you'll write will fit into one of the common patterns below.\n\n### Controlling non-React widgets {/*controlling-non-react-widgets*/}\n\nSometimes you need to add UI widgets that aren't written to React. For example, let's say you're adding a map component to your page. It has a `setZoomLevel()` method, and you'd like to keep the zoom level in sync with a `zoomLevel` state variable in your React code. Your Effect would look like similar to this:\n\n```js\n\nuseEffect(() => {\n\nconst map = mapRef.current;\n\nmap.setZoomLevel(zoomLevel);\n\n}, [zoomLevel]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1145":{"pageContent":"```js\n\nuseEffect(() => {\n\nconst map = mapRef.current;\n\nmap.setZoomLevel(zoomLevel);\n\n}, [zoomLevel]);\n\n```\n\nNote that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because calling `setZoomLevel` twice with the same value does not do anything. It may be slightly slower, but this doesn't matter because the remounting is development-only and won't happen in production.\n\nSome APIs may not allow you to call them twice in a row. For example, the [`showModal`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal) method of the built-in [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement) element throws if you call it twice. Implement the cleanup function and make it close the dialog:\n\n```js {4}\n\nuseEffect(() => {\n\nconst dialog = dialogRef.current;\n\ndialog.showModal();\n\nreturn () => dialog.close();\n\n}, []);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1146":{"pageContent":"```js {4}\n\nuseEffect(() => {\n\nconst dialog = dialogRef.current;\n\ndialog.showModal();\n\nreturn () => dialog.close();\n\n}, []);\n\n```\n\nIn development, your Effect will call `showModal()`, then immediately `close()`, and then `showModal()` again. This has the same user-visible behavior as calling `showModal()` once, as you would see in production.\n\n### Subscribing to events {/*subscribing-to-events*/}\n\nIf your Effect subscribes to something, the cleanup function should unsubscribe:\n\n```js {6}\n\nuseEffect(() => {\n\nfunction handleScroll(e) {\n\nconsole.log(e.clientX, e.clientY);\n\n}\n\nwindow.addEventListener('scroll', handleScroll);\n\nreturn () => window.removeEventListener('scroll', handleScroll);\n\n}, []);\n\n```\n\nIn development, your Effect will call `addEventListener()`, then immediately `removeEventListener()`, and then `addEventListener()` again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as calling `addEventListener()` once, as you would see in production.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1147":{"pageContent":"### Triggering animations {/*triggering-animations*/}\n\nIf your Effect animates something in, the cleanup function should reset the animation to the initial values:\n\n```js {4-6}\n\nuseEffect(() => {\n\nconst node = ref.current;\n\nnode.style.opacity = 1; // Trigger the animation\n\nreturn () => {\n\nnode.style.opacity = 0; // Reset to the initial value\n\n};\n\n}, []);\n\n```\n\nIn development, opacity will be set to `1`, then to `0`, and then to `1` again. This should have the same user-visible behavior as setting it to `1` directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the tween's timeline to its initial state.\n\n### Fetching data {/*fetching-data*/}\n\nIf your Effect fetches something, the cleanup function should either [abort the fetch](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) or ignore its result:\n\n```js {2,6,13-15}\n\nuseEffect(() => {\n\nlet ignore = false;\n\nasync function startFetching() {","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1148":{"pageContent":"```js {2,6,13-15}\n\nuseEffect(() => {\n\nlet ignore = false;\n\nasync function startFetching() {\n\nconst json = await fetchTodos(userId);\n\nif (!ignore) {\n\nsetTodos(json);\n\n}\n\n}\n\nstartFetching();\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [userId]);\n\n```\n\nYou can't \"undo\" a network request that already happened, but your cleanup function should ensure that the fetch that's _not relevant anymore_ does not keep affecting your application. For example, if the `userId` changes from `'Alice'` to `'Bob'`, cleanup ensures that the `'Alice'` response is ignored even if it arrives after `'Bob'`.\n\n*In development, you will see two fetches in the Network tab.** There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of the `ignore` variable will be set to `true`. So even though there is an extra request, it won't affect the state thanks to the `if (!ignore)` check.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1149":{"pageContent":"*In production, there will only be one request.** If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:\n\n```js\n\nfunction TodoList() {\n\nconst todos = useSomeDataLibrary(`/api/user/${userId}/todos`);\n\n// ...\n\n```\n\nThis will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won't have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many existing alternatives to manual fetching in Effects.\n\n<DeepDive>\n\n#### What are good alternatives to data fetching in Effects? {/*what-are-good-alternatives-to-data-fetching-in-effects*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1150":{"pageContent":"<DeepDive>\n\n#### What are good alternatives to data fetching in Effects? {/*what-are-good-alternatives-to-data-fetching-in-effects*/}\n\nWriting `fetch` calls inside Effects is a [popular way to fetch data](https://www.robinwieruch.de/react-hooks-fetch-data/), especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\n\n**Effects don't run on the server.** This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.\n\n**Fetching directly in Effects makes it easy to create \"network waterfalls\".** You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1151":{"pageContent":"**Fetching directly in Effects usually means you don't preload or cache data.** For example, if the component unmounts and then mounts again, it would have to fetch the data again.\n\n**It's not very ergonomic.** There's quite a bit of boilerplate code involved when writing `fetch` calls in a way that doesn't suffer from bugs like [race conditions.](https://maxrozen.com/race-conditions-fetching-data-react-with-useeffect)\n\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\n\n**If you use a [framework](/learn/start-a-new-react-project#building-with-a-full-featured-framework), use its built-in data fetching mechanism.** Modern React frameworks have integrated data fetching mechanisms that are efficient and don't suffer from the above pitfalls.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1152":{"pageContent":"**Otherwise, consider using or building a client-side cache.** Popular open source solutions include [React Query](https://tanstack.com/query/latest), [useSWR](https://swr.vercel.app/), and [React Router 6.4+.](https://beta.reactrouter.com/en/main/start/overview) You can build your own solution too, in which case you would use Effects under the hood but also add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\n\nYou can continue fetching data directly in Effects if neither of these approaches suit you.\n\n</DeepDive>\n\n### Sending analytics {/*sending-analytics*/}\n\nConsider this code that sends an analytics event on the page visit:\n\n```js\n\nuseEffect(() => {\n\nlogVisit(url); // Sends a POST request\n\n}, [url]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1153":{"pageContent":"</DeepDive>\n\n### Sending analytics {/*sending-analytics*/}\n\nConsider this code that sends an analytics event on the page visit:\n\n```js\n\nuseEffect(() => {\n\nlogVisit(url); // Sends a POST request\n\n}, [url]);\n\n```\n\nIn development, `logVisit` will be called twice for every URL, so you might be tempted to try to work around it. **We recommend to keep this code as is.** Like with earlier examples, there is no *user-visible* behavior difference between running it once and running it twice. From a practical point of view, `logVisit` should not do anything in development because you don't want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it would send extra visits during development anyway.\n\n*In production, there will be no duplicate visit logs.**","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1154":{"pageContent":"*In production, there will be no duplicate visit logs.**\n\nTo debug the analytics events you're sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out of [Strict Mode](/reference/react/StrictMode) and its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For even more precise analytics, [intersection observers](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) can help track which components are in the viewport and how long they remain visible.\n\n### Not an Effect: Initializing the application {/*not-an-effect-initializing-the-application*/}\n\nSome logic should only run once when the application starts. You can put it outside your components:\n\n```js {2-3}\n\nif (typeof window !== 'undefined') { // Check if we're running in the browser.\n\ncheckAuthToken();\n\nloadDataFromLocalStorage();\n\n}\n\nfunction App() {\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1155":{"pageContent":"```js {2-3}\n\nif (typeof window !== 'undefined') { // Check if we're running in the browser.\n\ncheckAuthToken();\n\nloadDataFromLocalStorage();\n\n}\n\nfunction App() {\n\n// ...\n\n}\n\n```\n\nThis guarantees that such logic only runs once after the browser loads the page.\n\n### Not an Effect: Buying a product {/*not-an-effect-buying-a-product*/}\n\nSometimes, even if you write a cleanup function, there's no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:\n\n```js {2-3}\n\nuseEffect(() => {\n\n// 🔴 Wrong: This Effect fires twice in development, exposing a problem in the code.\n\nfetch('/api/buy', { method: 'POST' });\n\n}, []);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1156":{"pageContent":"```js {2-3}\n\nuseEffect(() => {\n\n// 🔴 Wrong: This Effect fires twice in development, exposing a problem in the code.\n\nfetch('/api/buy', { method: 'POST' });\n\n}, []);\n\n```\n\nYou wouldn't want to buy the product twice. However, this is also why you shouldn't put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don't want to buy the product when the user *visits* a page; you want to buy it when the user *clicks* the Buy button.\n\nBuying is not caused by rendering; it's caused by a specific interaction. It only runs once because the interaction (a click) happens once. **Delete the Effect and move your `/api/buy` request into the Buy button event handler:**\n\n```js {2-3}\n\nfunction handleClick() {\n\n// ✅ Buying is an event because it is caused by a particular interaction.\n\nfetch('/api/buy', { method: 'POST' });\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1157":{"pageContent":"```js {2-3}\n\nfunction handleClick() {\n\n// ✅ Buying is an event because it is caused by a particular interaction.\n\nfetch('/api/buy', { method: 'POST' });\n\n}\n\n```\n\n*This illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs.** From the user's perspective, visiting a page shouldn't be different from visiting it, clicking a link, and then pressing Back. React verifies that your components don't break this principle by remounting them once in development.\n\n## Putting it all together {/*putting-it-all-together*/}\n\nThis playground can help you \"get a feel\" for how Effects work in practice.\n\nThis example uses [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) to schedule a console log with the input text to appear three seconds after the Effect runs. The cleanup function cancels the pending timeout. Start by pressing \"Mount the component\":\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nfunction Playground() {","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1158":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nfunction Playground() {\n\nconst [text, setText] = useState('a');\n\nuseEffect(() => {\n\nfunction onTimeout() {\n\nconsole.log('⏰ ' + text);\n\n}\n\nconsole.log('🔵 Schedule \"' + text + '\" log');\n\nconst timeoutId = setTimeout(onTimeout, 3000);\n\nreturn () => {\n\nconsole.log('🟡 Cancel \"' + text + '\" log');\n\nclearTimeout(timeoutId);\n\n};\n\n}, [text]);\n\nreturn (\n\n<>\n\n<label>\n\nWhat to log:{' '}\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n</label>\n\n<h1>{text}</h1>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Unmount' : 'Mount'} the component\n\n</button>\n\n{show && <hr />}\n\n{show && <Playground />}\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1159":{"pageContent":"const [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Unmount' : 'Mount'} the component\n\n</button>\n\n{show && <hr />}\n\n{show && <Playground />}\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nYou will see three logs at first: `Schedule \"a\" log`, `Cancel \"a\" log`, and `Schedule \"a\" log` again. Three second later there will also be a log saying `a`. As you learned earlier on this page, the extra schedule/cancel pair is because **React remounts the component once in development to verify that you've implemented cleanup well.**\n\nNow edit the input to say `abc`. If you do it fast enough, you'll see `Schedule \"ab\" log` immediately followed by `Cancel \"ab\" log` and `Schedule \"abc\" log`. **React always cleans up the previous render's Effect before the next render's Effect.** This is why even if you type into the input fast, there is at most one timeout scheduled at a time. Edit the input a few times and watch the console to get a feel for how Effects get cleaned up.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1160":{"pageContent":"Type something into the input and then immediately press \"Unmount the component\". **Notice how unmounting cleans up the last render's Effect.** In this example, it clears the last timeout before it has a chance to fire.\n\nFinally, edit the component above and **comment out the cleanup function** so that the timeouts don't get cancelled. Try typing `abcde` fast. What do you expect to happen in three seconds? Will `console.log(text)` inside the timeout print the *latest* `text` and produce five `abcde` logs? Give it a try to check your intuition!","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1161":{"pageContent":"Three seconds later, you should see a sequence of logs (`a`, `ab`, `abc`, `abcd`, and `abcde`) rather than five `abcde` logs. **Each Effect \"captures\" the `text` value from its corresponding render.**  It doesn't matter that the `text` state changed: an Effect from the render with `text = 'ab'` will always see `'ab'`. In other words, Effects from each render are isolated from each other. If you're curious how this works, you can read about [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures).\n\n<DeepDive>\n\n#### Each render has its own Effects {/*each-render-has-its-own-effects*/}\n\nYou can think of `useEffect` as \"attaching\" a piece of behavior to the render output. Consider this Effect:\n\n```js\n\nexport default function ChatRoom({ roomId }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to {roomId}!</h1>;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1162":{"pageContent":"useEffect(() => {\n\nconst connection = createConnection(roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to {roomId}!</h1>;\n\n}\n\n```\n\nLet's see what exactly happens as the user navigates around the app.\n\n#### Initial render {/*initial-render*/}\n\nThe user visits `<ChatRoom roomId=\"general\" />`. Let's [mentally substitute](/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time) `roomId` with `'general'`:\n\n```js\n\n// JSX for the first render (roomId = \"general\")\n\nreturn <h1>Welcome to general!</h1>;\n\n```\n\n*The Effect is *also* a part of the rendering output.** The first render's Effect becomes:\n\n```js\n\n// Effect for the first render (roomId = \"general\")\n\n() => {\n\nconst connection = createConnection('general');\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n},\n\n// Dependencies for the first render (roomId = \"general\")\n\n['general']\n\n```\n\nReact runs this Effect, which connects to the `'general'` chat room.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1163":{"pageContent":"connection.connect();\n\nreturn () => connection.disconnect();\n\n},\n\n// Dependencies for the first render (roomId = \"general\")\n\n['general']\n\n```\n\nReact runs this Effect, which connects to the `'general'` chat room.\n\n#### Re-render with same dependencies {/*re-render-with-same-dependencies*/}\n\nLet's say `<ChatRoom roomId=\"general\" />` re-renders. The JSX output is the same:\n\n```js\n\n// JSX for the second render (roomId = \"general\")\n\nreturn <h1>Welcome to general!</h1>;\n\n```\n\nReact sees that the rendering output has not changed, so it doesn't update the DOM.\n\nThe Effect from the second render looks like this:\n\n```js\n\n// Effect for the second render (roomId = \"general\")\n\n() => {\n\nconst connection = createConnection('general');\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n},\n\n// Dependencies for the second render (roomId = \"general\")\n\n['general']\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1164":{"pageContent":"() => {\n\nconst connection = createConnection('general');\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n},\n\n// Dependencies for the second render (roomId = \"general\")\n\n['general']\n\n```\n\nReact compares `['general']` from the second render with `['general']` from the first render. **Because all dependencies are the same, React *ignores* the Effect from the second render.** It never gets called.\n\n#### Re-render with different dependencies {/*re-render-with-different-dependencies*/}\n\nThen, the user visits `<ChatRoom roomId=\"travel\" />`. This time, the component returns different JSX:\n\n```js\n\n// JSX for the third render (roomId = \"travel\")\n\nreturn <h1>Welcome to travel!</h1>;\n\n```\n\nReact updates the DOM to change `\"Welcome to general\"` into `\"Welcome to travel\"`.\n\nThe Effect from the third render looks like this:\n\n```js\n\n// Effect for the third render (roomId = \"travel\")\n\n() => {\n\nconst connection = createConnection('travel');\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n},","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1165":{"pageContent":"```js\n\n// Effect for the third render (roomId = \"travel\")\n\n() => {\n\nconst connection = createConnection('travel');\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n},\n\n// Dependencies for the third render (roomId = \"travel\")\n\n['travel']\n\n```\n\nReact compares `['travel']` from the third render with `['general']` from the second render. One dependency is different: `Object.is('travel', 'general')` is `false`. The Effect can't be skipped.\n\n*Before React can apply the Effect from the third render, it needs to clean up the last Effect that _did_ run.** The second render's Effect was skipped, so React needs to clean up the first render's Effect. If you scroll up to the first render, you'll see that its cleanup calls `disconnect()` on the connection that was created with `createConnection('general')`. This disconnects the app from the `'general'` chat room.\n\nAfter that, React runs the third render's Effect. It connects to the `'travel'` chat room.\n\n#### Unmount {/*unmount*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1166":{"pageContent":"After that, React runs the third render's Effect. It connects to the `'travel'` chat room.\n\n#### Unmount {/*unmount*/}\n\nFinally, let's say the user navigates away, and the `ChatRoom` component unmounts. React runs the last Effect's cleanup function. The last Effect was from the third render. The third render's cleanup destroys the `createConnection('travel')` connection. So the app disconnects from the `'travel'` room.\n\n#### Development-only behaviors {/*development-only-behaviors*/}\n\nWhen [Strict Mode](/reference/react/StrictMode) is on, React remounts every component once after mount (state and DOM are preserved). This [helps you find Effects that need cleanup](#step-3-add-cleanup-if-needed) and exposes bugs like race conditions early. Additionally, React will remount the Effects whenever you save a file in development. Both of these behaviors are development-only.\n\n</DeepDive>\n\n<Recap>\n\nUnlike events, Effects are caused by rendering itself rather than a particular interaction.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1167":{"pageContent":"</DeepDive>\n\n<Recap>\n\nUnlike events, Effects are caused by rendering itself rather than a particular interaction.\n\nEffects let you synchronize a component with some external system (third-party API, network, etc).\n\nBy default, Effects run after every render (including the initial one).\n\nReact will skip the Effect if all of its dependencies have the same values as during the last render.\n\nYou can't \"choose\" your dependencies. They are determined by the code inside the Effect.\n\nAn empty dependency array (`[]`) corresponds to the component \"mounting\", i.e. being added to the screen.\n\nWhen Strict Mode is on, React mounts components twice (in development only!) to stress-test your Effects.\n\nIf your Effect breaks because of remounting, you need to implement a cleanup function.\n\nReact will call your cleanup function before the Effect runs next time, and during the unmount.\n\n</Recap>\n\n<Challenges>\n\n#### Focus a field on mount {/*focus-a-field-on-mount*/}\n\nIn this example, the form renders a `<MyInput />` component.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1168":{"pageContent":"</Recap>\n\n<Challenges>\n\n#### Focus a field on mount {/*focus-a-field-on-mount*/}\n\nIn this example, the form renders a `<MyInput />` component.\n\nUse the input's [`focus()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) method to make `MyInput` automatically focus when it appears on the screen. There is already a commented out implementation, but it doesn't quite work. Figure out why it doesn't work, and fix it. (If you're familiar with the `autoFocus` attribute, pretend that it does not exist: we are reimplementing the same functionality from scratch.)\n\n<Sandpack>\n\n```js MyInput.js active\n\nimport { useEffect, useRef } from 'react';\n\nexport default function MyInput({ value, onChange }) {\n\nconst ref = useRef(null);\n\n// TODO: This doesn't quite work. Fix it.\n\n// ref.current.focus()\n\nreturn (\n\n<input\n\nref={ref}\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1169":{"pageContent":"return (\n\n<input\n\nref={ref}\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst [show, setShow] = useState(false);\n\nconst [name, setName] = useState('Taylor');\n\nconst [upper, setUpper] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} form</button>\n\n<br />\n\n<hr />\n\n{show && (\n\n<>\n\n<label>\n\nEnter your name:\n\n<MyInput\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={upper}\n\nonChange={e => setUpper(e.target.checked)}\n\n/>\n\nMake it uppercase\n\n</label>\n\n<p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n\n</>\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1170":{"pageContent":"Make it uppercase\n\n</label>\n\n<p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n\n</>\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nTo verify that your solution works, press \"Show form\" and verify that the input receives focus (becomes highlighted and the cursor is placed inside). Press \"Hide form\" and \"Show form\" again. Verify the input is highlighted again.\n\n`MyInput` should only focus _on mount_ rather than after every render. To verify that the behavior is right, press \"Show form\" and then repeatedly press the \"Make it uppercase\" checkbox. Clicking the checkbox should _not_ focus the input above it.\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1171":{"pageContent":"<Solution>\n\nCalling `ref.current.focus()` during render is wrong because it is a *side effect*. Side effects should either be placed inside an event handler or be declared with `useEffect`. In this case, the side effect is _caused_ by the component appearing rather than by any specific interaction, so it makes sense to put it in an Effect.\n\nTo fix the mistake, wrap the `ref.current.focus()` call into an Effect declaration. Then, to ensure that this Effect runs only on mount rather than after every render, add the empty `[]` dependencies to it.\n\n<Sandpack>\n\n```js MyInput.js active\n\nimport { useEffect, useRef } from 'react';\n\nexport default function MyInput({ value, onChange }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nref.current.focus();\n\n}, []);\n\nreturn (\n\n<input\n\nref={ref}\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst [show, setShow] = useState(false);","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1172":{"pageContent":"value={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst [show, setShow] = useState(false);\n\nconst [name, setName] = useState('Taylor');\n\nconst [upper, setUpper] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} form</button>\n\n<br />\n\n<hr />\n\n{show && (\n\n<>\n\n<label>\n\nEnter your name:\n\n<MyInput\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={upper}\n\nonChange={e => setUpper(e.target.checked)}\n\n/>\n\nMake it uppercase\n\n</label>\n\n<p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n\n</>\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Focus a field conditionally {/*focus-a-field-conditionally*/}\n\nThis form renders two `<MyInput />` components.","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1173":{"pageContent":"margin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Focus a field conditionally {/*focus-a-field-conditionally*/}\n\nThis form renders two `<MyInput />` components.\n\nPress \"Show form\" and notice that the second field automatically gets focused. This is because both of the `<MyInput />` components try to focus the field inside. When you call `focus()` for two input fields in a row, the last one always \"wins\".\n\nLet's say you want to focus the first field. The first `MyInput` component now receives a boolean `shouldFocus` prop set to `true`. Change the logic so that `focus()` is only called if the `shouldFocus` prop received by `MyInput` is `true`.\n\n<Sandpack>\n\n```js MyInput.js active\n\nimport { useEffect, useRef } from 'react';\n\nexport default function MyInput({ shouldFocus, value, onChange }) {\n\nconst ref = useRef(null);\n\n// TODO: call focus() only if shouldFocus is true.\n\nuseEffect(() => {\n\nref.current.focus();\n\n}, []);\n\nreturn (\n\n<input\n\nref={ref}\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1174":{"pageContent":"const ref = useRef(null);\n\n// TODO: call focus() only if shouldFocus is true.\n\nuseEffect(() => {\n\nref.current.focus();\n\n}, []);\n\nreturn (\n\n<input\n\nref={ref}\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst [show, setShow] = useState(false);\n\nconst [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\nconst [upper, setUpper] = useState(false);\n\nconst name = firstName + ' ' + lastName;\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} form</button>\n\n<br />\n\n<hr />\n\n{show && (\n\n<>\n\n<label>\n\nEnter your first name:\n\n<MyInput\n\nvalue={firstName}\n\nonChange={e => setFirstName(e.target.value)}\n\nshouldFocus={true}\n\n/>\n\n</label>\n\n<label>\n\nEnter your last name:\n\n<MyInput\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}\n\nshouldFocus={false}\n\n/>\n\n</label>\n\n<p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n\n</>\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1175":{"pageContent":"<MyInput\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}\n\nshouldFocus={false}\n\n/>\n\n</label>\n\n<p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n\n</>\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nTo verify your solution, press \"Show form\" and \"Hide form\" repeatedly. When the form appears, only the *first* input should get focused. This is because the parent component renders the first input with `shouldFocus={true}` and the second input with `shouldFocus={false}`. Also check that both inputs still work and you can type into both of them.\n\n<Hint>\n\nYou can't declare an Effect conditionally, but your Effect can include conditional logic.\n\n</Hint>\n\n<Solution>\n\nPut the conditional logic inside the Effect. You will need to specify `shouldFocus` as a dependency because you are using it inside the Effect. (This means that if some input's `shouldFocus` changes from `false` to `true`, it will focus after mount.)\n\n<Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1176":{"pageContent":"<Sandpack>\n\n```js MyInput.js active\n\nimport { useEffect, useRef } from 'react';\n\nexport default function MyInput({ shouldFocus, value, onChange }) {\n\nconst ref = useRef(null);\n\nuseEffect(() => {\n\nif (shouldFocus) {\n\nref.current.focus();\n\n}\n\n}, [shouldFocus]);\n\nreturn (\n\n<input\n\nref={ref}\n\nvalue={value}\n\nonChange={onChange}\n\n/>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst [show, setShow] = useState(false);\n\nconst [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\nconst [upper, setUpper] = useState(false);\n\nconst name = firstName + ' ' + lastName;\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} form</button>\n\n<br />\n\n<hr />\n\n{show && (\n\n<>\n\n<label>\n\nEnter your first name:\n\n<MyInput\n\nvalue={firstName}\n\nonChange={e => setFirstName(e.target.value)}\n\nshouldFocus={true}\n\n/>\n\n</label>\n\n<label>\n\nEnter your last name:\n\n<MyInput\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1177":{"pageContent":"<MyInput\n\nvalue={firstName}\n\nonChange={e => setFirstName(e.target.value)}\n\nshouldFocus={true}\n\n/>\n\n</label>\n\n<label>\n\nEnter your last name:\n\n<MyInput\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}\n\nshouldFocus={false}\n\n/>\n\n</label>\n\n<p>Hello, <b>{upper ? name.toUpperCase() : name}</b></p>\n\n</>\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix an interval that fires twice {/*fix-an-interval-that-fires-twice*/}\n\nThis `Counter` component displays a counter that should increment every second. On mount, it calls [`setInterval`.](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) This causes `onTick` to run every second. The `onTick` function increments the counter.\n\nHowever, instead of incrementing once per second, it increments twice. Why is that? Find the cause of the bug and fix it.\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1178":{"pageContent":"However, instead of incrementing once per second, it increments twice. Why is that? Find the cause of the bug and fix it.\n\n<Hint>\n\nKeep in mind that `setInterval` returns an interval ID, which you can pass to [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval) to stop the interval.\n\n</Hint>\n\n<Sandpack>\n\n```js Counter.js active\n\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nfunction onTick() {\n\nsetCount(c => c + 1);\n\n}\n\nsetInterval(onTick, 1000);\n\n}, []);\n\nreturn <h1>{count}</h1>;\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport Counter from './Counter.js';\n\nexport default function Form() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} counter</button>\n\n<br />\n\n<hr />\n\n{show && <Counter />}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1179":{"pageContent":"<br />\n\n<hr />\n\n{show && <Counter />}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nWhen [Strict Mode](/reference/react/StrictMode) is on (like in the sandboxes on this site), React remounts each component once in development. This causes the interval to be set up twice, and this is why each second the counter increments twice.\n\nHowever, React's behavior is not the *cause* of the bug: the bug already exists in the code. React's behavior makes the bug more noticeable. The real cause is that this Effect starts a process but doesn't provide a way to clean it up.\n\nTo fix this code, save the interval ID returned by `setInterval`, and implement a cleanup function with [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval):\n\n<Sandpack>\n\n```js Counter.js active\n\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1180":{"pageContent":"<Sandpack>\n\n```js Counter.js active\n\nimport { useState, useEffect } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nuseEffect(() => {\n\nfunction onTick() {\n\nsetCount(c => c + 1);\n\n}\n\nconst intervalId = setInterval(onTick, 1000);\n\nreturn () => clearInterval(intervalId);\n\n}, []);\n\nreturn <h1>{count}</h1>;\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport Counter from './Counter.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(s => !s)}>{show ? 'Hide' : 'Show'} counter</button>\n\n<br />\n\n<hr />\n\n{show && <Counter />}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1181":{"pageContent":"<br />\n\n<hr />\n\n{show && <Counter />}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\nbody {\n\nmin-height: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nIn development, React will still remount your component once to verify that you've implemented cleanup well. So there will be a `setInterval` call, immediately followed by `clearInterval`, and `setInterval` again. In production, there will be only one `setInterval` call. The user-visible behavior in both cases is the same: the counter increments once per second.\n\n</Solution>\n\n#### Fix fetching inside an Effect {/*fix-fetching-inside-an-effect*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1182":{"pageContent":"</Solution>\n\n#### Fix fetching inside an Effect {/*fix-fetching-inside-an-effect*/}\n\nThis component shows the biography for the selected person. It loads the biography by calling an asynchronous function `fetchBio(person)` on mount and whenever `person` changes. That asynchronous function returns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which eventually resolves to a string. When fetching is done, it calls `setBio` to display that string under the select box.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\nconst [person, setPerson] = useState('Alice');\n\nconst [bio, setBio] = useState(null);\n\nuseEffect(() => {\n\nsetBio(null);\n\nfetchBio(person).then(result => {\n\nsetBio(result);\n\n});\n\n}, [person]);\n\nreturn (\n\n<>\n\n<select value={person} onChange={e => {\n\nsetPerson(e.target.value);\n\n}}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1183":{"pageContent":"setBio(result);\n\n});\n\n}, [person]);\n\nreturn (\n\n<>\n\n<select value={person} onChange={e => {\n\nsetPerson(e.target.value);\n\n}}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>\n\n<option value=\"Taylor\">Taylor</option>\n\n</select>\n\n<hr />\n\n<p><i>{bio ?? 'Loading...'}</i></p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport async function fetchBio(person) {\n\nconst delay = person === 'Bob' ? 2000 : 200;\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve('This is ' + person + '’s bio.');\n\n}, delay);\n\n})\n\n}\n\n```\n\n</Sandpack>\n\nThere is a bug in this code. Start by selecting \"Alice\". Then select \"Bob\" and then immediately after that select \"Taylor\". If you do this fast enough, you will notice that bug: Taylor is selected, but the paragraph below says \"This is Bob's bio.\"\n\nWhy does this happen? Fix the bug inside this Effect.\n\n<Hint>\n\nIf an Effect fetches something asynchronously, it usually needs cleanup.\n\n</Hint>\n\n<Solution>\n\nTo trigger the bug, things need to happen in this order:\n\nSelecting `'Bob'` triggers `fetchBio('Bob')`","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1184":{"pageContent":"<Hint>\n\nIf an Effect fetches something asynchronously, it usually needs cleanup.\n\n</Hint>\n\n<Solution>\n\nTo trigger the bug, things need to happen in this order:\n\nSelecting `'Bob'` triggers `fetchBio('Bob')`\n\nSelecting `'Taylor'` triggers `fetchBio('Taylor')`\n\n**Fetching `'Taylor'` completes *before* fetching `'Bob'`**\n\nThe Effect from the `'Taylor'` render calls `setBio('This is Taylor’s bio')`\n\nFetching `'Bob'` completes\n\nThe Effect from the `'Bob'` render calls `setBio('This is Bob’s bio')`\n\nThis is why you see Bob's bio even though Taylor is selected. Bugs like this are called [race conditions](https://en.wikipedia.org/wiki/Race_condition) because two asynchronous operations are \"racing\" with each other, and they might arrive in an unexpected order.\n\nTo fix this race condition, add a cleanup function:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\nconst [person, setPerson] = useState('Alice');","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1185":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState, useEffect } from 'react';\n\nimport { fetchBio } from './api.js';\n\nexport default function Page() {\n\nconst [person, setPerson] = useState('Alice');\n\nconst [bio, setBio] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nsetBio(null);\n\nfetchBio(person).then(result => {\n\nif (!ignore) {\n\nsetBio(result);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n}\n\n}, [person]);\n\nreturn (\n\n<>\n\n<select value={person} onChange={e => {\n\nsetPerson(e.target.value);\n\n}}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>\n\n<option value=\"Taylor\">Taylor</option>\n\n</select>\n\n<hr />\n\n<p><i>{bio ?? 'Loading...'}</i></p>\n\n</>\n\n);\n\n}\n\n```\n\n```js api.js hidden\n\nexport async function fetchBio(person) {\n\nconst delay = person === 'Bob' ? 2000 : 200;\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve('This is ' + person + '’s bio.');\n\n}, delay);\n\n})\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1186":{"pageContent":"const delay = person === 'Bob' ? 2000 : 200;\n\nreturn new Promise(resolve => {\n\nsetTimeout(() => {\n\nresolve('This is ' + person + '’s bio.');\n\n}, delay);\n\n})\n\n}\n\n```\n\n</Sandpack>\n\nEach render's Effect has its own `ignore` variable. Initially, the `ignore` variable is set to `false`. However, if an Effect gets cleaned up (such as when you select a different person), its `ignore` variable becomes `true`. So now it doesn't matter in which order the requests complete. Only the last person's Effect will have `ignore` set to `false`, so it will call `setBio(result)`. Past Effects have been cleaned up, so the `if (!ignore)` check will prevent them from calling `setBio`:\n\nSelecting `'Bob'` triggers `fetchBio('Bob')`\n\nSelecting `'Taylor'` triggers `fetchBio('Taylor')` **and cleans up the previous (Bob's) Effect**\n\nFetching `'Taylor'` completes *before* fetching `'Bob'`\n\nThe Effect from the `'Taylor'` render calls `setBio('This is Taylor’s bio')`\n\nFetching `'Bob'` completes","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1187":{"pageContent":"Fetching `'Taylor'` completes *before* fetching `'Bob'`\n\nThe Effect from the `'Taylor'` render calls `setBio('This is Taylor’s bio')`\n\nFetching `'Bob'` completes\n\nThe Effect from the `'Bob'` render **does not do anything because its `ignore` flag was set to `true`**\n\nIn addition to ignoring the result of an outdated API call, you can also use [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) to cancel the requests that are no longer needed. However, by itself this is not enough to protect against race conditions. More asynchronous steps could be chained after the fetch, so using an explicit flag like `ignore` is the most reliable way to fix this type of problems.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/synchronizing-with-effects.md"}},"1188":{"pageContent":"--\n\ntitle: Your First Component\n\n--\n\n<Intro>\n\nComponents* are one of the core concepts of React. They are the foundation upon which you build user interfaces (UI), which makes them the perfect place to start your React journey!\n\n</Intro>\n\n<YouWillLearn>\n\nWhat a component is\n\nWhat role components play in a React application\n\nHow to write your first React component\n\n</YouWillLearn>\n\n## Components: UI building blocks {/*components-ui-building-blocks*/}\n\nOn the Web, HTML lets us create rich structured documents with its built-in set of tags like `<h1>` and `<li>`:\n\n```html\n\n<article>\n\n<h1>My First Component</h1>\n\n<ol>\n\n<li>Components: UI Building Blocks</li>\n\n<li>Defining a Component</li>\n\n<li>Using a Component</li>\n\n</ol>\n\n</article>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1189":{"pageContent":"```html\n\n<article>\n\n<h1>My First Component</h1>\n\n<ol>\n\n<li>Components: UI Building Blocks</li>\n\n<li>Defining a Component</li>\n\n<li>Using a Component</li>\n\n</ol>\n\n</article>\n\n```\n\nThis markup represents this article `<article>`, its heading `<h1>`, and an (abbreviated) table of contents as an ordered list `<ol>`. Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown—every piece of UI you see on the Web.\n\nReact lets you combine your markup, CSS, and JavaScript into custom \"components\", **reusable UI elements for your app.** The table of contents code you saw above could be turned into a `<TableOfContents />` component you could render on every page. Under the hood, it still uses the same HTML tags like `<article>`, `<h1>`, etc.\n\nJust like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you're reading is made out of React components:\n\n```js\n\n<PageLayout>","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1190":{"pageContent":"Just like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you're reading is made out of React components:\n\n```js\n\n<PageLayout>\n\n<NavigationHeader>\n\n<SearchBar />\n\n<Link to=\"/docs\">Docs</Link>\n\n</NavigationHeader>\n\n<Sidebar />\n\n<PageContent>\n\n<TableOfContents />\n\n<DocumentationText />\n\n</PageContent>\n\n</PageLayout>\n\n```\n\nAs your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with `<TableOfContents />`! You can even jumpstart your project with the thousands of components shared by the React open source community like [Chakra UI](https://chakra-ui.com/) and [Material UI.](https://material-ui.com/)\n\n## Defining a component {/*defining-a-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1191":{"pageContent":"## Defining a component {/*defining-a-component*/}\n\nTraditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology: **a React component is a JavaScript function that you can _sprinkle with markup_.** Here's what that looks like (you can edit the example below):\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/MK3eW3Am.jpg\"\n\nalt=\"Katherine Johnson\"\n\n/>\n\n)\n\n}\n\n```\n\n```css\n\nimg { height: 200px; }\n\n```\n\n</Sandpack>\n\nAnd here's how to build a component:\n\n### Step 1: Export the component {/*step-1-export-the-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1192":{"pageContent":"alt=\"Katherine Johnson\"\n\n/>\n\n)\n\n}\n\n```\n\n```css\n\nimg { height: 200px; }\n\n```\n\n</Sandpack>\n\nAnd here's how to build a component:\n\n### Step 1: Export the component {/*step-1-export-the-component*/}\n\nThe `export default` prefix is a [standard JavaScript syntax](https://developer.mozilla.org/docs/web/javascript/reference/statements/export) (not specific to React). It lets you mark the main function in a file so that you can later import it from other files. (More on importing in [Importing and Exporting Components](/learn/importing-and-exporting-components)!)\n\n### Step 2: Define the function {/*step-2-define-the-function*/}\n\nWith `function Profile() { }` you define a JavaScript function with the name `Profile`.\n\n<Pitfall>\n\nReact components are regular JavaScript functions, but **their names must start with a capital letter** or they won't work!\n\n</Pitfall>\n\n### Step 3: Add markup {/*step-3-add-markup*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1193":{"pageContent":"<Pitfall>\n\nReact components are regular JavaScript functions, but **their names must start with a capital letter** or they won't work!\n\n</Pitfall>\n\n### Step 3: Add markup {/*step-3-add-markup*/}\n\nThe component returns an `<img />` tag with `src` and `alt` attributes. `<img />` is written like HTML, but it is actually JavaScript under the hood! This syntax is called [JSX](/learn/writing-markup-with-jsx), and it lets you embed markup inside JavaScript.\n\nReturn statements can be written all on one line, as in this component:\n\n```js\n\nreturn <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />;\n\n```\n\nBut if your markup isn't all on the same line as the `return` keyword, you must wrap it in a pair of parentheses like this:\n\n```js\n\nreturn (\n\n<div>\n\n<img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n\n</div>\n\n);\n\n```\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1194":{"pageContent":"```js\n\nreturn (\n\n<div>\n\n<img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n\n</div>\n\n);\n\n```\n\n<Pitfall>\n\nWithout parentheses, any code on the lines after `return` [will be ignored](https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi)!\n\n</Pitfall>\n\n## Using a component {/*using-a-component*/}\n\nNow that you've defined your `Profile` component, you can nest it inside other components. For example, you can export a `Gallery` component that uses multiple `Profile` components:\n\n<Sandpack>\n\n```js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/MK3eW3As.jpg\"\n\nalt=\"Katherine Johnson\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\n### What the browser sees {/*what-the-browser-sees*/}\n\nNotice the difference in casing:\n\n`<section>` is lowercase, so React knows we refer to an HTML tag.","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1195":{"pageContent":"```\n\n</Sandpack>\n\n### What the browser sees {/*what-the-browser-sees*/}\n\nNotice the difference in casing:\n\n`<section>` is lowercase, so React knows we refer to an HTML tag.\n\n`<Profile />` starts with a capital `P`, so React knows that we want to use our component called `Profile`.\n\nAnd `Profile` contains even more HTML: `<img />`. In the end, this is what the browser sees:\n\n```html\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n\n<img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n\n<img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n\n</section>\n\n```\n\n### Nesting and organizing components {/*nesting-and-organizing-components*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1196":{"pageContent":"<img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />\n\n</section>\n\n```\n\n### Nesting and organizing components {/*nesting-and-organizing-components*/}\n\nComponents are regular JavaScript functions, so you can keep multiple components in the same file. This is convenient when components are relatively small or tightly related to each other. If this file gets crowded, you can always move `Profile` to a separate file. You will learn how to do this shortly on the [page about imports.](/learn/importing-and-exporting-components)\n\nBecause the `Profile` components are rendered inside `Gallery`—even several times!—we can say that `Gallery` is a **parent component,** rendering each `Profile` as a \"child\". This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like.\n\n<Pitfall>\n\nComponents can render other components, but **you must never nest their definitions:**\n\n```js {2-5}\n\nexport default function Gallery() {","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1197":{"pageContent":"<Pitfall>\n\nComponents can render other components, but **you must never nest their definitions:**\n\n```js {2-5}\n\nexport default function Gallery() {\n\n// 🔴 Never define a component inside another component!\n\nfunction Profile() {\n\n// ...\n\n}\n\n// ...\n\n}\n\n```\n\nThe snippet above is [very slow and causes bugs.](/learn/preserving-and-resetting-state#different-components-at-the-same-position-reset-state) Instead, define every component at the top level:\n\n```js {5-8}\n\nexport default function Gallery() {\n\n// ...\n\n}\n\n// ✅ Declare components at the top level\n\nfunction Profile() {\n\n// ...\n\n}\n\n```\n\nWhen a child component needs some data from a parent, [pass it by props](/learn/passing-props-to-a-component) instead of nesting definitions.\n\n</Pitfall>\n\n<DeepDive>\n\n#### Components all the way down {/*components-all-the-way-down*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1198":{"pageContent":"</Pitfall>\n\n<DeepDive>\n\n#### Components all the way down {/*components-all-the-way-down*/}\n\nYour React application begins at a \"root\" component. Usually, it is created automatically when you start a new project. For example, if you use [CodeSandbox](https://codesandbox.io/) or [Create React App](https://create-react-app.dev/), the root component is defined in `src/App.js`. If you use the framework [Next.js](https://nextjs.org/), the root component is defined in `pages/index.js`. In these examples, you've been exporting root components.\n\nMost React apps use components all the way down. This means that you won't only use components for reusable pieces like buttons, but also for larger pieces like sidebars, lists, and ultimately, complete pages! Components are a handy way to organize UI code and markup, even if some of them are only used once.","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1199":{"pageContent":"Frameworks like Next.js take this a step further. Instead of using an empty HTML file and letting React \"take over\" managing the page with JavaScript, they *also* generate the HTML automatically from your React components. This allows your app to show some content before the JavaScript code loads.\n\nStill, many websites only use React to [add \"sprinkles of interactivity\".](/learn/add-react-to-a-website) They have many root components instead of a single one for the entire page. You can use as much—or as little—React as you need.\n\n</DeepDive>\n\n<Recap>\n\nYou've just gotten your first taste of React! Let's recap some key points.\n\nReact lets you create components, **reusable UI elements for your app.**\n\nIn a React app, every piece of UI is a component.\n\nReact components are regular JavaScript functions except:\n\n1. Their names always begin with a capital letter.\n\n2. They return JSX markup.\n\n</Recap>\n\n<Challenges>\n\n#### Export the component {/*export-the-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1200":{"pageContent":"1. Their names always begin with a capital letter.\n\n2. They return JSX markup.\n\n</Recap>\n\n<Challenges>\n\n#### Export the component {/*export-the-component*/}\n\nThis sandbox doesn't work because the root component is not exported:\n\n<Sandpack>\n\n```js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/lICfvbD.jpg\"\n\nalt=\"Aklilu Lemma\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 181px; }\n\n```\n\n</Sandpack>\n\nTry to fix it yourself before looking at the solution!\n\n<Solution>\n\nAdd `export default` before the function definition like so:\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/lICfvbD.jpg\"\n\nalt=\"Aklilu Lemma\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 181px; }\n\n```\n\n</Sandpack>\n\nYou might be wondering why writing `export` alone is not enough to fix this example. You can learn the difference between `export` and `export default` in [Importing and Exporting Components.](/learn/importing-and-exporting-components)\n\n</Solution>\n\n#### Fix the return statement {/*fix-the-return-statement*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1201":{"pageContent":"</Solution>\n\n#### Fix the return statement {/*fix-the-return-statement*/}\n\nSomething isn't right about this `return` statement. Can you fix it?\n\n<Hint>\n\nYou may get an \"Unexpected token\" error while trying to fix this. In that case, check that the semicolon appears *after* the closing parenthesis. Leaving a semicolon inside `return ( )` will cause an error.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn\n\n<img src=\"https://i.imgur.com/jA8hHMpm.jpg\" alt=\"Katsuko Saruhashi\" />;\n\n}\n\n```\n\n```css\n\nimg { height: 180px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can fix this component by moving the return statement to one line like so:\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn <img src=\"https://i.imgur.com/jA8hHMpm.jpg\" alt=\"Katsuko Saruhashi\" />;\n\n}\n\n```\n\n```css\n\nimg { height: 180px; }\n\n```\n\n</Sandpack>\n\nOr by wrapping the returned JSX markup in parentheses that open right after `return`:\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/jA8hHMpm.jpg\"","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1202":{"pageContent":"```\n\n</Sandpack>\n\nOr by wrapping the returned JSX markup in parentheses that open right after `return`:\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/jA8hHMpm.jpg\"\n\nalt=\"Katsuko Saruhashi\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 180px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Spot the mistake {/*spot-the-mistake*/}\n\nSomething's wrong with how the `Profile` component is declared and used. Can you spot the mistake? (Try to remember how React distinguishes components from the regular HTML tags!)\n\n<Sandpack>\n\n```js\n\nfunction profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<profile />\n\n<profile />\n\n<profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nReact component names must start with a capital letter.\n\nChange `function profile()` to `function Profile()`, and then change every `<profile />` to `<Profile />`:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1203":{"pageContent":"```\n\n</Sandpack>\n\n<Solution>\n\nReact component names must start with a capital letter.\n\nChange `function profile()` to `function Profile()`, and then change every `<profile />` to `<Profile />`:\n\n<Sandpack>\n\n```js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Your own component {/*your-own-component*/}\n\nWrite a component from scratch. You can give it any valid name and return any markup. If you're out of ideas, you can write a `Congratulations` component that shows `<h1>Good job!</h1>`. Don't forget to export it!\n\n<Sandpack>\n\n```js\n\n// Write your component below!\n\n```\n\n</Sandpack>\n\n<Solution>\n\n<Sandpack>\n\n```js\n\nexport default function Congratulations() {\n\nreturn (\n\n<h1>Good job!</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/your-first-component.md"}},"1204":{"pageContent":"--\n\ntitle: Passing Data Deeply with Context\n\n--\n\n<Intro>\n\nUsually, you will pass information from a parent component to a child component via props. But passing props can become verbose and inconvenient if you have to pass them through many components in the middle, or if many components in your app need the same information. *Context* lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat \"prop drilling\" is\n\nHow to replace repetitive prop passing with context\n\nCommon use cases for context\n\nCommon alternatives to context\n\n</YouWillLearn>\n\n## The problem with passing props {/*the-problem-with-passing-props*/}\n\n[Passing props](/learn/passing-props-to-a-component) is a great way to explicitly pipe data through your UI tree to the components that use it.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1205":{"pageContent":"[Passing props](/learn/passing-props-to-a-component) is a great way to explicitly pipe data through your UI tree to the components that use it.\n\nBut passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, and [lifting state up](/learn/sharing-state-between-components) that high can lead to a situation sometimes called \"prop drilling\".\n\n<DiagramGroup>\n\n<Diagram name=\"passing_data_lifting_state\" height={160} width={608} captionPosition=\"top\" alt=\"Diagram with a tree of three components. The parent contains a bubble representing a value highlighted in purple. The value flows down to each of the two children, both highlighted in purple.\" >\n\nLifting state up\n\n</Diagram>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1206":{"pageContent":"Lifting state up\n\n</Diagram>\n\n<Diagram name=\"passing_data_prop_drilling\" height={430} width={608} captionPosition=\"top\" alt=\"Diagram with a tree of ten nodes, each node with two children or less. The root node contains a bubble representing a value highlighted in purple. The value flows down through the two children, each of which pass the value but do not contain it. The left child passes the value down to two children which are both highlighted purple. The right child of the root passes the value through to one of its two children - the right one, which is highlighted purple. That child passed the value through its single child, which passes it down to both of its two children, which are highlighted purple.\">\n\nProp drilling\n\n</Diagram>\n\n</DiagramGroup>\n\nWouldn't it be great if there were a way to \"teleport\" data to the components in the tree that need it without passing props? With React's context feature, there is!","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1207":{"pageContent":"</Diagram>\n\n</DiagramGroup>\n\nWouldn't it be great if there were a way to \"teleport\" data to the components in the tree that need it without passing props? With React's context feature, there is!\n\n## Context: an alternative to passing props {/*context-an-alternative-to-passing-props*/}\n\nContext lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this `Heading` component that accepts a `level` for its size:\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading level={1}>Title</Heading>\n\n<Heading level={2}>Heading</Heading>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={5}>Sub-sub-sub-heading</Heading>\n\n<Heading level={6}>Sub-sub-sub-sub-heading</Heading>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1208":{"pageContent":"<Heading level={6}>Sub-sub-sub-sub-heading</Heading>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nexport default function Heading({ level, children }) {\n\nswitch (level) {\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nLet's say you want multiple headings within the same `Section` to always have the same size:\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading level={1}>Title</Heading>\n\n<Section>\n\n<Heading level={2}>Heading</Heading>\n\n<Heading level={2}>Heading</Heading>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1209":{"pageContent":"import Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading level={1}>Title</Heading>\n\n<Section>\n\n<Heading level={2}>Heading</Heading>\n\n<Heading level={2}>Heading</Heading>\n\n<Heading level={2}>Heading</Heading>\n\n<Section>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Section>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nexport default function Heading({ level, children }) {\n\nswitch (level) {\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1210":{"pageContent":"case 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nCurrently, you pass the `level` prop to each `<Heading>` separately:\n\n```js\n\n<Section>\n\n<Heading level={3}>About</Heading>\n\n<Heading level={3}>Photos</Heading>\n\n<Heading level={3}>Videos</Heading>\n\n</Section>\n\n```\n\nIt would be nice if you could pass the `level` prop to the `<Section>` component instead and remove it from the `<Heading>`. This way you could enforce that all headings in the same section have the same size:\n\n```js\n\n<Section level={3}>\n\n<Heading>About</Heading>\n\n<Heading>Photos</Heading>\n\n<Heading>Videos</Heading>\n\n</Section>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1211":{"pageContent":"```js\n\n<Section level={3}>\n\n<Heading>About</Heading>\n\n<Heading>Photos</Heading>\n\n<Heading>Videos</Heading>\n\n</Section>\n\n```\n\nBut how can the `<Heading>` component know the level of its closest `<Section>`? **That would require some way for a child to \"ask\" for data from somewhere above in the tree.**\n\nYou can't do it with props alone. This is where context comes into play. You will do it in three steps:\n\n1. **Create** a context. (You can call it `LevelContext`, since it's for the heading level.)\n\n2. **Use** that context from the component that needs the data. (`Heading` will use `LevelContext`.)\n\n3. **Provide** that context from the component that specifies the data. (`Section` will provide `LevelContext`.)\n\nContext lets a parent--even a distant one!--provide some data to the entire tree inside of it.\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1212":{"pageContent":"Context lets a parent--even a distant one!--provide some data to the entire tree inside of it.\n\n<DiagramGroup>\n\n<Diagram name=\"passing_data_context_close\" height={160} width={608} captionPosition=\"top\" alt=\"Diagram with a tree of three components. The parent contains a bubble representing a value highlighted in orange which projects down to the two children, each highlighted in orange.\" >\n\nUsing context in close children\n\n</Diagram>\n\n<Diagram name=\"passing_data_context_far\" height={430} width={608} captionPosition=\"top\" alt=\"Diagram with a tree of ten nodes, each node with two children or less. The root parent node contains a bubble representing a value highlighted in orange. The value projects down directly to four leaves and one intermediate component in the tree, which are all highlighted in orange. None of the other intermediate components are highlighted.\">\n\nUsing context in distant children\n\n</Diagram>\n\n</DiagramGroup>\n\n### Step 1: Create the context {/*step-1-create-the-context*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1213":{"pageContent":"Using context in distant children\n\n</Diagram>\n\n</DiagramGroup>\n\n### Step 1: Create the context {/*step-1-create-the-context*/}\n\nFirst, you need to create the context. You'll need to **export it from a file** so that your components can use it:\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading level={1}>Title</Heading>\n\n<Section>\n\n<Heading level={2}>Heading</Heading>\n\n<Heading level={2}>Heading</Heading>\n\n<Heading level={2}>Heading</Heading>\n\n<Section>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Heading level={3}>Sub-heading</Heading>\n\n<Section>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1214":{"pageContent":"</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nexport default function Heading({ level, children }) {\n\nswitch (level) {\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js active\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nThe only argument to `createContext` is the _default_ value. Here, `1` refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1215":{"pageContent":"### Step 2: Use the context {/*step-2-use-the-context*/}\n\nImport the `useContext` Hook from React and your context:\n\n```js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\n```\n\nCurrently, the `Heading` component reads `level` from props:\n\n```js\n\nexport default function Heading({ level, children }) {\n\n// ...\n\n}\n\n```\n\nInstead, remove the `level` prop and read the value from the context you just imported, `LevelContext`:\n\n```js {2}\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\n// ...\n\n}\n\n```\n\n`useContext` is a Hook. Just like `useState` and `useReducer`, you can only call a Hook at the top level of a React component. **`useContext` tells React that the `Heading` component wants to read the `LevelContext`.**\n\nNow that the `Heading` component doesn't have a `level` prop, you don't need to pass the level prop to `Heading` in your JSX like this anymore:\n\n```js\n\n<Section>\n\n<Heading level={4}>Sub-sub-heading</Heading>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1216":{"pageContent":"```js\n\n<Section>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n<Heading level={4}>Sub-sub-heading</Heading>\n\n</Section>\n\n```\n\nUpdate the JSX so that it's the `Section` that receives it instead:\n\n```jsx\n\n<Section level={4}>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n```\n\nAs a reminder, this is the markup that you were trying to get working:\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section level={1}>\n\n<Heading>Title</Heading>\n\n<Section level={2}>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Section level={3}>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Section level={4}>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1217":{"pageContent":"<Section level={4}>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1218":{"pageContent":"import { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nNotice this example doesn't quite work, yet! All the headings have the same size because **even though you're *using* the context, you have not *provided* it yet.** React doesn't know where to get it!\n\nIf you don't provide the context, React will use the default value you've specified in the previous step. In this example, you specified `1` as the argument to `createContext`, so `useContext(LevelContext)` returns `1`, setting all those headings to `<h1>`. Let's fix this problem by having each `Section` provide its own context.\n\n### Step 3: Provide the context {/*step-3-provide-the-context*/}\n\nThe `Section` component currently renders its children:\n\n```js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1219":{"pageContent":"The `Section` component currently renders its children:\n\n```js\n\nexport default function Section({ children }) {\n\nreturn (\n\n<section className=\"section\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n*Wrap them with a context provider** to provide the `LevelContext` to them:\n\n```js {1,6,8}\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\nThis tells React: \"if any component inside this `<Section>` asks for `LevelContext`, give them this `level`.\" The component will use the value of the nearest `<LevelContext.Provider>` in the UI tree above it.\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section level={1}>\n\n<Heading>Title</Heading>\n\n<Section level={2}>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Section level={3}>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1220":{"pageContent":"export default function Page() {\n\nreturn (\n\n<Section level={1}>\n\n<Heading>Title</Heading>\n\n<Section level={2}>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Section level={3}>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Section level={4}>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ level, children }) {\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1221":{"pageContent":"export default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(1);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nIt's the same result as the original code, but you did not need to pass the `level` prop to each `Heading` component! Instead, it \"figures out\" its heading level by asking the closest `Section` above:\n\n1. You pass a `level` prop to the `<Section>`.\n\n2. `Section` wraps its children into `<LevelContext.Provider value={level}>`.\n\n3. `Heading` asks the closest value of `LevelContext` above with `useContext(LevelContext)`.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1222":{"pageContent":"2. `Section` wraps its children into `<LevelContext.Provider value={level}>`.\n\n3. `Heading` asks the closest value of `LevelContext` above with `useContext(LevelContext)`.\n\n## Using and providing context from the same component {/*using-and-providing-context-from-the-same-component*/}\n\nCurrently, you still have to specify each section's `level` manually:\n\n```js\n\nexport default function Page() {\n\nreturn (\n\n<Section level={1}>\n\n...\n\n<Section level={2}>\n\n...\n\n<Section level={3}>\n\n...\n\n```\n\nSince context lets you read information from a component above, each `Section` could read the `level` from the `Section` above, and pass `level + 1` down automatically. Here is how you could do it:\n\n```js Section.js {5,8}\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n\nconst level = useContext(LevelContext);\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level + 1}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1223":{"pageContent":"const level = useContext(LevelContext);\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level + 1}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\nWith this change, you don't need to pass the `level` prop *either* to the `<Section>` or to the `<Heading>`:\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading>Title</Heading>\n\n<Section>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Section>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Section>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n\nconst level = useContext(LevelContext);\n\nreturn (\n\n<section className=\"section\">","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1224":{"pageContent":"import { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n\nconst level = useContext(LevelContext);\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level + 1}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 0:\n\nthrow Error('Heading must be inside a Section!');\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1225":{"pageContent":"import { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\nNow both `Heading` and `Section` read the `LevelContext` to figure out how \"deep\" they are. And the `Section` wraps its children into the `LevelContext` to specify that anything inside of it is at a \"deeper\" level.\n\n>This example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can use it to pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on.\n\n## Context passes through intermediate components {/*context-passes-through-intermediate-components*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1226":{"pageContent":"## Context passes through intermediate components {/*context-passes-through-intermediate-components*/}\n\nYou can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like `<div>` and components you might build yourself.\n\nIn this example, the same `Post` component (with a dashed border) is rendered at two different nesting levels. Notice that the `<Heading>` inside of it gets its level automatically from the closest `<Section>`:\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function ProfilePage() {\n\nreturn (\n\n<Section>\n\n<Heading>My Profile</Heading>\n\n<Post\n\ntitle=\"Hello traveller!\"\n\nbody=\"Read about my adventures.\"\n\n/>\n\n<AllPosts />\n\n</Section>\n\n);\n\n}\n\nfunction AllPosts() {\n\nreturn (\n\n<Section>\n\n<Heading>Posts</Heading>\n\n<RecentPosts />\n\n</Section>\n\n);\n\n}\n\nfunction RecentPosts() {\n\nreturn (\n\n<Section>\n\n<Heading>Recent Posts</Heading>\n\n<Post\n\ntitle=\"Flavors of Lisbon\"","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1227":{"pageContent":");\n\n}\n\nfunction AllPosts() {\n\nreturn (\n\n<Section>\n\n<Heading>Posts</Heading>\n\n<RecentPosts />\n\n</Section>\n\n);\n\n}\n\nfunction RecentPosts() {\n\nreturn (\n\n<Section>\n\n<Heading>Recent Posts</Heading>\n\n<Post\n\ntitle=\"Flavors of Lisbon\"\n\nbody=\"...those pastéis de nata!\"\n\n/>\n\n<Post\n\ntitle=\"Buenos Aires in the rhythm of tango\"\n\nbody=\"I loved it!\"\n\n/>\n\n</Section>\n\n);\n\n}\n\nfunction Post({ title, body }) {\n\nreturn (\n\n<Section isFancy={true}>\n\n<Heading>\n\n{title}\n\n</Heading>\n\n<p><i>{body}</i></p>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children, isFancy }) {\n\nconst level = useContext(LevelContext);\n\nreturn (\n\n<section className={\n\n'section ' +\n\n(isFancy ? 'fancy' : '')\n\n}>\n\n<LevelContext.Provider value={level + 1}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 0:","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1228":{"pageContent":"import { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 0:\n\nthrow Error('Heading must be inside a Section!');\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n.fancy {\n\nborder: 4px dashed pink;\n\n}\n\n```\n\n</Sandpack>\n\nYou didn't do anything special for this to work. A `Section` specifies the context for the tree inside it, so you can insert a `<Heading>` anywhere, and it will have the correct size. Try it in the sandbox above!","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1229":{"pageContent":"*Context lets you write components that \"adapt to their surroundings\" and display themselves differently depending on _where_ (or, in other words, _in which context_) they are being rendered.**\n\nHow context works might remind you of [CSS property inheritance.](https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance) In CSS, you can specify `color: blue` for a `<div>`, and any DOM node inside of it, no matter how deep, will inherit that color unless some other DOM node in the middle overrides it with `color: green`. Similarly, in React, the only way to override some context coming from above is to wrap children into a context provider with a different value.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1230":{"pageContent":"In CSS, different properties like `color` and `background-color` don't override each other. You can set all  `<div>`'s `color` to red without impacting `background-color`. Similarly, **different React contexts don't override each other.** Each context that you make with `createContext()` is completely separate from other ones, and ties together components using and providing *that particular* context. One component may use or provide many different contexts without a problem.\n\n## Before you use context {/*before-you-use-context*/}\n\nContext is very tempting to use! However, this also means it's too easy to overuse it. **Just because you need to pass some props several levels deep doesn't mean you should put that information into context.**\n\nHere's a few alternatives you should consider before using context:","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1231":{"pageContent":"Here's a few alternatives you should consider before using context:\n\n1. **Start by [passing props.](/learn/passing-props-to-a-component)** If your components are not trivial, it's not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you've made the data flow explicit with props.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1232":{"pageContent":"2. **Extract components and [pass JSX as `children`](/learn/passing-props-to-a-component#passing-jsx-as-children) to them.** If you pass some data through many layers of intermediate components that don't use that data (and only pass it further down), this often means that you forgot to extract some components along the way. For example, maybe you pass data props like `posts` to visual components that don't use them directly, like `<Layout posts={posts} />`. Instead, make `Layout` take `children` as a prop, and render `<Layout><Posts posts={posts} /></Layout>`. This reduces the number of layers between the component specifying the data and the one that needs it.\n\nIf neither of these approaches works well for you, consider context.\n\n## Use cases for context {/*use-cases-for-context*/}\n\n**Theming:** If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1233":{"pageContent":"**Current account:** Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree. Some apps also let you operate multiple accounts at the same time (e.g. to leave a comment as a different user). In those cases, it can be convenient to wrap a part of the UI into a nested provider with a different current account value.\n\n**Routing:** Most routing solutions use context internally to hold the current route. This is how every link \"knows\" whether it's active or not. If you build your own router, you might want to do it too.\n\n**Managing state:** As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it. It is common to [use a reducer together with context](/learn/scaling-up-with-reducer-and-context) to manage complex state and pass it down to distant components without too much hassle.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1234":{"pageContent":"Context is not limited to static values. If you pass a different value on the next render, React will update all the components reading it below! This is why context is often used in combination with state.\n\nIn general, if some information is needed by distant components in different parts of the tree, it's a good indication that context will help you.\n\n<Recap>\n\nContext lets a component provide some information to the entire tree below it.\n\nTo pass context:\n\n1. Create and export it with `export const MyContext = createContext(defaultValue)`.\n\n2. Pass it to the `useContext(MyContext)` Hook to read it in any child component, no matter how deep.\n\n3. Wrap children into `<MyContext.Provider value={...}>` to provide it from a parent.\n\nContext passes through any components in the middle.\n\nContext lets you write components that \"adapt to their surroundings\".\n\nBefore you use context, try passing props or passing JSX as `children`.\n\n</Recap>\n\n<Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1235":{"pageContent":"Context lets you write components that \"adapt to their surroundings\".\n\nBefore you use context, try passing props or passing JSX as `children`.\n\n</Recap>\n\n<Challenges>\n\n#### Replace prop drilling with context {/*replace-prop-drilling-with-context*/}\n\nIn this example, toggling the checkbox changes the `imageSize` prop passed to each `<PlaceImage>`. The checkbox state is held in the top-level `App` component, but each `<PlaceImage>` needs to be aware of it.\n\nCurrently, `App` passes `imageSize` to `List`, which passes it to each `Place`, which passes it to the `PlaceImage`. Remove the `imageSize` prop, and instead pass it from the `App` component directly to `PlaceImage`.\n\nYou can declare context in `Context.js`.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { places } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function App() {\n\nconst [isLarge, setIsLarge] = useState(false);\n\nconst imageSize = isLarge ? 150 : 100;\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1236":{"pageContent":"import { getImageUrl } from './utils.js';\n\nexport default function App() {\n\nconst [isLarge, setIsLarge] = useState(false);\n\nconst imageSize = isLarge ? 150 : 100;\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isLarge}\n\nonChange={e => {\n\nsetIsLarge(e.target.checked);\n\n}}\n\n/>\n\nUse large images\n\n</label>\n\n<hr />\n\n<List imageSize={imageSize} />\n\n</>\n\n)\n\n}\n\nfunction List({ imageSize }) {\n\nconst listItems = places.map(place =>\n\n<li key={place.id}>\n\n<Place\n\nplace={place}\n\nimageSize={imageSize}\n\n/>\n\n</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\nfunction Place({ place, imageSize }) {\n\nreturn (\n\n<>\n\n<PlaceImage\n\nplace={place}\n\nimageSize={imageSize}\n\n/>\n\n<p>\n\n<b>{place.name}</b>\n\n{': ' + place.description}\n\n</p>\n\n</>\n\n);\n\n}\n\nfunction PlaceImage({ place, imageSize }) {\n\nreturn (\n\n<img\n\nsrc={getImageUrl(place)}\n\nalt={place.name}\n\nwidth={imageSize}\n\nheight={imageSize}\n\n/>\n\n);\n\n}\n\n```\n\n```js Context.js\n\n```\n\n```js data.js\n\nexport const places = [{\n\nid: 0,\n\nname: 'Bo-Kaap in Cape Town, South Africa',\n\ndescription: 'The tradition of choosing bright colors for houses began in the late 20th century.',","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1237":{"pageContent":"```\n\n```js data.js\n\nexport const places = [{\n\nid: 0,\n\nname: 'Bo-Kaap in Cape Town, South Africa',\n\ndescription: 'The tradition of choosing bright colors for houses began in the late 20th century.',\n\nimageId: 'K9HVAGH'\n\n}, {\n\nid: 1,\n\nname: 'Rainbow Village in Taichung, Taiwan',\n\ndescription: 'To save the houses from demolition, Huang Yung-Fu, a local resident, painted all 1,200 of them in 1924.',\n\nimageId: '9EAYZrt'\n\n}, {\n\nid: 2,\n\nname: 'Macromural de Pachuca, Mexico',\n\ndescription: 'One of the largest murals in the world covering homes in a hillside neighborhood.',\n\nimageId: 'DgXHVwu'\n\n}, {\n\nid: 3,\n\nname: 'Selarón Staircase in Rio de Janeiro, Brazil',\n\ndescription: 'This landmark was created by Jorge Selarón, a Chilean-born artist, as a \"tribute to the Brazilian people.\"',\n\nimageId: 'aeO3rpI'\n\n}, {\n\nid: 4,\n\nname: 'Burano, Italy',\n\ndescription: 'The houses are painted following a specific color system dating back to 16th century.',\n\nimageId: 'kxsph5C'\n\n}, {\n\nid: 5,\n\nname: 'Chefchaouen, Marocco',","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1238":{"pageContent":"}, {\n\nid: 4,\n\nname: 'Burano, Italy',\n\ndescription: 'The houses are painted following a specific color system dating back to 16th century.',\n\nimageId: 'kxsph5C'\n\n}, {\n\nid: 5,\n\nname: 'Chefchaouen, Marocco',\n\ndescription: 'There are a few theories on why the houses are painted blue, including that the color repells mosquitos or that it symbolizes sky and heaven.',\n\nimageId: 'rTqKo46'\n\n}, {\n\nid: 6,\n\nname: 'Gamcheon Culture Village in Busan, South Korea',\n\ndescription: 'In 2009, the village was converted into a cultural hub by painting the houses and featuring exhibitions and art installations.',\n\nimageId: 'ZfQOOzf'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(place) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nplace.imageId +\n\n'l.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nRemove `imageSize` prop from all the components.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1239":{"pageContent":"li {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nRemove `imageSize` prop from all the components.\n\nCreate and export `ImageSizeContext` from `Context.js`. Then wrap the List into `<ImageSizeContext.Provider value={imageSize}>` to pass the value down, and `useContext(ImageSizeContext)` to read it in the `PlaceImage`:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState, useContext } from 'react';\n\nimport { places } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nimport { ImageSizeContext } from './Context.js';\n\nexport default function App() {\n\nconst [isLarge, setIsLarge] = useState(false);\n\nconst imageSize = isLarge ? 150 : 100;\n\nreturn (\n\n<ImageSizeContext.Provider\n\nvalue={imageSize}\n\n>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isLarge}\n\nonChange={e => {\n\nsetIsLarge(e.target.checked);\n\n}}\n\n/>\n\nUse large images\n\n</label>\n\n<hr />\n\n<List />\n\n</ImageSizeContext.Provider>\n\n)\n\n}\n\nfunction List() {\n\nconst listItems = places.map(place =>\n\n<li key={place.id}>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1240":{"pageContent":"onChange={e => {\n\nsetIsLarge(e.target.checked);\n\n}}\n\n/>\n\nUse large images\n\n</label>\n\n<hr />\n\n<List />\n\n</ImageSizeContext.Provider>\n\n)\n\n}\n\nfunction List() {\n\nconst listItems = places.map(place =>\n\n<li key={place.id}>\n\n<Place place={place} />\n\n</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\nfunction Place({ place }) {\n\nreturn (\n\n<>\n\n<PlaceImage place={place} />\n\n<p>\n\n<b>{place.name}</b>\n\n{': ' + place.description}\n\n</p>\n\n</>\n\n);\n\n}\n\nfunction PlaceImage({ place }) {\n\nconst imageSize = useContext(ImageSizeContext);\n\nreturn (\n\n<img\n\nsrc={getImageUrl(place)}\n\nalt={place.name}\n\nwidth={imageSize}\n\nheight={imageSize}\n\n/>\n\n);\n\n}\n\n```\n\n```js Context.js\n\nimport { createContext } from 'react';\n\nexport const ImageSizeContext = createContext(500);\n\n```\n\n```js data.js\n\nexport const places = [{\n\nid: 0,\n\nname: 'Bo-Kaap in Cape Town, South Africa',\n\ndescription: 'The tradition of choosing bright colors for houses began in the late 20th century.',\n\nimageId: 'K9HVAGH'\n\n}, {\n\nid: 1,\n\nname: 'Rainbow Village in Taichung, Taiwan',","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1241":{"pageContent":"description: 'The tradition of choosing bright colors for houses began in the late 20th century.',\n\nimageId: 'K9HVAGH'\n\n}, {\n\nid: 1,\n\nname: 'Rainbow Village in Taichung, Taiwan',\n\ndescription: 'To save the houses from demolition, Huang Yung-Fu, a local resident, painted all 1,200 of them in 1924.',\n\nimageId: '9EAYZrt'\n\n}, {\n\nid: 2,\n\nname: 'Macromural de Pachuca, Mexico',\n\ndescription: 'One of the largest murals in the world covering homes in a hillside neighborhood.',\n\nimageId: 'DgXHVwu'\n\n}, {\n\nid: 3,\n\nname: 'Selarón Staircase in Rio de Janeiro, Brazil',\n\ndescription: 'This landmark was created by Jorge Selarón, a Chilean-born artist, as a \"tribute to the Brazilian people\".',\n\nimageId: 'aeO3rpI'\n\n}, {\n\nid: 4,\n\nname: 'Burano, Italy',\n\ndescription: 'The houses are painted following a specific color system dating back to 16th century.',\n\nimageId: 'kxsph5C'\n\n}, {\n\nid: 5,\n\nname: 'Chefchaouen, Marocco',","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1242":{"pageContent":"}, {\n\nid: 4,\n\nname: 'Burano, Italy',\n\ndescription: 'The houses are painted following a specific color system dating back to 16th century.',\n\nimageId: 'kxsph5C'\n\n}, {\n\nid: 5,\n\nname: 'Chefchaouen, Marocco',\n\ndescription: 'There are a few theories on why the houses are painted blue, including that the color repells mosquitos or that it symbolizes sky and heaven.',\n\nimageId: 'rTqKo46'\n\n}, {\n\nid: 6,\n\nname: 'Gamcheon Culture Village in Busan, South Korea',\n\ndescription: 'In 2009, the village was converted into a cultural hub by painting the houses and featuring exhibitions and art installations.',\n\nimageId: 'ZfQOOzf'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(place) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nplace.imageId +\n\n'l.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\n```\n\n</Sandpack>\n\nNote how components in the middle don't need to pass `imageSize` anymore.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-data-deeply-with-context.md"}},"1243":{"pageContent":"--\n\ntitle: 'Separating Events from Effects'\n\n--\n\n<Intro>\n\nEvent handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if some value they read, like a prop or a state variable, is different from what it was during the last render. Sometimes, you also want a mix of both behaviors: an Effect that re-runs in response to some values but not others. This page will teach you how to do that.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to choose between an event handler and an Effect\n\nWhy Effects are reactive, and event handlers are not\n\nWhat to do when you want a part of your Effect's code to not be reactive\n\nWhat Effect Events are, and how to extract them from your Effects\n\nHow to read the latest props and state from Effects using Effect Events\n\n</YouWillLearn>\n\n## Choosing between event handlers and Effects {/*choosing-between-event-handlers-and-effects*/}\n\nFirst, let's recap the difference between event handlers and Effects.","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1244":{"pageContent":"</YouWillLearn>\n\n## Choosing between event handlers and Effects {/*choosing-between-event-handlers-and-effects*/}\n\nFirst, let's recap the difference between event handlers and Effects.\n\nImagine you're implementing a chat room component. Your requirements look like this:\n\n1. Your component should automatically connect to the selected chat room.\n\n1. When you click the \"Send\" button, it should send a message to the chat.\n\nLet's say you've already implemented the code for them, but you're not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider [*why* the code needs to run.](/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events)\n\n### Event handlers run in response to specific interactions {/*event-handlers-run-in-response-to-specific-interactions*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1245":{"pageContent":"### Event handlers run in response to specific interactions {/*event-handlers-run-in-response-to-specific-interactions*/}\n\nFrom the user's perspective, sending a message should happen *because* the particular \"Send\" button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions like clicks:\n\n```js {4-6}\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\n// ...\n\nfunction handleSendClick() {\n\nsendMessage(message);\n\n}\n\n// ...\n\nreturn (\n\n<>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n<button onClick={handleSendClick}>Send</button>;\n\n</>\n\n);\n\n}\n\n```\n\nWith an event handler, you can be sure that `sendMessage(message)` will *only* run if the user presses the button.\n\n### Effects run whenever synchronization is needed {/*effects-run-whenever-synchronization-is-needed*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1246":{"pageContent":"### Effects run whenever synchronization is needed {/*effects-run-whenever-synchronization-is-needed*/}\n\nRecall that you also need to keep the component connected to the chat room. Where does that code go?\n\nThe *reason* to run this code is not some particular interaction. It doesn't matter why or how the user navigated to the chat room screen. Now that they're looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would *still* need to connect. This is why it's an Effect:\n\n```js {3-9}\n\nfunction ChatRoom({ roomId }) {\n\n// ...\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1247":{"pageContent":"function ChatRoom({ roomId }) {\n\n// ...\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\n};\n\n}, [roomId]);\n\n// ...\n\n}\n\n```\n\nWith this code, you can be sure that there is always an active connection to the currently selected chat server, *regardless* of the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect will ensure that the component will *remain synchronized* with the currently selected room, and will [re-connect whenever it's necessary.](/learn/lifecycle-of-reactive-effects#why-synchronization-may-need-to-happen-more-than-once)\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1248":{"pageContent":"import { createConnection, sendMessage } from './chat.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nfunction handleSendClick() {\n\nsendMessage(message);\n\n}\n\nreturn (\n\n<>\n\n<h1>Welcome to the {roomId} room!</h1>\n\n<input value={message} onChange={e => setMessage(e.target.value)} />\n\n<button onClick={handleSendClick}>Send</button>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1249":{"pageContent":"<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<button onClick={() => setShow(!show)}>\n\n{show ? 'Close chat' : 'Open chat'}\n\n</button>\n\n{show && <hr />}\n\n{show && <ChatRoom roomId={roomId} />}\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function sendMessage(message) {\n\nconsole.log('🔵 You sent: ' + message);\n\n}\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nreturn {\n\nconnect() {\n\nconsole.log('✅ Connecting to \"' + roomId + '\" room at ' + serverUrl + '...');\n\n},\n\ndisconnect() {\n\nconsole.log('❌ Disconnected from \"' + roomId + '\" room at ' + serverUrl);\n\n}\n\n};\n\n}\n\n```\n\n```css\n\ninput, select { margin-right: 20px; }\n\n```\n\n</Sandpack>\n\n## Reactive values and reactive logic {/*reactive-values-and-reactive-logic*/}\n\nIntuitively, you could say that event handlers are always triggered \"manually\", for example by clicking a button. Effects, on the other hand, are \"automatic\": they run and re-run as often as it's needed to stay synchronized.","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1250":{"pageContent":"There is a more precise way to think about this.\n\nProps, state, and variables declared inside your component's body are called <CodeStep step={2}>reactive values</CodeStep>. In this example, `serverUrl` is not a reactive value, but `roomId` and `message` are. They participate in the rendering data flow:\n\n```js [[2, 3, \"roomId\"], [2, 4, \"message\"]]\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\n// ...\n\n}\n\n```\n\nReactive values like these can change due to a re-render. For example, the user may edit the `message` or choose a different `roomId` in a dropdown. Event handlers and Effects are different in how they respond to changes:\n\n**Logic inside event handlers is *not reactive.*** It will not run again unless the user performs the same interaction (for example, a click) again. Event handlers can read reactive values, but they don't \"react\" to their changes.","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1251":{"pageContent":"**Logic inside Effects is *reactive.*** If your Effect reads a reactive value, [you have to specify it as a dependency.](/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values) Then, if a re-render causes that value to change, React will re-run your Effect's logic again with the new value.\n\nLet's revisit the previous example to illustrate this difference.\n\n### Logic inside event handlers is not reactive {/*logic-inside-event-handlers-is-not-reactive*/}\n\nTake a look at this line of code. Should this logic be reactive or not?\n\n```js [[2, 2, \"message\"]]\n\n// ...\n\nsendMessage(message);\n\n// ...\n\n```\n\nFrom the user's perspective, **a change to the `message` does _not_ mean that they want to send a message.** It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the <CodeStep step={2}>reactive value</CodeStep> has changed. That's why you placed this logic in the event handler:\n\n```js {2}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1252":{"pageContent":"```js {2}\n\nfunction handleSendClick() {\n\nsendMessage(message);\n\n}\n\n```\n\nEvent handlers aren't reactive, so `sendMessage(message)` will only run when the user clicks the Send button.\n\n### Logic inside Effects is reactive {/*logic-inside-effects-is-reactive*/}\n\nNow let's return to these lines:\n\n```js [[2, 2, \"roomId\"]]\n\n// ...\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\n// ...\n\n```\n\nFrom the user's perspective, **a change to the `roomId` *does* mean that they want to connect to a different room.** In other words, the logic for connecting to the room should be reactive. You *want* these lines of code to \"keep up\" with the <CodeStep step={2}>reactive value</CodeStep>, and to run again if that value is different. That's why you put this logic inside an Effect:\n\n```js {2-3}\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect()\n\n};\n\n}, [roomId]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1253":{"pageContent":"```js {2-3}\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect()\n\n};\n\n}, [roomId]);\n\n```\n\nEffects are reactive, so `createConnection(serverUrl, roomId)` and `connection.connect()` will run for every distinct value of `roomId`. Your Effect keeps the chat connection synchronized to the currently selected room.\n\n## Extracting non-reactive logic out of Effects {/*extracting-non-reactive-logic-out-of-effects*/}\n\nThings get more tricky when you want to mix reactive logic with non-reactive logic.\n\nFor example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:\n\n```js {1,4-6}\n\nfunction ChatRoom({ roomId, theme }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nshowNotification('Connected!', theme);\n\n});\n\nconnection.connect();\n\n// ...\n\n````","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1254":{"pageContent":"useEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nshowNotification('Connected!', theme);\n\n});\n\nconnection.connect();\n\n// ...\n\n````\n\nHowever, `theme` is a reactive value (it can change as a result of re-rendering), and [every reactive value read by an Effect must be declared as its dependency.](/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency) So now you have to specify `theme` as a dependency of your Effect:\n\n```js {5,11}\n\nfunction ChatRoom({ roomId, theme }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nshowNotification('Connected!', theme);\n\n});\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect()\n\n};\n\n}, [roomId, theme]); // ✅ All dependencies declared\n\n// ...\n\n````\n\nPlay with this example and see if you can spot the problem with this user experience:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1255":{"pageContent":"// ...\n\n````\n\nPlay with this example and see if you can spot the problem with this user experience:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nshowNotification('Connected!', theme);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId, theme]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1256":{"pageContent":"return () => connection.disconnect();\n\n}, [roomId, theme]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1257":{"pageContent":"let connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nWhen the `roomId` changes, the chat re-connects as you would expect. But since `theme` is also a dependency, the chat *also* re-connects every time you switch between the dark and the light theme. That's not great!","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1258":{"pageContent":"In other words, you *don't* want this line to be reactive, even though it is inside an Effect (which is reactive):\n\n```js\n\n// ...\n\nshowNotification('Connected!', theme);\n\n// ...\n\n```\n\nYou need a way to separate this non-reactive logic from the reactive Effect around it.\n\n### Declaring an Effect Event {/*declaring-an-effect-event*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nUse a special Hook called [`useEffectEvent`](/reference/react/useEffectEvent) to extract this non-reactive logic out of your Effect:\n\n```js {1,4-6}\n\nimport { useEffect, useEffectEvent } from 'react';\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(() => {\n\nshowNotification('Connected!', theme);\n\n});\n\n// ...\n\n````\n\nHere, `onConnected` is called an *Effect Event.* It's a part of your Effect logic, but it behaves a lot more like an event handler. The logic inside it is not reactive, and it always \"sees\" the latest values of your props and state.","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1259":{"pageContent":"Now you can call the `onConnected` Effect Event from inside your Effect:\n\n```js {2-4,9,13}\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(() => {\n\nshowNotification('Connected!', theme);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nonConnected();\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ All dependencies declared\n\n// ...\n\n```\n\nThis solves the problem. Note that you had to *remove* `onConnected` from the list of your Effect's dependencies. **Effect Events are not reactive and must be omitted from dependencies. The linter will error if you include them.**\n\nVerify that the new behavior works as you would expect:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1260":{"pageContent":"{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(() => {\n\nshowNotification('Connected!', theme);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nonConnected();\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1261":{"pageContent":"});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1262":{"pageContent":"let connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js hidden\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1263":{"pageContent":"style: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nYou can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you \"break the chain\" between the reactivity of Effects and some code that should not be reactive.\n\n### Reading latest props and state with Effect Events {/*reading-latest-props-and-state-with-effect-events*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nEffect Events let you fix many patterns where you might be tempted to suppress the dependency linter.\n\nFor example, say you have an Effect to log the page visits:\n\n```js\n\nfunction Page() {\n\nuseEffect(() => {\n\nlogVisit();\n\n}, []);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1264":{"pageContent":"For example, say you have an Effect to log the page visits:\n\n```js\n\nfunction Page() {\n\nuseEffect(() => {\n\nlogVisit();\n\n}, []);\n\n// ...\n\n}\n\n```\n\nLater, you add multiple routes to your site. Now your `Page` component receives a `url` prop with the current path. You want to pass the `url` as a part of your `logVisit` call, but the dependency linter complains:\n\n```js {1,3}\n\nfunction Page({ url }) {\n\nuseEffect(() => {\n\nlogVisit(url);\n\n}, []); // 🔴 React Hook useEffect has a missing dependency: 'url'\n\n// ...\n\n}\n\n```\n\nThink about what you want the code to do. You *want* to log a separate visit for different URLs since each URL represents a different page. In other words, this `logVisit` call *should* be reactive with respect to the `url`. This is why, in this case, it makes sense to follow the dependency linter, and add `url` as a dependency:\n\n```js {4}\n\nfunction Page({ url }) {\n\nuseEffect(() => {\n\nlogVisit(url);\n\n}, [url]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1265":{"pageContent":"```js {4}\n\nfunction Page({ url }) {\n\nuseEffect(() => {\n\nlogVisit(url);\n\n}, [url]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nNow let's say you want to include the number of items in the shopping cart together with every page visit:\n\n```js {2-3,6}\n\nfunction Page({ url }) {\n\nconst { items } = useContext(ShoppingCartContext);\n\nconst numberOfItems = items.length;\n\nuseEffect(() => {\n\nlogVisit(url, numberOfItems);\n\n}, [url]); // 🔴 React Hook useEffect has a missing dependency: 'numberOfItems'\n\n// ...\n\n}\n\n```\n\nYou used `numberOfItems` inside the Effect, so the linter asks you to add it as a dependency. However, you *don't* want the `logVisit` call to be reactive with respect to `numberOfItems`. If the user puts something into the shopping cart, and the `numberOfItems` changes, this *does not mean* that the user visited the page again. In other words, *visiting the page* feels similar to an event. You want to be very precise about *when* you say it's happened.\n\nSplit the code in two parts:\n\n```js {5-7,10}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1266":{"pageContent":"Split the code in two parts:\n\n```js {5-7,10}\n\nfunction Page({ url }) {\n\nconst { items } = useContext(ShoppingCartContext);\n\nconst numberOfItems = items.length;\n\nconst onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, numberOfItems);\n\n});\n\nuseEffect(() => {\n\nonVisit(url);\n\n}, [url]); // ✅ All dependencies declared\n\n// ...\n\n}\n\n```\n\nHere, `onVisit` is an Effect Event. The code inside it isn't reactive. This is why you can use `numberOfItems` (or any other reactive value!) without worrying that it will cause the surrounding code to re-execute on changes.\n\nOn the other hand, the Effect itself remains reactive. Code inside the Effect uses the `url` prop, so the Effect will re-run after every re-render with a different `url`. This, in turn, will call the `onVisit` Effect Event.\n\nAs a result, you will call `logVisit` for every change to the `url`, and always read the latest `numberOfItems`. However, if `numberOfItems` changes on its own, this will not cause any of the code to re-run.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1267":{"pageContent":"<Note>\n\nYou might be wondering if you could call `onVisit()` with no arguments, and read the `url` inside it:\n\n```js {2,6}\n\nconst onVisit = useEffectEvent(() => {\n\nlogVisit(url, numberOfItems);\n\n});\n\nuseEffect(() => {\n\nonVisit();\n\n}, [url]);\n\n```\n\nThis would work, but it's better to pass this `url` to the Effect Event explicitly. **By passing `url` as an argument to your Effect Event, you are saying that visiting a page with a different `url` constitutes a separate \"event\" from the user's perspective.** The `visitedUrl` is a *part* of the \"event\" that happened:\n\n```js {1-2,6}\n\nconst onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, numberOfItems);\n\n});\n\nuseEffect(() => {\n\nonVisit(url);\n\n}, [url]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1268":{"pageContent":"```js {1-2,6}\n\nconst onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, numberOfItems);\n\n});\n\nuseEffect(() => {\n\nonVisit(url);\n\n}, [url]);\n\n```\n\nSince your Effect Event explicitly \"asks\" for the `visitedUrl`, now you can't accidentally remove `url` from the Effect's dependencies. If you remove the `url` dependency (causing distinct page visits to be counted as one), the linter will warn you about it. You want `onVisit` to be reactive with regards to the `url`, so instead of reading the `url` inside (where it wouldn't be reactive), you pass it *from* your Effect.\n\nThis becomes especially important if there is some asynchronous logic inside the Effect:\n\n```js {6,8}\n\nconst onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, numberOfItems);\n\n});\n\nuseEffect(() => {\n\nsetTimeout(() => {\n\nonVisit(url);\n\n}, 5000); // Delay logging visits\n\n}, [url]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1269":{"pageContent":"```js {6,8}\n\nconst onVisit = useEffectEvent(visitedUrl => {\n\nlogVisit(visitedUrl, numberOfItems);\n\n});\n\nuseEffect(() => {\n\nsetTimeout(() => {\n\nonVisit(url);\n\n}, 5000); // Delay logging visits\n\n}, [url]);\n\n```\n\nIn this example, `url` inside `onVisit` corresponds to the *latest* `url` (which could have already changed), but `visitedUrl` corresponds to the `url` that originally caused this Effect (and this `onVisit` call) to run.\n\n</Note>\n\n<DeepDive>\n\n#### Is it okay to suppress the dependency linter instead? {/*is-it-okay-to-suppress-the-dependency-linter-instead*/}\n\nIn the existing codebases, you may sometimes see the lint rule suppressed like this:\n\n```js {7-9}\n\nfunction Page({ url }) {\n\nconst { items } = useContext(ShoppingCartContext);\n\nconst numberOfItems = items.length;\n\nuseEffect(() => {\n\nlogVisit(url, numberOfItems);\n\n// 🔴 Avoid suppressing the linter like this:\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, [url]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1270":{"pageContent":"useEffect(() => {\n\nlogVisit(url, numberOfItems);\n\n// 🔴 Avoid suppressing the linter like this:\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, [url]);\n\n// ...\n\n}\n\n```\n\nAfter `useEffectEvent` becomes a stable part of React, we recommend to **never suppress the linter** like this.\n\nThe first downside of suppressing the rule is that React will no longer warn you when your Effect needs to \"react\" to a new reactive dependency you've introduced to your code. For example, in the earlier example, you added `url` to the dependencies *because* React reminded you to do it. You will no longer get such reminders for any future edits to that Effect if you disable the linter. This leads to bugs.\n\nHere is an example of a confusing bug caused by suppressing the linter. In this example, the `handleMove` function is supposed to read the current `canMove` state variable value in order to decide whether the dot should follow the cursor. However, `canMove` is always `true` inside `handleMove`. Can you see why?","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1271":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nfunction handleMove(e) {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n}\n\nuseEffect(() => {\n\nwindow.addEventListener('pointermove', handleMove);\n\nreturn () => window.removeEventListener('pointermove', handleMove);\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, []);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1272":{"pageContent":"opacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nThe problem with the this code is in suppressing the dependency linter. If you remove the suppression, you'll see that this Effect should depend on the `handleMove` function. This makes sense: `handleMove` is declared inside the component body, which makes it a reactive value. Every reactive value must be specified as a dependency, or it can potentially get stale over time!","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1273":{"pageContent":"The author of the original code has \"lied\" to React by saying that the Effect does not depend (`[]`) on any reactive values. This is why React did not re-synchronize the Effect after `canMove` has changed (and `handleMove` with it). Because React did not re-synchronize the Effect, the `handleMove` attached as a listener is the `handleMove` function created during the initial render. During the initial render, `canMove` was `true`, which is why `handleMove` from the initial render will forever see that value.\n\n*If you never suppress the linter, you will never see problems with stale values.**\n\nWith `useEffectEvent`, there is no need to \"lie\" to the linter, and the code works as you would expect:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1274":{"pageContent":"\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function App() {\n\nconst [position, setPosition] = useState({ x: 0, y: 0 });\n\nconst [canMove, setCanMove] = useState(true);\n\nconst onMove = useEffectEvent(e => {\n\nif (canMove) {\n\nsetPosition({ x: e.clientX, y: e.clientY });\n\n}\n\n});\n\nuseEffect(() => {\n\nwindow.addEventListener('pointermove', onMove);\n\nreturn () => window.removeEventListener('pointermove', onMove);\n\n}, []);\n\nreturn (\n\n<>\n\n<label>\n\n<input type=\"checkbox\"\n\nchecked={canMove}\n\nonChange={e => setCanMove(e.target.checked)}\n\n/>\n\nThe dot is allowed to move\n\n</label>\n\n<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1275":{"pageContent":"<hr />\n\n<div style={{\n\nposition: 'absolute',\n\nbackgroundColor: 'pink',\n\nborderRadius: '50%',\n\nopacity: 0.6,\n\ntransform: `translate(${position.x}px, ${position.y}px)`,\n\npointerEvents: 'none',\n\nleft: -20,\n\ntop: -20,\n\nwidth: 40,\n\nheight: 40,\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\nheight: 200px;\n\n}\n\n```\n\n</Sandpack>\n\nThis doesn't mean that `useEffectEvent` is *always* the correct solution. You should only apply it to the lines of code that you don't want to be reactive. For example, in the above sandbox, you didn't want the Effect's code to be reactive with regards to `canMove`. That's why it made sense to extract an Effect Event.\n\nRead [Removing Effect Dependencies](/learn/removing-effect-dependencies) for other correct alternatives to suppressing the linter.\n\n</DeepDive>\n\n### Limitations of Effect Events {/*limitations-of-effect-events*/}\n\n<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nEffect Events are very limited in how you can use them:","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1276":{"pageContent":"<Wip>\n\nThis section describes an **experimental API that has not yet been added to React,** so you can't use it yet.\n\n</Wip>\n\nEffect Events are very limited in how you can use them:\n\n**Only call them from inside Effects.**\n\n**Never pass them to other components or Hooks.**\n\nFor example, don't declare and pass an Effect Event like this:\n\n```js {4-6,8}\n\nfunction Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst onTick = useEffectEvent(() => {\n\nsetCount(count + 1);\n\n});\n\nuseTimer(onTick, 1000); // 🔴 Avoid: Passing Effect Events\n\nreturn <h1>{count}</h1>\n\n}\n\nfunction useTimer(callback, delay) {\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\ncallback();\n\n}, delay);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n}, [delay, callback]); // Need to specify \"callback\" in dependencies\n\n}\n\n```\n\nInstead, always declare Effect Events directly next to the Effects that use them:\n\n```js {10-12,16,21}\n\nfunction Timer() {\n\nconst [count, setCount] = useState(0);\n\nuseTimer(() => {\n\nsetCount(count + 1);\n\n}, 1000);\n\nreturn <h1>{count}</h1>\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1277":{"pageContent":"```js {10-12,16,21}\n\nfunction Timer() {\n\nconst [count, setCount] = useState(0);\n\nuseTimer(() => {\n\nsetCount(count + 1);\n\n}, 1000);\n\nreturn <h1>{count}</h1>\n\n}\n\nfunction useTimer(callback, delay) {\n\nconst onTick = useEffectEvent(() => {\n\ncallback();\n\n});\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nonTick(); // ✅ Good: Only called locally inside an Effect\n\n}, delay);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n}, [delay]); // No need to specify \"onTick\" (an Effect Event) as a dependency\n\n}\n\n```\n\nEffect Events are non-reactive \"pieces\" of your Effect code. They should be next to the Effect using them.\n\n<Recap>\n\nEvent handlers run in response to specific interactions.\n\nEffects run whenever synchronization is needed.\n\nLogic inside event handlers is not reactive.\n\nLogic inside Effects is reactive.\n\nYou can move non-reactive logic from Effects into Effect Events.\n\nOnly call Effect Events from inside Effects.\n\nDon't pass Effect Events to other components or Hooks.\n\n</Recap>\n\n<Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1278":{"pageContent":"You can move non-reactive logic from Effects into Effect Events.\n\nOnly call Effect Events from inside Effects.\n\nDon't pass Effect Events to other components or Hooks.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a variable that doesn't update {/*fix-a-variable-that-doesnt-update*/}\n\nThis `Timer` component keeps a `count` state variable which increases every second. The value by which it's increasing is stored in the `increment` state variable. You can control the `increment` variable with the plus and minus buttons.\n\nHowever, no matter how many times you click the plus button, the counter is still incremented by one every second. What's wrong with this code? Why is `increment` always equal to `1` inside the Effect's code? Find the mistake and fix it.\n\n<Hint>\n\nTo fix this code, it's enough to follow the rules.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1279":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + increment);\n\n}, 1000);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n// eslint-disable-next-line react-hooks/exhaustive-deps\n\n}, []);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nEvery second, increment by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nAs usual, when you're looking for bugs in Effects, start by searching for linter suppressions.","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1280":{"pageContent":"setIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nAs usual, when you're looking for bugs in Effects, start by searching for linter suppressions.\n\nIf you remove the suppression comment, React will tell you that this Effect's code depends on `increment`, but you \"lied\" to React by claiming that this Effect does not depend on any reactive values (`[]`). Add `increment` to the dependency array:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + increment);\n\n}, 1000);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n}, [increment]);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nEvery second, increment by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1281":{"pageContent":"<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nEvery second, increment by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\nNow, when `increment` changes, React will re-synchronize your Effect, which will restart the interval.\n\n</Solution>\n\n#### Fix a freezing counter {/*fix-a-freezing-counter*/}\n\nThis `Timer` component keeps a `count` state variable which increases every second. The value by which it's increasing is stored in the `increment` state variable, which you can control it with the plus and minus buttons. For example, try pressing the plus button nine times, and notice that the `count` now increases each second by ten rather than by one.","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1282":{"pageContent":"There is a small issue with this user interface. You might notice that if you keep pressing the plus or minus buttons faster than once per second, the timer itself seems to pause. It only resumes after a second passes since the last time you've pressed either button. Find why this is happening, and fix the issue so that the timer ticks on *every* second without interruptions.\n\n<Hint>\n\nIt seems like the Effect which sets up the timer \"reacts\" to the `increment` value. Does the line that uses the current `increment` value in order to call `setCount` really need to be reactive?\n\n</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1283":{"pageContent":"\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetCount(c => c + increment);\n\n}, 1000);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n}, [increment]);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nEvery second, increment by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1284":{"pageContent":"setIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe issue is that the code inside the Effect uses the `increment` state variable. Since it's a dependency of your Effect, every change to `increment` causes the Effect to re-synchronize, which causes the interval to clear. If you keep clearing the interval every time before it has a chance to fire, it will appear as if the timer has stalled.\n\nTo solve the issue, extract an `onTick` Effect Event from the Effect:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1285":{"pageContent":"\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nconst onTick = useEffectEvent(() => {\n\nsetCount(c => c + increment);\n\n});\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nonTick();\n\n}, 1000);\n\nreturn () => {\n\nclearInterval(id);\n\n};\n\n}, []);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nEvery second, increment by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1286":{"pageContent":"setIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\nSince `onTick` is an Effect Event, the code inside it isn't reactive. The change to `increment` does not trigger any Effects.\n\n</Solution>\n\n#### Fix a non-adjustable delay {/*fix-a-non-adjustable-delay*/}\n\nIn this example, you can customize the interval delay. It's stored in a `delay` state variable which is updated by two buttons. However, even if you press the \"plus 100 ms\" button until the `delay` is 1000 milliseconds (that is, a second), you'll notice that the timer still increments very fast (every 100 ms). It's as if your changes to the `delay` are ignored. Find and fix the bug.\n\n<Hint>\n\nCode inside Effect Events is not reactive. Are there cases in which you would _want_ the `setInterval` call to re-run?\n\n</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1287":{"pageContent":"</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nconst [delay, setDelay] = useState(100);\n\nconst onTick = useEffectEvent(() => {\n\nsetCount(c => c + increment);\n\n});\n\nconst onMount = useEffectEvent(() => {\n\nreturn setInterval(() => {\n\nonTick();\n\n}, delay);\n\n});\n\nuseEffect(() => {\n\nconst id = onMount();\n\nreturn () => {\n\nclearInterval(id);\n\n}\n\n}, []);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nIncrement by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1288":{"pageContent":"return (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nIncrement by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n<p>\n\nIncrement delay:\n\n<button disabled={delay === 100} onClick={() => {\n\nsetDelay(d => d - 100);\n\n}}>–100 ms</button>\n\n<b>{delay} ms</b>\n\n<button onClick={() => {\n\nsetDelay(d => d + 100);\n\n}}>+100 ms</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1289":{"pageContent":"setDelay(d => d - 100);\n\n}}>–100 ms</button>\n\n<b>{delay} ms</b>\n\n<button onClick={() => {\n\nsetDelay(d => d + 100);\n\n}}>+100 ms</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem with the above example is that it extracted an Effect Event called `onMount` without considering what the code should actually be doing. You should only extract Effect Events for a specific reason: when you want to make a part of your code non-reactive. However, the `setInterval` call *should* be reactive with respect to the `delay` state variable. If the `delay` changes, you want to set up the interval from scratch! To fix this code, pull all the reactive code back inside the Effect:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1290":{"pageContent":"\"react-scripts\": \"latest\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function Timer() {\n\nconst [count, setCount] = useState(0);\n\nconst [increment, setIncrement] = useState(1);\n\nconst [delay, setDelay] = useState(100);\n\nconst onTick = useEffectEvent(() => {\n\nsetCount(c => c + increment);\n\n});\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nonTick();\n\n}, delay);\n\nreturn () => {\n\nclearInterval(id);\n\n}\n\n}, [delay]);\n\nreturn (\n\n<>\n\n<h1>\n\nCounter: {count}\n\n<button onClick={() => setCount(0)}>Reset</button>\n\n</h1>\n\n<hr />\n\n<p>\n\nIncrement by:\n\n<button disabled={increment === 0} onClick={() => {\n\nsetIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n<p>\n\nIncrement delay:\n\n<button disabled={delay === 100} onClick={() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1291":{"pageContent":"setIncrement(i => i - 1);\n\n}}>–</button>\n\n<b>{increment}</b>\n\n<button onClick={() => {\n\nsetIncrement(i => i + 1);\n\n}}>+</button>\n\n</p>\n\n<p>\n\nIncrement delay:\n\n<button disabled={delay === 100} onClick={() => {\n\nsetDelay(d => d - 100);\n\n}}>–100 ms</button>\n\n<b>{delay} ms</b>\n\n<button onClick={() => {\n\nsetDelay(d => d + 100);\n\n}}>+100 ms</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1292":{"pageContent":"setDelay(d => d - 100);\n\n}}>–100 ms</button>\n\n<b>{delay} ms</b>\n\n<button onClick={() => {\n\nsetDelay(d => d + 100);\n\n}}>+100 ms</button>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 10px; }\n\n```\n\n</Sandpack>\n\nIn general, you should be suspicious of functions like `onMount` that focus on the *timing* rather than the *purpose* of a piece of code. It may feel \"more descriptive\" at first but it obscures your intent. As a rule of thumb, Effect Events should correspond to something that happens from the *user's* perspective. For example, `onMessage`, `onTick`, `onVisit`, or `onConnected` are good Effect Event names. Code inside them would likely not need to be reactive. On the other hand, `onMount`, `onUpdate`, `onUnmount`, or `onAfterRender` are so generic that it's easy to accidentally put code that *should* be reactive into them. This is why you should name your Effect Events after *what the user thinks has happened,* not when some code happened to run.\n\n</Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1293":{"pageContent":"</Solution>\n\n#### Fix a delayed notification {/*fix-a-delayed-notification*/}\n\nWhen you join a chat room, this component shows a notification. However, it doesn't show the notification immediately. Instead, the notification is artificially delayed by two seconds so that the user has a chance to look around the UI.\n\nThis almost works, but there is a bug. Try changing the dropdown from \"general\" to \"travel\" and then to \"music\" very quickly. If you do it fast enough, you will see two notifications (as expected!) but they will *both* say \"Welcome to music\".\n\nFix it so that when you switch from \"general\" to \"travel\" and then to \"music\" very quickly, you see two notifications, the first one being \"Welcome to travel\" and the second one being \"Welcome to music\". (For an additional challenge, assuming you've *already* made the notifications show the correct rooms, change the code so that only the latter notification is displayed.)\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1294":{"pageContent":"<Hint>\n\nYour Effect knows which room it connected to. Is there any information that you might want to pass to your Effect Event?\n\n</Hint>\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(() => {\n\nshowNotification('Welcome to ' + roomId, theme);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nsetTimeout(() => {\n\nonConnected();\n\n}, 2000);\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1295":{"pageContent":"});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nsetTimeout(() => {\n\nonConnected();\n\n}, 2000);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1296":{"pageContent":"/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js hidden\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1297":{"pageContent":"style: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nInside your Effect Event, `roomId` is the value *at the time Effect Event was called.*\n\nYour Effect Event is called with a two second delay. If you're quickly switching from the travel to the music room, by the time the travel room's notification shows, `roomId` is already `\"music\"`. This is why both notifications say \"Welcome to music\".\n\nTo fix the issue, instead of reading the *latest* `roomId` inside the Effect Event, make it a parameter of your Effect Event, like `connectedRoomId` below. Then pass `roomId` from your Effect by calling `onConnected(roomId)`:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1298":{"pageContent":"{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(connectedRoomId => {\n\nshowNotification('Welcome to ' + connectedRoomId, theme);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nconnection.on('connected', () => {\n\nsetTimeout(() => {\n\nonConnected(roomId);\n\n}, 2000);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1299":{"pageContent":"setTimeout(() => {\n\nonConnected(roomId);\n\n}, 2000);\n\n});\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1300":{"pageContent":"let connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js hidden\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1301":{"pageContent":"style: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nThe Effect that had `roomId` set to `\"travel\"` (so it connected to the `\"travel\"` room) will show the notification for `\"travel\"`. The Effect that had `roomId` set to `\"music\"` (so it connected to the `\"music\"` room) will show the notification for `\"music\"`. In other words, `connectedRoomId` comes from your Effect (which is reactive), while `theme` always uses the latest value.\n\nTo solve the additional challenge, save the notification timeout ID and clear it in the cleanup function of your Effect:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\",\n\n\"react-scripts\": \"latest\",\n\n\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1302":{"pageContent":"\"toastify-js\": \"1.12.0\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nimport { createConnection, sendMessage } from './chat.js';\n\nimport { showNotification } from './notifications.js';\n\nconst serverUrl = 'https://localhost:1234';\n\nfunction ChatRoom({ roomId, theme }) {\n\nconst onConnected = useEffectEvent(connectedRoomId => {\n\nshowNotification('Welcome to ' + connectedRoomId, theme);\n\n});\n\nuseEffect(() => {\n\nconst connection = createConnection(serverUrl, roomId);\n\nlet notificationTimeoutId;\n\nconnection.on('connected', () => {\n\nnotificationTimeoutId = setTimeout(() => {\n\nonConnected(roomId);\n\n}, 2000);\n\n});\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\nif (notificationTimeoutId !== undefined) {\n\nclearTimeout(notificationTimeoutId);\n\n}\n\n};\n\n}, [roomId]);","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1303":{"pageContent":"onConnected(roomId);\n\n}, 2000);\n\n});\n\nconnection.connect();\n\nreturn () => {\n\nconnection.disconnect();\n\nif (notificationTimeoutId !== undefined) {\n\nclearTimeout(notificationTimeoutId);\n\n}\n\n};\n\n}, [roomId]);\n\nreturn <h1>Welcome to the {roomId} room!</h1>\n\n}\n\nexport default function App() {\n\nconst [roomId, setRoomId] = useState('general');\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\nChoose the chat room:{' '}\n\n<select\n\nvalue={roomId}\n\nonChange={e => setRoomId(e.target.value)}\n\n>\n\n<option value=\"general\">general</option>\n\n<option value=\"travel\">travel</option>\n\n<option value=\"music\">music</option>\n\n</select>\n\n</label>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nUse dark theme\n\n</label>\n\n<hr />\n\n<ChatRoom\n\nroomId={roomId}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js chat.js\n\nexport function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1304":{"pageContent":"export function createConnection(serverUrl, roomId) {\n\n// A real implementation would actually connect to the server\n\nlet connectedCallback;\n\nlet timeout;\n\nreturn {\n\nconnect() {\n\ntimeout = setTimeout(() => {\n\nif (connectedCallback) {\n\nconnectedCallback();\n\n}\n\n}, 100);\n\n},\n\non(event, callback) {\n\nif (connectedCallback) {\n\nthrow Error('Cannot add the handler twice.');\n\n}\n\nif (event !== 'connected') {\n\nthrow Error('Only \"connected\" event is supported.');\n\n}\n\nconnectedCallback = callback;\n\n},\n\ndisconnect() {\n\nclearTimeout(timeout);\n\n}\n\n};\n\n}\n\n```\n\n```js notifications.js hidden\n\nimport Toastify from 'toastify-js';\n\nimport 'toastify-js/src/toastify.css';\n\nexport function showNotification(message, theme) {\n\nToastify({\n\ntext: message,\n\nduration: 2000,\n\ngravity: 'top',\n\nposition: 'right',\n\nstyle: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1305":{"pageContent":"style: {\n\nbackground: theme === 'dark' ? 'black' : 'white',\n\ncolor: theme === 'dark' ? 'white' : 'black',\n\n},\n\n}).showToast();\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nThis ensures that already scheduled (but not yet displayed) notifications get cancelled when you change rooms.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/separating-events-from-effects.md"}},"1306":{"pageContent":"--\n\ntitle: Adding Interactivity\n\n--\n\n<Intro>\n\nSome things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called *state.* You can add state to any component, and update it as needed. In this chapter, you'll learn how to write components that handle interactions, update their state, and display different output over time.\n\n</Intro>\n\n<YouWillLearn isChapter={true}>\n\n[How to handle user-initiated events](/learn/responding-to-events)\n\n[How to make components \"remember\" information with state](/learn/state-a-components-memory)\n\n[How React updates the UI in two phases](/learn/render-and-commit)\n\n[Why state doesn't update right after you change it](/learn/state-as-a-snapshot)\n\n[How to queue multiple state updates](/learn/queueing-a-series-of-state-updates)\n\n[How to update an object in state](/learn/updating-objects-in-state)\n\n[How to update an array in state](/learn/updating-arrays-in-state)\n\n</YouWillLearn>","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1307":{"pageContent":"[How to update an object in state](/learn/updating-objects-in-state)\n\n[How to update an array in state](/learn/updating-arrays-in-state)\n\n</YouWillLearn>\n\n## Responding to events {/*responding-to-events*/}\n\nReact lets you add *event handlers* to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.\n\nBuilt-in components like `<button>` only support built-in browser events like `onClick`. However, you can also create your own components, and give their event handler props any application-specific names that you like.\n\n<Sandpack>\n\n```js\n\nexport default function App() {\n\nreturn (\n\n<Toolbar\n\nonPlayMovie={() => alert('Playing!')}\n\nonUploadImage={() => alert('Uploading!')}\n\n/>\n\n);\n\n}\n\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\n\nreturn (\n\n<div>\n\n<Button onClick={onPlayMovie}>\n\nPlay Movie\n\n</Button>\n\n<Button onClick={onUploadImage}>\n\nUpload Image\n\n</Button>\n\n</div>\n\n);\n\n}\n\nfunction Button({ onClick, children }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1308":{"pageContent":"return (\n\n<div>\n\n<Button onClick={onPlayMovie}>\n\nPlay Movie\n\n</Button>\n\n<Button onClick={onUploadImage}>\n\nUpload Image\n\n</Button>\n\n</div>\n\n);\n\n}\n\nfunction Button({ onClick, children }) {\n\nreturn (\n\n<button onClick={onClick}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/responding-to-events\">\n\nRead **[Responding to Events](/learn/responding-to-events)** to learn how to add event handlers.\n\n</LearnMore>\n\n## State: a component's memory {/*state-a-components-memory*/}\n\nComponents often need to change what's on the screen as a result of an interaction. Typing into the form should update the input field, clicking \"next\" on an image carousel should change which image is displayed, clicking \"buy\" puts a product in the shopping cart. Components need to \"remember\" things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called *state.*","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1309":{"pageContent":"You can add state to a component with a [`useState`](/reference/react/useState) Hook. *Hooks* are special functions that let your components use React features (state is one of those features). The `useState` Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.\n\n```js\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\n```\n\nHere is how an image gallery uses and updates state on click:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nfunction handleNextClick() {\n\nsetIndex(index + 1);\n\n}\n\nfunction handleMoreClick() {\n\nsetShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button onClick={handleNextClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1310":{"pageContent":"setShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button onClick={handleNextClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<button onClick={handleMoreClick}>\n\n{showMore ? 'Hide' : 'Show'} details\n\n</button>\n\n{showMore && <p>{sculpture.description}</p>}\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1311":{"pageContent":"url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1312":{"pageContent":"url: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1313":{"pageContent":"url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1314":{"pageContent":"url: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1315":{"pageContent":"url: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n\nurl: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1316":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1317":{"pageContent":"}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\nbutton {\n\ndisplay: block;\n\nmargin-top: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/state-a-components-memory\">\n\nRead **[State: A Component's Memory](/learn/state-a-components-memory)** to learn how to remember a value and update it on interaction.\n\n</LearnMore>\n\n## Render and commit {/*render-and-commit*/}\n\nBefore your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.\n\nImagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:\n\n1. **Triggering** a render (delivering the diner's order to the kitchen)","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1318":{"pageContent":"1. **Triggering** a render (delivering the diner's order to the kitchen)\n\n2. **Rendering** the component (preparing the order in the kitchen)\n\n3. **Committing** to the DOM (placing the order on the table)\n\n<IllustrationBlock sequential>\n\n<Illustration caption=\"Trigger\" alt=\"React as a server in a restaurant, fetching orders from the users and delivering them to the Component Kitchen.\" src=\"/images/docs/illustrations/i_render-and-commit1.png\" />\n\n<Illustration caption=\"Render\" alt=\"The Card Chef gives React a fresh Card component.\" src=\"/images/docs/illustrations/i_render-and-commit2.png\" />\n\n<Illustration caption=\"Commit\" alt=\"React delivers the Card to the user at their table.\" src=\"/images/docs/illustrations/i_render-and-commit3.png\" />\n\n</IllustrationBlock>\n\n<LearnMore path=\"/learn/render-and-commit\">\n\nRead **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.\n\n</LearnMore>\n\n## State as a snapshot {/*state-as-a-snapshot*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1319":{"pageContent":"<LearnMore path=\"/learn/render-and-commit\">\n\nRead **[Render and Commit](/learn/render-and-commit)** to learn the lifecycle of a UI update.\n\n</LearnMore>\n\n## State as a snapshot {/*state-as-a-snapshot*/}\n\nUnlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!\n\n```js\n\nconsole.log(count);  // 0\n\nsetCount(count + 1); // Request a re-render with 1\n\nconsole.log(count);  // Still 0!\n\n```\n\nReact works this way to help you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press \"Send\" first and *then* change the recipient to Bob. Whose name will appear in the `alert` five seconds later?\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [to, setTo] = useState('Alice');\n\nconst [message, setMessage] = useState('Hello');\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetTimeout(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1320":{"pageContent":"export default function Form() {\n\nconst [to, setTo] = useState('Alice');\n\nconst [message, setMessage] = useState('Hello');\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetTimeout(() => {\n\nalert(`You said ${message} to ${to}`);\n\n}, 5000);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<label>\n\nTo:{' '}\n\n<select\n\nvalue={to}\n\nonChange={e => setTo(e.target.value)}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>\n\n</select>\n\n</label>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/state-as-a-snapshot\">\n\nRead **[State as a Snapshot](/learn/state-as-a-snapshot)** to learn why state appears \"fixed\" and unchanging inside the event handlers.\n\n</LearnMore>\n\n## Queueing a series of state updates {/*queueing-a-series-of-state-updates*/}\n\nThis component is buggy: clicking \"+3\" increments the score only once.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1321":{"pageContent":"</LearnMore>\n\n## Queueing a series of state updates {/*queueing-a-series-of-state-updates*/}\n\nThis component is buggy: clicking \"+3\" increments the score only once.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [score, setScore] = useState(0);\n\nfunction increment() {\n\nsetScore(score + 1);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={() => increment()}>+1</button>\n\n<button onClick={() => {\n\nincrement();\n\nincrement();\n\nincrement();\n\n}}>+3</button>\n\n<h1>Score: {score}</h1>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\n```\n\n</Sandpack>\n\n[State as a Snapshot](/learn/state-as-a-snapshot) explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So `score` continues to be `0` right after you call `setScore(score + 1)`.\n\n```js\n\nconsole.log(score);  // 0\n\nsetScore(score + 1); // setScore(0 + 1);\n\nconsole.log(score);  // 0\n\nsetScore(score + 1); // setScore(0 + 1);\n\nconsole.log(score);  // 0","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1322":{"pageContent":"```js\n\nconsole.log(score);  // 0\n\nsetScore(score + 1); // setScore(0 + 1);\n\nconsole.log(score);  // 0\n\nsetScore(score + 1); // setScore(0 + 1);\n\nconsole.log(score);  // 0\n\nsetScore(score + 1); // setScore(0 + 1);\n\nconsole.log(score);  // 0\n\n```\n\nYou can fix this by passing an *updater function* when setting state. Notice how replacing `setScore(score + 1)` with `setScore(s => s + 1)` fixes the \"+3\" button. This is handy if you need to queue multiple state updates.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [score, setScore] = useState(0);\n\nfunction increment() {\n\nsetScore(s => s + 1);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={() => increment()}>+1</button>\n\n<button onClick={() => {\n\nincrement();\n\nincrement();\n\nincrement();\n\n}}>+3</button>\n\n<h1>Score: {score}</h1>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/queueing-a-series-of-state-updates\">","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1323":{"pageContent":"}}>+3</button>\n\n<h1>Score: {score}</h1>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/queueing-a-series-of-state-updates\">\n\nRead **[Queueing a Series of State Updates](/learn/queueing-a-series-of-state-updates)** to learn how to queue multiple updates before the next render.\n\n</LearnMore>\n\n## Updating objects in state {/*updating-objects-in-state*/}\n\nState can hold any kind of JavaScript value, including objects. But you shouldn't change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.\n\nUsually, you will use the `...` spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1324":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nsetPerson({\n\n...person,\n\nname: e.target.value\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\ntitle: e.target.value\n\n}\n\n});\n\n}\n\nfunction handleCityChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\ncity: e.target.value\n\n}\n\n});\n\n}\n\nfunction handleImageChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\nimage: e.target.value\n\n}\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nName:\n\n<input\n\nvalue={person.name}\n\nonChange={handleNameChange}\n\n/>\n\n</label>\n\n<label>\n\nTitle:\n\n<input\n\nvalue={person.artwork.title}\n\nonChange={handleTitleChange}\n\n/>\n\n</label>\n\n<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1325":{"pageContent":"<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}\n\n{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\nimg { width: 200px; height: 200px; }\n\n```\n\n</Sandpack>\n\nIf copying objects in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:\n\n<Sandpack>\n\n```js\n\nimport { useImmer } from 'use-immer';\n\nexport default function Form() {\n\nconst [person, updatePerson] = useImmer({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nupdatePerson(draft => {\n\ndraft.name = e.target.value;\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nupdatePerson(draft => {","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1326":{"pageContent":"image: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nupdatePerson(draft => {\n\ndraft.name = e.target.value;\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nupdatePerson(draft => {\n\ndraft.artwork.title = e.target.value;\n\n});\n\n}\n\nfunction handleCityChange(e) {\n\nupdatePerson(draft => {\n\ndraft.artwork.city = e.target.value;\n\n});\n\n}\n\nfunction handleImageChange(e) {\n\nupdatePerson(draft => {\n\ndraft.artwork.image = e.target.value;\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nName:\n\n<input\n\nvalue={person.name}\n\nonChange={handleNameChange}\n\n/>\n\n</label>\n\n<label>\n\nTitle:\n\n<input\n\nvalue={person.artwork.title}\n\nonChange={handleTitleChange}\n\n/>\n\n</label>\n\n<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}\n\n{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1327":{"pageContent":"{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\nimg { width: 200px; height: 200px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/updating-objects-in-state\">\n\nRead **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.\n\n</LearnMore>\n\n## Updating arrays in state {/*updating-arrays-in-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1328":{"pageContent":"Read **[Updating Objects in State](/learn/updating-objects-in-state)** to learn how to update objects correctly.\n\n</LearnMore>\n\n## Updating arrays in state {/*updating-arrays-in-state*/}\n\nArrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {\n\nconst [list, setList] = useState(\n\ninitialList\n\n);\n\nfunction handleToggle(artworkId, nextSeen) {\n\nsetList(list.map(artwork => {\n\nif (artwork.id === artworkId) {\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {\n\nreturn artwork;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1329":{"pageContent":"setList(list.map(artwork => {\n\nif (artwork.id === artworkId) {\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {\n\nreturn artwork;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>\n\n<h2>My list of art to see:</h2>\n\n<ItemList\n\nartworks={list}\n\nonToggle={handleToggle} />\n\n</>\n\n);\n\n}\n\nfunction ItemList({ artworks, onToggle }) {\n\nreturn (\n\n<ul>\n\n{artworks.map(artwork => (\n\n<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIf copying arrays in code gets tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1330":{"pageContent":"{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {\n\nconst [list, updateList] = useImmer(initialList);\n\nfunction handleToggle(artworkId, nextSeen) {\n\nupdateList(draft => {\n\nconst artwork = draft.find(a =>\n\na.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>\n\n<h2>My list of art to see:</h2>\n\n<ItemList\n\nartworks={list}\n\nonToggle={handleToggle} />\n\n</>\n\n);\n\n}\n\nfunction ItemList({ artworks, onToggle }) {\n\nreturn (\n\n<ul>\n\n{artworks.map(artwork => (\n\n<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1331":{"pageContent":"{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/updating-arrays-in-state\">\n\nRead **[Updating Arrays in State](/learn/updating-arrays-in-state)** to learn how to update arrays correctly.\n\n</LearnMore>\n\n## What's next? {/*whats-next*/}\n\nHead over to [Responding to Events](/learn/responding-to-events) to start reading this chapter page by page!\n\nOr, if you're already familiar with these topics, why not read about [Managing State](/learn/managing-state)?","metadata":{"source":"reactjs.org/beta/src/content/learn/adding-interactivity.md"}},"1332":{"pageContent":"--\n\ntitle: Quick Start\n\n--\n\n<Intro>\n\nWelcome to the React documentation! This page will give you an introduction to the 80% of React concepts that you will use on a daily basis.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to create and nest components\n\nHow to add markup and styles\n\nHow to display data\n\nHow to render conditions and lists\n\nHow to respond to events and update the screen\n\nHow to share data between components\n\n</YouWillLearn>\n\n## Creating and nesting components {/*components*/}\n\nReact apps are made out of *components*. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\n\nReact components are JavaScript functions that return markup:\n\n```js\n\nfunction MyButton() {\n\nreturn (\n\n<button>I'm a button</button>\n\n);\n\n}\n\n```\n\nNow that you've declared `MyButton`, you can nest it into another component:\n\n```js {5}\n\nexport default function MyApp() {\n\nreturn (\n\n<div>\n\n<h1>Welcome to my app</h1>\n\n<MyButton />\n\n</div>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1333":{"pageContent":");\n\n}\n\n```\n\nNow that you've declared `MyButton`, you can nest it into another component:\n\n```js {5}\n\nexport default function MyApp() {\n\nreturn (\n\n<div>\n\n<h1>Welcome to my app</h1>\n\n<MyButton />\n\n</div>\n\n);\n\n}\n\n```\n\nNotice that `<MyButton />` starts with a capital letter. That's how you know it's a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\n\nHave a look at the result:\n\n<Sandpack>\n\n```js\n\nfunction MyButton() {\n\nreturn (\n\n<button>\n\nI'm a button\n\n</button>\n\n);\n\n}\n\nexport default function MyApp() {\n\nreturn (\n\n<div>\n\n<h1>Welcome to my app</h1>\n\n<MyButton />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThe `export default` keywords specify the main component in the file. If you're not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.\n\n## Writing markup with JSX {/*writing-markup-with-jsx*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1334":{"pageContent":"## Writing markup with JSX {/*writing-markup-with-jsx*/}\n\nThe markup syntax you've seen above is called *JSX*. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.\n\nJSX is stricter than HTML. You have to close tags like `<br />`. Your component also can't return multiple JSX tags. You have to wrap them into a shared parent, like a `<div>...</div>` or an empty `<>...</>` wrapper:\n\n```js {3,6}\n\nfunction AboutPage() {\n\nreturn (\n\n<>\n\n<h1>About</h1>\n\n<p>Hello there.<br />How do you do?</p>\n\n</>\n\n);\n\n}\n\n```\n\nIf you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)\n\n## Adding styles {/*adding-styles*/}\n\nIn React, you specify a CSS class with `className`. It works the same way as the HTML [`class`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:\n\n```js\n\n<img className=\"avatar\" />\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1335":{"pageContent":"```js\n\n<img className=\"avatar\" />\n\n```\n\nThen you write the CSS rules for it in a separate CSS file:\n\n```css\n\n/* In your CSS */\n\n.avatar {\n\nborder-radius: 50%;\n\n}\n\n```\n\nReact does not prescribe how you add CSS files. In the simplest case, you'll add a [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.\n\n## Displaying data {/*displaying-data*/}\n\nJSX lets you put markup into JavaScript. Curly braces let you \"escape back\" into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:\n\n```js {3}\n\nreturn (\n\n<h1>\n\n{user.name}\n\n</h1>\n\n);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1336":{"pageContent":"```js {3}\n\nreturn (\n\n<h1>\n\n{user.name}\n\n</h1>\n\n);\n\n```\n\nYou can also \"escape into JavaScript\" from JSX attributes, but you have to use curly braces *instead of* quotes. For example, `className=\"avatar\"` passes the `\"avatar\"` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:\n\n```js {3,4}\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={user.imageUrl}\n\n/>\n\n);\n\n```\n\nYou can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):\n\n<Sandpack>\n\n```js\n\nconst user = {\n\nname: 'Hedy Lamarr',\n\nimageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\n\nimageSize: 90,\n\n};\n\nexport default function Profile() {\n\nreturn (\n\n<>\n\n<h1>{user.name}</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={user.imageUrl}\n\nalt={'Photo of ' + user.name}\n\nstyle={{\n\nwidth: user.imageSize,\n\nheight: user.imageSize\n\n}}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\n.avatar {\n\nborder-radius: 50%;\n\n}\n\n.large {\n\nborder: 4px solid gold;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1337":{"pageContent":"src={user.imageUrl}\n\nalt={'Photo of ' + user.name}\n\nstyle={{\n\nwidth: user.imageSize,\n\nheight: user.imageSize\n\n}}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\n.avatar {\n\nborder-radius: 50%;\n\n}\n\n.large {\n\nborder: 4px solid gold;\n\n}\n\n```\n\n</Sandpack>\n\nIn the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.\n\n## Conditional rendering {/*conditional-rendering*/}\n\nIn React, there is no special syntax for writing conditions. Instead, you'll use the same techniques as you use when writing regular JavaScript code. For example, you can use an [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:\n\n```js\n\nlet content;\n\nif (isLoggedIn) {\n\ncontent = <AdminPanel />;\n\n} else {\n\ncontent = <LoginForm />;\n\n}\n\nreturn (\n\n<div>\n\n{content}\n\n</div>\n\n);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1338":{"pageContent":"```js\n\nlet content;\n\nif (isLoggedIn) {\n\ncontent = <AdminPanel />;\n\n} else {\n\ncontent = <LoginForm />;\n\n}\n\nreturn (\n\n<div>\n\n{content}\n\n</div>\n\n);\n\n```\n\nIf you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:\n\n```js\n\n<div>\n\n{isLoggedIn ? (\n\n<AdminPanel />\n\n) : (\n\n<LoginForm />\n\n)}\n\n</div>\n\n```\n\nWhen you don't need the `else` branch, you can also use a shorter [logical `&&` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):\n\n```js\n\n<div>\n\n{isLoggedIn && <AdminPanel />}\n\n</div>\n\n```\n\nAll of these approaches also work for conditionally specifying attributes. If you're unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.\n\n## Rendering lists {/*rendering-lists*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1339":{"pageContent":"## Rendering lists {/*rendering-lists*/}\n\nYou will rely on JavaScript features like [`for` loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.\n\nFor example, let's say you have an array of products:\n\n```js\n\nconst products = [\n\n{ title: 'Cabbage', id: 1 },\n\n{ title: 'Garlic', id: 2 },\n\n{ title: 'Apple', id: 3 },\n\n];\n\n```\n\nInside your component, use the `map()` function to transform an array of products into an array of `<li>` items:\n\n```js\n\nconst listItems = products.map(product =>\n\n<li key={product.id}>\n\n{product.title}\n\n</li>\n\n);\n\nreturn (\n\n<ul>{listItems}</ul>\n\n);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1340":{"pageContent":"```js\n\nconst listItems = products.map(product =>\n\n<li key={product.id}>\n\n{product.title}\n\n</li>\n\n);\n\nreturn (\n\n<ul>{listItems}</ul>\n\n);\n\n```\n\nNotice how `<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React will rely on your keys to understand what happened if you later insert, delete, or reorder the items.\n\n<Sandpack>\n\n```js\n\nconst products = [\n\n{ title: 'Cabbage', isFruit: false, id: 1 },\n\n{ title: 'Garlic', isFruit: false, id: 2 },\n\n{ title: 'Apple', isFruit: true, id: 3 },\n\n];\n\nexport default function ShoppingList() {\n\nconst listItems = products.map(product =>\n\n<li\n\nkey={product.id}\n\nstyle={{\n\ncolor: product.isFruit ? 'magenta' : 'darkgreen'\n\n}}\n\n>\n\n{product.title}\n\n</li>\n\n);\n\nreturn (\n\n<ul>{listItems}</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n## Responding to events {/*responding-to-events*/}\n\nYou can respond to events by declaring *event handler* functions inside your components:\n\n```js {2-4,7}","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1341":{"pageContent":");\n\nreturn (\n\n<ul>{listItems}</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n## Responding to events {/*responding-to-events*/}\n\nYou can respond to events by declaring *event handler* functions inside your components:\n\n```js {2-4,7}\n\nfunction MyButton() {\n\nfunction handleClick() {\n\nalert('You clicked me!');\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClick me\n\n</button>\n\n);\n\n}\n\n```\n\nNotice how `onClick={handleClick}` has no parentheses at the end! Do not _call_ the event handler function: you only need to *pass it down*. React will call your event handler when the user clicks the button.\n\n## Updating the screen {/*updating-the-screen*/}\n\nOften, you'll want your component to \"remember\" some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add *state* to your component.\n\nFirst, import [`useState`](/reference/react/useState) from React:\n\n```js\n\nimport { useState } from 'react';\n\n```\n\nNow you can declare a *state variable* inside your component:\n\n```js\n\nfunction MyButton() {","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1342":{"pageContent":"First, import [`useState`](/reference/react/useState) from React:\n\n```js\n\nimport { useState } from 'react';\n\n```\n\nNow you can declare a *state variable* inside your component:\n\n```js\n\nfunction MyButton() {\n\nconst [count, setCount] = useState(0);\n\n```\n\nYou will get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to call them like `[something, setSomething]`.\n\nThe first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:\n\n```js {5}\n\nfunction MyButton() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\nReact will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1343":{"pageContent":"}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\nReact will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.\n\nIf you render the same component multiple times, each will get its own state. Try clicking each button separately:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MyApp() {\n\nreturn (\n\n<div>\n\n<h1>Counters that update separately</h1>\n\n<MyButton />\n\n<MyButton />\n\n</div>\n\n);\n\n}\n\nfunction MyButton() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nClicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\ndisplay: block;\n\nmargin-bottom: 5px;\n\n}\n\n```\n\n</Sandpack>\n\nNotice how each button \"remembers\" its own `count` state and doesn't affect other buttons.\n\n## Using Hooks {/*using-hooks*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1344":{"pageContent":"</button>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\ndisplay: block;\n\nmargin-bottom: 5px;\n\n}\n\n```\n\n</Sandpack>\n\nNotice how each button \"remembers\" its own `count` state and doesn't affect other buttons.\n\n## Using Hooks {/*using-hooks*/}\n\nFunctions starting with `use` are called *Hooks*. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [React API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.\n\nHooks are more restrictive than regular functions. You can only call Hooks *at the top level* of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.\n\n## Sharing data between components {/*sharing-data-between-components*/}\n\nIn the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1345":{"pageContent":"In the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:\n\n<DiagramGroup>\n\n<Diagram name=\"sharing_data_child\" height={367} width={407} alt=\"Diagram showing a tree of three components, one parent labeled MyApp and two children labeled MyButton. Both MyButton components contain a count with value zero.\">\n\nInitially, each `MyButton`'s `count` state is `0`\n\n</Diagram>\n\n<Diagram name=\"sharing_data_child_clicked\" height={367} width={407} alt=\"The same diagram as the previous, with the count of the first child MyButton component highlighted indicating a click with the count value incremented to one. The second MyButton component still contains value zero.\" >\n\nThe first `MyButton` updates its `count` to `1`\n\n</Diagram>\n\n</DiagramGroup>\n\nHowever, often you'll need components to *share data and always update together*.","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1346":{"pageContent":"The first `MyButton` updates its `count` to `1`\n\n</Diagram>\n\n</DiagramGroup>\n\nHowever, often you'll need components to *share data and always update together*.\n\nTo make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons \"upwards\" to the closest component containing all of them.\n\nIn this example, it is `MyApp`:\n\n<DiagramGroup>\n\n<Diagram name=\"sharing_data_parent\" height={385} width={410} alt=\"Diagram showing a tree of three components, one parent labeled MyApp and two children labeled MyButton. MyApp contains a count value of zero which is passed down to both of the MyButton components, which also show value zero.\" >\n\nInitially, `MyApp`'s `count` state is `0` and is passed down to both children\n\n</Diagram>","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1347":{"pageContent":"Initially, `MyApp`'s `count` state is `0` and is passed down to both children\n\n</Diagram>\n\n<Diagram name=\"sharing_data_parent_clicked\" height={385} width={410} alt=\"The same diagram as the previous, with the count of the parent MyApp component highlighted indicating a click with the value incremented to one. The flow to both of the children MyButton components is also highlighted, and the count value in each child is set to one indicating the value was passed down.\" >\n\nOn click, `MyApp` updates its `count` state to `1` and passes it down to both children\n\n</Diagram>\n\n</DiagramGroup>\n\nNow when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here's how you can express this in code.\n\nFirst, *move the state up* from `MyButton` into `MyApp`:\n\n```js {2-6,18}\n\nexport default function MyApp() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<div>\n\n<h1>Counters that update separately</h1>\n\n<MyButton />","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1348":{"pageContent":"```js {2-6,18}\n\nexport default function MyApp() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<div>\n\n<h1>Counters that update separately</h1>\n\n<MyButton />\n\n<MyButton />\n\n</div>\n\n);\n\n}\n\nfunction MyButton() {\n\n// ... we're moving code from here ...\n\n}\n\n```\n\nThen, *pass the state down* from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `<img>`:\n\n```js {11-12}\n\nexport default function MyApp() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<div>\n\n<h1>Counters that update together</h1>\n\n<MyButton count={count} onClick={handleClick} />\n\n<MyButton count={count} onClick={handleClick} />\n\n</div>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1349":{"pageContent":"setCount(count + 1);\n\n}\n\nreturn (\n\n<div>\n\n<h1>Counters that update together</h1>\n\n<MyButton count={count} onClick={handleClick} />\n\n<MyButton count={count} onClick={handleClick} />\n\n</div>\n\n);\n\n}\n\n```\n\nThe information you pass down like this is called _props_. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and *passes both of them down as props* to each of the buttons.\n\nFinally, change `MyButton` to *read* the props you have passed from its parent component:\n\n```js {1,3}\n\nfunction MyButton({ count, onClick }) {\n\nreturn (\n\n<button onClick={onClick}>\n\nClicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\nWhen you click the button, the `onClick` handler fires. Each button's `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value.","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1350":{"pageContent":"This is called \"lifting state up\". By moving state up, we've shared it between components.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MyApp() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<div>\n\n<h1>Counters that update together</h1>\n\n<MyButton count={count} onClick={handleClick} />\n\n<MyButton count={count} onClick={handleClick} />\n\n</div>\n\n);\n\n}\n\nfunction MyButton({ count, onClick }) {\n\nreturn (\n\n<button onClick={onClick}>\n\nClicked {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nbutton {\n\ndisplay: block;\n\nmargin-bottom: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n## Next Steps {/*next-steps*/}\n\nBy now, you know the basics of how to write React code!\n\nCheck out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.","metadata":{"source":"reactjs.org/beta/src/content/learn/index.md"}},"1351":{"pageContent":"--\n\ntitle: Scaling Up with Reducer and Context\n\n--\n\n<Intro>\n\nReducers let you consolidate a component's state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to combine a reducer with context\n\nHow to avoid passing state and dispatch through props\n\nHow to keep context and state logic in a separate file\n\n</YouWillLearn>\n\n## Combining a reducer with context {/*combining-a-reducer-with-context*/}\n\nIn this example from [the introduction to reducers](/learn/extracting-state-logic-into-a-reducer), the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:\n\n<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1352":{"pageContent":"import AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1353":{"pageContent":"return action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js AddTask.js\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1354":{"pageContent":"<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1355":{"pageContent":"});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\nA reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. **Currently, the `tasks` state and the `dispatch` function are only available in the top-level `TaskApp` component.** To let other components read the list of tasks or change it, you have to explicitly [pass down](/learn/passing-props-to-a-component) the current state and the event handlers that change it as props.\n\nFor example, `TaskApp` passes a list of tasks and the event handlers to `TaskList`:\n\n```js\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n```\n\nAnd `TaskList` passes the event handlers to `Task`:\n\n```js\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1356":{"pageContent":"onChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n```\n\nAnd `TaskList` passes the event handlers to `Task`:\n\n```js\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n```\n\nIn a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!\n\nThis is why, as an alternative to passing them through props, you might want to put both the `tasks` state and the `dispatch` function [into context.](/learn/passing-data-deeply-with-context) **This way, any component below `TaskApp` in the tree can read the tasks and dispatch actions without the repetitive \"prop drilling\".**\n\nHere is how you can combine a reducer with context:\n\n1. **Create** the context.\n\n2. **Put** state and dispatch into context.\n\n3. **Use** context anywhere in the tree.\n\n### Step 1: Create the context {/*step-1-create-the-context*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1357":{"pageContent":"1. **Create** the context.\n\n2. **Put** state and dispatch into context.\n\n3. **Use** context anywhere in the tree.\n\n### Step 1: Create the context {/*step-1-create-the-context*/}\n\nThe `useReducer` Hook returns the current `tasks` and the `dispatch` function that lets you update them:\n\n```js\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n```\n\nTo pass them down the tree, you will [create](/learn/passing-data-deeply-with-context#step-2-use-the-context) two separate contexts:\n\n`TasksContext` provides the current list of tasks.\n\n`TasksDispatchContext` provides the function that lets components dispatch actions.\n\nExport them from a separate file so that you can later import them from other files:\n\n<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1358":{"pageContent":"export default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1359":{"pageContent":"return tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js TasksContext.js active\n\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\n\nexport const TasksDispatchContext = createContext(null);\n\n```\n\n```js AddTask.js\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1360":{"pageContent":"export default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1361":{"pageContent":"});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\nHere, you're passing `null` as the default value to both contexts. The actual values will be provided by the `TaskApp` component.\n\n### Step 2: Put state and dispatch into context {/*step-2-put-state-and-dispatch-into-context*/}\n\nNow you can import both contexts in your `TaskApp` component. Take the `tasks` and `dispatch` returned by `useReducer()` and [provide them](/learn/passing-data-deeply-with-context#step-3-provide-the-context) to the entire tree below:\n\n```js {4,7-8}\n\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n// ...\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n...\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1362":{"pageContent":"// ...\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n...\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\n```\n\nFor now, you pass the information both via props and in context:\n\n<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1363":{"pageContent":"<TasksDispatchContext.Provider value={dispatch}>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js TasksContext.js\n\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\n\nexport const TasksDispatchContext = createContext(null);\n\n```\n\n```js AddTask.js","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1364":{"pageContent":"];\n\n```\n\n```js TasksContext.js\n\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\n\nexport const TasksDispatchContext = createContext(null);\n\n```\n\n```js AddTask.js\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1365":{"pageContent":"let taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\nIn the next step, you will remove prop passing.\n\n### Step 3: Use context anywhere in the tree {/*step-3-use-context-anywhere-in-the-tree*/}\n\nNow you don't need to pass the list of tasks or the event handlers down the tree:\n\n```js {4-5}\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksDispatchContext.Provider>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1366":{"pageContent":"```js {4-5}\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n```\n\nInstead, any component that needs the task list can read it from the `TaskContext`:\n\n```js {2}\n\nexport default function TaskList() {\n\nconst tasks = useContext(TasksContext);\n\n// ...\n\n```\n\nTo update the task list, any component can read the `dispatch` function from context and call it:\n\n```js {3,9-13}\n\nexport default function AddTask() {\n\nconst [text, setText] = useState('');\n\nconst dispatch = useContext(TasksDispatchContext);\n\n// ...\n\nreturn (\n\n// ...\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n// ...\n\n```\n\n*The `TaskApp` component does not pass any event handlers down, and the `TaskList` does not pass any event handlers to the `Task` component either.** Each component reads the context that it needs:\n\n<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1367":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1368":{"pageContent":"}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js TasksContext.js\n\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\n\nexport const TasksDispatchContext = createContext(null);\n\n```\n\n```js AddTask.js\n\nimport { useState, useContext } from 'react';\n\nimport { TasksDispatchContext } from './TasksContext.js';\n\nexport default function AddTask() {\n\nconst [text, setText] = useState('');\n\nconst dispatch = useContext(TasksDispatchContext);\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js active\n\nimport { useState, useContext } from 'react';\n\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1369":{"pageContent":"text: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js active\n\nimport { useState, useContext } from 'react';\n\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskList() {\n\nconst tasks = useContext(TasksContext);\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task task={task} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nconst dispatch = useContext(TasksDispatchContext);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ntext: e.target.value\n\n}\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1370":{"pageContent":"</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n*The state still \"lives\" in the top-level `TaskApp` component, managed with `useReducer`.** But its `tasks` and `dispatch` are now available to every component below in the tree by importing and using these contexts.\n\n## Moving all wiring into a single file {/*moving-all-wiring-into-a-single-file*/}\n\nYou don't have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, `TasksContext.js` contains only two context declarations:\n\n```js\n\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1371":{"pageContent":"```js\n\nimport { createContext } from 'react';\n\nexport const TasksContext = createContext(null);\n\nexport const TasksDispatchContext = createContext(null);\n\n```\n\nThis file is about to get crowded! You'll move the reducer into that same file. Then you'll declare a new `TasksProvider` component in the same file. This component will tie all the pieces together:\n\n1. It will manage the state with a reducer.\n\n2. It will provide both contexts to components below.\n\n3. It will [take `children` as a prop](/learn/passing-props-to-a-component#passing-jsx-as-children) so you can pass JSX to it.\n\n```js\n\nexport function TasksProvider({ children }) {\n\nconst [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n{children}\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\n```\n\n*This removes all the complexity and wiring from your `TaskApp` component:**\n\n<Sandpack>\n\n```js App.js\n\nimport AddTask from './AddTask.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1372":{"pageContent":"</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\n```\n\n*This removes all the complexity and wiring from your `TaskApp` component:**\n\n<Sandpack>\n\n```js App.js\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nreturn (\n\n<TasksProvider>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksProvider>\n\n);\n\n}\n\n```\n\n```js TasksContext.js\n\nimport { createContext, useReducer } from 'react';\n\nexport const TasksContext = createContext(null);\n\nexport const TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n{children}\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1373":{"pageContent":"</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js AddTask.js\n\nimport { useState, useContext } from 'react';\n\nimport { TasksDispatchContext } from './TasksContext.js';\n\nexport default function AddTask() {\n\nconst [text, setText] = useState('');\n\nconst dispatch = useContext(TasksDispatchContext);\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1374":{"pageContent":"return (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js\n\nimport { useState, useContext } from 'react';\n\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\n\nexport default function TaskList() {\n\nconst tasks = useContext(TasksContext);\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task task={task} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nconst dispatch = useContext(TasksDispatchContext);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ntext: e.target.value\n\n}\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1375":{"pageContent":"<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\nYou can also export functions that _use_ the context from `TasksContext.js`:\n\n```js\n\nexport function useTasks() {\n\nreturn useContext(TasksContext);\n\n}\n\nexport function useTasksDispatch() {\n\nreturn useContext(TasksDispatchContext);\n\n}\n\n```\n\nWhen a component needs to read context, it can do it through these functions:\n\n```js\n\nconst tasks = useTasks();\n\nconst dispatch = useTasksDispatch();\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1376":{"pageContent":"return useContext(TasksDispatchContext);\n\n}\n\n```\n\nWhen a component needs to read context, it can do it through these functions:\n\n```js\n\nconst tasks = useTasks();\n\nconst dispatch = useTasksDispatch();\n\n```\n\nThis doesn't change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. **Now all of the context and reducer wiring is in `TasksContext.js`. This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:**\n\n<Sandpack>\n\n```js App.js\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nreturn (\n\n<TasksProvider>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksProvider>\n\n);\n\n}\n\n```\n\n```js TasksContext.js\n\nimport { createContext, useContext, useReducer } from 'react';\n\nconst TasksContext = createContext(null);\n\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1377":{"pageContent":"import { createContext, useContext, useReducer } from 'react';\n\nconst TasksContext = createContext(null);\n\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n{children}\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nexport function useTasks() {\n\nreturn useContext(TasksContext);\n\n}\n\nexport function useTasksDispatch() {\n\nreturn useContext(TasksDispatchContext);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1378":{"pageContent":"return action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js AddTask.js\n\nimport { useState } from 'react';\n\nimport { useTasksDispatch } from './TasksContext.js';\n\nexport default function AddTask() {\n\nconst [text, setText] = useState('');\n\nconst dispatch = useTasksDispatch();\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js active\n\nimport { useState } from 'react';\n\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n\nconst tasks = useTasks();\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1379":{"pageContent":"import { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n\nconst tasks = useTasks();\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task task={task} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nconst dispatch = useTasksDispatch();\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ntext: e.target.value\n\n}\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1380":{"pageContent":"dispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\nYou can think of `TasksProvider` as a part of the screen that knows how to deal with tasks, `useTasks` as a way to read them, and `useTasksDispatch` as a way to update them from any component below in the tree.\n\n> Functions like `useTasks` and `useTasksDispatch` are called **[Custom Hooks.](/learn/reusing-logic-with-custom-hooks)** Your function is considered a custom Hook if its name starts with `use`. This lets you use other Hooks, like `useContext`, inside it.\n\nAs your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and [lift state up](/learn/sharing-state-between-components) without too much work whenever you want to access the data deep in the tree.\n\n<Recap>\n\nYou can combine reducer with context to let any component read and update state above it.","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1381":{"pageContent":"<Recap>\n\nYou can combine reducer with context to let any component read and update state above it.\n\nTo provide state and the dispatch function to components below:\n\n1. Create two contexts (for state and for dispatch functions).\n\n2. Provide both contexts from the component that uses the reducer.\n\n3. Use either context from components that need to read them.\n\nYou can further declutter the components by moving all wiring into one file.\n\nYou can export a component like `TasksProvider` that provides context.\n\nYou can also export custom Hooks like `useTasks` and `useTasksDispatch` to read it.\n\nYou can have many context-reducer pairs like this in your app.\n\n</Recap>","metadata":{"source":"reactjs.org/beta/src/content/learn/scaling-up-with-reducer-and-context.md"}},"1382":{"pageContent":"--\n\ntitle: State as a Snapshot\n\n--\n\n<Intro>\n\nState variables might look like regular JavaScript variables that you can read and write to. However, state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render.\n\n</Intro>\n\n<YouWillLearn>\n\nHow setting state triggers re-renders\n\nWhen and how state updates\n\nWhy state does not update immediately after you set it\n\nHow event handlers access a \"snapshot\" of the state\n\n</YouWillLearn>\n\n## Setting state triggers renders {/*setting-state-triggers-renders*/}\n\nYou might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that [setting state requests a re-render](/learn/render-and-commit#step-1-trigger-a-render) from React. This means that for an interface to react to the event, you need to *update the state*.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1383":{"pageContent":"In this example, when you press \"send\", `setIsSent(true)` tells React to re-render the UI:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [isSent, setIsSent] = useState(false);\n\nconst [message, setMessage] = useState('Hi!');\n\nif (isSent) {\n\nreturn <h1>Your message is on its way!</h1>\n\n}\n\nreturn (\n\n<form onSubmit={(e) => {\n\ne.preventDefault();\n\nsetIsSent(true);\n\nsendMessage(message);\n\n}}>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\nfunction sendMessage(message) {\n\n// ...\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>\n\nHere's what happens when you click the button:\n\n1. The `onSubmit` event handler executes.\n\n2. `setIsSent(true)` sets `isSent` to `true` and queues a new render.\n\n3. React re-renders the component according to the new `isSent` value.\n\nLet's take a closer look at the relationship between state and rendering.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1384":{"pageContent":"3. React re-renders the component according to the new `isSent` value.\n\nLet's take a closer look at the relationship between state and rendering.\n\n## Rendering takes a snapshot in time {/*rendering-takes-a-snapshot-in-time*/}\n\n[\"Rendering\"](/learn/render-and-commit#step-2-react-renders-your-components) means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated **using its state at the time of the render.**\n\nUnlike a photograph or a movie frame, the UI \"snapshot\" you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React then updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.\n\nWhen React re-renders a component:\n\n1. React calls your function again.\n\n2. Your function returns a new JSX snapshot.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1385":{"pageContent":"When React re-renders a component:\n\n1. React calls your function again.\n\n2. Your function returns a new JSX snapshot.\n\n3. React then updates the screen to match the snapshot you've returned.\n\n<IllustrationBlock sequential>\n\n<Illustration caption=\"React executing the function\" src=\"/images/docs/illustrations/i_render1.png\" />\n\n<Illustration caption=\"Calculating the snapshot\" src=\"/images/docs/illustrations/i_render2.png\" />\n\n<Illustration caption=\"Updating the DOM tree\" src=\"/images/docs/illustrations/i_render3.png\" />\n\n</IllustrationBlock>\n\nAs a component's memory, state is not like a regular variable that disappears after your function returns. State actually \"lives\" in React itself--as if on a shelf!--outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated **using the state values from that render!**","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1386":{"pageContent":"<IllustrationBlock sequential>\n\n<Illustration caption=\"You tell React to update the state\" src=\"/images/docs/illustrations/i_state-snapshot1.png\" />\n\n<Illustration caption=\"React updates the state value\" src=\"/images/docs/illustrations/i_state-snapshot2.png\" />\n\n<Illustration caption=\"React passes a snapshot of the state value into the component\" src=\"/images/docs/illustrations/i_state-snapshot3.png\" />\n\n</IllustrationBlock>\n\nHere's a little experiment to show you how this works. In this example, you might expect that clicking the \"+3\" button would increment the counter three times because it calls `setNumber(number + 1)` three times.\n\nSee what happens when you click the \"+3\" button:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\n}}>+3</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1387":{"pageContent":"const [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\n}}>+3</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nNotice that `number` only increments once per click!\n\n*Setting state only changes it for the *next* render.** During the first render, `number` was `0`. This is why, in *that render's* `onClick` handler, the value of `number` is still `0` even after `setNumber(number + 1)` was called:\n\n```js\n\n<button onClick={() => {\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\n}}>+3</button>\n\n```\n\nHere is what this button's click handler tells React to do:\n\n1. `setNumber(number + 1)`: `number` is `0` so `setNumber(0 + 1)`.\n\nReact prepares to change `number` to `1` on the next render.\n\n2. `setNumber(number + 1)`: `number` is `0` so `setNumber(0 + 1)`.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1388":{"pageContent":"1. `setNumber(number + 1)`: `number` is `0` so `setNumber(0 + 1)`.\n\nReact prepares to change `number` to `1` on the next render.\n\n2. `setNumber(number + 1)`: `number` is `0` so `setNumber(0 + 1)`.\n\nReact prepares to change `number` to `1` on the next render.\n\n3. `setNumber(number + 1)`: `number` is `0` so `setNumber(0 + 1)`.\n\nReact prepares to change `number` to `1` on the next render.\n\nEven though you called `setNumber(number + 1)` three times, in *this render's* event handler `number` is always `0`, so you set the state to `1` three times. This is why, after your event handler finishes, React re-renders the component with `number` equal to `1` rather than `3`.\n\nYou can also visualize this by mentally substituting state variables with their values in your code. Since the `number` state variable is `0` for *this render*, its event handler looks like this:\n\n```js\n\n<button onClick={() => {\n\nsetNumber(0 + 1);\n\nsetNumber(0 + 1);\n\nsetNumber(0 + 1);\n\n}}>+3</button>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1389":{"pageContent":"```js\n\n<button onClick={() => {\n\nsetNumber(0 + 1);\n\nsetNumber(0 + 1);\n\nsetNumber(0 + 1);\n\n}}>+3</button>\n\n```\n\nFor the next render, `number` is `1`, so *that render's* click handler looks like this:\n\n```js\n\n<button onClick={() => {\n\nsetNumber(1 + 1);\n\nsetNumber(1 + 1);\n\nsetNumber(1 + 1);\n\n}}>+3</button>\n\n```\n\nThis is why clicking the button again will set the counter to `2`, then to `3` on the next click, and so on.\n\n## State over time {/*state-over-time*/}\n\nWell, that was fun. Try to guess what clicking this button will alert:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nalert(number);\n\n}}>+5</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nIf you use the substitution method from before, you can guess that the alert shows \"0\":\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1390":{"pageContent":"h1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nIf you use the substitution method from before, you can guess that the alert shows \"0\":\n\n```js\n\nsetNumber(0 + 5);\n\nalert(0);\n\n```\n\nBut what if you put a timer on the alert, so it only fires _after_ the component re-rendered? Would it say \"0\" or \"5\"? Have a guess!\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nsetTimeout(() => {\n\nalert(number);\n\n}, 3000);\n\n}}>+5</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nSurprised? If you use the substitution method, you can see the \"snapshot\" of the state passed to the alert.\n\n```js\n\nsetNumber(0 + 5);\n\nsetTimeout(() => {\n\nalert(0);\n\n}, 3000);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1391":{"pageContent":"```\n\n</Sandpack>\n\nSurprised? If you use the substitution method, you can see the \"snapshot\" of the state passed to the alert.\n\n```js\n\nsetNumber(0 + 5);\n\nsetTimeout(() => {\n\nalert(0);\n\n}, 3000);\n\n```\n\nThe state stored in React may have changed by the time the alert runs, but it was scheduled using a snapshot of the state at the time the user interacted with it!\n\n*A state variable's value never changes within a render,** even if its event handler's code is asynchronous. Inside *that render's* `onClick`, the value of `number` continues to be `0` even after `setNumber(number + 5)` was called. Its value was \"fixed\" when React \"took the snapshot\" of the UI by calling your component.\n\nHere is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:\n\n1. You press the \"Send\" button, sending \"Hello\" to Alice.\n\n2. Before the five-second delay ends, you change the value of the \"To\" field to \"Bob\".","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1392":{"pageContent":"1. You press the \"Send\" button, sending \"Hello\" to Alice.\n\n2. Before the five-second delay ends, you change the value of the \"To\" field to \"Bob\".\n\nWhat do you expect the `alert` to display? Would it display, \"You said Hello to Alice\"? Or would it display, \"You said Hello to Bob\"? Make a guess based on what you know, and then try it:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [to, setTo] = useState('Alice');\n\nconst [message, setMessage] = useState('Hello');\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetTimeout(() => {\n\nalert(`You said ${message} to ${to}`);\n\n}, 5000);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<label>\n\nTo:{' '}\n\n<select\n\nvalue={to}\n\nonChange={e => setTo(e.target.value)}>\n\n<option value=\"Alice\">Alice</option>\n\n<option value=\"Bob\">Bob</option>\n\n</select>\n\n</label>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1393":{"pageContent":"<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>\n\n*React keeps the state values \"fixed\" within one render's event handlers.** You don't need to worry whether the state has changed while the code is running.\n\nBut what if you wanted to read the latest state before a re-render? You'll want to use a [state updater function](/learn/queueing-a-series-of-state-updates), covered on the next page!\n\n<Recap>\n\nSetting state requests a new render.\n\nReact stores state outside of your component, as if on a shelf.\n\nWhen you call `useState`, React gives you a snapshot of the state *for that render*.\n\nVariables and event handlers don't \"survive\" re-renders. Every render has its own event handlers.\n\nEvery render (and functions inside it) will always \"see\" the snapshot of the state that React gave to *that* render.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1394":{"pageContent":"Every render (and functions inside it) will always \"see\" the snapshot of the state that React gave to *that* render.\n\nYou can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.\n\nEvent handlers created in the past have the state values from the render in which they were created.\n\n</Recap>\n\n<Challenges>\n\n#### Implement a traffic light {/*implement-a-traffic-light*/}\n\nHere is a crosswalk light component that toggles on when the button is pressed:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function TrafficLight() {\n\nconst [walk, setWalk] = useState(true);\n\nfunction handleClick() {\n\nsetWalk(!walk);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nChange to {walk ? 'Stop' : 'Walk'}\n\n</button>\n\n<h1 style={{\n\ncolor: walk ? 'darkgreen' : 'darkred'\n\n}}>\n\n{walk ? 'Walk' : 'Stop'}\n\n</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nh1 { margin-top: 20px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1395":{"pageContent":"Change to {walk ? 'Stop' : 'Walk'}\n\n</button>\n\n<h1 style={{\n\ncolor: walk ? 'darkgreen' : 'darkred'\n\n}}>\n\n{walk ? 'Walk' : 'Stop'}\n\n</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nh1 { margin-top: 20px; }\n\n```\n\n</Sandpack>\n\nAdd an `alert` to the click handler. When the light is green and says \"Walk\", clicking the button should say \"Stop is next\". When the light is red and says \"Stop\", clicking the button should say \"Walk is next\".\n\nDoes it make a difference whether you put the `alert` before or after the `setWalk` call?\n\n<Solution>\n\nYour `alert` should look like this:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function TrafficLight() {\n\nconst [walk, setWalk] = useState(true);\n\nfunction handleClick() {\n\nsetWalk(!walk);\n\nalert(walk ? 'Stop is next' : 'Walk is next');\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nChange to {walk ? 'Stop' : 'Walk'}\n\n</button>\n\n<h1 style={{\n\ncolor: walk ? 'darkgreen' : 'darkred'\n\n}}>\n\n{walk ? 'Walk' : 'Stop'}\n\n</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nh1 { margin-top: 20px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1396":{"pageContent":"Change to {walk ? 'Stop' : 'Walk'}\n\n</button>\n\n<h1 style={{\n\ncolor: walk ? 'darkgreen' : 'darkred'\n\n}}>\n\n{walk ? 'Walk' : 'Stop'}\n\n</h1>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nh1 { margin-top: 20px; }\n\n```\n\n</Sandpack>\n\nWhether you put it before or after the `setWalk` call makes no difference. That render's value of `walk` is fixed. Calling `setWalk` will only change it for the *next* render, but will not affect the event handler from the previous render.\n\nThis line might seem counter-intuitive at first:\n\n```js\n\nalert(walk ? 'Stop is next' : 'Walk is next');\n\n```\n\nBut it makes sense if you read it as: \"If the traffic light shows 'Walk now', the message should say 'Stop is next.'\" The `walk` variable inside your event handler matches that render's value of `walk` and does not change.\n\nYou can verify that this is correct by applying the substitution method. When `walk` is `true`, you get:\n\n```js\n\n<button onClick={() => {\n\nsetWalk(false);\n\nalert('Stop is next');\n\n}}>\n\nChange to Stop\n\n</button>\n\n<h1 style={{color: 'darkgreen'}}>\n\nWalk\n\n</h1>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1397":{"pageContent":"```js\n\n<button onClick={() => {\n\nsetWalk(false);\n\nalert('Stop is next');\n\n}}>\n\nChange to Stop\n\n</button>\n\n<h1 style={{color: 'darkgreen'}}>\n\nWalk\n\n</h1>\n\n```\n\nSo clicking \"Change to Stop\" queues a render with `walk` set to `false`, and alerts \"Stop is next\".\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-as-a-snapshot.md"}},"1398":{"pageContent":"--\n\ntitle: Thinking in React\n\n--\n\n<Intro>\n\nReact can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called *components.* Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we'll guide you through the thought process of building a searchable product data table with React.\n\n</Intro>\n\n## Start with the mockup {/*start-with-the-mockup*/}\n\nImagine that you already have a JSON API and a mockup from a designer.\n\nThe JSON API returns some data that looks like this:\n\n```json\n\n[\n\n{ category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\" },\n\n{ category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\" },\n\n{ category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\" },\n\n{ category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\" },","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1399":{"pageContent":"{ category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\" },\n\n{ category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\" },\n\n{ category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\" },\n\n{ category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\" }\n\n]\n\n```\n\nThe mockup looks like this:\n\n<img src=\"/images/docs/s_thinking-in-react_ui.png\" width=\"300\" style={{margin: '0 auto'}} />\n\nTo implement a UI in React, you will usually follow the same five steps.\n\n## Step 1: Break the UI into a component hierarchy {/*step-1-break-the-ui-into-a-component-hierarchy*/}\n\nStart by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Check in with them!\n\nDepending on your background, you can think about splitting up a design into components in different ways:","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1400":{"pageContent":"Depending on your background, you can think about splitting up a design into components in different ways:\n\n**Programming**--use the same techniques for deciding if you should create a new function or object. One such technique is the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n\n**CSS**--consider what you would make class selectors for. (However, components are a bit less granular.)\n\n**Design**--consider how you would organize the design's layers.\n\nIf your JSON is well-structured, you'll often find that it naturally maps to the component structure of your UI. That's because UI and data models often have the same information architecture--that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\n\nThere are five components on this screen:\n\n<FullWidth>","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1401":{"pageContent":"There are five components on this screen:\n\n<FullWidth>\n\n<CodeDiagram flip>\n\n<img src=\"/images/docs/s_thinking-in-react_ui_outline.png\" width=\"500\" style={{margin: '0 auto'}} />\n\n1. `FilterableProductTable` (grey) contains the entire app.\n\n2. `SearchBar` (blue) receives the user input.\n\n3. `ProductTable` (lavender) displays and filters the list according to the user input.\n\n4. `ProductCategoryRow` (green) displays a heading for each category.\n\n5. `ProductRow`\t(yellow) displays a row for each product.\n\n</CodeDiagram>\n\n</FullWidth>\n\nIf you look at `ProductTable` (lavender), you'll see that the table header (containing the \"Name\" and \"Price\" labels) isn't its own component. This is a matter of preference, and you could go either way. For this example, it is a part of `ProductTable` because it appears inside the `ProductTable`'s list. However, if this header grows to be complex (e.g., if you add sorting), it would make sense to make this its own `ProductTableHeader` component.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1402":{"pageContent":"Now that you've identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:\n\n`FilterableProductTable`\n\n`SearchBar`\n\n`ProductTable`\n\n`ProductCategoryRow`\n\n`ProductRow`\n\n## Step 2: Build a static version in React {/*step-2-build-a-static-version-in-react*/}\n\nNow that you have your component hierarchy, it's time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity... yet! It's often easier to build the static version first and then add interactivity separately. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1403":{"pageContent":"To build a static version of your app that renders your data model, you'll want to build [components](/learn/your-first-component) that reuse other components and pass data using [props.](/learn/passing-props-to-a-component) Props are a way of passing data from parent to child. (If you're familiar with the concept of [state](/learn/state-a-components-memory), don't use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don't need it.)\n\nYou can either build \"top down\" by starting with building the components higher up in the hierarchy (like `FilterableProductTable`) or \"bottom up\" by working from components lower down (like `ProductRow`). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up.\n\n<Sandpack>\n\n```jsx App.js\n\nfunction ProductCategoryRow({ category }) {\n\nreturn (\n\n<tr>\n\n<th colSpan=\"2\">\n\n{category}\n\n</th>\n\n</tr>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1404":{"pageContent":"<Sandpack>\n\n```jsx App.js\n\nfunction ProductCategoryRow({ category }) {\n\nreturn (\n\n<tr>\n\n<th colSpan=\"2\">\n\n{category}\n\n</th>\n\n</tr>\n\n);\n\n}\n\nfunction ProductRow({ product }) {\n\nconst name = product.stocked ? product.name :\n\n<span style={{ color: 'red' }}>\n\n{product.name}\n\n</span>;\n\nreturn (\n\n<tr>\n\n<td>{name}</td>\n\n<td>{product.price}</td>\n\n</tr>\n\n);\n\n}\n\nfunction ProductTable({ products }) {\n\nconst rows = [];\n\nlet lastCategory = null;\n\nproducts.forEach((product) => {\n\nif (product.category !== lastCategory) {\n\nrows.push(\n\n<ProductCategoryRow\n\ncategory={product.category}\n\nkey={product.category} />\n\n);\n\n}\n\nrows.push(\n\n<ProductRow\n\nproduct={product}\n\nkey={product.name} />\n\n);\n\nlastCategory = product.category;\n\n});\n\nreturn (\n\n<table>\n\n<thead>\n\n<tr>\n\n<th>Name</th>\n\n<th>Price</th>\n\n</tr>\n\n</thead>\n\n<tbody>{rows}</tbody>\n\n</table>\n\n);\n\n}\n\nfunction SearchBar() {\n\nreturn (\n\n<form>\n\n<input type=\"text\" placeholder=\"Search...\" />\n\n<label>\n\n<input type=\"checkbox\" />\n\n{' '}\n\nOnly show products in stock\n\n</label>\n\n</form>\n\n);\n\n}\n\nfunction FilterableProductTable({ products }) {\n\nreturn (\n\n<div>\n\n<SearchBar />","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1405":{"pageContent":"<input type=\"text\" placeholder=\"Search...\" />\n\n<label>\n\n<input type=\"checkbox\" />\n\n{' '}\n\nOnly show products in stock\n\n</label>\n\n</form>\n\n);\n\n}\n\nfunction FilterableProductTable({ products }) {\n\nreturn (\n\n<div>\n\n<SearchBar />\n\n<ProductTable products={products} />\n\n</div>\n\n);\n\n}\n\nconst PRODUCTS = [\n\n{category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n\n{category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n\n{category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n\n{category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n\n{category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n\n{category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n\n];\n\nexport default function App() {\n\nreturn <FilterableProductTable products={PRODUCTS} />;\n\n}\n\n```\n\n```css\n\nbody {\n\npadding: 5px\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 5px;\n\nmargin-bottom: 5px;\n\n}\n\nth {\n\npadding-top: 10px;\n\n}\n\ntd {\n\npadding: 2px;\n\npadding-right: 40px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1406":{"pageContent":"}\n\n```\n\n```css\n\nbody {\n\npadding: 5px\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 5px;\n\nmargin-bottom: 5px;\n\n}\n\nth {\n\npadding-top: 10px;\n\n}\n\ntd {\n\npadding: 2px;\n\npadding-right: 40px;\n\n}\n\n```\n\n</Sandpack>\n\n(If this code looks intimidating, go through the [Quick Start](/learn/) first!)\n\nAfter building your components, you'll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy (`FilterableProductTable`) will take your data model as a prop. This is called _one-way data flow_ because the data flows down from the top-level component to the ones at the bottom of the tree.\n\n<Pitfall>\n\nAt this point, you should not be using any state values. That’s for the next step!\n\n</Pitfall>\n\n## Step 3: Find the minimal but complete representation of UI state {/*step-3-find-the-minimal-but-complete-representation-of-ui-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1407":{"pageContent":"</Pitfall>\n\n## Step 3: Find the minimal but complete representation of UI state {/*step-3-find-the-minimal-but-complete-representation-of-ui-state*/}\n\nTo make the UI interactive, you need to let users change your underlying data model. You will use *state* for this.\n\nThink of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it [DRY (Don't Repeat Yourself).](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you're building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don't store the number of items as another state value--instead, read the length of your array.\n\nNow think of all of the pieces of data in this example application:\n\n1. The original list of products","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1408":{"pageContent":"Now think of all of the pieces of data in this example application:\n\n1. The original list of products\n\n2. The search text the user has entered\n\n3. The value of the checkbox\n\n4. The filtered list of products\n\nWhich of these are state? Identify the ones that are not:\n\nDoes it **remain unchanged** over time? If so, it isn't state.\n\nIs it **passed in from a parent** via props? If so, it isn't state.\n\n**Can you compute it** based on existing state or props in your component? If so, it *definitely* isn't state!\n\nWhat's left is probably state.\n\nLet's go through them one by one again:\n\n1. The original list of products is **passed in as props, so it's not state.**\n\n2. The search text seems to be state since it changes over time and can't be computed from anything.\n\n3. The value of the checkbox seems to be state since it changes over time and can't be computed from anything.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1409":{"pageContent":"3. The value of the checkbox seems to be state since it changes over time and can't be computed from anything.\n\n4. The filtered list of products **isn't state because it can be computed** by taking the original list of products and filtering it according to the search text and value of the checkbox.\n\nThis means only the search text and the value of the checkbox are state! Nicely done!\n\n<DeepDive>\n\n#### Props vs State {/*props-vs-state*/}\n\nThere are two types of \"model\" data in React: props and state. The two are very different:\n\n[**Props** are like arguments you pass](/learn/passing-props-to-a-component) to a function. They let a parent component pass data to a child component and customize its appearance. For example, a `Form` can pass a `color` prop to a `Button`.\n\n[**State** is like a component’s memory.](/learn/state-a-components-memory) It lets a component keep track of some information and change it in response to interactions. For example, a `Button` might keep track of `isHovered` state.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1410":{"pageContent":"Props and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), and *pass it down* to child components as their props. It's okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!\n\n</DeepDive>\n\n## Step 4: Identify where your state should live {/*step-4-identify-where-your-state-should-live*/}\n\nAfter identifying your app’s minimal state data, you need to identify which component is responsible for changing this state, or *owns* the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you’re new to this concept, but you can figure it out by following these steps!\n\nFor each piece of state in your application:\n\n1. Identify *every* component that renders something based on that state.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1411":{"pageContent":"For each piece of state in your application:\n\n1. Identify *every* component that renders something based on that state.\n\n2. Find their closest common parent component--a component above them all in the hierarchy.\n\n3. Decide where the state should live:\n\n1. Often, you can put the state directly into their common parent.\n\n2. You can also put the state into some component above their common parent.\n\n3. If you can't find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\nIn the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it is easier to think of them as a single piece of state.\n\nNow let's run through our strategy for this state:\n\n1. **Identify components that use state:**","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1412":{"pageContent":"Now let's run through our strategy for this state:\n\n1. **Identify components that use state:**\n\n`ProductTable` needs to filter the product list based on that state (search text and checkbox value).\n\n`SearchBar` needs to display that state (search text and checkbox value).\n\n1. **Find their common parent:** The first parent component both components share is `FilterableProductTable`.\n\n2. **Decide where the state lives**: We'll keep the filter text and checked state values in `FilterableProductTable`.\n\nSo the state values will live in `FilterableProductTable`.\n\nAdd state to the component with the [`useState()` Hook.](/reference/react/useState) Hooks let you \"hook into\" a component's [render cycle.](/learn/render-and-commit) Add two state variables at the top of `FilterableProductTable` and specify the initial state of your application:\n\n```js\n\nfunction FilterableProductTable({ products }) {\n\nconst [filterText, setFilterText] = useState('');\n\nconst [inStockOnly, setInStockOnly] = useState(false);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1413":{"pageContent":"```js\n\nfunction FilterableProductTable({ products }) {\n\nconst [filterText, setFilterText] = useState('');\n\nconst [inStockOnly, setInStockOnly] = useState(false);\n\n```\n\nThen, pass `filterText` and `inStockOnly` to `ProductTable` and `SearchBar` as props:\n\n```js\n\n<div>\n\n<SearchBar\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n<ProductTable\n\nproducts={products}\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n</div>\n\n```\n\nYou can start seeing how your application will behave. Edit the `filterText` initial value from `useState('')` to `useState('fruit')` in the sandbox code below. You'll see both the search input text and the table update:\n\n<Sandpack>\n\n```jsx App.js\n\nimport { useState } from 'react';\n\nfunction FilterableProductTable({ products }) {\n\nconst [filterText, setFilterText] = useState('');\n\nconst [inStockOnly, setInStockOnly] = useState(false);\n\nreturn (\n\n<div>\n\n<SearchBar\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n<ProductTable\n\nproducts={products}\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n</div>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1414":{"pageContent":"return (\n\n<div>\n\n<SearchBar\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n<ProductTable\n\nproducts={products}\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n</div>\n\n);\n\n}\n\nfunction ProductCategoryRow({ category }) {\n\nreturn (\n\n<tr>\n\n<th colSpan=\"2\">\n\n{category}\n\n</th>\n\n</tr>\n\n);\n\n}\n\nfunction ProductRow({ product }) {\n\nconst name = product.stocked ? product.name :\n\n<span style={{ color: 'red' }}>\n\n{product.name}\n\n</span>;\n\nreturn (\n\n<tr>\n\n<td>{name}</td>\n\n<td>{product.price}</td>\n\n</tr>\n\n);\n\n}\n\nfunction ProductTable({ products, filterText, inStockOnly }) {\n\nconst rows = [];\n\nlet lastCategory = null;\n\nproducts.forEach((product) => {\n\nif (\n\nproduct.name.toLowerCase().indexOf(\n\nfilterText.toLowerCase()\n\n) === -1\n\n) {\n\nreturn;\n\n}\n\nif (inStockOnly && !product.stocked) {\n\nreturn;\n\n}\n\nif (product.category !== lastCategory) {\n\nrows.push(\n\n<ProductCategoryRow\n\ncategory={product.category}\n\nkey={product.category} />\n\n);\n\n}\n\nrows.push(\n\n<ProductRow\n\nproduct={product}\n\nkey={product.name} />\n\n);\n\nlastCategory = product.category;\n\n});\n\nreturn (\n\n<table>\n\n<thead>\n\n<tr>\n\n<th>Name</th>\n\n<th>Price</th>\n\n</tr>\n\n</thead>","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1415":{"pageContent":"key={product.category} />\n\n);\n\n}\n\nrows.push(\n\n<ProductRow\n\nproduct={product}\n\nkey={product.name} />\n\n);\n\nlastCategory = product.category;\n\n});\n\nreturn (\n\n<table>\n\n<thead>\n\n<tr>\n\n<th>Name</th>\n\n<th>Price</th>\n\n</tr>\n\n</thead>\n\n<tbody>{rows}</tbody>\n\n</table>\n\n);\n\n}\n\nfunction SearchBar({ filterText, inStockOnly }) {\n\nreturn (\n\n<form>\n\n<input\n\ntype=\"text\"\n\nvalue={filterText}\n\nplaceholder=\"Search...\"/>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={inStockOnly} />\n\n{' '}\n\nOnly show products in stock\n\n</label>\n\n</form>\n\n);\n\n}\n\nconst PRODUCTS = [\n\n{category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n\n{category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n\n{category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n\n{category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n\n{category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n\n{category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n\n];\n\nexport default function App() {\n\nreturn <FilterableProductTable products={PRODUCTS} />;\n\n}\n\n```\n\n```css\n\nbody {\n\npadding: 5px\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1416":{"pageContent":"{category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n\n];\n\nexport default function App() {\n\nreturn <FilterableProductTable products={PRODUCTS} />;\n\n}\n\n```\n\n```css\n\nbody {\n\npadding: 5px\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 5px;\n\nmargin-bottom: 5px;\n\n}\n\nth {\n\npadding-top: 5px;\n\n}\n\ntd {\n\npadding: 2px;\n\n}\n\n```\n\n</Sandpack>\n\nNotice that editing the form doesn't work yet. There is a console error in the sandbox above explaining why:\n\n<ConsoleBlock level=\"error\">\n\nYou provided a \\`value\\` prop to a form field without an \\`onChange\\` handler. This will render a read-only field.\n\n</ConsoleBlock>\n\nIn the sandbox above, `ProductTable` and `SearchBar` read the `filterText` and `inStockOnly` props to render the table, the input, and the checkbox. For example, here is how `SearchBar` populates the input value:\n\n```js {1,6}\n\nfunction SearchBar({ filterText, inStockOnly }) {\n\nreturn (\n\n<form>\n\n<input\n\ntype=\"text\"\n\nvalue={filterText}\n\nplaceholder=\"Search...\"/>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1417":{"pageContent":"```js {1,6}\n\nfunction SearchBar({ filterText, inStockOnly }) {\n\nreturn (\n\n<form>\n\n<input\n\ntype=\"text\"\n\nvalue={filterText}\n\nplaceholder=\"Search...\"/>\n\n```\n\nHowever, you haven't added any code to respond to the user actions like typing yet. This will be your final step.\n\n## Step 5: Add inverse data flow {/*step-5-add-inverse-data-flow*/}\n\nCurrently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in `FilterableProductTable`.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1418":{"pageContent":"React makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you'll see that React ignores your input. This is intentional. By writing `<input value={filterText} />`, you've set the `value` prop of the `input` to always be equal to the `filterText` state passed in from `FilterableProductTable`. Since `filterText` state is never set, the input never changes.\n\nYou want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by `FilterableProductTable`, so only it can call `setFilterText` and `setInStockOnly`. To let `SearchBar` update the `FilterableProductTable`'s state, you need to pass these functions down to `SearchBar`:\n\n```js {2,3,10,11}\n\nfunction FilterableProductTable({ products }) {\n\nconst [filterText, setFilterText] = useState('');\n\nconst [inStockOnly, setInStockOnly] = useState(false);\n\nreturn (\n\n<div>\n\n<SearchBar","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1419":{"pageContent":"```js {2,3,10,11}\n\nfunction FilterableProductTable({ products }) {\n\nconst [filterText, setFilterText] = useState('');\n\nconst [inStockOnly, setInStockOnly] = useState(false);\n\nreturn (\n\n<div>\n\n<SearchBar\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly}\n\nonFilterTextChange={setFilterText}\n\nonInStockOnlyChange={setInStockOnly} />\n\n```\n\nInside the `SearchBar`, you will add the `onChange` event handlers and set the parent state from them:\n\n```js {5}\n\n<input\n\ntype=\"text\"\n\nvalue={filterText}\n\nplaceholder=\"Search...\"\n\nonChange={(e) => onFilterTextChange(e.target.value)} />\n\n```\n\nNow the application fully works!\n\n<Sandpack>\n\n```jsx App.js\n\nimport { useState } from 'react';\n\nfunction FilterableProductTable({ products }) {\n\nconst [filterText, setFilterText] = useState('');\n\nconst [inStockOnly, setInStockOnly] = useState(false);\n\nreturn (\n\n<div>\n\n<SearchBar\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly}\n\nonFilterTextChange={setFilterText}\n\nonInStockOnlyChange={setInStockOnly} />\n\n<ProductTable\n\nproducts={products}\n\nfilterText={filterText}","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1420":{"pageContent":"return (\n\n<div>\n\n<SearchBar\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly}\n\nonFilterTextChange={setFilterText}\n\nonInStockOnlyChange={setInStockOnly} />\n\n<ProductTable\n\nproducts={products}\n\nfilterText={filterText}\n\ninStockOnly={inStockOnly} />\n\n</div>\n\n);\n\n}\n\nfunction ProductCategoryRow({ category }) {\n\nreturn (\n\n<tr>\n\n<th colSpan=\"2\">\n\n{category}\n\n</th>\n\n</tr>\n\n);\n\n}\n\nfunction ProductRow({ product }) {\n\nconst name = product.stocked ? product.name :\n\n<span style={{ color: 'red' }}>\n\n{product.name}\n\n</span>;\n\nreturn (\n\n<tr>\n\n<td>{name}</td>\n\n<td>{product.price}</td>\n\n</tr>\n\n);\n\n}\n\nfunction ProductTable({ products, filterText, inStockOnly }) {\n\nconst rows = [];\n\nlet lastCategory = null;\n\nproducts.forEach((product) => {\n\nif (\n\nproduct.name.toLowerCase().indexOf(\n\nfilterText.toLowerCase()\n\n) === -1\n\n) {\n\nreturn;\n\n}\n\nif (inStockOnly && !product.stocked) {\n\nreturn;\n\n}\n\nif (product.category !== lastCategory) {\n\nrows.push(\n\n<ProductCategoryRow\n\ncategory={product.category}\n\nkey={product.category} />\n\n);\n\n}\n\nrows.push(\n\n<ProductRow\n\nproduct={product}\n\nkey={product.name} />\n\n);\n\nlastCategory = product.category;","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1421":{"pageContent":"rows.push(\n\n<ProductCategoryRow\n\ncategory={product.category}\n\nkey={product.category} />\n\n);\n\n}\n\nrows.push(\n\n<ProductRow\n\nproduct={product}\n\nkey={product.name} />\n\n);\n\nlastCategory = product.category;\n\n});\n\nreturn (\n\n<table>\n\n<thead>\n\n<tr>\n\n<th>Name</th>\n\n<th>Price</th>\n\n</tr>\n\n</thead>\n\n<tbody>{rows}</tbody>\n\n</table>\n\n);\n\n}\n\nfunction SearchBar({\n\nfilterText,\n\ninStockOnly,\n\nonFilterTextChange,\n\nonInStockOnlyChange\n\n}) {\n\nreturn (\n\n<form>\n\n<input\n\ntype=\"text\"\n\nvalue={filterText} placeholder=\"Search...\"\n\nonChange={(e) => onFilterTextChange(e.target.value)} />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={inStockOnly}\n\nonChange={(e) => onInStockOnlyChange(e.target.checked)} />\n\n{' '}\n\nOnly show products in stock\n\n</label>\n\n</form>\n\n);\n\n}\n\nconst PRODUCTS = [\n\n{category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},\n\n{category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},\n\n{category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n\n{category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1422":{"pageContent":"{category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},\n\n{category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},\n\n{category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},\n\n{category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}\n\n];\n\nexport default function App() {\n\nreturn <FilterableProductTable products={PRODUCTS} />;\n\n}\n\n```\n\n```css\n\nbody {\n\npadding: 5px\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin-top: 5px;\n\nmargin-bottom: 5px;\n\n}\n\nth {\n\npadding: 4px;\n\n}\n\ntd {\n\npadding: 2px;\n\n}\n\n```\n\n</Sandpack>\n\nYou can learn all about handling events and updating state in the [Adding Interactivity](/learn/adding-interactivity) section.\n\n## Where to go from here {/*where-to-go-from-here*/}\n\nThis was a very brief introduction to how to think about building components and applications with React. You can [start a React project](/learn/installation) right now or [dive deeper on all the syntax](/learn/describing-the-ui) used in this tutorial.","metadata":{"source":"reactjs.org/beta/src/content/learn/thinking-in-react.md"}},"1423":{"pageContent":"--\n\ntitle: Managing State\n\n--\n\n<Intro>\n\nAs your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you'll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.\n\n</Intro>\n\n<YouWillLearn isChapter={true}>\n\n[How to think about UI changes as state changes](/learn/reacting-to-input-with-state)\n\n[How to structure state well](/learn/choosing-the-state-structure)\n\n[How to \"lift state up\" to share it between components](/learn/sharing-state-between-components)\n\n[How to control whether the state gets preserved or reset](/learn/preserving-and-resetting-state)\n\n[How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)\n\n[How to pass information without \"prop drilling\"](/learn/passing-data-deeply-with-context)","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1424":{"pageContent":"[How to consolidate complex state logic in a function](/learn/extracting-state-logic-into-a-reducer)\n\n[How to pass information without \"prop drilling\"](/learn/passing-data-deeply-with-context)\n\n[How to scale state management as your app grows](/learn/scaling-up-with-reducer-and-context)\n\n</YouWillLearn>\n\n## Reacting to input with state {/*reacting-to-input-with-state*/}\n\nWith React, you won't modify the UI from code directly. For example, you won't write commands like \"disable the button\", \"enable the button\", \"show the success message\", etc. Instead, you will describe the UI you want to see for the different visual states of your component (\"initial state\", \"typing state\", \"success state\"), and then trigger the state changes in response to user input. This is similar to how designers think about UI.\n\nHere is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1425":{"pageContent":"Here is a quiz form built using React. Note how it uses the `status` state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [answer, setAnswer] = useState('');\n\nconst [error, setError] = useState(null);\n\nconst [status, setStatus] = useState('typing');\n\nif (status === 'success') {\n\nreturn <h1>That's right!</h1>\n\n}\n\nasync function handleSubmit(e) {\n\ne.preventDefault();\n\nsetStatus('submitting');\n\ntry {\n\nawait submitForm(answer);\n\nsetStatus('success');\n\n} catch (err) {\n\nsetStatus('typing');\n\nsetError(err);\n\n}\n\n}\n\nfunction handleTextareaChange(e) {\n\nsetAnswer(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>City quiz</h2>\n\n<p>\n\nIn which city is there a billboard that turns air into drinkable water?\n\n</p>\n\n<form onSubmit={handleSubmit}>\n\n<textarea\n\nvalue={answer}\n\nonChange={handleTextareaChange}\n\ndisabled={status === 'submitting'}\n\n/>\n\n<br />\n\n<button disabled={\n\nanswer.length === 0 ||\n\nstatus === 'submitting'\n\n}>","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1426":{"pageContent":"</p>\n\n<form onSubmit={handleSubmit}>\n\n<textarea\n\nvalue={answer}\n\nonChange={handleTextareaChange}\n\ndisabled={status === 'submitting'}\n\n/>\n\n<br />\n\n<button disabled={\n\nanswer.length === 0 ||\n\nstatus === 'submitting'\n\n}>\n\nSubmit\n\n</button>\n\n{error !== null &&\n\n<p className=\"Error\">\n\n{error.message}\n\n</p>\n\n}\n\n</form>\n\n</>\n\n);\n\n}\n\nfunction submitForm(answer) {\n\n// Pretend it's hitting the network.\n\nreturn new Promise((resolve, reject) => {\n\nsetTimeout(() => {\n\nlet shouldError = answer.toLowerCase() !== 'lima'\n\nif (shouldError) {\n\nreject(new Error('Good guess but a wrong answer. Try again!'));\n\n} else {\n\nresolve();\n\n}\n\n}, 1500);\n\n});\n\n}\n\n```\n\n```css\n\n.Error { color: red; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/reacting-to-input-with-state\">\n\nRead **[Reacting to Input with State](/learn/reacting-to-input-with-state)** to learn how to approach interactions with a state-driven mindset.\n\n</LearnMore>\n\n## Choosing the state structure {/*choosing-the-state-structure*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1427":{"pageContent":"</LearnMore>\n\n## Choosing the state structure {/*choosing-the-state-structure*/}\n\nStructuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn't contain redundant or duplicated information. If there's some unnecessary state, it's easy to forget to update it, and introduce bugs!\n\nFor example, this form has a **redundant** `fullName` state variable:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nconst [fullName, setFullName] = useState('');\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\nsetFullName(e.target.value + ' ' + lastName);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\nsetFullName(firstName + ' ' + e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>Let’s check you in</h2>\n\n<label>\n\nFirst name:{' '}\n\n<input\n\nvalue={firstName}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1428":{"pageContent":"}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\nsetFullName(firstName + ' ' + e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>Let’s check you in</h2>\n\n<label>\n\nFirst name:{' '}\n\n<input\n\nvalue={firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:{' '}\n\n<input\n\nvalue={lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n<p>\n\nYour ticket will be issued to: <b>{fullName}</b>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nYou can remove it and simplify the code by calculating `fullName` while the component is rendering:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nconst fullName = firstName + ' ' + lastName;\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>Let’s check you in</h2>\n\n<label>\n\nFirst name:{' '}\n\n<input\n\nvalue={firstName}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1429":{"pageContent":"setFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>Let’s check you in</h2>\n\n<label>\n\nFirst name:{' '}\n\n<input\n\nvalue={firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n</label>\n\n<label>\n\nLast name:{' '}\n\n<input\n\nvalue={lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n</label>\n\n<p>\n\nYour ticket will be issued to: <b>{fullName}</b>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 5px; }\n\n```\n\n</Sandpack>\n\nThis might seem like a small change, but many bugs in React apps are fixed this way.\n\n<LearnMore path=\"/learn/choosing-the-state-structure\">\n\nRead **[Choosing the State Structure](/learn/choosing-the-state-structure)** to learn how to design the state shape to avoid bugs.\n\n</LearnMore>\n\n## Sharing state between components {/*sharing-state-between-components*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1430":{"pageContent":"</LearnMore>\n\n## Sharing state between components {/*sharing-state-between-components*/}\n\nSometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as \"lifting state up\", and it's one of the most common things you will do writing React code.\n\nIn this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Accordion() {\n\nconst [activeIndex, setActiveIndex] = useState(0);\n\nreturn (\n\n<>\n\n<h2>Almaty, Kazakhstan</h2>\n\n<Panel\n\ntitle=\"About\"\n\nisActive={activeIndex === 0}\n\nonShow={() => setActiveIndex(0)}\n\n>\n\nWith a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n\n</Panel>\n\n<Panel","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1431":{"pageContent":"isActive={activeIndex === 0}\n\nonShow={() => setActiveIndex(0)}\n\n>\n\nWith a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.\n\n</Panel>\n\n<Panel\n\ntitle=\"Etymology\"\n\nisActive={activeIndex === 1}\n\nonShow={() => setActiveIndex(1)}\n\n>\n\nThe name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.\n\n</Panel>\n\n</>\n\n);\n\n}\n\nfunction Panel({\n\ntitle,\n\nchildren,\n\nisActive,\n\nonShow\n\n}) {\n\nreturn (\n\n<section className=\"panel\">\n\n<h3>{title}</h3>\n\n{isActive ? (\n\n<p>{children}</p>\n\n) : (\n\n<button onClick={onShow}>\n\nShow\n\n</button>\n\n)}\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/sharing-state-between-components\">","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1432":{"pageContent":"Show\n\n</button>\n\n)}\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nh3, p { margin: 5px 0px; }\n\n.panel {\n\npadding: 10px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/sharing-state-between-components\">\n\nRead **[Sharing State Between Components](/learn/sharing-state-between-components)** to learn how to lift state up and keep components in sync.\n\n</LearnMore>\n\n## Preserving and resetting state {/*preserving-and-resetting-state*/}\n\nWhen you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React's automatic behavior works well enough. By default, React preserves the parts of the tree that \"match up\" with the previously rendered component tree.\n\nHowever, sometimes this is not what you want. For example, in this app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1433":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n\nconst [to, setTo] = useState(contacts[0]);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedContact={to}\n\nonSelect={contact => setTo(contact)}\n\n/>\n\n<Chat contact={to} />\n\n</div>\n\n)\n\n}\n\nconst contacts = [\n\n{ name: 'Taylor', email: 'taylor@mail.com' },\n\n{ name: 'Alice', email: 'alice@mail.com' },\n\n{ name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\nselectedContact,\n\ncontacts,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.email}>\n\n<button onClick={() => {\n\nonSelect(contact);\n\n}}>\n\n{contact.name}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={text}\n\nplaceholder={'Chat to ' + contact.name}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1434":{"pageContent":"export default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={text}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat, .contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nReact lets you override the default behavior, and *force* a component to reset its state by passing it a different `key`, like `<Chat key={email} />`. This tells React that if the recipient is different, it should be considered a *different* `Chat` component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients always resets the input field--even though you render the same component.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1435":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n\nconst [to, setTo] = useState(contacts[0]);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedContact={to}\n\nonSelect={contact => setTo(contact)}\n\n/>\n\n<Chat key={to.email} contact={to} />\n\n</div>\n\n)\n\n}\n\nconst contacts = [\n\n{ name: 'Taylor', email: 'taylor@mail.com' },\n\n{ name: 'Alice', email: 'alice@mail.com' },\n\n{ name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\nselectedContact,\n\ncontacts,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.email}>\n\n<button onClick={() => {\n\nonSelect(contact);\n\n}}>\n\n{contact.name}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={text}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1436":{"pageContent":"</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={text}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat, .contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/preserving-and-resetting-state\">\n\nRead **[Preserving and Resetting State](/learn/preserving-and-resetting-state)** to learn the lifetime of state and how to control it.\n\n</LearnMore>\n\n## Extracting state logic into a reducer {/*extracting-state-logic-into-a-reducer*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1437":{"pageContent":"</LearnMore>\n\n## Extracting state logic into a reducer {/*extracting-state-logic-into-a-reducer*/}\n\nComponents with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called \"reducer\". Your event handlers become concise because they only specify the user \"actions\". At the bottom of the file, the reducer function specifies how the state should update in response to each action!\n\n<Sandpack>\n\n```js App.js\n\nimport { useReducer } from 'react';\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nexport default function TaskApp() {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nfunction handleAddTask(text) {\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1438":{"pageContent":"type: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}\n\nfunction handleChangeTask(task) {\n\ndispatch({\n\ntype: 'changed',\n\ntask: task\n\n});\n\n}\n\nfunction handleDeleteTask(taskId) {\n\ndispatch({\n\ntype: 'deleted',\n\nid: taskId\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Prague itinerary</h1>\n\n<AddTask\n\nonAddTask={handleAddTask}\n\n/>\n\n<TaskList\n\ntasks={tasks}\n\nonChangeTask={handleChangeTask}\n\nonDeleteTask={handleDeleteTask}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nlet nextId = 3;\n\nconst initialTasks = [\n\n{ id: 0, text: 'Visit Kafka Museum', done: true },\n\n{ id: 1, text: 'Watch a puppet show', done: false },\n\n{ id: 2, text: 'Lennon Wall pic', done: false }\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1439":{"pageContent":"{ id: 1, text: 'Watch a puppet show', done: false },\n\n{ id: 2, text: 'Lennon Wall pic', done: false }\n\n];\n\n```\n\n```js AddTask.js hidden\n\nimport { useState } from 'react';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nonAddTask(text);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js hidden\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntasks,\n\nonChangeTask,\n\nonDeleteTask\n\n}) {\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task\n\ntask={task}\n\nonChange={onChangeTask}\n\nonDelete={onDeleteTask}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1440":{"pageContent":"taskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ntext: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\nonChange({\n\n...task,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => onDelete(task.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/extracting-state-logic-into-a-reducer\">\n\nRead **[Extracting State Logic into a Reducer](/learn/extracting-state-logic-into-a-reducer)** to learn how to consolidate logic in the reducer function.\n\n</LearnMore>\n\n## Passing data deeply with context {/*passing-data-deeply-with-context*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1441":{"pageContent":"</LearnMore>\n\n## Passing data deeply with context {/*passing-data-deeply-with-context*/}\n\nUsually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.\n\nHere, the `Heading` component determines its heading level by \"asking\" the closest `Section` for its level. Each `Section` tracks its own level by asking the parent `Section` and adding one to it. Every `Section` provides information to all components below it without passing props--it does that through context.\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading>Title</Heading>\n\n<Section>","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1442":{"pageContent":"<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading>Title</Heading>\n\n<Section>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Section>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Section>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n\nconst level = useContext(LevelContext);\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level + 1}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1443":{"pageContent":"{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 0:\n\nthrow Error('Heading must be inside a Section!');\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/passing-data-deeply-with-context\">\n\nRead **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.\n\n</LearnMore>","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1444":{"pageContent":"Read **[Passing Data Deeply with Context](/learn/passing-data-deeply-with-context)** to learn about using context as an alternative to passing props.\n\n</LearnMore>\n\n## Scaling up with reducer and context {/*scaling-up-with-reducer-and-context*/}\n\nReducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.\n\nWith this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.\n\n<Sandpack>\n\n```js App.js\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nreturn (\n\n<TasksProvider>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksProvider>\n\n);\n\n}\n\n```\n\n```js TasksContext.js","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1445":{"pageContent":"import { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nreturn (\n\n<TasksProvider>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksProvider>\n\n);\n\n}\n\n```\n\n```js TasksContext.js\n\nimport { createContext, useContext, useReducer } from 'react';\n\nconst TasksContext = createContext(null);\n\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider\n\nvalue={dispatch}\n\n>\n\n{children}\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nexport function useTasks() {\n\nreturn useContext(TasksContext);\n\n}\n\nexport function useTasksDispatch() {\n\nreturn useContext(TasksDispatchContext);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1446":{"pageContent":"switch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js AddTask.js\n\nimport { useState, useContext } from 'react';\n\nimport { useTasksDispatch } from './TasksContext.js';\n\nexport default function AddTask({ onAddTask }) {\n\nconst [text, setText] = useState('');\n\nconst dispatch = useTasksDispatch();\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1447":{"pageContent":"value={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js\n\nimport { useState, useContext } from 'react';\n\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n\nconst tasks = useTasks();\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task task={task} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nconst dispatch = useTasksDispatch();\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ntext: e.target.value\n\n}\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1448":{"pageContent":"<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/scaling-up-with-reducer-and-context\">\n\nRead **[Scaling Up with Reducer and Context](/learn/scaling-up-with-reducer-and-context)** to learn how state management scales in a growing app.\n\n</LearnMore>\n\n## What's next? {/*whats-next*/}\n\nHead over to [Reacting to Input with State](/learn/reacting-to-input-with-state) to start reading this chapter page by page!\n\nOr, if you're already familiar with these topics, why not read about [Escape Hatches](/learn/escape-hatches)?","metadata":{"source":"reactjs.org/beta/src/content/learn/managing-state.md"}},"1449":{"pageContent":"--\n\ntitle: Conditional Rendering\n\n--\n\n<Intro>\n\nYour components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to return different JSX depending on a condition\n\nHow to conditionally include or exclude a piece of JSX\n\nCommon conditional syntax shortcuts you’ll encounter in React codebases\n\n</YouWillLearn>\n\n## Conditionally returning JSX {/*conditionally-returning-jsx*/}\n\nLet’s say you have a `PackingList` component rendering several `Item`s, which can be marked as packed or not:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn <li className=\"item\">{name}</li>;\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1450":{"pageContent":"<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNotice that some of the `Item` components have their `isPacked` prop set to `true` instead of `false`. You want to add a checkmark (✔) to packed items if `isPacked={true}`.\n\nYou can write this as an [`if`/`else` statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) like so:\n\n```js\n\nif (isPacked) {\n\nreturn <li className=\"item\">{name} ✔</li>;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n```\n\nIf the `isPacked` prop is `true`, this code **returns a different JSX tree.** With this change, some of the items get a checkmark at the end:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nif (isPacked) {\n\nreturn <li className=\"item\">{name} ✔</li>;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1451":{"pageContent":"return <li className=\"item\">{name} ✔</li>;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTry editing what gets returned in either case, and see how the result changes!\n\nNotice how you're creating branching logic with JavaScript's `if` and `return` statements. In React, control flow (like conditions) is handled by JavaScript.\n\n### Conditionally returning nothing with `null` {/*conditionally-returning-nothing-with-null*/}\n\nIn some situations, you won't want to render anything at all. For example, say you don't want to show packed items at all. A component must return something. In this case, you can return `null`:\n\n```js\n\nif (isPacked) {\n\nreturn null;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1452":{"pageContent":"```js\n\nif (isPacked) {\n\nreturn null;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n```\n\nIf `isPacked` is true, the component will return nothing, `null`. Otherwise, it will return JSX to render.\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nif (isPacked) {\n\nreturn null;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIn practice, returning `null` from a component isn't common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component's JSX. Here's how to do that!\n\n## Conditionally including JSX {/*conditionally-including-jsx*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1453":{"pageContent":"## Conditionally including JSX {/*conditionally-including-jsx*/}\n\nIn the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:\n\n```js\n\n<li className=\"item\">{name} ✔</li>\n\n```\n\nis very similar to\n\n```js\n\n<li className=\"item\">{name}</li>\n\n```\n\nBoth of the conditional branches return `<li className=\"item\">...</li>`:\n\n```js\n\nif (isPacked) {\n\nreturn <li className=\"item\">{name} ✔</li>;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n```\n\nWhile this duplication isn't harmful, it could make your code harder to maintain. What if you want to change the `className`? You'd have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more [DRY.](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)\n\n### Conditional (ternary) operator (`? :`) {/*conditional-ternary-operator--*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1454":{"pageContent":"### Conditional (ternary) operator (`? :`) {/*conditional-ternary-operator--*/}\n\nJavaScript has a compact syntax for writing a conditional expression -- the [conditional operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) or \"ternary operator\".\n\nInstead of this:\n\n```js\n\nif (isPacked) {\n\nreturn <li className=\"item\">{name} ✔</li>;\n\n}\n\nreturn <li className=\"item\">{name}</li>;\n\n```\n\nYou can write this:\n\n```js\n\nreturn (\n\n<li className=\"item\">\n\n{isPacked ? name + ' ✔' : name}\n\n</li>\n\n);\n\n```\n\nYou can read it as *\"if `isPacked` is true, then (`?`) render `name + ' ✔'`, otherwise (`:`) render `name`\"*.\n\n<DeepDive>\n\n#### Are these two examples fully equivalent? {/*are-these-two-examples-fully-equivalent*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1455":{"pageContent":"<DeepDive>\n\n#### Are these two examples fully equivalent? {/*are-these-two-examples-fully-equivalent*/}\n\nIf you're coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different \"instances\" of `<li>`. But JSX elements aren't \"instances\" because they don't hold any internal state and aren't real DOM nodes. They're lightweight descriptions, like blueprints. So these two examples, in fact, *are* completely equivalent. [Preserving and Resetting State](/learn/preserving-and-resetting-state) goes into detail about how this works.\n\n</DeepDive>\n\nNow let's say you want to wrap the completed item's text into another HTML tag, like `<del>` to strike it out. You can add even more newlines and parentheses so that it's easier to nest more JSX each of the cases:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn (\n\n<li className=\"item\">\n\n{isPacked ? (\n\n<del>\n\n{name + ' ✔'}\n\n</del>\n\n) : (\n\nname\n\n)}\n\n</li>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1456":{"pageContent":"<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn (\n\n<li className=\"item\">\n\n{isPacked ? (\n\n<del>\n\n{name + ' ✔'}\n\n</del>\n\n) : (\n\nname\n\n)}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up. In React, markup is a part of your code, so you can use tools like variables and functions to tidy up complex expressions.\n\n### Logical AND operator (`&&`) {/*logical-and-operator-*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1457":{"pageContent":"### Logical AND operator (`&&`) {/*logical-and-operator-*/}\n\nAnother common shortcut you'll encounter is the [JavaScript logical AND (`&&`) operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#:~:text=The%20logical%20AND%20(%20%26%26%20)%20operator,it%20returns%20a%20Boolean%20value.) Inside React components, it often comes up when you want to render some JSX when the condition is true, **or render nothing otherwise.** With `&&`, you could conditionally render the checkmark only if `isPacked` is `true`:\n\n```js\n\nreturn (\n\n<li className=\"item\">\n\n{name} {isPacked && '✔'}\n\n</li>\n\n);\n\n```\n\nYou can read this as *\"if `isPacked`, then (`&&`) render the checkmark, otherwise, render nothing\"*.\n\nHere it is in action:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name} {isPacked && '✔'}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1458":{"pageContent":"return (\n\n<li className=\"item\">\n\n{name} {isPacked && '✔'}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nA [JavaScript && expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND) returns the value of its right side (in our case, the checkmark) if the left side (our condition) is `true`. But if the condition is `false`, the whole expression becomes `false`. React considers `false` as a \"hole\" in the JSX tree, just like `null` or `undefined`, and doesn't render anything in its place.\n\n<Pitfall>\n\n*Don't put numbers on the left side of `&&`.**","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1459":{"pageContent":"<Pitfall>\n\n*Don't put numbers on the left side of `&&`.**\n\nTo test the condition, JavaScript converts the left side to a boolean automatically. However, if the left side is `0`, then the whole expression gets that value (`0`), and React will happily render `0` rather than nothing.\n\nFor example, a common mistake is to write code like `messageCount && <p>New messages</p>`. It's easy to assume that it renders nothing when `messageCount` is `0`, but it really renders the `0` itself!\n\nTo fix it, make the left side a boolean: `messageCount > 0 && <p>New messages</p>`.\n\n</Pitfall>\n\n### Conditionally assigning JSX to a variable {/*conditionally-assigning-jsx-to-a-variable*/}\n\nWhen the shortcuts get in the way of writing plain code, try using an `if` statement and a variable. You can reassign variables defined with [`let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let), so start by providing the default content you want to display, the name:\n\n```js\n\nlet itemContent = name;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1460":{"pageContent":"```js\n\nlet itemContent = name;\n\n```\n\nUse an `if` statement to reassign a JSX expression to `itemContent` if `isPacked` is `true`:\n\n```js\n\nif (isPacked) {\n\nitemContent = name + \" ✔\";\n\n}\n\n```\n\n[Curly braces open the \"window into JavaScript\".](/learn/javascript-in-jsx-with-curly-braces#using-curly-braces-a-window-into-the-javascript-world) Embed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:\n\n```js\n\n<li className=\"item\">\n\n{itemContent}\n\n</li>\n\n```\n\nThis style is the most verbose, but it's also the most flexible. Here it is in action:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nlet itemContent = name;\n\nif (isPacked) {\n\nitemContent = name + \" ✔\";\n\n}\n\nreturn (\n\n<li className=\"item\">\n\n{itemContent}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1461":{"pageContent":"<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nLike before, this works not only for text, but for arbitrary JSX too:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nlet itemContent = name;\n\nif (isPacked) {\n\nitemContent = (\n\n<del>\n\n{name + \" ✔\"}\n\n</del>\n\n);\n\n}\n\nreturn (\n\n<li className=\"item\">\n\n{itemContent}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1462":{"pageContent":"<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIf you're not familiar with JavaScript, this variety of styles might seem overwhelming at first. However, learning them will help you read and write any JavaScript code -- and not just React components! Pick the one you prefer for a start, and then consult this reference again if you forget how the other ones work.\n\n<Recap>\n\nIn React, you control branching logic with JavaScript.\n\nYou can return a JSX expression conditionally with an `if` statement.\n\nYou can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.\n\nIn JSX, `{cond ? <A /> : <B />}` means *\"if `cond`, render `<A />`, otherwise `<B />`\"*.\n\nIn JSX, `{cond && <A />}` means *\"if `cond`, render `<A />`, otherwise nothing\"*.\n\nThe shortcuts are common, but you don't have to use them if you prefer plain `if`.\n\n</Recap>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1463":{"pageContent":"In JSX, `{cond && <A />}` means *\"if `cond`, render `<A />`, otherwise nothing\"*.\n\nThe shortcuts are common, but you don't have to use them if you prefer plain `if`.\n\n</Recap>\n\n<Challenges>\n\n#### Show an icon for incomplete items with `? :` {/*show-an-icon-for-incomplete-items-with--*/}\n\nUse the conditional operator (`cond ? a : b`) to render a ❌ if `isPacked` isn’t `true`.\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name} {isPacked && '✔'}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name} {isPacked ? '✔' : '❌'}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1464":{"pageContent":"return (\n\n<li className=\"item\">\n\n{name} {isPacked ? '✔' : '❌'}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Show the item importance with `&&` {/*show-the-item-importance-with-*/}\n\nIn this example, each `Item` receives a numerical `importance` prop. Use the `&&` operator to render \"_(Importance: X)_\" in italics, but only for items that have non-zero importance. Your item list should end up looking like this:\n\nSpace suit _(Importance: 9)_\n\nHelmet with a golden leaf\n\nPhoto of Tam _(Importance: 6)_\n\nDon't forget to add a space between the two labels!\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, importance }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nimportance={9}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1465":{"pageContent":"```js\n\nfunction Item({ name, importance }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nimportance={9}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nimportance={0}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nimportance={6}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThis should do the trick:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, importance }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name}\n\n{importance > 0 && ' '}\n\n{importance > 0 &&\n\n<i>(Importance: {importance})</i>\n\n}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nimportance={9}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nimportance={0}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nimportance={6}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNote that you must write `importance > 0 && ...` rather than `importance && ...` so that if the `importance` is `0`, `0` isn't rendered as the result!","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1466":{"pageContent":"/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNote that you must write `importance > 0 && ...` rather than `importance && ...` so that if the `importance` is `0`, `0` isn't rendered as the result!\n\nIn this solution, two separate conditions are used to insert a space between then name and the importance label. Alternatively, you could use a fragment with a leading space: `importance > 0 && <> <i>...</i></>` or add a space immediately inside the `<i>`:  `importance > 0 && <i> ...</i>`.\n\n</Solution>\n\n#### Refactor a series of `? :` to `if` and variables {/*refactor-a-series-of---to-if-and-variables*/}\n\nThis `Drink` component uses a series of `? :` conditions to show different information depending on whether the `name` prop is `\"tea\"` or `\"coffee\"`. The problem is that the information about each drink is spread across multiple conditions. Refactor this code to use a single `if` statement instead of three `? :` conditions.\n\n<Sandpack>\n\n```js\n\nfunction Drink({ name }) {\n\nreturn (\n\n<section>\n\n<h1>{name}</h1>\n\n<dl>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1467":{"pageContent":"<Sandpack>\n\n```js\n\nfunction Drink({ name }) {\n\nreturn (\n\n<section>\n\n<h1>{name}</h1>\n\n<dl>\n\n<dt>Part of plant</dt>\n\n<dd>{name === 'tea' ? 'leaf' : 'bean'}</dd>\n\n<dt>Caffeine content</dt>\n\n<dd>{name === 'tea' ? '15–70 mg/cup' : '80–185 mg/cup'}</dd>\n\n<dt>Age</dt>\n\n<dd>{name === 'tea' ? '4,000+ years' : '1,000+ years'}</dd>\n\n</dl>\n\n</section>\n\n);\n\n}\n\nexport default function DrinkList() {\n\nreturn (\n\n<div>\n\n<Drink name=\"tea\" />\n\n<Drink name=\"coffee\" />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nOnce you've refactored the code to use `if`, do you have further ideas on how to simplify it?\n\n<Solution>\n\nThere are multiple ways you could go about this, but here is one starting point:\n\n<Sandpack>\n\n```js\n\nfunction Drink({ name }) {\n\nlet part, caffeine, age;\n\nif (name === 'tea') {\n\npart = 'leaf';\n\ncaffeine = '15–70 mg/cup';\n\nage = '4,000+ years';\n\n} else if (name === 'coffee') {\n\npart = 'bean';\n\ncaffeine = '80–185 mg/cup';\n\nage = '1,000+ years';\n\n}\n\nreturn (\n\n<section>\n\n<h1>{name}</h1>\n\n<dl>\n\n<dt>Part of plant</dt>\n\n<dd>{part}</dd>\n\n<dt>Caffeine content</dt>\n\n<dd>{caffeine}</dd>\n\n<dt>Age</dt>\n\n<dd>{age}</dd>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1468":{"pageContent":"caffeine = '80–185 mg/cup';\n\nage = '1,000+ years';\n\n}\n\nreturn (\n\n<section>\n\n<h1>{name}</h1>\n\n<dl>\n\n<dt>Part of plant</dt>\n\n<dd>{part}</dd>\n\n<dt>Caffeine content</dt>\n\n<dd>{caffeine}</dd>\n\n<dt>Age</dt>\n\n<dd>{age}</dd>\n\n</dl>\n\n</section>\n\n);\n\n}\n\nexport default function DrinkList() {\n\nreturn (\n\n<div>\n\n<Drink name=\"tea\" />\n\n<Drink name=\"coffee\" />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nHere the information about each drink is grouped together instead of being spread across multiple conditions. This makes it easier to add more drinks in the future.\n\nAnother solution would be to remove the condition altogether by moving the information into objects:\n\n<Sandpack>\n\n```js\n\nconst drinks = {\n\ntea: {\n\npart: 'leaf',\n\ncaffeine: '15–70 mg/cup',\n\nage: '4,000+ years'\n\n},\n\ncoffee: {\n\npart: 'bean',\n\ncaffeine: '80–185 mg/cup',\n\nage: '1,000+ years'\n\n}\n\n};\n\nfunction Drink({ name }) {\n\nconst info = drinks[name];\n\nreturn (\n\n<section>\n\n<h1>{name}</h1>\n\n<dl>\n\n<dt>Part of plant</dt>\n\n<dd>{info.part}</dd>\n\n<dt>Caffeine content</dt>\n\n<dd>{info.caffeine}</dd>\n\n<dt>Age</dt>\n\n<dd>{info.age}</dd>\n\n</dl>\n\n</section>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1469":{"pageContent":"return (\n\n<section>\n\n<h1>{name}</h1>\n\n<dl>\n\n<dt>Part of plant</dt>\n\n<dd>{info.part}</dd>\n\n<dt>Caffeine content</dt>\n\n<dd>{info.caffeine}</dd>\n\n<dt>Age</dt>\n\n<dd>{info.age}</dd>\n\n</dl>\n\n</section>\n\n);\n\n}\n\nexport default function DrinkList() {\n\nreturn (\n\n<div>\n\n<Drink name=\"tea\" />\n\n<Drink name=\"coffee\" />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/conditional-rendering.md"}},"1470":{"pageContent":"--\ntitle: React Developer Tools\n---\n\n\n\nUse React Developer Tools to inspect React [components](/learn/your-first-component), edit [props](/learn/passing-props-to-a-component) and [state](/learn/state-a-components-memory), and identify performance problems.\n\n\n\n\n\n* How to install React Developer Tools\n\n\n\n## Browser extension {/*browser-extension*/}\n\nThe easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:\n\n* [Install for **Chrome**](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n* [Install for **Firefox**](https://addons.mozilla.org/en-US/firefox/addon/react-devtools/)\n* [Install for **Edge**](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil)\n\nNow, if you visit a website **built with React,** you will see the _Components_ and _Profiler_ panels.","metadata":{"source":"reactjs.org/beta/src/content/learn/react-developer-tools.md"}},"1471":{"pageContent":"Now, if you visit a website **built with React,** you will see the _Components_ and _Profiler_ panels.\n\n![React Developer Tools extension](/images/docs/react-devtools-extension.png)\n\n### Safari and other browsers {/*safari-and-other-browsers*/}\nFor other browsers (for example, Safari), install the [`react-devtools`](https://www.npmjs.com/package/react-devtools) npm package:\n```bash\n# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools\n```\n\nNext open the developer tools from the terminal:\n```bash\nreact-devtools\n```\n\nThen connect your website by adding the following `` tag to the beginning of your website's `<head>`:\n```html {3}\n<html>\n  <head>\n    <script src=\"http://localhost:8097\">\n```\n\nReload your website in the browser now to view it in developer tools.\n\n![React Developer Tools standalone](/images/docs/react-devtools-standalone.png)","metadata":{"source":"reactjs.org/beta/src/content/learn/react-developer-tools.md"}},"1472":{"pageContent":"Reload your website in the browser now to view it in developer tools.\n\n![React Developer Tools standalone](/images/docs/react-devtools-standalone.png)\n\n## Mobile (React Native) {/*mobile-react-native*/}\nReact Developer Tools can be used to inspect apps built with [React Native](https://reactnative.dev/) as well.\n\nThe easiest way to use React Developer Tools is to install it globally:\n```bash\n# Yarn\nyarn global add react-devtools\n\n# Npm\nnpm install -g react-devtools\n```\n\nNext open the developer tools from the terminal.\n```bash\nreact-devtools\n```\n\nIt should connect to any local React Native app that's running.\n\n> Try reloading the app if developer tools doesn't connect after a few seconds.\n\n[Learn more about debugging React Native.](https://reactnative.dev/docs/debugging)","metadata":{"source":"reactjs.org/beta/src/content/learn/react-developer-tools.md"}},"1473":{"pageContent":"--\n\ntitle: Start a New React Project\n\n--\n\n<Intro>\n\nIf you're starting a new project, we recommend to use a toolchain or a framework. These tools provide a comfortable development environment but require a local Node.js installation.\n\n</Intro>\n\n<YouWillLearn>\n\nHow toolchains are different from frameworks\n\nHow to start a project with a minimal toolchain\n\nHow to start a project with a fully-featured framework\n\nWhat's inside popular toolchains and frameworks\n\n</YouWillLearn>\n\n## Choose your own adventure {/*choose-your-own-adventure*/}\n\nReact is a library that lets you organize UI code by breaking it apart into pieces called components. React doesn't take care of routing or data management. This means there are several ways to start a new React project:\n\n[Start with an **HTML file and a script tag.**](/learn/add-react-to-a-website) This doesn't require Node.js setup but offers limited features.\n\nStart with a **minimal toolchain,** adding more features to your project as you go. (Great for learning!)","metadata":{"source":"reactjs.org/beta/src/content/learn/start-a-new-react-project.md"}},"1474":{"pageContent":"Start with a **minimal toolchain,** adding more features to your project as you go. (Great for learning!)\n\nStart with an **opinionated framework** that has common features like data fetching and routing built-in.\n\n## Getting started with a minimal toolchain {/*getting-started-with-a-minimal-toolchain*/}\n\nIf you're **learning React,** we recommend [Create React App.](https://create-react-app.dev/) It is the most popular way to try out React and build a new single-page, client-side application. It's made for React but isn't opinionated about routing or data fetching.\n\nFirst, install [Node.js.](https://nodejs.org/en/) Then open your terminal and run this line to create a project:\n\n<TerminalBlock>\n\nnpx create-react-app my-app\n\n</TerminalBlock>\n\nNow you can run your app with:\n\n<TerminalBlock>\n\ncd my-app\n\nnpm start\n\n</TerminalBlock>\n\nFor more information, [check out the official guide.](https://create-react-app.dev/docs/getting-started)","metadata":{"source":"reactjs.org/beta/src/content/learn/start-a-new-react-project.md"}},"1475":{"pageContent":"</TerminalBlock>\n\nNow you can run your app with:\n\n<TerminalBlock>\n\ncd my-app\n\nnpm start\n\n</TerminalBlock>\n\nFor more information, [check out the official guide.](https://create-react-app.dev/docs/getting-started)\n\n> Create React App doesn't handle backend logic or databases. You can use it with any backend. When you build a project, you'll get a folder with static HTML, CSS and JS. Because Create React App can't take advantage of the server, it doesn't provide the best performance. If you're looking for faster loading times and built-in features like routing and server-side logic, we recommend using a framework instead.\n\n### Popular alternatives {/*toolkit-popular-alternatives*/}\n\n[Vite](https://vitejs.dev/guide/)\n\n[Parcel](https://parceljs.org/getting-started/webapp/)\n\n## Building with a full-featured framework {/*building-with-a-full-featured-framework*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/start-a-new-react-project.md"}},"1476":{"pageContent":"[Vite](https://vitejs.dev/guide/)\n\n[Parcel](https://parceljs.org/getting-started/webapp/)\n\n## Building with a full-featured framework {/*building-with-a-full-featured-framework*/}\n\nIf you're looking to **start a production-ready project,** [Next.js](https://nextjs.org/) is a great place to start. Next.js is a popular, lightweight framework for static and server‑rendered applications built with React. It comes pre-packaged with features like routing, styling, and server-side rendering, getting your project up and running quickly.\n\nThe [Next.js Foundations](https://nextjs.org/learn/foundations/about-nextjs) tutorial is a great introduction to building with React and Next.js.\n\n### Popular alternatives {/*framework-popular-alternatives*/}\n\n[Gatsby](https://www.gatsbyjs.org/)\n\n[Remix](https://remix.run/)\n\n[Razzle](https://razzlejs.org/)\n\n## Custom toolchains {/*custom-toolchains*/}\n\nYou may prefer to create and configure your own toolchain. A toolchain typically consists of:","metadata":{"source":"reactjs.org/beta/src/content/learn/start-a-new-react-project.md"}},"1477":{"pageContent":"[Remix](https://remix.run/)\n\n[Razzle](https://razzlejs.org/)\n\n## Custom toolchains {/*custom-toolchains*/}\n\nYou may prefer to create and configure your own toolchain. A toolchain typically consists of:\n\nA **package manager** lets you install, update, and manage third-party packages. Popular package managers: [npm](https://www.npmjs.com/) (built into Node.js), [Yarn](https://yarnpkg.com/), [pnpm.](https://pnpm.io/)\n\nA **compiler** lets you compile modern language features and additional syntax like JSX or type annotations for the browsers. Popular compilers: [Babel](https://babeljs.io/), [TypeScript](https://www.typescriptlang.org/), [swc.](https://swc.rs/)\n\nA **bundler** lets you write modular code and bundle it together into small packages to optimize load time. Popular bundlers: [webpack](https://webpack.js.org/), [Parcel](https://parceljs.org/), [esbuild](https://esbuild.github.io/), [swc.](https://swc.rs/)","metadata":{"source":"reactjs.org/beta/src/content/learn/start-a-new-react-project.md"}},"1478":{"pageContent":"A **minifier** makes your code more compact so that it loads faster. Popular minifiers: [Terser](https://terser.org/), [swc.](https://swc.rs/)\n\nA **server** handles server requests so that you can render components to HTML. Popular servers: [Express.](https://expressjs.com/)\n\nA **linter** checks your code for common mistakes. Popular linters: [ESLint.](https://eslint.org/)\n\nA **test runner** lets you run tests against your code. Popular test runners: [Jest.](https://jestjs.io/)\n\nIf you prefer to set up your own JavaScript toolchain from scratch, [check out this guide](https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658) that re-creates some of the Create React App functionality. A framework will usually also provide a routing and a data fetching solution. In a larger project, you might also want to manage multiple packages in a single repository with a tool like [Nx](https://nx.dev/react) or [Turborepo.](https://turborepo.org/)","metadata":{"source":"reactjs.org/beta/src/content/learn/start-a-new-react-project.md"}},"1479":{"pageContent":"--\n\ntitle: \"State: A Component's Memory\"\n\n--\n\n<Intro>\n\nComponents often need to change what's on the screen as a result of an interaction. Typing into the form should update the input field, clicking \"next\" on an image carousel should change which image is displayed, clicking \"buy\" should put a product in the shopping cart. Components need to \"remember\" things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called *state*.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to add a state variable with the [`useState`](/reference/react/useState) Hook\n\nWhat pair of values the `useState` Hook returns\n\nHow to add more than one state variable\n\nWhy state is called local\n\n</YouWillLearn>\n\n## When a regular variable isn’t enough {/*when-a-regular-variable-isnt-enough*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1480":{"pageContent":"How to add more than one state variable\n\nWhy state is called local\n\n</YouWillLearn>\n\n## When a regular variable isn’t enough {/*when-a-regular-variable-isnt-enough*/}\n\nHere's a component that renders a sculpture image. Clicking the \"Next\" button should show the next sculpture by changing the `index` to `1`, then `2`, and so on. However, this **won't work** (you can try it!):\n\n<Sandpack>\n\n```js\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nlet index = 0;\n\nfunction handleClick() {\n\nindex = index + 1;\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n<p>\n\n{sculpture.description}\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1481":{"pageContent":"</h3>\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n<p>\n\n{sculpture.description}\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1482":{"pageContent":"url: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1483":{"pageContent":"url: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1484":{"pageContent":"url: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1485":{"pageContent":"url: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1486":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1487":{"pageContent":"}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\nbutton {\n\ndisplay: block;\n\nmargin-top: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\nThe `handleClick` event handler is updating a local variable, `index`. But two things prevent that change from being visible:\n\n1. **Local variables don't persist between renders.** When React renders this component a second time, it renders it from scratch—it doesn't consider any changes to the local variables.\n\n2. **Changes to local variables won't trigger renders.** React doesn't realize it needs to render the component again with the new data.\n\nTo update a component with new data, two things need to happen:\n\n1. **Retain** the data between renders.\n\n2. **Trigger** React to render the component with new data (re-rendering).\n\nThe [`useState`](/reference/react/useState) Hook provides those two things:\n\n1. A **state variable** to retain the data between renders.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1488":{"pageContent":"The [`useState`](/reference/react/useState) Hook provides those two things:\n\n1. A **state variable** to retain the data between renders.\n\n2. A **state setter function** to update the variable and trigger React to render the component again.\n\n## Adding a state variable {/*adding-a-state-variable*/}\n\nTo add a state variable, import `useState` from React at the top of the file:\n\n```js\n\nimport { useState } from 'react';\n\n```\n\nThen, replace this line:\n\n```js\n\nlet index = 0;\n\n```\n\nwith\n\n```js\n\nconst [index, setIndex] = useState(0);\n\n```\n\n`index` is a state variable and `setIndex` is the setter function.\n\n> The `[` and `]` syntax here is called [array destructuring](https://javascript.info/destructuring-assignment) and it lets you read values from an array. The array returned by `useState` always has exactly two items.\n\nThis is how they work together in `handleClick`:\n\n```js\n\nfunction handleClick() {\n\nsetIndex(index + 1);\n\n}\n\n```\n\nNow clicking the \"Next\" button switches the current sculpture:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1489":{"pageContent":"This is how they work together in `handleClick`:\n\n```js\n\nfunction handleClick() {\n\nsetIndex(index + 1);\n\n}\n\n```\n\nNow clicking the \"Next\" button switches the current sculpture:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nfunction handleClick() {\n\nsetIndex(index + 1);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n<p>\n\n{sculpture.description}\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1490":{"pageContent":"url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1491":{"pageContent":"url: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1492":{"pageContent":"url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1493":{"pageContent":"url: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1494":{"pageContent":"url: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n\nurl: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1495":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1496":{"pageContent":"}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\nbutton {\n\ndisplay: block;\n\nmargin-top: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n### Meet your first Hook {/*meet-your-first-hook*/}\n\nIn React, `useState`, as well as any other function starting with \"`use`\", is called a Hook.\n\nHooks* are special functions that are only available while React is [rendering](/learn/render-and-commit#step-1-trigger-a-render) (which we'll get into in more detail on the next page). They let you \"hook into\" different React features.\n\nState is just one of those features, but you will meet the other Hooks later.\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1497":{"pageContent":"State is just one of those features, but you will meet the other Hooks later.\n\n<Pitfall>\n\n*Hooks—functions starting with `use`—can only be called at the top level of your components or [your own Hooks.](/learn/reusing-logic-with-custom-hooks)** You can't call Hooks inside conditions, loops, or other nested functions. Hooks are functions, but it's helpful to think of them as unconditional declarations about your component's needs. You \"use\" React features at the top of your component similar to how you \"import\" modules at the top of your file.\n\n</Pitfall>\n\n### Anatomy of `useState` {/*anatomy-of-usestate*/}\n\nWhen you call [`useState`](/reference/react/useState), you are telling React that you want this component to remember something:\n\n```js\n\nconst [index, setIndex] = useState(0);\n\n```\n\nIn this case, you want React to remember `index`.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1498":{"pageContent":"```js\n\nconst [index, setIndex] = useState(0);\n\n```\n\nIn this case, you want React to remember `index`.\n\n> The convention is to name this pair like `const [something, setSomething]`. You could name it anything you like, but conventions make things easier to understand across projects.\n\nThe only argument to `useState` is the **initial value** of your state variable. In this example, the `index`'s initial value is set to `0` with `useState(0)`.\n\nEvery time your component renders, `useState` gives you an array containing two values:\n\n1. The **state variable** (`index`) with the value you stored.\n\n2. The **state setter function** (`setIndex`) which can update the state variable and trigger React to render the component again.\n\nHere's how that happens in action:\n\n```js\n\nconst [index, setIndex] = useState(0);\n\n```\n\n1. **Your component renders the first time.** Because you passed `0` to `useState` as the initial value for `index`, it will return `[0, setIndex]`. React remembers `0` is the latest state value.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1499":{"pageContent":"```\n\n1. **Your component renders the first time.** Because you passed `0` to `useState` as the initial value for `index`, it will return `[0, setIndex]`. React remembers `0` is the latest state value.\n\n2. **You update the state.** When a user clicks the button, it calls `setIndex(index + 1)`. `index` is `0`, so it's `setIndex(1)`. This tells React to remember `index` is `1` now and triggers another render.\n\n3. **Your component's second render.** React still sees `useState(0)`, but because React *remembers* that you set `index` to `1`, it returns `[1, setIndex]` instead.\n\n4. And so on!\n\n## Giving a component multiple state variables {/*giving-a-component-multiple-state-variables*/}\n\nYou can have as many state variables of as many types as you like in one component. This component has two state variables, a number `index` and a boolean `showMore` that's toggled when you click \"Show details\":\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1500":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nfunction handleNextClick() {\n\nsetIndex(index + 1);\n\n}\n\nfunction handleMoreClick() {\n\nsetShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button onClick={handleNextClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<button onClick={handleMoreClick}>\n\n{showMore ? 'Hide' : 'Show'} details\n\n</button>\n\n{showMore && <p>{sculpture.description}</p>}\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1501":{"pageContent":"<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1502":{"pageContent":"url: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1503":{"pageContent":"url: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1504":{"pageContent":"url: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1505":{"pageContent":"url: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1506":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1507":{"pageContent":"}];\n\n```\n\n```css\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\nbutton {\n\ndisplay: block;\n\nmargin-top: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\nIt is a good idea to have multiple state variables if their state is unrelated, like `index` and `showMore` in this example. But if you find that you often change two state variables together, it might be better to combine them into a single one. For example, if you have a form with many fields, it's more convenient to have a single state variable that holds an object than state variable per field. [Choosing the State Structure](/learn/choosing-the-state-structure) has more tips on this.\n\n<DeepDive>\n\n#### How does React know which state to return? {/*how-does-react-know-which-state-to-return*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1508":{"pageContent":"<DeepDive>\n\n#### How does React know which state to return? {/*how-does-react-know-which-state-to-return*/}\n\nYou might have noticed that the `useState` call does not receive any information about *which* state variable it refers to. There is no \"identifier\" that is passed to `useState`, so how does it know which of the state variables to return? Does it rely on some magic like parsing your functions? The answer is no.\n\nInstead, to enable their concise syntax, Hooks **rely on a stable call order on every render of the same component.** This works well in practice because if you follow the rule above (\"only call Hooks at the top level\"), Hooks will always be called in the same order. Additionally, a [linter plugin](https://www.npmjs.com/package/eslint-plugin-react-hooks) catches most mistakes.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1509":{"pageContent":"Internally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to `0` before rendering. Each time you call `useState`, React gives you the next state pair and increments the index. You can read more about this mechanism in [React Hooks: Not Magic, Just Arrays.](https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e)\n\nThis example **doesn't use React** but it gives you an idea of how `useState` works internally:\n\n<Sandpack>\n\n```js index.js active\n\nlet componentHooks = [];\n\nlet currentHookIndex = 0;\n\n// How useState works inside React (simplified).\n\nfunction useState(initialState) {\n\nlet pair = componentHooks[currentHookIndex];\n\nif (pair) {\n\n// This is not the first render,\n\n// so the state pair already exists.\n\n// Return it and prepare for next Hook call.\n\ncurrentHookIndex++;\n\nreturn pair;\n\n}\n\n// This is the first time we're rendering,\n\n// so create a state pair and store it.\n\npair = [initialState, setState];\n\nfunction setState(nextState) {","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1510":{"pageContent":"currentHookIndex++;\n\nreturn pair;\n\n}\n\n// This is the first time we're rendering,\n\n// so create a state pair and store it.\n\npair = [initialState, setState];\n\nfunction setState(nextState) {\n\n// When the user requests a state change,\n\n// put the new value into the pair.\n\npair[0] = nextState;\n\nupdateDOM();\n\n}\n\n// Store the pair for future renders\n\n// and prepare for the next Hook call.\n\ncomponentHooks[currentHookIndex] = pair;\n\ncurrentHookIndex++;\n\nreturn pair;\n\n}\n\nfunction Gallery() {\n\n// Each useState() call will get the next pair.\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nfunction handleNextClick() {\n\nsetIndex(index + 1);\n\n}\n\nfunction handleMoreClick() {\n\nsetShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\n// This example doesn't use React, so\n\n// return an output object instead of JSX.\n\nreturn {\n\nonNextClick: handleNextClick,\n\nonMoreClick: handleMoreClick,\n\nheader: `${sculpture.name} by ${sculpture.artist}`,\n\ncounter: `${index + 1} of ${sculptureList.length}`,","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1511":{"pageContent":"return {\n\nonNextClick: handleNextClick,\n\nonMoreClick: handleMoreClick,\n\nheader: `${sculpture.name} by ${sculpture.artist}`,\n\ncounter: `${index + 1} of ${sculptureList.length}`,\n\nmore: `${showMore ? 'Hide' : 'Show'} details`,\n\ndescription: showMore ? sculpture.description : null,\n\nimageSrc: sculpture.url,\n\nimageAlt: sculpture.alt\n\n};\n\n}\n\nfunction updateDOM() {\n\n// Reset the current Hook index\n\n// before rendering the component.\n\ncurrentHookIndex = 0;\n\nlet output = Gallery();\n\n// Update the DOM to match the output.\n\n// This is the part React does for you.\n\nnextButton.onclick = output.onNextClick;\n\nheader.textContent = output.header;\n\nmoreButton.onclick = output.onMoreClick;\n\nmoreButton.textContent = output.more;\n\nimage.src = output.imageSrc;\n\nimage.alt = output.imageAlt;\n\nif (output.description !== null) {\n\ndescription.textContent = output.description;\n\ndescription.style.display = '';\n\n} else {\n\ndescription.style.display = 'none';\n\n}\n\n}\n\nlet nextButton = document.getElementById('nextButton');\n\nlet header = document.getElementById('header');","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1512":{"pageContent":"description.style.display = '';\n\n} else {\n\ndescription.style.display = 'none';\n\n}\n\n}\n\nlet nextButton = document.getElementById('nextButton');\n\nlet header = document.getElementById('header');\n\nlet moreButton = document.getElementById('moreButton');\n\nlet description = document.getElementById('description');\n\nlet image = document.getElementById('image');\n\nlet sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1513":{"pageContent":"url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1514":{"pageContent":"url: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1515":{"pageContent":"url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1516":{"pageContent":"url: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1517":{"pageContent":"url: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n\nurl: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1518":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n// Make UI match the initial state.\n\nupdateDOM();\n\n```\n\n```html public/index.html\n\n<button id=\"nextButton\">\n\nNext\n\n</button>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1519":{"pageContent":"}];\n\n// Make UI match the initial state.\n\nupdateDOM();\n\n```\n\n```html public/index.html\n\n<button id=\"nextButton\">\n\nNext\n\n</button>\n\n<h3 id=\"header\"></h3>\n\n<button id=\"moreButton\"></button>\n\n<p id=\"description\"></p>\n\n<img id=\"image\">\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\nbutton { display: block; margin-bottom: 10px; }\n\n</style>\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nYou don't have to understand it to use React, but you might find this a helpful mental model.\n\n</DeepDive>\n\n## State is isolated and private {/*state-is-isolated-and-private*/}\n\nState is local to a component instance on the screen. In other words, **if you render the same component twice, each copy will have completely isolated state!** Changing one of them will not affect the other.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1520":{"pageContent":"In this example, the `Gallery` component from earlier is rendered twice with no changes to its logic. Try clicking the buttons inside each of the galleries. Notice that their state is independent:\n\n<Sandpack>\n\n```js\n\nimport Gallery from './Gallery.js';\n\nexport default function Page() {\n\nreturn (\n\n<div className=\"Page\">\n\n<Gallery />\n\n<Gallery />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Gallery.js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nfunction handleNextClick() {\n\nsetIndex(index + 1);\n\n}\n\nfunction handleMoreClick() {\n\nsetShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<section>\n\n<button onClick={handleNextClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<button onClick={handleMoreClick}>\n\n{showMore ? 'Hide' : 'Show'} details\n\n</button>\n\n{showMore && <p>{sculpture.description}</p>}\n\n<img","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1521":{"pageContent":"</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<button onClick={handleMoreClick}>\n\n{showMore ? 'Hide' : 'Show'} details\n\n</button>\n\n{showMore && <p>{sculpture.description}</p>}\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n</section>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1522":{"pageContent":"url: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1523":{"pageContent":"url: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1524":{"pageContent":"url: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1525":{"pageContent":"url: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1526":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n.Page > * {\n\nfloat: left;\n\nwidth: 50%;\n\npadding: 10px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1527":{"pageContent":"}];\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n.Page > * {\n\nfloat: left;\n\nwidth: 50%;\n\npadding: 10px;\n\n}\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\nbutton {\n\ndisplay: block;\n\nmargin-top: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\nThis is what makes state different from regular variables that you might declare at the top of your module. State is not tied to a particular function call or a place in the code, but it's \"local\" to the specific place on the screen. You rendered two `<Gallery />` components, so their state is stored separately.\n\nAlso notice how the `Page` component doesn't \"know\" anything about the `Gallery` state or even whether it has any. Unlike props, **state is fully private to the component declaring it.** The parent component can't change it. This lets you add state to any component or remove it without impacting the rest of the components.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1528":{"pageContent":"What if you wanted both galleries to keep their states in sync? The right way to do it in React is to *remove* state from child components and add it to their closest shared parent. The next few pages will focus on organizing state of a single component, but we will return to this topic in [Sharing State Between Components.](/learn/sharing-state-between-components)\n\n<Recap>\n\nUse a state variable when a component needs to \"remember\" some information between renders.\n\nState variables are declared by calling the `useState` Hook.\n\nHooks are special functions that start with `use`. They let you \"hook into\" React features like state.\n\nHooks might remind you of imports: they need to be called unconditionally. Calling Hooks, including `useState`, is only valid at the top level of a component or another Hook.\n\nThe `useState` Hook returns a pair of values: the current state and the function to update it.\n\nYou can have more than one state variable. Internally, React matches them up by their order.","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1529":{"pageContent":"The `useState` Hook returns a pair of values: the current state and the function to update it.\n\nYou can have more than one state variable. Internally, React matches them up by their order.\n\nState is private to the component. If you render it in two places, each copy gets its own state.\n\n</Recap>\n\n<Challenges>\n\n#### Complete the gallery {/*complete-the-gallery*/}\n\nWhen you press \"Next\" on the last sculpture, the code crashes. Fix the logic to prevent the crash. You may do this by adding extra logic to event handler or by disabling the button when the action is not possible.\n\nAfter fixing the crash, add a \"Previous\" button that shows the previous sculpture. It shouldn't crash on the first sculpture.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nfunction handleNextClick() {\n\nsetIndex(index + 1);\n\n}\n\nfunction handleMoreClick() {","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1530":{"pageContent":"export default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nfunction handleNextClick() {\n\nsetIndex(index + 1);\n\n}\n\nfunction handleMoreClick() {\n\nsetShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button onClick={handleNextClick}>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<button onClick={handleMoreClick}>\n\n{showMore ? 'Hide' : 'Show'} details\n\n</button>\n\n{showMore && <p>{sculpture.description}</p>}\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1531":{"pageContent":"url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1532":{"pageContent":"url: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1533":{"pageContent":"url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1534":{"pageContent":"url: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1535":{"pageContent":"url: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n\nurl: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1536":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n.Page > * {\n\nfloat: left;\n\nwidth: 50%;\n\npadding: 10px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1537":{"pageContent":"}];\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n.Page > * {\n\nfloat: left;\n\nwidth: 50%;\n\npadding: 10px;\n\n}\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThis adds a guarding condition inside both event handlers and disables the buttons when needed:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst [showMore, setShowMore] = useState(false);\n\nlet hasPrev = index > 0;\n\nlet hasNext = index < sculptureList.length - 1;\n\nfunction handlePrevClick() {\n\nif (hasPrev) {\n\nsetIndex(index - 1);\n\n}\n\n}\n\nfunction handleNextClick() {\n\nif (hasNext) {\n\nsetIndex(index + 1);\n\n}\n\n}\n\nfunction handleMoreClick() {\n\nsetShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button\n\nonClick={handlePrevClick}\n\ndisabled={!hasPrev}\n\n>\n\nPrevious\n\n</button>\n\n<button\n\nonClick={handleNextClick}\n\ndisabled={!hasNext}\n\n>\n\nNext","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1538":{"pageContent":"setShowMore(!showMore);\n\n}\n\nlet sculpture = sculptureList[index];\n\nreturn (\n\n<>\n\n<button\n\nonClick={handlePrevClick}\n\ndisabled={!hasPrev}\n\n>\n\nPrevious\n\n</button>\n\n<button\n\nonClick={handleNextClick}\n\ndisabled={!hasNext}\n\n>\n\nNext\n\n</button>\n\n<h2>\n\n<i>{sculpture.name} </i>\n\nby {sculpture.artist}\n\n</h2>\n\n<h3>\n\n({index + 1} of {sculptureList.length})\n\n</h3>\n\n<button onClick={handleMoreClick}>\n\n{showMore ? 'Hide' : 'Show'} details\n\n</button>\n\n{showMore && <p>{sculpture.description}</p>}\n\n<img\n\nsrc={sculpture.url}\n\nalt={sculpture.alt}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\nexport const sculptureList = [{\n\nname: 'Homenaje a la Neurocirugía',\n\nartist: 'Marta Colvin Andrade',\n\ndescription: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n\nurl: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1539":{"pageContent":"url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n\nalt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n\n}, {\n\nname: 'Floralis Genérica',\n\nartist: 'Eduardo Catalano',\n\ndescription: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n\nurl: 'https://i.imgur.com/ZF6s192m.jpg',\n\nalt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n\n}, {\n\nname: 'Eternal Presence',\n\nartist: 'John Woodrow Wilson',\n\ndescription: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n\nurl: 'https://i.imgur.com/aTtVpES.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1540":{"pageContent":"url: 'https://i.imgur.com/aTtVpES.jpg',\n\nalt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n\n}, {\n\nname: 'Moai',\n\nartist: 'Unknown Artist',\n\ndescription: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n\nurl: 'https://i.imgur.com/RCwLEoQm.jpg',\n\nalt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n\n}, {\n\nname: 'Blue Nana',\n\nartist: 'Niki de Saint Phalle',\n\ndescription: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n\nurl: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1541":{"pageContent":"url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\nalt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n\n}, {\n\nname: 'Ultimate Form',\n\nartist: 'Barbara Hepworth',\n\ndescription: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n\nurl: 'https://i.imgur.com/2heNQDcm.jpg',\n\nalt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n\n}, {\n\nname: 'Cavaliere',\n\nartist: 'Lamidi Olonade Fakeye',\n\ndescription: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n\nurl: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1542":{"pageContent":"url: 'https://i.imgur.com/wIdGuZwm.png',\n\nalt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n\n}, {\n\nname: 'Big Bellies',\n\nartist: 'Alina Szapocznikow',\n\ndescription: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n\nurl: 'https://i.imgur.com/AlHTAdDm.jpg',\n\nalt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n\n}, {\n\nname: 'Terracotta Army',\n\nartist: 'Unknown Artist',\n\ndescription: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n\nurl: 'https://i.imgur.com/HMFmH6m.jpg',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1543":{"pageContent":"url: 'https://i.imgur.com/HMFmH6m.jpg',\n\nalt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n\n}, {\n\nname: 'Lunar Landscape',\n\nartist: 'Louise Nevelson',\n\ndescription: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n\nurl: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1544":{"pageContent":"url: 'https://i.imgur.com/rN7hY6om.jpg',\n\nalt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n\n}, {\n\nname: 'Aureole',\n\nartist: 'Ranjani Shettar',\n\ndescription: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n\nurl: 'https://i.imgur.com/okTpbHhm.jpg',\n\nalt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n\n}, {\n\nname: 'Hippos',\n\nartist: 'Taipei Zoo',\n\ndescription: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n\nurl: 'https://i.imgur.com/6o5Vuyu.jpg',\n\nalt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n\n}];\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n.Page > * {\n\nfloat: left;\n\nwidth: 50%;\n\npadding: 10px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1545":{"pageContent":"}];\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n.Page > * {\n\nfloat: left;\n\nwidth: 50%;\n\npadding: 10px;\n\n}\n\nh2 { margin-top: 10px; margin-bottom: 0; }\n\nh3 {\n\nmargin-top: 5px;\n\nfont-weight: normal;\n\nfont-size: 100%;\n\n}\n\nimg { width: 120px; height: 120px; }\n\n```\n\n</Sandpack>\n\nNotice how `hasPrev` and `hasNext` are used *both* for the returned JSX and inside the event handlers! This handy pattern works because event handler functions [\"close over\"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) any variables declared while rendering.\n\n</Solution>\n\n#### Fix stuck form inputs {/*fix-stuck-form-inputs*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1546":{"pageContent":"</Solution>\n\n#### Fix stuck form inputs {/*fix-stuck-form-inputs*/}\n\nWhen you type into the input fields, nothing appears. It's like the input values are \"stuck\" with empty strings. The `value` of the first `<input>` is set to always match the `firstName` variable, and the `value` for the second `<input>` is set to always match the `lastName` variable. This is correct. Both inputs have `onChange` event handlers, which try to update the variables based on the latest user input (`e.target.value`). However, the variables don't seem to \"remember\" their values between re-renders. Fix this by using state variables instead.\n\n<Sandpack>\n\n```js\n\nexport default function Form() {\n\nlet firstName = '';\n\nlet lastName = '';\n\nfunction handleFirstNameChange(e) {\n\nfirstName = e.target.value;\n\n}\n\nfunction handleLastNameChange(e) {\n\nlastName = e.target.value;\n\n}\n\nfunction handleReset() {\n\nfirstName = '';\n\nlastName = '';\n\n}\n\nreturn (\n\n<form onSubmit={e => e.preventDefault()}>\n\n<input\n\nplaceholder=\"First name\"\n\nvalue={firstName}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1547":{"pageContent":"lastName = e.target.value;\n\n}\n\nfunction handleReset() {\n\nfirstName = '';\n\nlastName = '';\n\n}\n\nreturn (\n\n<form onSubmit={e => e.preventDefault()}>\n\n<input\n\nplaceholder=\"First name\"\n\nvalue={firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n<input\n\nplaceholder=\"Last name\"\n\nvalue={lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n<h1>Hi, {firstName} {lastName}</h1>\n\n<button onClick={handleReset}>Reset</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nh1 { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nFirst, import `useState` from React. Then replace `firstName` and `lastName` with state variables declared by calling `useState`. Finally, replace every `firstName = ...` assignment with `setFirstName(...)`, and do the same for `lastName`. Don't forget to update `handleReset` too so that the reset button works.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1548":{"pageContent":"export default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nfunction handleReset() {\n\nsetFirstName('');\n\nsetLastName('');\n\n}\n\nreturn (\n\n<form onSubmit={e => e.preventDefault()}>\n\n<input\n\nplaceholder=\"First name\"\n\nvalue={firstName}\n\nonChange={handleFirstNameChange}\n\n/>\n\n<input\n\nplaceholder=\"Last name\"\n\nvalue={lastName}\n\nonChange={handleLastNameChange}\n\n/>\n\n<h1>Hi, {firstName} {lastName}</h1>\n\n<button onClick={handleReset}>Reset</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nh1 { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix a crash {/*fix-a-crash*/}\n\nHere is a small form that is supposed to let the user leave some feedback. When the feedback is submitted, it's supposed to display a thank-you message. However, it crashes with an error message saying \"Rendered fewer hooks than expected\". Can you spot the mistake and fix it?\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1549":{"pageContent":"<Hint>\n\nAre there any limitations on _where_ Hooks may be called? Does this component break any rules? Check if there are any comments disabling the linter checks--this is where the bugs often hide!\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nconst [isSent, setIsSent] = useState(false);\n\nif (isSent) {\n\nreturn <h1>Thank you!</h1>;\n\n} else {\n\n// eslint-disable-next-line\n\nconst [message, setMessage] = useState('');\n\nreturn (\n\n<form onSubmit={e => {\n\ne.preventDefault();\n\nalert(`Sending: \"${message}\"`);\n\nsetIsSent(true);\n\n}}>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<br />\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHooks can only be called at the top level of the component function. Here, the first `isSent` definition follows this rule, but the `message` definition is nested in a condition.\n\nMove it out of the condition to fix the issue:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1550":{"pageContent":"Move it out of the condition to fix the issue:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nconst [isSent, setIsSent] = useState(false);\n\nconst [message, setMessage] = useState('');\n\nif (isSent) {\n\nreturn <h1>Thank you!</h1>;\n\n} else {\n\nreturn (\n\n<form onSubmit={e => {\n\ne.preventDefault();\n\nalert(`Sending: \"${message}\"`);\n\nsetIsSent(true);\n\n}}>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<br />\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nRemember, Hooks must be called unconditionally and always in the same order!\n\nYou could also remove the unnecessary `else` branch to reduce the nesting. However, it's still important that all calls to Hooks happen *before* the first `return`.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nconst [isSent, setIsSent] = useState(false);\n\nconst [message, setMessage] = useState('');\n\nif (isSent) {\n\nreturn <h1>Thank you!</h1>;\n\n}\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1551":{"pageContent":"export default function FeedbackForm() {\n\nconst [isSent, setIsSent] = useState(false);\n\nconst [message, setMessage] = useState('');\n\nif (isSent) {\n\nreturn <h1>Thank you!</h1>;\n\n}\n\nreturn (\n\n<form onSubmit={e => {\n\ne.preventDefault();\n\nalert(`Sending: \"${message}\"`);\n\nsetIsSent(true);\n\n}}>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<br />\n\n<button type=\"submit\">Send</button>\n\n</form>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTry moving the second `useState` call after the `if` condition and notice how this breaks it again.\n\nIf your linter is [configured for React](/learn/editor-setup#linting), you should see a lint error when you make a mistake like this. If you don't see an error when you try the faulty code locally, you need to set up linting for your project.\n\n</Solution>\n\n#### Remove unnecessary state {/*remove-unnecessary-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1552":{"pageContent":"</Solution>\n\n#### Remove unnecessary state {/*remove-unnecessary-state*/}\n\nWhen the button is clicked, this example should ask for the user's name and then display an alert greeting them. You tried to use state to keep the name, but for some reason it always shows \"Hello, !\".\n\nTo fix this code, remove the unnecessary state variable. (We will discuss about [why this didn't work](/learn/state-as-a-snapshot) later.)\n\nCan you explain why this state variable was unnecessary?\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nconst [name, setName] = useState('');\n\nfunction handleClick() {\n\nsetName(prompt('What is your name?'));\n\nalert(`Hello, ${name}!`);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nGreet\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHere is a fixed version that uses a regular `name` variable declared in the function that needs it:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nfunction handleClick() {","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1553":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FeedbackForm() {\n\nfunction handleClick() {\n\nconst name = prompt('What is your name?');\n\nalert(`Hello, ${name}!`);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nGreet\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nA state variable is only necessary to keep information between re-renders of a component. Within a single event handler, a regular variable will do fine. Don't introduce state variables when a regular variable works well.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/state-a-components-memory.md"}},"1554":{"pageContent":"--\n\ntitle: 'Manipulating the DOM with Refs'\n\n--\n\n<Intro>\n\nReact automatically updates the [DOM](https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction) to match your render output, so your components won't often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React--for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a *ref* to the DOM node.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to access a DOM node managed by React with the `ref` attribute\n\nHow the `ref` JSX attribute relates to the `useRef` Hook\n\nHow to access another component's DOM node\n\nIn which cases it's safe to modify the DOM managed by React\n\n</YouWillLearn>\n\n## Getting a ref to the node {/*getting-a-ref-to-the-node*/}\n\nTo access a DOM node managed by React, first, import the `useRef` Hook:\n\n```js\n\nimport { useRef } from 'react';\n\n```\n\nThen, use it to declare a ref inside your component:\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1555":{"pageContent":"To access a DOM node managed by React, first, import the `useRef` Hook:\n\n```js\n\nimport { useRef } from 'react';\n\n```\n\nThen, use it to declare a ref inside your component:\n\n```js\n\nconst myRef = useRef(null);\n\n```\n\nFinally, pass it to the DOM node as the `ref` attribute:\n\n```js\n\n<div ref={myRef}>\n\n```\n\nThe `useRef` Hook returns an object with a single property called `current`. Initially, `myRef.current` will be `null`. When React creates a DOM node for this `<div>`, React will put a reference to this node into `myRef.current`. You can then access this DOM node from your [event handlers](/learn/responding-to-events) and use the built-in [browser APIs](https://developer.mozilla.org/docs/Web/API/Element) defined on it.\n\n```js\n\n// You can use any browser APIs, for example:\n\nmyRef.current.scrollIntoView();\n\n```\n\n### Example: Focusing a text input {/*example-focusing-a-text-input*/}\n\nIn this example, clicking the button will focus the input:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1556":{"pageContent":"In this example, clicking the button will focus the input:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<input ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTo implement this:\n\n1. Declare `inputRef` with the `useRef` Hook.\n\n2. Pass it as `<input ref={inputRef}>`. This tells React to **put this `<input>`'s DOM node into `inputRef.current`.**\n\n3. In the `handleClick` function, read the input DOM node from `inputRef.current` and call [`focus()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on it with `inputRef.current.focus()`.\n\n4. Pass the `handleClick` event handler to `<button>` with `onClick`.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1557":{"pageContent":"4. Pass the `handleClick` event handler to `<button>` with `onClick`.\n\nWhile DOM manipulation is the most common use case for refs, the `useRef` Hook can be used for storing other things outside React, like timer IDs. Similarly to state, refs remain between renders. Refs are like state variables that don't trigger re-renders when you set them. For an introduction to refs, see [Referencing Values with Refs.](/learn/referencing-values-with-refs)\n\n### Example: Scrolling to an element {/*example-scrolling-to-an-element*/}\n\nYou can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser [`scrollIntoView()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) method the corresponding DOM node:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n\nconst firstCatRef = useRef(null);\n\nconst secondCatRef = useRef(null);\n\nconst thirdCatRef = useRef(null);","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1558":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n\nconst firstCatRef = useRef(null);\n\nconst secondCatRef = useRef(null);\n\nconst thirdCatRef = useRef(null);\n\nfunction handleScrollToFirstCat() {\n\nfirstCatRef.current.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n}\n\nfunction handleScrollToSecondCat() {\n\nsecondCatRef.current.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n}\n\nfunction handleScrollToThirdCat() {\n\nthirdCatRef.current.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n}\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={handleScrollToFirstCat}>\n\nTom\n\n</button>\n\n<button onClick={handleScrollToSecondCat}>\n\nMaru\n\n</button>\n\n<button onClick={handleScrollToThirdCat}>\n\nJellylorum\n\n</button>\n\n</nav>\n\n<div>\n\n<ul>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/200/200\"\n\nalt=\"Tom\"\n\nref={firstCatRef}\n\n/>\n\n</li>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/300/200\"\n\nalt=\"Maru\"\n\nref={secondCatRef}\n\n/>\n\n</li>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/250/200\"\n\nalt=\"Jellylorum\"","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1559":{"pageContent":"alt=\"Tom\"\n\nref={firstCatRef}\n\n/>\n\n</li>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/300/200\"\n\nalt=\"Maru\"\n\nref={secondCatRef}\n\n/>\n\n</li>\n\n<li>\n\n<img\n\nsrc=\"https://placekitten.com/g/250/200\"\n\nalt=\"Jellylorum\"\n\nref={thirdCatRef}\n\n/>\n\n</li>\n\n</ul>\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### How to manage a list of refs using a ref callback {/*how-to-manage-a-list-of-refs-using-a-ref-callback*/}\n\nIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don't know how many you will have. Something like this **wouldn't work**:\n\n```js\n\n<ul>\n\n{items.map((item) => {\n\n// Doesn't work!\n\nconst ref = useRef(null);\n\nreturn <li ref={ref} />;\n\n})}\n\n</ul>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1560":{"pageContent":"```js\n\n<ul>\n\n{items.map((item) => {\n\n// Doesn't work!\n\nconst ref = useRef(null);\n\nreturn <li ref={ref} />;\n\n})}\n\n</ul>\n\n```\n\nThis is because **Hooks must only be called at the top-level of your component.** You can't call `useRef` in a loop, in a condition, or inside a `map()` call.\n\nOne possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like [`querySelectorAll`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) to \"find\" the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1561":{"pageContent":"Another solution is to **pass a function to the `ref` attribute.** This is called a [`ref` callback.](/reference/react-dom/components/common#ref-callback) React will call your ref callback with the DOM node when it's time to set the ref, and with `null` when it's time to clear it. This lets you maintain your own array or a [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map), and access any ref by its index or some kind of ID.\n\nThis example shows how you can use this approach to scroll to an arbitrary node in a long list:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function CatFriends() {\n\nconst itemsRef = useRef(null);\n\nfunction scrollToId(itemId) {\n\nconst map = getMap();\n\nconst node = map.get(itemId);\n\nnode.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n}\n\nfunction getMap() {\n\nif (!itemsRef.current) {\n\n// Initialize the Map on first usage.\n\nitemsRef.current = new Map();\n\n}\n\nreturn itemsRef.current;\n\n}\n\nreturn (\n\n<>\n\n<nav>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1562":{"pageContent":"block: 'nearest',\n\ninline: 'center'\n\n});\n\n}\n\nfunction getMap() {\n\nif (!itemsRef.current) {\n\n// Initialize the Map on first usage.\n\nitemsRef.current = new Map();\n\n}\n\nreturn itemsRef.current;\n\n}\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={() => scrollToId(0)}>\n\nTom\n\n</button>\n\n<button onClick={() => scrollToId(5)}>\n\nMaru\n\n</button>\n\n<button onClick={() => scrollToId(9)}>\n\nJellylorum\n\n</button>\n\n</nav>\n\n<div>\n\n<ul>\n\n{catList.map(cat => (\n\n<li\n\nkey={cat.id}\n\nref={(node) => {\n\nconst map = getMap();\n\nif (node) {\n\nmap.set(cat.id, node);\n\n} else {\n\nmap.delete(cat.id);\n\n}\n\n}}\n\n>\n\n<img\n\nsrc={cat.imageUrl}\n\nalt={'Cat #' + cat.id}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n</>\n\n);\n\n}\n\nconst catList = [];\n\nfor (let i = 0; i < 10; i++) {\n\ncatList.push({\n\nid: i,\n\nimageUrl: 'https://placekitten.com/250/200?image=' + i\n\n});\n\n}\n\n```\n\n```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1563":{"pageContent":"});\n\n}\n\n```\n\n```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\n```\n\n</Sandpack>\n\nIn this example, `itemsRef` doesn't hold a single DOM node. Instead, it holds a [Map](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map) from item ID to a DOM node. ([Refs can hold any values!](/learn/referencing-values-with-refs)) The [`ref` callback](/reference/react-dom/components/common#ref-callback) on every list item takes care to update the Map:\n\n```js\n\n<li\n\nkey={cat.id}\n\nref={node => {\n\nconst map = getMap();\n\nif (node) {\n\n// Add to the Map\n\nmap.set(cat.id, node);\n\n} else {\n\n// Remove from the Map\n\nmap.delete(cat.id);\n\n}\n\n}}\n\n>\n\n```\n\nThis lets you read individual DOM nodes from the Map later.\n\n</DeepDive>\n\n## Accessing another component's DOM nodes {/*accessing-another-components-dom-nodes*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1564":{"pageContent":"map.delete(cat.id);\n\n}\n\n}}\n\n>\n\n```\n\nThis lets you read individual DOM nodes from the Map later.\n\n</DeepDive>\n\n## Accessing another component's DOM nodes {/*accessing-another-components-dom-nodes*/}\n\nWhen you put a ref on a built-in component that outputs a browser element like `<input />`, React will set that ref's `current` property to the corresponding DOM node (such as the actual `<input />` in the browser).\n\nHowever, if you try to put a ref on **your own** component, like `<MyInput />`, by default you will get `null`. Here is an example demonstrating it. Notice how clicking the button **does not** focus the input:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nfunction MyInput(props) {\n\nreturn <input {...props} />;\n\n}\n\nexport default function MyForm() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<MyInput ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1565":{"pageContent":"const inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<MyInput ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTo help you notice the issue, React also prints an error to the console:\n\n<ConsoleBlock level=\"error\">\n\nWarning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n\n</ConsoleBlock>\n\nThis happens because by default React does not let a component access the DOM nodes of other components. Not even for its own children! This is intentional. Refs are an escape hatch that should be used sparingly. Manually manipulating _another_ component's DOM nodes makes your code even more fragile.\n\nInstead, components that _want_ to expose their DOM nodes have to **opt in** to that behavior. A component can specify that it \"forwards\" its ref to one of its children. Here's how `MyInput` can use the `forwardRef` API:\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1566":{"pageContent":"```js\n\nconst MyInput = forwardRef((props, ref) => {\n\nreturn <input {...props} ref={ref} />;\n\n});\n\n```\n\nThis is how it works:\n\n1. `<MyInput ref={inputRef} />` tells React to put the corresponding DOM node into `inputRef.current`. However, it's up to the `MyInput` component to opt into that--by default, it doesn't.\n\n2. The `MyInput` component is declared using `forwardRef`. **This opts it into receiving the `inputRef` from above as the second `ref` argument** which is declared after `props`.\n\n3. `MyInput` itself passes the `ref` it received to the `<input>` inside of it.\n\nNow clicking the button to focus the input works:\n\n<Sandpack>\n\n```js\n\nimport { forwardRef, useRef } from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n\nreturn <input {...props} ref={ref} />;\n\n});\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<MyInput ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1567":{"pageContent":"const inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<MyInput ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIn design systems, it is a common pattern for low-level components like buttons, inputs, and so on, to forward their refs to their DOM nodes. On the other hand, high-level components like forms, lists, or page sections usually won't expose their DOM nodes to avoid accidental dependencies on the DOM structure.\n\n<DeepDive>\n\n#### Exposing a subset of the API with an imperative handle {/*exposing-a-subset-of-the-api-with-an-imperative-handle*/}\n\nIn the above example, `MyInput` exposes the original DOM input element. This lets the parent component call `focus()` on it. However, this also lets the parent component do something else--for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with `useImperativeHandle`:\n\n<Sandpack>\n\n```js\n\nimport {","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1568":{"pageContent":"<Sandpack>\n\n```js\n\nimport {\n\nforwardRef,\n\nuseRef,\n\nuseImperativeHandle\n\n} from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n\nconst realInputRef = useRef(null);\n\nuseImperativeHandle(ref, () => ({\n\n// Only expose focus and nothing else\n\nfocus() {\n\nrealInputRef.current.focus();\n\n},\n\n}));\n\nreturn <input {...props} ref={realInputRef} />;\n\n});\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<MyInput ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nHere, `realInputRef` inside `MyInput` holds the actual input DOM node. However, `useImperativeHandle` instructs React to provide your own special object as the value of a ref to the parent component. So `inputRef.current` inside the `Form` component will only have the `focus` method. In this case, the ref \"handle\" is not the DOM node, but the custom object you create inside `useImperativeHandle` call.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1569":{"pageContent":"</DeepDive>\n\n## When React attaches the refs {/*when-react-attaches-the-refs*/}\n\nIn React, every update is split in [two phases](/learn/render-and-commit#step-3-react-commits-changes-to-the-dom):\n\nDuring **render,** React calls your components to figure out what should be on the screen.\n\nDuring **commit,** React applies changes to the DOM.\n\nIn general, you [don't want](/learn/referencing-values-with-refs#best-practices-for-refs) to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so `ref.current` will be `null`. And during the rendering of updates, the DOM nodes haven't been updated yet. So it's too early to read them.\n\nReact sets `ref.current` during the commit. Before updating the DOM, React sets the affected `ref.current` values to `null`. After updating the DOM, React immediately sets them to the corresponding DOM nodes.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1570":{"pageContent":"*Usually, you will access refs from event handlers.** If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss effects on the next pages.\n\n<DeepDive>\n\n#### Flushing state updates synchronously with flushSync {/*flushing-state-updates-synchronously-with-flush-sync*/}\n\nConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was *just before* the last added one:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function TodoList() {\n\nconst listRef = useRef(null);\n\nconst [text, setText] = useState('');\n\nconst [todos, setTodos] = useState(\n\ninitialTodos\n\n);\n\nfunction handleAdd() {\n\nconst newTodo = { id: nextId++, text: text };\n\nsetText('');\n\nsetTodos([ ...todos, newTodo]);\n\nlistRef.current.lastChild.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest'\n\n});\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleAdd}>\n\nAdd\n\n</button>\n\n<input","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1571":{"pageContent":"setText('');\n\nsetTodos([ ...todos, newTodo]);\n\nlistRef.current.lastChild.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest'\n\n});\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleAdd}>\n\nAdd\n\n</button>\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<ul ref={listRef}>\n\n{todos.map(todo => (\n\n<li key={todo.id}>{todo.text}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\nlet nextId = 0;\n\nlet initialTodos = [];\n\nfor (let i = 0; i < 20; i++) {\n\ninitialTodos.push({\n\nid: nextId++,\n\ntext: 'Todo #' + (i + 1)\n\n});\n\n}\n\n```\n\n</Sandpack>\n\nThe issue is with these two lines:\n\n```js\n\nsetTodos([ ...todos, newTodo]);\n\nlistRef.current.lastChild.scrollIntoView();\n\n```\n\nIn React, [state updates are queued.](/learn/queueing-a-series-of-state-updates) Usually, this is what you want. However, here it causes a problem because `setTodos` does not immediately update the DOM. So the time you scroll the list to its last element, the todo has not yet been added. This is why scrolling always \"lags behind\" by one item.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1572":{"pageContent":"To fix this issue, you can force React to update (\"flush\") the DOM synchronously. To do this, import `flushSync` from `react-dom` and **wrap the state update** into a `flushSync` call:\n\n```js\n\nflushSync(() => {\n\nsetTodos([ ...todos, newTodo]);\n\n});\n\nlistRef.current.lastChild.scrollIntoView();\n\n```\n\nThis will instruct React to update the DOM synchronously right after the code wrapped in `flushSync` executes. As a result, the last todo will already be in the DOM by the time you try to scroll to it:\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nimport { flushSync } from 'react-dom';\n\nexport default function TodoList() {\n\nconst listRef = useRef(null);\n\nconst [text, setText] = useState('');\n\nconst [todos, setTodos] = useState(\n\ninitialTodos\n\n);\n\nfunction handleAdd() {\n\nconst newTodo = { id: nextId++, text: text };\n\nflushSync(() => {\n\nsetText('');\n\nsetTodos([ ...todos, newTodo]);\n\n});\n\nlistRef.current.lastChild.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest'\n\n});\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleAdd}>\n\nAdd\n\n</button>\n\n<input","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1573":{"pageContent":"flushSync(() => {\n\nsetText('');\n\nsetTodos([ ...todos, newTodo]);\n\n});\n\nlistRef.current.lastChild.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest'\n\n});\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleAdd}>\n\nAdd\n\n</button>\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<ul ref={listRef}>\n\n{todos.map(todo => (\n\n<li key={todo.id}>{todo.text}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\nlet nextId = 0;\n\nlet initialTodos = [];\n\nfor (let i = 0; i < 20; i++) {\n\ninitialTodos.push({\n\nid: nextId++,\n\ntext: 'Todo #' + (i + 1)\n\n});\n\n}\n\n```\n\n</Sandpack>\n\n</DeepDive>\n\n## Best practices for DOM manipulation with refs {/*best-practices-for-dom-manipulation-with-refs*/}\n\nRefs are an escape hatch. You should only use them when you have to \"step outside React\". Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1574":{"pageContent":"If you stick to non-destructive actions like focusing and scrolling, you shouldn't encounter any problems. However, if you try to **modify** the DOM manually, you can risk conflicting with the changes React is making.\n\nTo illustrate this problem, this example includes a welcome message and two buttons. The first button toggles its presence using [conditional rendering](/learn/conditional-rendering) and [state](/learn/state-a-components-memory), as you would usually do in React. The second button uses the [`remove()` DOM API](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) to forcefully remove it from the DOM outside of React's control.\n\nTry pressing \"Toggle with setState\" a few times. The message should disappear and appear again. Then press \"Remove from the DOM\". This will forcefully remove it. Finally, press \"Toggle with setState\":\n\n<Sandpack>\n\n```js\n\nimport {useState, useRef} from 'react';\n\nexport default function Counter() {\n\nconst [show, setShow] = useState(true);","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1575":{"pageContent":"<Sandpack>\n\n```js\n\nimport {useState, useRef} from 'react';\n\nexport default function Counter() {\n\nconst [show, setShow] = useState(true);\n\nconst ref = useRef(null);\n\nreturn (\n\n<div>\n\n<button\n\nonClick={() => {\n\nsetShow(!show);\n\n}}>\n\nToggle with setState\n\n</button>\n\n<button\n\nonClick={() => {\n\nref.current.remove();\n\n}}>\n\nRemove from the DOM\n\n</button>\n\n{show && <p ref={ref}>Hello world</p>}\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\np,\n\nbutton {\n\ndisplay: block;\n\nmargin: 10px;\n\n}\n\n```\n\n</Sandpack>\n\nAfter you've manually removed the DOM element, trying to use `setState` to show it again will lead to a crash. This is because you've changed the DOM, and React doesn't know how to continue managing it correctly.\n\n*Avoid changing DOM nodes managed by React.** Modifying, adding children to, or removing children from elements that are managed by React can lead to inconsistent visual results or crashes like above.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1576":{"pageContent":"*Avoid changing DOM nodes managed by React.** Modifying, adding children to, or removing children from elements that are managed by React can lead to inconsistent visual results or crashes like above.\n\nHowever, this doesn't mean that you can't do it at all. It requires caution. **You can safely modify parts of the DOM that React has _no reason_ to update.** For example, if some `<div>` is always empty in the JSX, React won't have a reason to touch its children list. Therefore, it is safe to manually add or remove elements there.\n\n<Recap>\n\nRefs are a generic concept, but most often you'll use them to hold DOM elements.\n\nYou instruct React to put a DOM node into `myRef.current` by passing `<div ref={myRef}>`.\n\nUsually, you will use refs for non-destructive actions like focusing, scrolling, or measuring DOM elements.\n\nA component doesn't expose its DOM nodes by default. You can opt into exposing a DOM node by using `forwardRef` and passing the second `ref` argument down to a specific node.","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1577":{"pageContent":"A component doesn't expose its DOM nodes by default. You can opt into exposing a DOM node by using `forwardRef` and passing the second `ref` argument down to a specific node.\n\nAvoid changing DOM nodes managed by React.\n\nIf you do modify DOM nodes managed by React, modify parts that React has no reason to update.\n\n</Recap>\n\n<Challenges>\n\n#### Play and pause the video {/*play-and-pause-the-video*/}\n\nIn this example, the button toggles a state variable to switch between a playing and a paused state. However, in order to actually play or pause the video, toggling state is not enough. You also need to call [`play()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play) and [`pause()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause) on the DOM element for the `<video>`. Add a ref to it, and make the button work.\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n\nconst [isPlaying, setIsPlaying] = useState(false);","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1578":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nfunction handleClick() {\n\nconst nextIsPlaying = !isPlaying;\n\nsetIsPlaying(nextIsPlaying);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<video width=\"250\">\n\n<source\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\ntype=\"video/mp4\"\n\n/>\n\n</video>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\nFor an extra challenge, keep the \"Play\" button in sync with whether the video is playing even if the user right-clicks the video and plays it using the built-in browser media controls. You might want to listen to `onPlay` and `onPause` on the video to do that.\n\n<Solution>\n\nDeclare a ref and put it on the `<video>` element. Then call `ref.current.play()` and `ref.current.pause()` in the event handler depending on the next state.\n\n<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1579":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useRef } from 'react';\n\nexport default function VideoPlayer() {\n\nconst [isPlaying, setIsPlaying] = useState(false);\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nconst nextIsPlaying = !isPlaying;\n\nsetIsPlaying(nextIsPlaying);\n\nif (nextIsPlaying) {\n\nref.current.play();\n\n} else {\n\nref.current.pause();\n\n}\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\n{isPlaying ? 'Pause' : 'Play'}\n\n</button>\n\n<video\n\nwidth=\"250\"\n\nref={ref}\n\nonPlay={() => setIsPlaying(true)}\n\nonPause={() => setIsPlaying(false)}\n\n>\n\n<source\n\nsrc=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"\n\ntype=\"video/mp4\"\n\n/>\n\n</video>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\nIn order to handle the built-in browser controls, you can add `onPlay` and `onPause` handlers to the `<video>` element and call `setIsPlaying` from them. This way, if the user plays the video using the browser controls, the state will adjust accordingly.\n\n</Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1580":{"pageContent":"</Solution>\n\n#### Focus the search field {/*focus-the-search-field*/}\n\nMake it so that clicking the \"Search\" button puts focus into the field.\n\n<Sandpack>\n\n```js\n\nexport default function Page() {\n\nreturn (\n\n<>\n\n<nav>\n\n<button>Search</button>\n\n</nav>\n\n<input\n\nplaceholder=\"Looking for something?\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nAdd a ref to the input, and call `focus()` on the DOM node to focus it:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Page() {\n\nconst inputRef = useRef(null);\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={() => {\n\ninputRef.current.focus();\n\n}}>\n\nSearch\n\n</button>\n\n</nav>\n\n<input\n\nref={inputRef}\n\nplaceholder=\"Looking for something?\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Scrolling an image carousel {/*scrolling-an-image-carousel*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1581":{"pageContent":"placeholder=\"Looking for something?\"\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Scrolling an image carousel {/*scrolling-an-image-carousel*/}\n\nThis image carousel has a \"Next\" button that switches the active image. Make the gallery scroll horizontally to the active image on click. You will want to call [`scrollIntoView()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) on the DOM node of the active image:\n\n```js\n\nnode.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n```\n\n<Hint>\n\nYou don't need to have a ref to every image for this exercise. It should be enough to have a ref to the currently active image, or to the list itself. Use `flushSync` to ensure the DOM is updated *before* you scroll.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function CatFriends() {\n\nconst [index, setIndex] = useState(0);\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={() => {\n\nif (index < catList.length - 1) {","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1582":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function CatFriends() {\n\nconst [index, setIndex] = useState(0);\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={() => {\n\nif (index < catList.length - 1) {\n\nsetIndex(index + 1);\n\n} else {\n\nsetIndex(0);\n\n}\n\n}}>\n\nNext\n\n</button>\n\n</nav>\n\n<div>\n\n<ul>\n\n{catList.map((cat, i) => (\n\n<li key={cat.id}>\n\n<img\n\nclassName={\n\nindex === i ?\n\n'active' :\n\n''\n\n}\n\nsrc={cat.imageUrl}\n\nalt={'Cat #' + cat.id}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n</>\n\n);\n\n}\n\nconst catList = [];\n\nfor (let i = 0; i < 10; i++) {\n\ncatList.push({\n\nid: i,\n\nimageUrl: 'https://placekitten.com/250/200?image=' + i\n\n});\n\n}\n\n```\n\n```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\nimg {\n\npadding: 10px;\n\nmargin: -10px;\n\ntransition: background 0.2s linear;\n\n}\n\n.active {\n\nbackground: rgba(0, 100, 150, 0.4);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can declare a `selectedRef`, and then pass it conditionally only to the current image:\n\n```js\n\n<li ref={index === i ? selectedRef : null}>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1583":{"pageContent":"background: rgba(0, 100, 150, 0.4);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can declare a `selectedRef`, and then pass it conditionally only to the current image:\n\n```js\n\n<li ref={index === i ? selectedRef : null}>\n\n```\n\nWhen `index === i`, meaning that the image is the selected one, the `<li>` will receive the `selectedRef`. React will make sure that `selectedRef.current` always points at the correct DOM node.\n\nNote that the `flushSync` call is necessary to force React to update the DOM before the scroll. Otherwise, `selectedRef.current` would always point at the previously selected item.\n\n<Sandpack>\n\n```js\n\nimport { useRef, useState } from 'react';\n\nimport { flushSync } from 'react-dom';\n\nexport default function CatFriends() {\n\nconst selectedRef = useRef(null);\n\nconst [index, setIndex] = useState(0);\n\nreturn (\n\n<>\n\n<nav>\n\n<button onClick={() => {\n\nflushSync(() => {\n\nif (index < catList.length - 1) {\n\nsetIndex(index + 1);\n\n} else {\n\nsetIndex(0);\n\n}\n\n});\n\nselectedRef.current.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1584":{"pageContent":"flushSync(() => {\n\nif (index < catList.length - 1) {\n\nsetIndex(index + 1);\n\n} else {\n\nsetIndex(0);\n\n}\n\n});\n\nselectedRef.current.scrollIntoView({\n\nbehavior: 'smooth',\n\nblock: 'nearest',\n\ninline: 'center'\n\n});\n\n}}>\n\nNext\n\n</button>\n\n</nav>\n\n<div>\n\n<ul>\n\n{catList.map((cat, i) => (\n\n<li\n\nkey={cat.id}\n\nref={index === i ?\n\nselectedRef :\n\nnull\n\n}\n\n>\n\n<img\n\nclassName={\n\nindex === i ?\n\n'active'\n\n: ''\n\n}\n\nsrc={cat.imageUrl}\n\nalt={'Cat #' + cat.id}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n</div>\n\n</>\n\n);\n\n}\n\nconst catList = [];\n\nfor (let i = 0; i < 10; i++) {\n\ncatList.push({\n\nid: i,\n\nimageUrl: 'https://placekitten.com/250/200?image=' + i\n\n});\n\n}\n\n```\n\n```css\n\ndiv {\n\nwidth: 100%;\n\noverflow: hidden;\n\n}\n\nnav {\n\ntext-align: center;\n\n}\n\nbutton {\n\nmargin: .25rem;\n\n}\n\nul,\n\nli {\n\nlist-style: none;\n\nwhite-space: nowrap;\n\n}\n\nli {\n\ndisplay: inline;\n\npadding: 0.5rem;\n\n}\n\nimg {\n\npadding: 10px;\n\nmargin: -10px;\n\ntransition: background 0.2s linear;\n\n}\n\n.active {\n\nbackground: rgba(0, 100, 150, 0.4);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Focus the search field with separate components {/*focus-the-search-field-with-separate-components*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1585":{"pageContent":"}\n\n.active {\n\nbackground: rgba(0, 100, 150, 0.4);\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Focus the search field with separate components {/*focus-the-search-field-with-separate-components*/}\n\nMake it so that clicking the \"Search\" button puts focus into the field. Note that each component is defined in a separate file and shouldn't be moved out of it. How do you connect them together?\n\n<Hint>\n\nYou'll need `forwardRef` to opt into exposing a DOM node from your own component like `SearchInput`.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport SearchButton from './SearchButton.js';\n\nimport SearchInput from './SearchInput.js';\n\nexport default function Page() {\n\nreturn (\n\n<>\n\n<nav>\n\n<SearchButton />\n\n</nav>\n\n<SearchInput />\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchButton.js\n\nexport default function SearchButton() {\n\nreturn (\n\n<button>\n\nSearch\n\n</button>\n\n);\n\n}\n\n```\n\n```js SearchInput.js\n\nexport default function SearchInput() {\n\nreturn (\n\n<input\n\nplaceholder=\"Looking for something?\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1586":{"pageContent":");\n\n}\n\n```\n\n```js SearchInput.js\n\nexport default function SearchInput() {\n\nreturn (\n\n<input\n\nplaceholder=\"Looking for something?\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou'll need to add an `onClick` prop to the `SearchButton`, and make the `SearchButton` pass it down to the browser `<button>`. You'll also pass a ref down to `<SearchInput>`, which will forward it to the real `<input>` and populate it. Finally, in the click handler, you'll call `focus` on the DOM node stored inside that ref.\n\n<Sandpack>\n\n```js App.js\n\nimport { useRef } from 'react';\n\nimport SearchButton from './SearchButton.js';\n\nimport SearchInput from './SearchInput.js';\n\nexport default function Page() {\n\nconst inputRef = useRef(null);\n\nreturn (\n\n<>\n\n<nav>\n\n<SearchButton onClick={() => {\n\ninputRef.current.focus();\n\n}} />\n\n</nav>\n\n<SearchInput ref={inputRef} />\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchButton.js\n\nexport default function SearchButton({ onClick }) {\n\nreturn (\n\n<button onClick={onClick}>\n\nSearch\n\n</button>\n\n);\n\n}\n\n```\n\n```js SearchInput.js","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1587":{"pageContent":"}} />\n\n</nav>\n\n<SearchInput ref={inputRef} />\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchButton.js\n\nexport default function SearchButton({ onClick }) {\n\nreturn (\n\n<button onClick={onClick}>\n\nSearch\n\n</button>\n\n);\n\n}\n\n```\n\n```js SearchInput.js\n\nimport { forwardRef } from 'react';\n\nexport default forwardRef(\n\nfunction SearchInput(props, ref) {\n\nreturn (\n\n<input\n\nref={ref}\n\nplaceholder=\"Looking for something?\"\n\n/>\n\n);\n\n}\n\n);\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/manipulating-the-dom-with-refs.md"}},"1588":{"pageContent":"--\n\ntitle: Writing Markup with JSX\n\n--\n\n<Intro>\n\nJSX* is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.\n\n</Intro>\n\n<YouWillLearn>\n\nWhy React mixes markup with rendering logic\n\nHow JSX is different from HTML\n\nHow to display information with JSX\n\n</YouWillLearn>\n\n## JSX: Putting markup into JavaScript {/*jsx-putting-markup-into-javascript*/}\n\nThe Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files! Content was marked up inside HTML while the page's logic lived separately in JavaScript:\n\n<DiagramGroup>\n\n<Diagram name=\"writing_jsx_html\" height={237} width={325} alt=\"HTML markup with purple background and a div with two child tags: p and form. \">\n\nHTML\n\n</Diagram>","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1589":{"pageContent":"<DiagramGroup>\n\n<Diagram name=\"writing_jsx_html\" height={237} width={325} alt=\"HTML markup with purple background and a div with two child tags: p and form. \">\n\nHTML\n\n</Diagram>\n\n<Diagram name=\"writing_jsx_js\" height={237} width={325} alt=\"Three JavaScript handlers with yellow background: onSubmit, onLogin, and onClick.\">\n\nJavaScript\n\n</Diagram>\n\n</DiagramGroup>\n\nBut as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why **in React, rendering logic and markup live together in the same place—components.**\n\n<DiagramGroup>\n\n<Diagram name=\"writing_jsx_sidebar\" height={330} width={325} alt=\"React component with HTML and JavaScript from previous examples mixed. Function name is Sidebar which calls the function isLoggedIn, highlighted in yellow. Nested inside the function highlighted in purple is the p tag from before, and a Form tag referencing the component shown in the next diagram.\">\n\n`Sidebar.js` React component\n\n</Diagram>","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1590":{"pageContent":"`Sidebar.js` React component\n\n</Diagram>\n\n<Diagram name=\"writing_jsx_form\" height={330} width={325} alt=\"React component with HTML and JavaScript from previous examples mixed. Function name is Form containing two handlers onClick and onSubmit highlighted in yellow. Following the handlers is HTML highlighted in purple. The HTML contains a form element with a nested input element, each with an onClick prop.\">\n\n`Form.js` React component\n\n</Diagram>\n\n</DiagramGroup>\n\nKeeping a button's rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button's markup and a sidebar's markup, are isolated from each other, making it safer to change either of them on their own.","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1591":{"pageContent":"Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup.\n\n<Note>\n\nJSX and React are two separate things. They're often used together, but you *can* [use them independently](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#whats-a-jsx-transform) of each other. JSX is a syntax extension, while React is a JavaScript library.\n\n</Note>\n\n## Converting HTML to JSX {/*converting-html-to-jsx*/}\n\nSuppose that you have some (perfectly valid) HTML:\n\n```html\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n>\n\n<ul>\n\n<li>Invent new traffic lights\n\n<li>Rehearse a movie scene\n\n<li>Improve the spectrum technology\n\n</ul>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1592":{"pageContent":"<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n>\n\n<ul>\n\n<li>Invent new traffic lights\n\n<li>Rehearse a movie scene\n\n<li>Improve the spectrum technology\n\n</ul>\n\n```\n\nAnd you want to put it into your component:\n\n```js\n\nexport default function TodoList() {\n\nreturn (\n\n// ???\n\n)\n\n}\n\n```\n\nIf you copy and paste it as is, it will not work:\n\n<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nreturn (\n\n// This doesn't quite work!\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n>\n\n<ul>\n\n<li>Invent new traffic lights\n\n<li>Rehearse a movie scene\n\n<li>Improve the spectrum technology\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 90px }\n\n```\n\n</Sandpack>\n\nThis is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they'll guide you to fix the markup, or you can follow the guide below.\n\n<Note>\n\nMost of the times, React's on-screen error messages will help you find where the problem is. Give them a read if you get stuck!\n\n</Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1593":{"pageContent":"<Note>\n\nMost of the times, React's on-screen error messages will help you find where the problem is. Give them a read if you get stuck!\n\n</Note>\n\n## The Rules of JSX {/*the-rules-of-jsx*/}\n\n### 1. Return a single root element {/*1-return-a-single-root-element*/}\n\nTo return multiple elements from a component, **wrap them with a single parent tag.**\n\nFor example, you can use a `<div>`:\n\n```js {1,11}\n\n<div>\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n>\n\n<ul>\n\n...\n\n</ul>\n\n</div>\n\n```\n\nIf you don't want to add an extra `<div>` to your markup, you can write `<>` and `</>` instead:\n\n```js {1,11}\n\n<>\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n>\n\n<ul>\n\n...\n\n</ul>\n\n</>\n\n```\n\nThis empty tag is called a *[Fragment.](/reference/react/Fragment)* Fragments let you group things without leaving any trace in the browser HTML tree.\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1594":{"pageContent":"class=\"photo\"\n\n>\n\n<ul>\n\n...\n\n</ul>\n\n</>\n\n```\n\nThis empty tag is called a *[Fragment.](/reference/react/Fragment)* Fragments let you group things without leaving any trace in the browser HTML tree.\n\n<DeepDive>\n\n#### Why do multiple JSX tags need to be wrapped? {/*why-do-multiple-jsx-tags-need-to-be-wrapped*/}\n\nJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can't return two objects from a function without wrapping them into an array. This explains why you also can't return two JSX tags without wrapping them into another tag or a Fragment.\n\n</DeepDive>\n\n### 2. Close all the tags {/*2-close-all-the-tags*/}\n\nJSX requires tags to be explicitly closed: self-closing tags like `<img>` must become `<img />`, and wrapping tags like `<li>oranges` must be written as `<li>oranges</li>`.\n\nThis is how Hedy Lamarr's image and list items look closed:\n\n```js {2-6,8-10}\n\n<>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n/>\n\n<ul>\n\n<li>Invent new traffic lights</li>","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1595":{"pageContent":"This is how Hedy Lamarr's image and list items look closed:\n\n```js {2-6,8-10}\n\n<>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n/>\n\n<ul>\n\n<li>Invent new traffic lights</li>\n\n<li>Rehearse a movie scene</li>\n\n<li>Improve the spectrum technology</li>\n\n</ul>\n\n</>\n\n```\n\n### 3. camelCase <s>all</s> most of the things! {/*3-camelcase-salls-most-of-the-things*/}\n\nJSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can't contain dashes or be reserved words like `class`.\n\nThis is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead of `stroke-width` you use `strokeWidth`. Since `class` is a reserved word, in React you write `className` instead, named after the [corresponding DOM property](https://developer.mozilla.org/en-US/docs/Web/API/Element/className):","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1596":{"pageContent":"```js {4}\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclassName=\"photo\"\n\n/>\n\n```\n\nYou can [find all these attributes in the list of DOM component props.](/reference/react-dom/components/common) If you get one wrong, don't worry—React will print a message with a possible correction to the [browser console.](https://developer.mozilla.org/docs/Tools/Browser_Console)\n\n<Pitfall>\n\nFor historical reasons, [`aria-*`](https://developer.mozilla.org/docs/Web/Accessibility/ARIA) and [`data-*`](https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes) attributes are written as in HTML with dashes.\n\n</Pitfall>\n\n### Pro-tip: Use a JSX Converter {/*pro-tip-use-a-jsx-converter*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1597":{"pageContent":"</Pitfall>\n\n### Pro-tip: Use a JSX Converter {/*pro-tip-use-a-jsx-converter*/}\n\nConverting all these attributes in existing markup can be tedious! We recommend using a [converter](https://transform.tools/html-to-jsx) to translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it's still worth understanding what is going on so that you can comfortably write JSX on your own.\n\nHere is your final result:\n\n<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nreturn (\n\n<>\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclassName=\"photo\"\n\n/>\n\n<ul>\n\n<li>Invent new traffic lights</li>\n\n<li>Rehearse a movie scene</li>\n\n<li>Improve the spectrum technology</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 90px }\n\n```\n\n</Sandpack>\n\n<Recap>\n\nNow you know why JSX exists and how to use it in components:\n\nReact components group rendering logic together with markup because they are related.","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1598":{"pageContent":");\n\n}\n\n```\n\n```css\n\nimg { height: 90px }\n\n```\n\n</Sandpack>\n\n<Recap>\n\nNow you know why JSX exists and how to use it in components:\n\nReact components group rendering logic together with markup because they are related.\n\nJSX is similar to HTML, with a few differences. You can use a [converter](https://transform.tools/html-to-jsx) if you need to.\n\nError messages will often point you in the right direction to fixing your markup.\n\n</Recap>\n\n<Challenges>\n\n#### Convert some HTML to JSX {/*convert-some-html-to-jsx*/}\n\nThis HTML was pasted into a component, but it's not valid JSX. Fix it:\n\n<Sandpack>\n\n```js\n\nexport default function Bio() {\n\nreturn (\n\n<div class=\"intro\">\n\n<h1>Welcome to my website!</h1>\n\n</div>\n\n<p class=\"summary\">\n\nYou can find my thoughts here.\n\n<br><br>\n\n<b>And <i>pictures</b></i> of scientists!\n\n</p>\n\n);\n\n}\n\n```\n\n```css\n\n.intro {\n\nbackground-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n\nbackground-clip: text;\n\ncolor: transparent;\n\nwebkit-background-clip: text;\n\nwebkit-text-fill-color: transparent;\n\n}\n\n.summary {","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1599":{"pageContent":"background-clip: text;\n\ncolor: transparent;\n\nwebkit-background-clip: text;\n\nwebkit-text-fill-color: transparent;\n\n}\n\n.summary {\n\npadding: 20px;\n\nborder: 10px solid gold;\n\n}\n\n```\n\n</Sandpack>\n\nWhether to do it by hand or using the converter is up to you!\n\n<Solution>\n\n<Sandpack>\n\n```js\n\nexport default function Bio() {\n\nreturn (\n\n<div>\n\n<div className=\"intro\">\n\n<h1>Welcome to my website!</h1>\n\n</div>\n\n<p className=\"summary\">\n\nYou can find my thoughts here.\n\n<br /><br />\n\n<b>And <i>pictures</i></b> of scientists!\n\n</p>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.intro {\n\nbackground-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n\nbackground-clip: text;\n\ncolor: transparent;\n\nwebkit-background-clip: text;\n\nwebkit-text-fill-color: transparent;\n\n}\n\n.summary {\n\npadding: 20px;\n\nborder: 10px solid gold;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/writing-markup-with-jsx.md"}},"1600":{"pageContent":"--\n\ntitle: Rendering Lists\n\n--\n\n<Intro>\n\nYou will often want to display multiple similar components from a collection of data. You can use the [JavaScript array methods](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array#) to manipulate an array of data. On this page, you'll use [`filter()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) and [`map()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map) with React to filter and transform your array of data into an array of components.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to render components from an array using JavaScript's `map()`\n\nHow to render only specific components using JavaScript's `filter()`\n\nWhen and why to use React keys\n\n</YouWillLearn>\n\n## Rendering data from arrays {/*rendering-data-from-arrays*/}\n\nSay that you have a list of content.\n\n```js\n\n<ul>\n\n<li>Creola Katherine Johnson: mathematician</li>\n\n<li>Mario José Molina-Pasquel Henríquez: chemist</li>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1601":{"pageContent":"Say that you have a list of content.\n\n```js\n\n<ul>\n\n<li>Creola Katherine Johnson: mathematician</li>\n\n<li>Mario José Molina-Pasquel Henríquez: chemist</li>\n\n<li>Mohammad Abdus Salam: physicist</li>\n\n<li>Percy Lavon Julian: chemist</li>\n\n<li>Subrahmanyan Chandrasekhar: astrophysicist</li>\n\n</ul>\n\n```\n\nThe only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) and [`filter()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) to render lists of components from them.\n\nHere’s a short example of how to generate a list of items from an array:\n\n1. **Move** the data into an array:\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1602":{"pageContent":"Here’s a short example of how to generate a list of items from an array:\n\n1. **Move** the data into an array:\n\n```js\n\nconst people = [\n\n'Creola Katherine Johnson: mathematician',\n\n'Mario José Molina-Pasquel Henríquez: chemist',\n\n'Mohammad Abdus Salam: physicist',\n\n'Percy Lavon Julian: chemist',\n\n'Subrahmanyan Chandrasekhar: astrophysicist'\n\n];\n\n```\n\n2. **Map** the `people` members into a new array of JSX nodes, `listItems`:\n\n```js\n\nconst listItems = people.map(person => <li>{person}</li>);\n\n```\n\n3. **Return** `listItems` from your component wrapped in a `<ul>`:\n\n```js\n\nreturn <ul>{listItems}</ul>;\n\n```\n\nHere is the result:\n\n<Sandpack>\n\n```js\n\nconst people = [\n\n'Creola Katherine Johnson: mathematician',\n\n'Mario José Molina-Pasquel Henríquez: chemist',\n\n'Mohammad Abdus Salam: physicist',\n\n'Percy Lavon Julian: chemist',\n\n'Subrahmanyan Chandrasekhar: astrophysicist'\n\n];\n\nexport default function List() {\n\nconst listItems = people.map(person =>\n\n<li>{person}</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\n```\n\n```css\n\nli { margin-bottom: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1603":{"pageContent":"];\n\nexport default function List() {\n\nconst listItems = people.map(person =>\n\n<li>{person}</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\n```\n\n```css\n\nli { margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nNotice the sandbox above displays a console error:\n\n<ConsoleBlock level=\"error\">\n\nWarning: Each child in a list should have a unique \"key\" prop.\n\n</ConsoleBlock>\n\nYou'll learn how to fix this error later on this page. Before we get to that, let's add some structure to your data.\n\n## Filtering arrays of items {/*filtering-arrays-of-items*/}\n\nThis data can be structured even more.\n\n```js\n\nconst people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\n}, {\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\n}, {\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\n}];\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1604":{"pageContent":"}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\n}, {\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\n}, {\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\n}];\n\n```\n\nLet's say you want a way to only show people whose profession is `'chemist'`. You can use JavaScript's `filter()` method to return just those people. This method takes an array of items, passes them through a “test” (a function that returns `true` or `false`), and returns a new array of only those items that passed the test (returned `true`).\n\nYou only want the items where `profession` is `'chemist'`. The \"test\" function for this looks like `(person) => person.profession === 'chemist'`. Here's how to put it together:\n\n1. **Create** a new array of just “chemist” people, `chemists`, by calling `filter()` on the `people` filtering by `person.profession === 'chemist'`:\n\n```js\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);\n\n```\n\n2. Now **map** over `chemists`:\n\n```js {1,13}","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1605":{"pageContent":"```js\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);\n\n```\n\n2. Now **map** over `chemists`:\n\n```js {1,13}\n\nconst listItems = chemists.map(person =>\n\n<li>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n);\n\n```\n\n3. Lastly, **return** the `listItems` from your component:\n\n```js\n\nreturn <ul>{listItems}</ul>;\n\n```\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);\n\nconst listItems = chemists.map(person =>\n\n<li>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1606":{"pageContent":"</p>\n\n</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1607":{"pageContent":"export function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nArrow functions implicitly return the expression right after `=>`, so you didn't need a `return` statement:\n\n```js\n\nconst listItems = chemists.map(person =>\n\n<li>...</li> // Implicit return!\n\n);\n\n```\n\nHowever, **you must write `return` explicitly if your `=>` is followed by a `{` curly brace!**\n\n```js\n\nconst listItems = chemists.map(person => { // Curly brace\n\nreturn <li>...</li>;\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1608":{"pageContent":");\n\n```\n\nHowever, **you must write `return` explicitly if your `=>` is followed by a `{` curly brace!**\n\n```js\n\nconst listItems = chemists.map(person => { // Curly brace\n\nreturn <li>...</li>;\n\n});\n\n```\n\nArrow functions containing `=> {` are said to have a [\"block body\".](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body) They let you write more than a single line of code, but you *have to* write a `return` statement yourself. If you forget it, nothing gets returned!\n\n</Pitfall>\n\n## Keeping list items in order with `key` {/*keeping-list-items-in-order-with-key*/}\n\nNotice that all the sandboxes above show an error in the console:\n\n<ConsoleBlock level=\"error\">\n\nWarning: Each child in a list should have a unique \"key\" prop.\n\n</ConsoleBlock>\n\nYou need to give each array item a `key` -- a string or a number that uniquely identifies it among other items in that array:\n\n```js\n\n<li key={person.id}>...</li>\n\n```\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1609":{"pageContent":"</ConsoleBlock>\n\nYou need to give each array item a `key` -- a string or a number that uniquely identifies it among other items in that array:\n\n```js\n\n<li key={person.id}>...</li>\n\n```\n\n<Note>\n\nJSX elements directly inside a `map()` call always need keys!\n\n</Note>\n\nKeys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen `key` helps React infer what exactly has happened, and make the correct updates to the DOM tree.\n\nRather than generating keys on the fly, you should include them in your data:\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n\nconst listItems = people.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n);","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1610":{"pageContent":"<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n);\n\nreturn <ul>{listItems}</ul>;\n\n}\n\n```\n\n```js data.js active\n\nexport const people = [{\n\nid: 0, // Used in JSX as a key\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1, // Used in JSX as a key\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2, // Used in JSX as a key\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3, // Used in JSX as a key\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4, // Used in JSX as a key\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1611":{"pageContent":"accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4, // Used in JSX as a key\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Displaying several DOM nodes for each list item {/*displaying-several-dom-nodes-for-each-list-item*/}\n\nWhat do you do when each item needs to render not one, but several DOM nodes?","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1612":{"pageContent":"<DeepDive>\n\n#### Displaying several DOM nodes for each list item {/*displaying-several-dom-nodes-for-each-list-item*/}\n\nWhat do you do when each item needs to render not one, but several DOM nodes?\n\nThe short [`<>...</>` Fragment](/reference/react/Fragment) syntax won't let you pass a key, so you need to either group them into a single `<div>`, or use the slightly longer and [more explicit `<Fragment>` syntax:](/reference/react/Fragment#rendering-a-list-of-fragments)\n\n```js\n\nimport { Fragment } from 'react';\n\n// ...\n\nconst listItems = people.map(person =>\n\n<Fragment key={person.id}>\n\n<h1>{person.name}</h1>\n\n<p>{person.bio}</p>\n\n</Fragment>\n\n);\n\n```\n\nFragments disappear from the DOM, so this will produce a flat list of `<h1>`, `<p>`, `<h1>`, `<p>`, and so on.\n\n</DeepDive>\n\n### Where to get your `key` {/*where-to-get-your-key*/}\n\nDifferent sources of data provide different sources of keys:\n\n**Data from a database:** If your data is coming from a database, you can use the database keys/IDs, which are unique by nature.","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1613":{"pageContent":"Different sources of data provide different sources of keys:\n\n**Data from a database:** If your data is coming from a database, you can use the database keys/IDs, which are unique by nature.\n\n**Locally generated data:** If your data is generated and persisted locally (e.g. notes in a note-taking app), use an incrementing counter, [`crypto.randomUUID()`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID) or a package like [`uuid`](https://www.npmjs.com/package/uuid) when creating items.\n\n### Rules of keys {/*rules-of-keys*/}\n\n**Keys must be unique among siblings.** However, it’s okay to use the same keys for JSX nodes in _different_ arrays.\n\n**Keys must not change** or that defeats their purpose! Don't generate them while rendering.\n\n### Why does React need keys? {/*why-does-react-need-keys*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1614":{"pageContent":"**Keys must not change** or that defeats their purpose! Don't generate them while rendering.\n\n### Why does React need keys? {/*why-does-react-need-keys*/}\n\nImagine that files on your desktop didn't have names. Instead, you'd refer to them by their order -- the first file, the second file, and so on. You could get used to it, but once you delete a file, it would get confusing. The second file would become the first file, the third file would be the second file, and so on.\n\nFile names in a folder and JSX keys in an array serve a similar purpose. They let us uniquely identify an item between its siblings. A well-chosen key provides more information than the position within the array. Even if the _position_ changes due to reordering, the `key` lets React identify the item throughout its lifetime.\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1615":{"pageContent":"<Pitfall>\n\nYou might be tempted to use an item's index in the array as its key. In fact, that's what React will use if you don't specify a `key` at all. But the order in which you render items will change over time if an item is inserted, deleted, or if the array gets reordered. Index as a key often leads to subtle and confusing bugs.\n\nSimilarly, do not generate keys on the fly, e.g. with `key={Math.random()}`. This will cause keys to never match up between renders, leading to all your components and DOM being recreated every time. Not only is this slow, but it will also lose any user input inside the list items. Instead, use a stable ID based on the data.\n\nNote that your components won't receive `key` as a prop. It's only used as a hint by React itself. If your component needs an ID, you have to pass it as a separate prop: `<Profile key={id} userId={id} />`.\n\n</Pitfall>\n\n<Recap>\n\nOn this page you learned:\n\nHow to move data out of components and into data structures like arrays and objects.","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1616":{"pageContent":"</Pitfall>\n\n<Recap>\n\nOn this page you learned:\n\nHow to move data out of components and into data structures like arrays and objects.\n\nHow to generate sets of similar components with JavaScript's `map()`.\n\nHow to create arrays of filtered items with JavaScript's `filter()`.\n\nWhy and how to set `key` on each component in a collection so React can keep track of each of them even if their position or data changes.\n\n</Recap>\n\n<Challenges>\n\n#### Splitting a list in two {/*splitting-a-list-in-two*/}\n\nThis example shows a list of all people.\n\nChange it to show two separate lists one after another: **Chemists** and **Everyone Else.** Like previously, you can determine whether a person is a chemist by checking if `person.profession === 'chemist'`.\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n\nconst listItems = people.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1617":{"pageContent":"export default function List() {\n\nconst listItems = people.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n);\n\nreturn (\n\n<article>\n\n<h1>Scientists</h1>\n\n<ul>{listItems}</ul>\n\n</article>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1618":{"pageContent":"profession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou could use `filter()` twice, creating two separate arrays, and then `map` over both of them:\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);\n\nconst everyoneElse = people.filter(person =>\n\nperson.profession !== 'chemist'\n\n);","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1619":{"pageContent":"export default function List() {\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);\n\nconst everyoneElse = people.filter(person =>\n\nperson.profession !== 'chemist'\n\n);\n\nreturn (\n\n<article>\n\n<h1>Scientists</h1>\n\n<h2>Chemists</h2>\n\n<ul>\n\n{chemists.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n)}\n\n</ul>\n\n<h2>Everyone Else</h2>\n\n<ul>\n\n{everyoneElse.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n)}\n\n</ul>\n\n</article>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1620":{"pageContent":"imageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1621":{"pageContent":"li {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\nIn this solution, the `map` calls are placed directly inline into the parent `<ul>` elements, but you could introduce variables for them if you find that more readable.\n\nThere is still a bit duplication between the rendered lists. You can go further and extract the repetitive parts into a `<ListSection>` component:\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nfunction ListSection({ title, people }) {\n\nreturn (\n\n<>\n\n<h2>{title}</h2>\n\n<ul>\n\n{people.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n)}\n\n</ul>\n\n</>\n\n);\n\n}\n\nexport default function List() {\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1622":{"pageContent":"{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n)}\n\n</ul>\n\n</>\n\n);\n\n}\n\nexport default function List() {\n\nconst chemists = people.filter(person =>\n\nperson.profession === 'chemist'\n\n);\n\nconst everyoneElse = people.filter(person =>\n\nperson.profession !== 'chemist'\n\n);\n\nreturn (\n\n<article>\n\n<h1>Scientists</h1>\n\n<ListSection\n\ntitle=\"Chemists\"\n\npeople={chemists}\n\n/>\n\n<ListSection\n\ntitle=\"Everyone Else\"\n\npeople={everyoneElse}\n\n/>\n\n</article>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1623":{"pageContent":"accomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1624":{"pageContent":"li {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\nA very attentive reader might notice that with two `filter` calls, we check each person's profession twice. Checking a property is very fast, so in this example it's fine. If your logic was more expensive than that, you could replace the `filter` calls with a loop that manually constructs the arrays and checks each person once.\n\nIn fact, if `people` never change, you could move this code out of your component. From React's perspective, all that matters is that you give it an array of JSX nodes in the end. It doesn't care how you produce that array:\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nlet chemists = [];\n\nlet everyoneElse = [];\n\npeople.forEach(person => {\n\nif (person.profession === 'chemist') {\n\nchemists.push(person);\n\n} else {\n\neveryoneElse.push(person);\n\n}\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1625":{"pageContent":"let chemists = [];\n\nlet everyoneElse = [];\n\npeople.forEach(person => {\n\nif (person.profession === 'chemist') {\n\nchemists.push(person);\n\n} else {\n\neveryoneElse.push(person);\n\n}\n\n});\n\nfunction ListSection({ title, people }) {\n\nreturn (\n\n<>\n\n<h2>{title}</h2>\n\n<ul>\n\n{people.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n)}\n\n</ul>\n\n</>\n\n);\n\n}\n\nexport default function List() {\n\nreturn (\n\n<article>\n\n<h1>Scientists</h1>\n\n<ListSection\n\ntitle=\"Chemists\"\n\npeople={chemists}\n\n/>\n\n<ListSection\n\ntitle=\"Everyone Else\"\n\npeople={everyoneElse}\n\n/>\n\n</article>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1626":{"pageContent":"name: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: auto 1fr;\n\ngap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Nested lists in one component {/*nested-lists-in-one-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1627":{"pageContent":"gap: 20px;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Nested lists in one component {/*nested-lists-in-one-component*/}\n\nMake a list of recipes from this array! For each recipe in the array, display its name as an `<h2>` and list its ingredients in a `<ul>`.\n\n<Hint>\n\nThis will require nesting two different `map` calls.\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { recipes } from './data.js';\n\nexport default function RecipeList() {\n\nreturn (\n\n<div>\n\n<h1>Recipes</h1>\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const recipes = [{\n\nid: 'greek-salad',\n\nname: 'Greek Salad',\n\ningredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']\n\n}, {\n\nid: 'hawaiian-pizza',\n\nname: 'Hawaiian Pizza',\n\ningredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']\n\n}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHere is one way you could go about it:\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1628":{"pageContent":"}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHere is one way you could go about it:\n\n<Sandpack>\n\n```js App.js\n\nimport { recipes } from './data.js';\n\nexport default function RecipeList() {\n\nreturn (\n\n<div>\n\n<h1>Recipes</h1>\n\n{recipes.map(recipe =>\n\n<div key={recipe.id}>\n\n<h2>{recipe.name}</h2>\n\n<ul>\n\n{recipe.ingredients.map(ingredient =>\n\n<li key={ingredient}>\n\n{ingredient}\n\n</li>\n\n)}\n\n</ul>\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const recipes = [{\n\nid: 'greek-salad',\n\nname: 'Greek Salad',\n\ningredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']\n\n}, {\n\nid: 'hawaiian-pizza',\n\nname: 'Hawaiian Pizza',\n\ningredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']\n\n}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1629":{"pageContent":"}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>\n\nEach of the `recipes` already includes an `id` field, so that's what the outer loop uses for its `key`. There is no ID you could use to loop over ingredients. However, it's reasonable to assume that the same ingredient won't be listed twice within the same recipe, so its name can serve as a `key`. Alternatively, you could change the data structure to add IDs, or use index as a `key` (with the caveat that you can't safely reorder ingredients).\n\n</Solution>\n\n#### Extracting a list item component {/*extracting-a-list-item-component*/}\n\nThis `RecipeList` component contains two nested `map` calls. To simplify it, extract a `Recipe` component from it which will accept `id`, `name`, and `ingredients` props. Where do you place the outer `key` and why?\n\n<Sandpack>\n\n```js App.js\n\nimport { recipes } from './data.js';\n\nexport default function RecipeList() {\n\nreturn (\n\n<div>\n\n<h1>Recipes</h1>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1630":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { recipes } from './data.js';\n\nexport default function RecipeList() {\n\nreturn (\n\n<div>\n\n<h1>Recipes</h1>\n\n{recipes.map(recipe =>\n\n<div key={recipe.id}>\n\n<h2>{recipe.name}</h2>\n\n<ul>\n\n{recipe.ingredients.map(ingredient =>\n\n<li key={ingredient}>\n\n{ingredient}\n\n</li>\n\n)}\n\n</ul>\n\n</div>\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const recipes = [{\n\nid: 'greek-salad',\n\nname: 'Greek Salad',\n\ningredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']\n\n}, {\n\nid: 'hawaiian-pizza',\n\nname: 'Hawaiian Pizza',\n\ningredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']\n\n}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can copy-paste the JSX from the outer `map` into a new `Recipe` component and return that JSX. Then you can change `recipe.name` to `name`, `recipe.id` to `id`, and so on, and pass them as props to the `Recipe`:\n\n<Sandpack>\n\n```js\n\nimport { recipes } from './data.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1631":{"pageContent":"<Sandpack>\n\n```js\n\nimport { recipes } from './data.js';\n\nfunction Recipe({ id, name, ingredients }) {\n\nreturn (\n\n<div>\n\n<h2>{name}</h2>\n\n<ul>\n\n{ingredients.map(ingredient =>\n\n<li key={ingredient}>\n\n{ingredient}\n\n</li>\n\n)}\n\n</ul>\n\n</div>\n\n);\n\n}\n\nexport default function RecipeList() {\n\nreturn (\n\n<div>\n\n<h1>Recipes</h1>\n\n{recipes.map(recipe =>\n\n<Recipe {...recipe} key={recipe.id} />\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const recipes = [{\n\nid: 'greek-salad',\n\nname: 'Greek Salad',\n\ningredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']\n\n}, {\n\nid: 'hawaiian-pizza',\n\nname: 'Hawaiian Pizza',\n\ningredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']\n\n}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1632":{"pageContent":"}, {\n\nid: 'hummus',\n\nname: 'Hummus',\n\ningredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\n\n}];\n\n```\n\n</Sandpack>\n\nHere, `<Recipe {...recipe} key={recipe.id} />` is a syntax shortcut saying \"pass all properties of the `recipe` object as props to the `Recipe` component\". You could also write each prop explicitly: `<Recipe id={recipe.id} name={recipe.name} ingredients={recipe.ingredients} key={recipe.id} />`.\n\n*Note that the `key` is specified on the `<Recipe>` itself rather than on the root `<div>` returned from `Recipe`.** This is because this `key` is needed directly within the context of the surrounding array. Previously, you had an array of `<div>`s so each of them needed a `key`, but now you have an array of `<Recipe>`s. In other words, when you extract a component, don't forget to leave the `key` outside the JSX you copy and paste.\n\n</Solution>\n\n#### List with a separator {/*list-with-a-separator*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1633":{"pageContent":"</Solution>\n\n#### List with a separator {/*list-with-a-separator*/}\n\nThis example renders a famous haiku by Katsushika Hokusai, with each line wrapped in a `<p>` tag. Your job is to insert an `<hr />` separator between each paragraph. Your resulting structure should look like this:\n\n```js\n\n<article>\n\n<p>I write, erase, rewrite</p>\n\n<hr />\n\n<p>Erase again, and then</p>\n\n<hr />\n\n<p>A poppy blooms.</p>\n\n</article>\n\n```\n\nA haiku only contains three lines, but your solution should work with any number of lines. Note that `<hr />` elements only appear *between* the `<p>` elements, not in the beginning or the end!\n\n<Sandpack>\n\n```js\n\nconst poem = {\n\nlines: [\n\n'I write, erase, rewrite',\n\n'Erase again, and then',\n\n'A poppy blooms.'\n\n]\n\n};\n\nexport default function Poem() {\n\nreturn (\n\n<article>\n\n{poem.lines.map((line, index) =>\n\n<p key={index}>\n\n{line}\n\n</p>\n\n)}\n\n</article>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\ntext-align: center;\n\n}\n\np {\n\nfont-family: Georgia, serif;\n\nfont-size: 20px;\n\nfont-style: italic;\n\n}\n\nhr {\n\nmargin: 0 120px 0 120px;\n\nborder: 1px dashed #45c3d8;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1634":{"pageContent":"{line}\n\n</p>\n\n)}\n\n</article>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\ntext-align: center;\n\n}\n\np {\n\nfont-family: Georgia, serif;\n\nfont-size: 20px;\n\nfont-style: italic;\n\n}\n\nhr {\n\nmargin: 0 120px 0 120px;\n\nborder: 1px dashed #45c3d8;\n\n}\n\n```\n\n</Sandpack>\n\n(This is a rare case where index as a key is acceptable because a poem's lines will never reorder.)\n\n<Hint>\n\nYou'll either need to convert `map` to a manual loop, or use a fragment.\n\n</Hint>\n\n<Solution>\n\nYou can write a manual loop, inserting `<hr />` and `<p>...</p>` into the output array as you go:\n\n<Sandpack>\n\n```js\n\nconst poem = {\n\nlines: [\n\n'I write, erase, rewrite',\n\n'Erase again, and then',\n\n'A poppy blooms.'\n\n]\n\n};\n\nexport default function Poem() {\n\nlet output = [];\n\n// Fill the output array\n\npoem.lines.forEach((line, i) => {\n\noutput.push(\n\n<hr key={i + '-separator'} />\n\n);\n\noutput.push(\n\n<p key={i + '-text'}>\n\n{line}\n\n</p>\n\n);\n\n});\n\n// Remove the first <hr />\n\noutput.shift();\n\nreturn (\n\n<article>\n\n{output}\n\n</article>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\ntext-align: center;\n\n}\n\np {\n\nfont-family: Georgia, serif;\n\nfont-size: 20px;\n\nfont-style: italic;\n\n}\n\nhr {","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1635":{"pageContent":"{line}\n\n</p>\n\n);\n\n});\n\n// Remove the first <hr />\n\noutput.shift();\n\nreturn (\n\n<article>\n\n{output}\n\n</article>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\ntext-align: center;\n\n}\n\np {\n\nfont-family: Georgia, serif;\n\nfont-size: 20px;\n\nfont-style: italic;\n\n}\n\nhr {\n\nmargin: 0 120px 0 120px;\n\nborder: 1px dashed #45c3d8;\n\n}\n\n```\n\n</Sandpack>\n\nUsing the original line index as a `key` doesn't work anymore because each separator and paragraph are now in the same array. However, you can give each of them a distinct key using a suffix, e.g. `key={i + '-text'}`.\n\nAlternatively, you could render a collection of fragments which contain `<hr />` and `<p>...</p>`. However, the `<>...</>` shorthand syntax doesn't support passing keys, so you'd have to write `<Fragment>` explicitly:\n\n<Sandpack>\n\n```js\n\nimport React, { Fragment } from 'react';\n\nconst poem = {\n\nlines: [\n\n'I write, erase, rewrite',\n\n'Erase again, and then',\n\n'A poppy blooms.'\n\n]\n\n};\n\nexport default function Poem() {\n\nreturn (\n\n<article>\n\n{poem.lines.map((line, i) =>\n\n<Fragment key={i}>\n\n{i > 0 && <hr />}\n\n<p>{line}</p>\n\n</Fragment>\n\n)}\n\n</article>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1636":{"pageContent":"'Erase again, and then',\n\n'A poppy blooms.'\n\n]\n\n};\n\nexport default function Poem() {\n\nreturn (\n\n<article>\n\n{poem.lines.map((line, i) =>\n\n<Fragment key={i}>\n\n{i > 0 && <hr />}\n\n<p>{line}</p>\n\n</Fragment>\n\n)}\n\n</article>\n\n);\n\n}\n\n```\n\n```css\n\nbody {\n\ntext-align: center;\n\n}\n\np {\n\nfont-family: Georgia, serif;\n\nfont-size: 20px;\n\nfont-style: italic;\n\n}\n\nhr {\n\nmargin: 0 120px 0 120px;\n\nborder: 1px dashed #45c3d8;\n\n}\n\n```\n\n</Sandpack>\n\nRemember, fragments (often written as `<> </>`) let you group JSX nodes without adding extra `<div>`s!\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/rendering-lists.md"}},"1637":{"pageContent":"--\n\ntitle: JavaScript in JSX with Curly Braces\n\n--\n\n<Intro>\n\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to pass strings with quotes\n\nHow to reference a JavaScript variable inside JSX with curly braces\n\nHow to call a JavaScript function inside JSX with curly braces\n\nHow to use a JavaScript object inside JSX with curly braces\n\n</YouWillLearn>\n\n## Passing strings with quotes {/*passing-strings-with-quotes*/}\n\nWhen you want to pass a string attribute to JSX, you put it in single or double quotes:\n\n<Sandpack>\n\n```js\n\nexport default function Avatar() {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1638":{"pageContent":"export default function Avatar() {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nHere, `\"https://i.imgur.com/7vQD0fPs.jpg\"` and `\"Gregorio Y. Zara\"` are being passed as strings.\n\nBut what if you want to dynamically specify the `src` or `alt` text? You could **use a value from JavaScript by replacing `\"` and `\"` with `{` and `}`**:\n\n<Sandpack>\n\n```js\n\nexport default function Avatar() {\n\nconst avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\n\nconst description = 'Gregorio Y. Zara';\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={avatar}\n\nalt={description}\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1639":{"pageContent":"const description = 'Gregorio Y. Zara';\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={avatar}\n\nalt={description}\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nNotice the difference between `className=\"avatar\"`, which specifies an `\"avatar\"` CSS class name that makes the image round, and `src={avatar}` that reads the value of the JavaScript variable called `avatar`. That's because curly braces let you work with JavaScript right there in your markup!\n\n## Using curly braces: A window into the JavaScript world {/*using-curly-braces-a-window-into-the-javascript-world*/}\n\nJSX is a special way of writing JavaScript. That means it’s possible to use JavaScript inside it—with curly braces `{ }`. The example below first declares a name for the scientist, `name`, then embeds it with curly braces inside the `<h1>`:\n\n<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nconst name = 'Gregorio Y. Zara';\n\nreturn (\n\n<h1>{name}'s To Do List</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1640":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nconst name = 'Gregorio Y. Zara';\n\nreturn (\n\n<h1>{name}'s To Do List</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTry changing `name`'s value from `'Gregorio Y. Zara'` to `'Hedy Lamarr'`. See how the To Do List title changes?\n\nAny JavaScript expression will work between curly braces, including function calls like `formatDate()`:\n\n<Sandpack>\n\n```js\n\nconst today = new Date();\n\nfunction formatDate(date) {\n\nreturn new Intl.DateTimeFormat(\n\n'en-US',\n\n{ weekday: 'long' }\n\n).format(date);\n\n}\n\nexport default function TodoList() {\n\nreturn (\n\n<h1>To Do List for {formatDate(today)}</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n### Where to use curly braces {/*where-to-use-curly-braces*/}\n\nYou can only use curly braces in two ways inside JSX:\n\n1. **As text** directly inside a JSX tag: `<h1>{name}'s To Do List</h1>` works, but `<{tag}>Gregorio Y. Zara's To Do List</{tag}>`  will not.","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1641":{"pageContent":"You can only use curly braces in two ways inside JSX:\n\n1. **As text** directly inside a JSX tag: `<h1>{name}'s To Do List</h1>` works, but `<{tag}>Gregorio Y. Zara's To Do List</{tag}>`  will not.\n\n2. **As attributes** immediately following the `=` sign: `src={avatar}` will read the `avatar` variable, but `src=\"{avatar}\"` will pass the string `\"{avatar}\"`.\n\n## Using \"double curlies\": CSS and other objects in JSX {/*using-double-curlies-css-and-other-objects-in-jsx*/}\n\nIn addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like `{ name: \"Hedy Lamarr\", inventions: 5 }`. Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: `person={{ name: \"Hedy Lamarr\", inventions: 5 }}`.","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1642":{"pageContent":"You may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the `style` attribute:\n\n<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nreturn (\n\n<ul style={{\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}}>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nul { padding: 20px 20px 20px 40px; margin: 0; }\n\n```\n\n</Sandpack>\n\nTry changing the values of `backgroundColor` and `color`.\n\nYou can really see the JavaScript object inside the curly braces when you write it like this:\n\n```js {2-5}\n\n<ul style={\n\n{\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n}>\n\n```\n\nThe next time you see `{{` and `}}` in JSX, know that it's nothing more than an object inside the JSX curlies!\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1643":{"pageContent":"```js {2-5}\n\n<ul style={\n\n{\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n}>\n\n```\n\nThe next time you see `{{` and `}}` in JSX, know that it's nothing more than an object inside the JSX curlies!\n\n<Pitfall>\n\nInline `style` properties are written in camelCase. For example, HTML `<ul style=\"background-color: black\">` would be written as `<ul style={{ backgroundColor: 'black' }}>`  in your component.\n\n</Pitfall>\n\n## More fun with JavaScript objects and curly braces {/*more-fun-with-javascript-objects-and-curly-braces*/}\n\nYou can move several expressions into one object, and reference them in your JSX inside curly braces:\n\n<Sandpack>\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1644":{"pageContent":"<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nIn this example, the `person` JavaScript object contains a `name` string and a `theme` object:\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\n```\n\nThe component can use these values from `person` like so:\n\n```js\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n```\n\nJSX is very minimal as a templating language because it lets you organize data and logic using JavaScript.\n\n<Recap>\n\nNow you know almost everything about JSX:\n\nJSX attributes inside quotes are passed as strings.\n\nCurly braces let you bring JavaScript logic and variables into your markup.","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1645":{"pageContent":"<Recap>\n\nNow you know almost everything about JSX:\n\nJSX attributes inside quotes are passed as strings.\n\nCurly braces let you bring JavaScript logic and variables into your markup.\n\nThey work inside the JSX tag content or immediately after `=` in attributes.\n\n`{{` and `}}` is not special syntax: it's a JavaScript object tucked inside JSX curly braces.\n\n</Recap>\n\n<Challenges>\n\n#### Fix the mistake {/*fix-the-mistake*/}\n\nThis code crashes with an error saying `Objects are not valid as a React child`:\n\n<Sandpack>\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1646":{"pageContent":"<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nCan you find the problem?\n\n<Hint>Look for what's inside the curly braces. Are we putting the right thing there?</Hint>\n\n<Solution>\n\nThis is happening because this example renders *an object itself* into the markup rather than a string: `<h1>{person}'s Todos</h1>` is trying to render the entire `person` object! Including raw objects as text content throws an error because React doesn't know how you want to display them.\n\nTo fix it, replace `<h1>{person}'s Todos</h1>` with `<h1>{person.name}'s Todos</h1>`:\n\n<Sandpack>\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1647":{"pageContent":"name: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Extract information into an object {/*extract-information-into-an-object*/}\n\nExtract the image URL into the `person` object.\n\n<Sandpack>\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1648":{"pageContent":"return (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nMove the image URL into a property called `person.imageUrl` and read it from the `<img>` tag using the curlies:\n\n<Sandpack>\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\nimageUrl: \"https://i.imgur.com/7vQD0fPs.jpg\",\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={person.imageUrl}\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1649":{"pageContent":"src={person.imageUrl}\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Write an expression inside JSX curly braces {/*write-an-expression-inside-jsx-curly-braces*/}\n\nIn the object below, the full image URL is split into four parts: base URL, `imageId`, `imageSize`, and file extension.\n\nWe want the image URL to combine these attributes together: base URL (always `'https://i.imgur.com/'`), `imageId` (`'7vQD0fP'`), `imageSize` (`'s'`), and file extension (always `'.jpg'`). However, something is wrong with how the `<img>` tag specifies its `src`.\n\nCan you fix it?\n\n<Sandpack>\n\n```js\n\nconst baseUrl = 'https://i.imgur.com/';\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP',\n\nimageSize: 's',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1650":{"pageContent":"Can you fix it?\n\n<Sandpack>\n\n```js\n\nconst baseUrl = 'https://i.imgur.com/';\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP',\n\nimageSize: 's',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"{baseUrl}{person.imageId}{person.imageSize}.jpg\"\n\nalt={person.name}\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nTo check that your fix worked, try changing the value of `imageSize` to `'b'`. The image should resize after your edit.\n\n<Solution>\n\nYou can write it as `src={baseUrl + person.imageId + person.imageSize + '.jpg'}`.\n\n1. `{` opens the JavaScript expression\n\n2. `baseUrl + person.imageId + person.imageSize + '.jpg'` produces the correct URL string","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1651":{"pageContent":"1. `{` opens the JavaScript expression\n\n2. `baseUrl + person.imageId + person.imageSize + '.jpg'` produces the correct URL string\n\n3. `}` closes the JavaScript expression\n\n<Sandpack>\n\n```js\n\nconst baseUrl = 'https://i.imgur.com/';\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP',\n\nimageSize: 's',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={baseUrl + person.imageId + person.imageSize + '.jpg'}\n\nalt={person.name}\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nYou can also move this expression into a separate function like `getImageUrl` below:\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js'\n\nconst person = {\n\nname: 'Gregorio Y. Zara',","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1652":{"pageContent":"</Sandpack>\n\nYou can also move this expression into a separate function like `getImageUrl` below:\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js'\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP',\n\nimageSize: 's',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nperson.imageSize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\nVariables and functions can help you keep the markup simple!\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/javascript-in-jsx-with-curly-braces.md"}},"1653":{"pageContent":"--\n\ntitle: Preserving and Resetting State\n\n--\n\n<Intro>\n\nState is isolated between components. React keeps track of which state belongs to which component based on their place in the UI tree. You can control when to preserve state and when to reset it between re-renders.\n\n</Intro>\n\n<YouWillLearn>\n\nHow React \"sees\" component structures\n\nWhen React chooses to preserve or reset the state\n\nHow to force React to reset component's state\n\nHow keys and types affect whether the state is preserved\n\n</YouWillLearn>\n\n## The UI tree {/*the-ui-tree*/}\n\nBrowsers use many tree structures to model UI. The [DOM](https://developer.mozilla.org/docs/Web/API/Document_Object_Model/Introduction) represents HTML elements, the [CSSOM](https://developer.mozilla.org/docs/Web/API/CSS_Object_Model) does the same for CSS. There's even an [Accessibility tree](https://developer.mozilla.org/docs/Glossary/Accessibility_tree)!","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1654":{"pageContent":"React also uses tree structures to manage and model the UI you make. React makes **UI trees** from your JSX. Then React DOM updates the browser DOM elements to match that UI tree. (React Native translates these trees into elements specific to mobile platforms.)\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1655":{"pageContent":"<DiagramGroup>\n\n<Diagram name=\"preserving_state_dom_tree\" height={193} width={864} alt=\"Diagram with three sections arranged horizontally. In the first section, there are three rectangles stacked vertically, with labels 'Component A', 'Component B', and 'Component C'. Transitioning to the next pane is an arrow with the React logo on top labeled 'React'. The middle section contains a tree of components, with the root labeled 'A' and two children labeled 'B' and 'C'. The next section is again transitioned using an arrow with the React logo on top labeled 'React'. The third and final section is a wireframe of a browser, containing a tree of 8 nodes, which has only a subset highlighted (indicating the subtree from the middle section).\">\n\nFrom components, React creates a UI tree which React DOM uses to render the DOM\n\n</Diagram>\n\n</DiagramGroup>\n\n## State is tied to a position in the tree {/*state-is-tied-to-a-position-in-the-tree*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1656":{"pageContent":"From components, React creates a UI tree which React DOM uses to render the DOM\n\n</Diagram>\n\n</DiagramGroup>\n\n## State is tied to a position in the tree {/*state-is-tied-to-a-position-in-the-tree*/}\n\nWhen you give a component state, you might think the state \"lives\" inside the component. But the state is actually held inside React. React associates each piece of state it's holding with the correct component by where that component sits in the UI tree.\n\nHere, there is only one `<Counter />` JSX tag, but it's rendered at two different positions:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst counter = <Counter />;\n\nreturn (\n\n<div>\n\n{counter}\n\n{counter}\n\n</div>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1657":{"pageContent":"let className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nHere's how these look as a tree:\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_tree\" height={248} width={395} alt=\"Diagram of a tree of React components. The root node is labeled 'div' and has two children. Each of the children are labeled 'Counter' and both contain a state bubble labeled 'count' with value 0.\">\n\nReact tree\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1658":{"pageContent":"React tree\n\n</Diagram>\n\n</DiagramGroup>\n\n*These are two separate counters because each is rendered at its own position in the tree.** You don't usually have to think about these positions to use React, but it can be useful to understand how it works.\n\nIn React, each component on the screen has fully isolated state. For example, if you render two `Counter` components side by side, each of them will get its own, independent, `score` and `hover` states.\n\nTry clicking both counters and notice they don't affect each other:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<Counter />\n\n<Counter />\n\n</div>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1659":{"pageContent":"}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nAs you can see, when one counter is updated, only the state for that component is updated:\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_increment\" height={248} width={441} alt=\"Diagram of a tree of React components. The root node is labeled 'div' and has two children. The left child is labeled 'Counter' and contains a state bubble labeled 'count' with value 0. The right child is labeled 'Counter' and contains a state bubble labeled 'count' with value 1. The state bubble of the right child is highlighted in yellow to indicate its value has updated.\">\n\nUpdating state\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1660":{"pageContent":"Updating state\n\n</Diagram>\n\n</DiagramGroup>\n\nReact will keep the state around for as long as you render the same component at the same position. To see this, increment both counters, then remove the second component by unchecking \"Render the second counter\" checkbox, and then add it back by ticking it again:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [showB, setShowB] = useState(true);\n\nreturn (\n\n<div>\n\n<Counter />\n\n{showB && <Counter />}\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showB}\n\nonChange={e => {\n\nsetShowB(e.target.checked)\n\n}}\n\n/>\n\nRender the second counter\n\n</label>\n\n</div>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1661":{"pageContent":"onPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nNotice how the moment you stop rendering the second counter, its state disappears completely. That's because when React removes a component, it destroys its state.\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_remove_component\" height={253} width={422} alt=\"Diagram of a tree of React components. The root node is labeled 'div' and has two children. The left child is labeled 'Counter' and contains a state bubble labeled 'count' with value 0. The right child is missing, and in its place is a yellow 'poof' image, highlighting the component being deleted from the tree.\">\n\nDeleting a component\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1662":{"pageContent":"Deleting a component\n\n</Diagram>\n\n</DiagramGroup>\n\nWhen you tick \"Render the second counter\", a second `Counter` and its state are initialized from scratch (`score = 0`) and added to the DOM.\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_add_component\" height={258} width={500} alt=\"Diagram of a tree of React components. The root node is labeled 'div' and has two children. The left child is labeled 'Counter' and contains a state bubble labeled 'count' with value 0. The right child is labeled 'Counter' and contains a state bubble labeled 'count' with value 0. The entire right child node is highlighted in yellow, indicating that it was just added to the tree.\">\n\nAdding a component\n\n</Diagram>\n\n</DiagramGroup>\n\n*React preserves a component's state for as long as it's being rendered at its position in the UI tree.** If it gets removed, or a different component gets rendered at the same position, React discards its state.","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1663":{"pageContent":"## Same component at the same position preserves state {/*same-component-at-the-same-position-preserves-state*/}\n\nIn this example, there are two different `<Counter />` tags:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [isFancy, setIsFancy] = useState(false);\n\nreturn (\n\n<div>\n\n{isFancy ? (\n\n<Counter isFancy={true} />\n\n) : (\n\n<Counter isFancy={false} />\n\n)}\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isFancy}\n\nonChange={e => {\n\nsetIsFancy(e.target.checked)\n\n}}\n\n/>\n\nUse fancy styling\n\n</label>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ isFancy }) {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nif (isFancy) {\n\nclassName += ' fancy';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1664":{"pageContent":">\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.fancy {\n\nborder: 5px solid gold;\n\ncolor: #ff6767;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nWhen you tick or clear the checkbox, the counter state does not get reset. Whether `isFancy` is `true` or `false`, you always have a `<Counter />` as the first child of the `div` returned from the root `App` component:\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1665":{"pageContent":"<DiagramGroup>\n\n<Diagram name=\"preserving_state_same_component\" height={461} width={600} alt=\"Diagram with two sections separated by an arrow transitioning between them. Each section contains a layout of components with a parent labeled 'App' containing a state bubble labeled isFancy. This component has one child labeled 'div', which leads to a prop bubble containing isFancy (highlighted in purple) passed down to the only child. The last child is labeled 'Counter' and contains a state bubble with label 'count' and value 3 in both diagrams. In the left section of the diagram, nothing is highlighted and the isFancy parent state value is false. In the right section of the diagram, the isFancy parent state value has changed to true and it is highlighted in yellow, and so is the props bubble below, which has also changed its isFancy value to true.\">\n\nUpdating the `App` state does not reset the `Counter` because `Counter` stays in the same position\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1666":{"pageContent":"Updating the `App` state does not reset the `Counter` because `Counter` stays in the same position\n\n</Diagram>\n\n</DiagramGroup>\n\nIt's the same component at the same position, so from React's perspective, it's the same counter.\n\n<Pitfall>\n\nRemember that **it's the position in the UI tree--not in the JSX markup--that matters to React!** This component has two `return` clauses with different `<Counter />` JSX tags inside and outside the `if`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [isFancy, setIsFancy] = useState(false);\n\nif (isFancy) {\n\nreturn (\n\n<div>\n\n<Counter isFancy={true} />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isFancy}\n\nonChange={e => {\n\nsetIsFancy(e.target.checked)\n\n}}\n\n/>\n\nUse fancy styling\n\n</label>\n\n</div>\n\n);\n\n}\n\nreturn (\n\n<div>\n\n<Counter isFancy={false} />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isFancy}\n\nonChange={e => {\n\nsetIsFancy(e.target.checked)\n\n}}\n\n/>\n\nUse fancy styling\n\n</label>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ isFancy }) {\n\nconst [score, setScore] = useState(0);","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1667":{"pageContent":"<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isFancy}\n\nonChange={e => {\n\nsetIsFancy(e.target.checked)\n\n}}\n\n/>\n\nUse fancy styling\n\n</label>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ isFancy }) {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nif (isFancy) {\n\nclassName += ' fancy';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.fancy {\n\nborder: 5px solid gold;\n\ncolor: #ff6767;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1668":{"pageContent":"text-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.fancy {\n\nborder: 5px solid gold;\n\ncolor: #ff6767;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nYou might expect the state to reset when you tick checkbox, but it doesn't! This is because **both of these `<Counter />` tags are rendered at the same position.** React doesn't know where you place the conditions in your function. All it \"sees\" is the tree you return. In both cases, the `App` component returns a `<div>` with `<Counter />` as a first child. This is why React considers them as _the same_ `<Counter />`.\n\nYou can think of them as having the same \"address\": the first child of the first child of the root. This is how React matches them up between the previous and next renders, regardless of how you structure your logic.\n\n</Pitfall>\n\n## Different components at the same position reset state {/*different-components-at-the-same-position-reset-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1669":{"pageContent":"</Pitfall>\n\n## Different components at the same position reset state {/*different-components-at-the-same-position-reset-state*/}\n\nIn this example, ticking the checkbox will replace `<Counter>` with a `<p>`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [isPaused, setIsPaused] = useState(false);\n\nreturn (\n\n<div>\n\n{isPaused ? (\n\n<p>See you later!</p>\n\n) : (\n\n<Counter />\n\n)}\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isPaused}\n\nonChange={e => {\n\nsetIsPaused(e.target.checked)\n\n}}\n\n/>\n\nTake a break\n\n</label>\n\n</div>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1670":{"pageContent":">\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nHere, you switch between _different_ component types at the same position. Initially, the first child of the `<div>` contained a `Counter`. But when you swapped in a `p`, React removed the `Counter` from the UI tree and destroyed its state.\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1671":{"pageContent":"<DiagramGroup>\n\n<Diagram name=\"preserving_state_diff_pt1\" height={290} width={753} alt=\"Diagram with three sections, with an arrow transitioning each section in between. The first section contains a React component labeled 'div' with a single child labeled 'Counter' containing a state bubble labeled 'count' with value 3. The middle section has the same 'div' parent, but the child component has now been deleted, indicated by a yellow 'proof' image. The third section has the same 'div' parent again, now with a new child labeled 'p', highlighted in yellow.\">\n\nWhen `Counter` changes to `p`, the `Counter` is deleted and the `p` is added\n\n</Diagram>\n\n</DiagramGroup>\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1672":{"pageContent":"When `Counter` changes to `p`, the `Counter` is deleted and the `p` is added\n\n</Diagram>\n\n</DiagramGroup>\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_diff_pt2\" height={290} width={753} alt=\"Diagram with three sections, with an arrow transitioning each section in between. The first section contains a React component labeled 'p'. The middle section has the same 'div' parent, but the child component has now been deleted, indicated by a yellow 'proof' image. The third section has the same 'div' parent again, now with a new child labeled 'Counter' containing a state bubble labeled 'count' with value 0, highlighted in yellow.\">\n\nWhen switching back, the `p` is deleted and the `Counter` is added\n\n</Diagram>\n\n</DiagramGroup>\n\nAlso, **when you render a different component in the same position, it resets the state of its entire subtree.** To see how this works, increment the counter and then tick the checkbox:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1673":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [isFancy, setIsFancy] = useState(false);\n\nreturn (\n\n<div>\n\n{isFancy ? (\n\n<div>\n\n<Counter isFancy={true} />\n\n</div>\n\n) : (\n\n<section>\n\n<Counter isFancy={false} />\n\n</section>\n\n)}\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isFancy}\n\nonChange={e => {\n\nsetIsFancy(e.target.checked)\n\n}}\n\n/>\n\nUse fancy styling\n\n</label>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ isFancy }) {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nif (isFancy) {\n\nclassName += ' fancy';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nclear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.fancy {\n\nborder: 5px solid gold;\n\ncolor: #ff6767;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1674":{"pageContent":"clear: both;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\nfloat: left;\n\n}\n\n.fancy {\n\nborder: 5px solid gold;\n\ncolor: #ff6767;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nThe counter state gets reset when you click the checkbox. Although you render a `Counter`, the first child of the `div` changes from a `div` to a `section`. When the child `div` was removed from the DOM, the whole tree below it (including the `Counter` and its state) was destroyed as well.\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1675":{"pageContent":"<DiagramGroup>\n\n<Diagram name=\"preserving_state_diff_same_pt1\" height={350} width={794} alt=\"Diagram with three sections, with an arrow transitioning each section in between. The first section contains a React component labeled 'div' with a single child labeled 'section', which has a single child labeled 'Counter' containing a state bubble labeled 'count' with value 3. The middle section has the same 'div' parent, but the child components have now been deleted, indicated by a yellow 'proof' image. The third section has the same 'div' parent again, now with a new child labeled 'div', highlighted in yellow, also with a new child labeled 'Counter' containing a state bubble labeled 'count' with value 0, all highlighted in yellow.\">\n\nWhen `section` changes to `div`, the `section` is deleted and the new `div` is added\n\n</Diagram>\n\n</DiagramGroup>\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1676":{"pageContent":"When `section` changes to `div`, the `section` is deleted and the new `div` is added\n\n</Diagram>\n\n</DiagramGroup>\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_diff_same_pt2\" height={350} width={794} alt=\"Diagram with three sections, with an arrow transitioning each section in between. The first section contains a React component labeled 'div' with a single child labeled 'div', which has a single child labeled 'Counter' containing a state bubble labeled 'count' with value 0. The middle section has the same 'div' parent, but the child components have now been deleted, indicated by a yellow 'proof' image. The third section has the same 'div' parent again, now with a new child labeled 'section', highlighted in yellow, also with a new child labeled 'Counter' containing a state bubble labeled 'count' with value 0, all highlighted in yellow.\">\n\nWhen switching back, the `div` is deleted and the new `section` is added\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1677":{"pageContent":"When switching back, the `div` is deleted and the new `section` is added\n\n</Diagram>\n\n</DiagramGroup>\n\nAs a rule of thumb, **if you want to preserve the state between re-renders, the structure of your tree needs to \"match up\"** from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.\n\n<Pitfall>\n\nThis is why you should not nest component function definitions.\n\nHere, the `MyTextField` component function is defined *inside* `MyComponent`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MyComponent() {\n\nconst [counter, setCounter] = useState(0);\n\nfunction MyTextField() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n);\n\n}\n\nreturn (\n\n<>\n\n<MyTextField />\n\n<button onClick={() => {\n\nsetCounter(counter + 1)\n\n}}>Clicked {counter} times</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1678":{"pageContent":"return (\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n);\n\n}\n\nreturn (\n\n<>\n\n<MyTextField />\n\n<button onClick={() => {\n\nsetCounter(counter + 1)\n\n}}>Clicked {counter} times</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nEvery time you click the button, the input state disappears! This is because a *different* `MyTextField` function is created for every render of `MyComponent`. You're rendering a *different* component in the same position, so React resets all state below. This leads to bugs and performance problems. To avoid this problem, **always declare component functions at the top level, and don't nest their definitions.**\n\n</Pitfall>\n\n## Resetting state at the same position {/*resetting-state-at-the-same-position*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1679":{"pageContent":"</Pitfall>\n\n## Resetting state at the same position {/*resetting-state-at-the-same-position*/}\n\nBy default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component's state. Consider this app that lets two players keep track of their scores during each turn:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n\nconst [isPlayerA, setIsPlayerA] = useState(true);\n\nreturn (\n\n<div>\n\n{isPlayerA ? (\n\n<Counter person=\"Taylor\" />\n\n) : (\n\n<Counter person=\"Sarah\" />\n\n)}\n\n<button onClick={() => {\n\nsetIsPlayerA(!isPlayerA);\n\n}}>\n\nNext player!\n\n</button>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ person }) {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1680":{"pageContent":"let className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{person}'s score: {score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nh1 {\n\nfont-size: 18px;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nCurrently, when you change the player, the score is preserved. The two `Counter`s appear in the same position, so React sees them as *the same* `Counter` whose `person` prop has changed.\n\nBut conceptually, in this app they should be two separate counters. They might appear in the same place in the UI, but one is a counter for Taylor, and another is a counter for Sarah.\n\nThere are two ways to reset state when switching between them:\n\n1. Render components in different positions\n\n2. Give each component an explicit identity with `key`","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1681":{"pageContent":"There are two ways to reset state when switching between them:\n\n1. Render components in different positions\n\n2. Give each component an explicit identity with `key`\n\n### Option 1: Rendering a component in different positions {/*option-1-rendering-a-component-in-different-positions*/}\n\nIf you want these two `Counter`s to be independent, you can render them in two different positions:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n\nconst [isPlayerA, setIsPlayerA] = useState(true);\n\nreturn (\n\n<div>\n\n{isPlayerA &&\n\n<Counter person=\"Taylor\" />\n\n}\n\n{!isPlayerA &&\n\n<Counter person=\"Sarah\" />\n\n}\n\n<button onClick={() => {\n\nsetIsPlayerA(!isPlayerA);\n\n}}>\n\nNext player!\n\n</button>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ person }) {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1682":{"pageContent":"let className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{person}'s score: {score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nh1 {\n\nfont-size: 18px;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nInitially, `isPlayerA` is `true`. So the first position contains `Counter` state, and the second one is empty.\n\nWhen you click the \"Next player\" button the first position clears but the second one now contains a `Counter`.\n\n<DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1683":{"pageContent":"When you click the \"Next player\" button the first position clears but the second one now contains a `Counter`.\n\n<DiagramGroup>\n\n<Diagram name=\"preserving_state_diff_position_p1\" height={375} width={504} alt=\"Diagram with a tree of React components. The parent is labeled 'Scoreboard' with a state bubble labeled isPlayerA with value 'true'. The only child, arranged to the left, is labeled Counter with a state bubble labeled 'count' and value 0. All of the left child is highlighted in yellow, indicating it was added.\">\n\nInitial state\n\n</Diagram>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1684":{"pageContent":"Initial state\n\n</Diagram>\n\n<Diagram name=\"preserving_state_diff_position_p2\" height={375} width={504} alt=\"Diagram with a tree of React components. The parent is labeled 'Scoreboard' with a state bubble labeled isPlayerA with value 'false'. The state bubble is highlighted in yellow, indicating that it has changed. The left child is replaced with a yellow 'poof' image indicating that it has been deleted and there is a new child on the right, highlighted in yellow indicating that it was added. The new child is labeled 'Counter' and contains a state bubble labeled 'count' with value 0.\">\n\nClicking \"next\"\n\n</Diagram>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1685":{"pageContent":"Clicking \"next\"\n\n</Diagram>\n\n<Diagram name=\"preserving_state_diff_position_p3\" height={375} width={504} alt=\"Diagram with a tree of React components. The parent is labeled 'Scoreboard' with a state bubble labeled isPlayerA with value 'true'. The state bubble is highlighted in yellow, indicating that it has changed. There is a new child on the left, highlighted in yellow indicating that it was added. The new child is labeled 'Counter' and contains a state bubble labeled 'count' with value 0. The right child is replaced with a yellow 'poof' image indicating that it has been deleted.\">\n\nClicking \"next\" again\n\n</Diagram>\n\n</DiagramGroup>\n\n> Each `Counter`'s state gets destroyed each time its removed from the DOM. This is why they reset every time you click the button.\n\nThis solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it's not a hassle to render both separately in the JSX.","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1686":{"pageContent":"This solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it's not a hassle to render both separately in the JSX.\n\n### Option 2: Resetting state with a key {/*option-2-resetting-state-with-a-key*/}\n\nThere is also another, more generic, way to reset a component's state.\n\nYou might have seen `key`s when [rendering lists.](/learn/rendering-lists#keeping-list-items-in-order-with-key) Keys aren't just for lists! You can use keys to make React distinguish between any components. By default, React uses order within the parent (\"first counter\", \"second counter\") to discern between components. But keys let you tell React that this is not just a *first* counter, or a *second* counter, but a specific counter--for example, *Taylor's* counter. This way, React will know *Taylor's* counter wherever it appears in the tree!","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1687":{"pageContent":"In this example, the two `<Counter />`s don't share state even though they appear in the same place in JSX:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Scoreboard() {\n\nconst [isPlayerA, setIsPlayerA] = useState(true);\n\nreturn (\n\n<div>\n\n{isPlayerA ? (\n\n<Counter key=\"Taylor\" person=\"Taylor\" />\n\n) : (\n\n<Counter key=\"Sarah\" person=\"Sarah\" />\n\n)}\n\n<button onClick={() => {\n\nsetIsPlayerA(!isPlayerA);\n\n}}>\n\nNext player!\n\n</button>\n\n</div>\n\n);\n\n}\n\nfunction Counter({ person }) {\n\nconst [score, setScore] = useState(0);\n\nconst [hover, setHover] = useState(false);\n\nlet className = 'counter';\n\nif (hover) {\n\nclassName += ' hover';\n\n}\n\nreturn (\n\n<div\n\nclassName={className}\n\nonPointerEnter={() => setHover(true)}\n\nonPointerLeave={() => setHover(false)}\n\n>\n\n<h1>{person}'s score: {score}</h1>\n\n<button onClick={() => setScore(score + 1)}>\n\nAdd one\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nh1 {\n\nfont-size: 18px;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1688":{"pageContent":"</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nh1 {\n\nfont-size: 18px;\n\n}\n\n.counter {\n\nwidth: 100px;\n\ntext-align: center;\n\nborder: 1px solid gray;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin: 0 20px 20px 0;\n\n}\n\n.hover {\n\nbackground: #ffffd8;\n\n}\n\n```\n\n</Sandpack>\n\nSwitching between Taylor and Sarah does not preserve the state. This is because **you gave them different `key`s:**\n\n```js\n\n{isPlayerA ? (\n\n<Counter key=\"Taylor\" person=\"Taylor\" />\n\n) : (\n\n<Counter key=\"Sarah\" person=\"Sarah\" />\n\n)}\n\n```\n\nSpecifying a `key` tells React to use the `key` itself as part of the position, instead of their order within the parent. This is why, even though you render them in the same place in JSX, from React's perspective, these are two different counters. As a result, they will never share state. Every time a counter appears on the screen, its state is created. Every time it is removed, its state is destroyed. Toggling between them resets their state over and over.\n\n> Remember that keys are not globally unique. They only specify the position *within the parent*.","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1689":{"pageContent":"> Remember that keys are not globally unique. They only specify the position *within the parent*.\n\n### Resetting a form with a key {/*resetting-a-form-with-a-key*/}\n\nResetting state with a key is particularly useful when dealing with forms.\n\nIn this chat app, the `<Chat>` component contains the text input state:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n\nconst [to, setTo] = useState(contacts[0]);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedContact={to}\n\nonSelect={contact => setTo(contact)}\n\n/>\n\n<Chat contact={to} />\n\n</div>\n\n)\n\n}\n\nconst contacts = [\n\n{ id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n\n{ id: 1, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\nselectedContact,\n\ncontacts,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1690":{"pageContent":"];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\nselectedContact,\n\ncontacts,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact);\n\n}}>\n\n{contact.name}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={text}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat, .contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1691":{"pageContent":".chat, .contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\nTry entering something into the input, and then press \"Alice\" or \"Bob\" to choose a different recipient. You will notice that the input state is preserved because the `<Chat>` is rendered at the same position in the tree.\n\n*In many apps, this may be the desired behavior, but not in a chat app!** You don't want to let the user send a message they already typed to a wrong person due to an accidental click. To fix it, add a `key`:\n\n```js\n\n<Chat key={to.id} contact={to} />\n\n```\n\nThis ensures that when you select a different recipient, the `Chat` component will be recreated from scratch, including any state in the tree below it. React will also re-create the DOM elements instead of reusing them.\n\nNow switching the recipient always clears the text field:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1692":{"pageContent":"Now switching the recipient always clears the text field:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Chat from './Chat.js';\n\nimport ContactList from './ContactList.js';\n\nexport default function Messenger() {\n\nconst [to, setTo] = useState(contacts[0]);\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedContact={to}\n\nonSelect={contact => setTo(contact)}\n\n/>\n\n<Chat key={to.id} contact={to} />\n\n</div>\n\n)\n\n}\n\nconst contacts = [\n\n{ id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n\n{ id: 1, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\nselectedContact,\n\ncontacts,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section className=\"contact-list\">\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact);\n\n}}>\n\n{contact.name}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1693":{"pageContent":"}}>\n\n{contact.name}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Chat.js\n\nimport { useState } from 'react';\n\nexport default function Chat({ contact }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<section className=\"chat\">\n\n<textarea\n\nvalue={text}\n\nplaceholder={'Chat to ' + contact.name}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<br />\n\n<button>Send to {contact.email}</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\n.chat, .contact-list {\n\nfloat: left;\n\nmargin-bottom: 20px;\n\n}\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli button {\n\nwidth: 100px;\n\npadding: 10px;\n\nmargin-right: 10px;\n\n}\n\ntextarea {\n\nheight: 150px;\n\n}\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Preserving state for removed components {/*preserving-state-for-removed-components*/}\n\nIn a real chat app, you'd probably want to recover the input state when the user selects the previous recipient again. There are a few ways to keep the state \"alive\" for a component that's no longer visible:","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1694":{"pageContent":"You could render _all_ chats instead of just the current one, but hide all the others with CSS. The chats would not get removed from the tree, so their local state would be preserved. This solution works great for simple UIs. But it can get very slow if the hidden trees are large and contain a lot of DOM nodes.\n\nYou could [lift the state up](/learn/sharing-state-between-components) and hold the pending message for each recipient in the parent component. This way, when the child components get removed, it doesn't matter, because it's the parent that keeps the important information. This is the most common solution.","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1695":{"pageContent":"You might also use a different source in addition to React state. For example, you probably want a message draft to persist even if the user accidentally closes the page. To implement this, you could have the `Chat` component initialize its state by reading from the [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), and save the drafts there too.\n\nNo matter which strategy you pick, a chat _with Alice_ is conceptually distinct from a chat _with Bob_, so it makes sense to give a `key` to the `<Chat>` tree based on the current recipient.\n\n</DeepDive>\n\n<Recap>\n\nReact keeps state for as long as the same component is rendered at the same position.\n\nState is not kept in JSX tags. It's associated with the tree position in which you put that JSX.\n\nYou can force a subtree to reset its state by giving it a different key.\n\nDon't nest component definitions, or you'll reset state by accident.\n\n</Recap>\n\n<Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1696":{"pageContent":"You can force a subtree to reset its state by giving it a different key.\n\nDon't nest component definitions, or you'll reset state by accident.\n\n</Recap>\n\n<Challenges>\n\n#### Fix disappearing input text {/*fix-disappearing-input-text*/}\n\nThis example shows a message when you press the button. However, pressing the button also accidentally resets the input. Why does this happen? Fix it so that pressing the button does not reset the input text.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [showHint, setShowHint] = useState(false);\n\nif (showHint) {\n\nreturn (\n\n<div>\n\n<p><i>Hint: Your favorite city?</i></p>\n\n<Form />\n\n<button onClick={() => {\n\nsetShowHint(false);\n\n}}>Hide hint</button>\n\n</div>\n\n);\n\n}\n\nreturn (\n\n<div>\n\n<Form />\n\n<button onClick={() => {\n\nsetShowHint(true);\n\n}}>Show hint</button>\n\n</div>\n\n);\n\n}\n\nfunction Form() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<textarea\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\ntextarea { display: block; margin: 10px 0; }\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1697":{"pageContent":"</div>\n\n);\n\n}\n\nfunction Form() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<textarea\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\ntextarea { display: block; margin: 10px 0; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem is that `Form` is rendered in different positions. In the `if` branch, it is the second child of the `<div>`, but in the `else` branch, it is the first child. Therefore, the component type in each position changes. The first position changes between holding a `p` and a `Form`, while the second position changes between holding a `Form` and a `button`. React resets the state every time the component type changes.\n\nThe easiest solution is to unify the branches so that `Form` always renders in the same position:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [showHint, setShowHint] = useState(false);\n\nreturn (\n\n<div>\n\n{showHint &&\n\n<p><i>Hint: Your favorite city?</i></p>\n\n}\n\n<Form />\n\n{showHint ? (\n\n<button onClick={() => {\n\nsetShowHint(false);","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1698":{"pageContent":"const [showHint, setShowHint] = useState(false);\n\nreturn (\n\n<div>\n\n{showHint &&\n\n<p><i>Hint: Your favorite city?</i></p>\n\n}\n\n<Form />\n\n{showHint ? (\n\n<button onClick={() => {\n\nsetShowHint(false);\n\n}}>Hide hint</button>\n\n) : (\n\n<button onClick={() => {\n\nsetShowHint(true);\n\n}}>Show hint</button>\n\n)}\n\n</div>\n\n);\n\n}\n\nfunction Form() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<textarea\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\ntextarea { display: block; margin: 10px 0; }\n\n```\n\n</Sandpack>\n\nTechnically, you could also add `null` before `<Form />` in the `else` branch to match the `if` branch structure:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [showHint, setShowHint] = useState(false);\n\nif (showHint) {\n\nreturn (\n\n<div>\n\n<p><i>Hint: Your favorite city?</i></p>\n\n<Form />\n\n<button onClick={() => {\n\nsetShowHint(false);\n\n}}>Hide hint</button>\n\n</div>\n\n);\n\n}\n\nreturn (\n\n<div>\n\n{null}\n\n<Form />\n\n<button onClick={() => {\n\nsetShowHint(true);\n\n}}>Show hint</button>\n\n</div>\n\n);\n\n}\n\nfunction Form() {","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1699":{"pageContent":"<Form />\n\n<button onClick={() => {\n\nsetShowHint(false);\n\n}}>Hide hint</button>\n\n</div>\n\n);\n\n}\n\nreturn (\n\n<div>\n\n{null}\n\n<Form />\n\n<button onClick={() => {\n\nsetShowHint(true);\n\n}}>Show hint</button>\n\n</div>\n\n);\n\n}\n\nfunction Form() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<textarea\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\ntextarea { display: block; margin: 10px 0; }\n\n```\n\n</Sandpack>\n\nThis way, `Form` is always the second child, so it stays in the same position and keeps its state. But this approach is much less obvious and introduces a risk that someone else will remove that `null`.\n\n</Solution>\n\n#### Swap two form fields {/*swap-two-form-fields*/}\n\nThis form lets you enter first and last name. It also has a checkbox controlling which field goes first. When you tick the checkbox, the \"Last name\" field will appear before the \"First name\" field.","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1700":{"pageContent":"This form lets you enter first and last name. It also has a checkbox controlling which field goes first. When you tick the checkbox, the \"Last name\" field will appear before the \"First name\" field.\n\nIt almost works, but there is a bug. If you fill in the \"First name\" input and tick the checkbox, the text will stay in the first input (which is now \"Last name\"). Fix it so that the input text *also* moves when you reverse the order.\n\n<Hint>\n\nIt seems like for these fields, their position within the parent is not enough. Is there some way to tell React how to match up the state between re-renders?\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [reverse, setReverse] = useState(false);\n\nlet checkbox = (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={reverse}\n\nonChange={e => setReverse(e.target.checked)}\n\n/>\n\nReverse order\n\n</label>\n\n);\n\nif (reverse) {\n\nreturn (\n\n<>\n\n<Field label=\"Last name\" />\n\n<Field label=\"First name\" />\n\n{checkbox}\n\n</>\n\n);\n\n} else {\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1701":{"pageContent":"checked={reverse}\n\nonChange={e => setReverse(e.target.checked)}\n\n/>\n\nReverse order\n\n</label>\n\n);\n\nif (reverse) {\n\nreturn (\n\n<>\n\n<Field label=\"Last name\" />\n\n<Field label=\"First name\" />\n\n{checkbox}\n\n</>\n\n);\n\n} else {\n\nreturn (\n\n<>\n\n<Field label=\"First name\" />\n\n<Field label=\"Last name\" />\n\n{checkbox}\n\n</>\n\n);\n\n}\n\n}\n\nfunction Field({ label }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<label>\n\n{label}:{' '}\n\n<input\n\ntype=\"text\"\n\nvalue={text}\n\nplaceholder={label}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin: 10px 0; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nGive a `key` to both `<Field>` components in both `if` and `else` branches. This tells React how to \"match up\" the correct state for either `<Field>` even if their order within the parent changes:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [reverse, setReverse] = useState(false);\n\nlet checkbox = (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={reverse}\n\nonChange={e => setReverse(e.target.checked)}\n\n/>\n\nReverse order\n\n</label>\n\n);","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1702":{"pageContent":"const [reverse, setReverse] = useState(false);\n\nlet checkbox = (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={reverse}\n\nonChange={e => setReverse(e.target.checked)}\n\n/>\n\nReverse order\n\n</label>\n\n);\n\nif (reverse) {\n\nreturn (\n\n<>\n\n<Field key=\"lastName\" label=\"Last name\" />\n\n<Field key=\"firstName\" label=\"First name\" />\n\n{checkbox}\n\n</>\n\n);\n\n} else {\n\nreturn (\n\n<>\n\n<Field key=\"firstName\" label=\"First name\" />\n\n<Field key=\"lastName\" label=\"Last name\" />\n\n{checkbox}\n\n</>\n\n);\n\n}\n\n}\n\nfunction Field({ label }) {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<label>\n\n{label}:{' '}\n\n<input\n\ntype=\"text\"\n\nvalue={text}\n\nplaceholder={label}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin: 10px 0; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Reset a detail form {/*reset-a-detail-form*/}\n\nThis is an editable contact list. You can edit the selected contact's details and then either press \"Save\" to update it, or \"Reset\" to undo your changes.","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1703":{"pageContent":"This is an editable contact list. You can edit the selected contact's details and then either press \"Save\" to update it, or \"Reset\" to undo your changes.\n\nWhen you select a different contact (for example, Alice), the state updates but the form keeps showing the previous contact's details. Fix it so that the form gets reset when the selected contact changes.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ContactList from './ContactList.js';\n\nimport EditContact from './EditContact.js';\n\nexport default function ContactManager() {\n\nconst [\n\ncontacts,\n\nsetContacts\n\n] = useState(initialContacts);\n\nconst [\n\nselectedId,\n\nsetSelectedId\n\n] = useState(0);\n\nconst selectedContact = contacts.find(c =>\n\nc.id === selectedId\n\n);\n\nfunction handleSave(updatedData) {\n\nconst nextContacts = contacts.map(c => {\n\nif (c.id === updatedData.id) {\n\nreturn updatedData;\n\n} else {\n\nreturn c;\n\n}\n\n});\n\nsetContacts(nextContacts);\n\n}\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={selectedId}\n\nonSelect={id => setSelectedId(id)}\n\n/>\n\n<hr />\n\n<EditContact","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1704":{"pageContent":"return updatedData;\n\n} else {\n\nreturn c;\n\n}\n\n});\n\nsetContacts(nextContacts);\n\n}\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={selectedId}\n\nonSelect={id => setSelectedId(id)}\n\n/>\n\n<hr />\n\n<EditContact\n\ninitialData={selectedContact}\n\nonSave={handleSave}\n\n/>\n\n</div>\n\n)\n\n}\n\nconst initialContacts = [\n\n{ id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n\n{ id: 1, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\ncontacts,\n\nselectedId,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section>\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact.id);\n\n}}>\n\n{contact.id === selectedId ?\n\n<b>{contact.name}</b> :\n\ncontact.name\n\n}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js EditContact.js\n\nimport { useState } from 'react';\n\nexport default function EditContact({ initialData, onSave }) {\n\nconst [name, setName] = useState(initialData.name);\n\nconst [email, setEmail] = useState(initialData.email);\n\nreturn (\n\n<section>\n\n<label>\n\nName:{' '}\n\n<input\n\ntype=\"text\"","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1705":{"pageContent":"const [name, setName] = useState(initialData.name);\n\nconst [email, setEmail] = useState(initialData.email);\n\nreturn (\n\n<section>\n\n<label>\n\nName:{' '}\n\n<input\n\ntype=\"text\"\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nEmail:{' '}\n\n<input\n\ntype=\"email\"\n\nvalue={email}\n\nonChange={e => setEmail(e.target.value)}\n\n/>\n\n</label>\n\n<button onClick={() => {\n\nconst updatedData = {\n\nid: initialData.id,\n\nname: name,\n\nemail: email\n\n};\n\nonSave(updatedData);\n\n}}>\n\nSave\n\n</button>\n\n<button onClick={() => {\n\nsetName(initialData.name);\n\nsetEmail(initialData.email);\n\n}}>\n\nReset\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli { display: inline-block; }\n\nli button {\n\npadding: 10px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nGive `key={selectedId}` to the `EditContact` component. This way, switching between different contacts will reset the form:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ContactList from './ContactList.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1706":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ContactList from './ContactList.js';\n\nimport EditContact from './EditContact.js';\n\nexport default function ContactManager() {\n\nconst [\n\ncontacts,\n\nsetContacts\n\n] = useState(initialContacts);\n\nconst [\n\nselectedId,\n\nsetSelectedId\n\n] = useState(0);\n\nconst selectedContact = contacts.find(c =>\n\nc.id === selectedId\n\n);\n\nfunction handleSave(updatedData) {\n\nconst nextContacts = contacts.map(c => {\n\nif (c.id === updatedData.id) {\n\nreturn updatedData;\n\n} else {\n\nreturn c;\n\n}\n\n});\n\nsetContacts(nextContacts);\n\n}\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={selectedId}\n\nonSelect={id => setSelectedId(id)}\n\n/>\n\n<hr />\n\n<EditContact\n\nkey={selectedId}\n\ninitialData={selectedContact}\n\nonSave={handleSave}\n\n/>\n\n</div>\n\n)\n\n}\n\nconst initialContacts = [\n\n{ id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n\n{ id: 1, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\ncontacts,\n\nselectedId,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1707":{"pageContent":"{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js\n\nexport default function ContactList({\n\ncontacts,\n\nselectedId,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section>\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact.id);\n\n}}>\n\n{contact.id === selectedId ?\n\n<b>{contact.name}</b> :\n\ncontact.name\n\n}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js EditContact.js\n\nimport { useState } from 'react';\n\nexport default function EditContact({ initialData, onSave }) {\n\nconst [name, setName] = useState(initialData.name);\n\nconst [email, setEmail] = useState(initialData.email);\n\nreturn (\n\n<section>\n\n<label>\n\nName:{' '}\n\n<input\n\ntype=\"text\"\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nEmail:{' '}\n\n<input\n\ntype=\"email\"\n\nvalue={email}\n\nonChange={e => setEmail(e.target.value)}\n\n/>\n\n</label>\n\n<button onClick={() => {\n\nconst updatedData = {\n\nid: initialData.id,\n\nname: name,\n\nemail: email\n\n};\n\nonSave(updatedData);\n\n}}>\n\nSave\n\n</button>\n\n<button onClick={() => {\n\nsetName(initialData.name);\n\nsetEmail(initialData.email);\n\n}}>\n\nReset","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1708":{"pageContent":"const updatedData = {\n\nid: initialData.id,\n\nname: name,\n\nemail: email\n\n};\n\nonSave(updatedData);\n\n}}>\n\nSave\n\n</button>\n\n<button onClick={() => {\n\nsetName(initialData.name);\n\nsetEmail(initialData.email);\n\n}}>\n\nReset\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli { display: inline-block; }\n\nli button {\n\npadding: 10px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Clear an image while it's loading {/*clear-an-image-while-its-loading*/}\n\nWhen you press \"Next\", the browser starts loading the next image. However, because it's displayed in the same `<img>` tag, by default you would still see the previous image until the next one loads. This may be undesirable if it's important for the text to always match the image. Change it so that the moment you press \"Next\", the previous image immediately clears.\n\n<Hint>\n\nIs there a way to tell React to re-create the DOM instead of reusing it?\n\n</Hint>\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1709":{"pageContent":"<Hint>\n\nIs there a way to tell React to re-create the DOM instead of reusing it?\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst hasNext = index < images.length - 1;\n\nfunction handleClick() {\n\nif (hasNext) {\n\nsetIndex(index + 1);\n\n} else {\n\nsetIndex(0);\n\n}\n\n}\n\nlet image = images[index];\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nNext\n\n</button>\n\n<h3>\n\nImage {index + 1} of {images.length}\n\n</h3>\n\n<img src={image.src} />\n\n<p>\n\n{image.place}\n\n</p>\n\n</>\n\n);\n\n}\n\nlet images = [{\n\nplace: 'Penang, Malaysia',\n\nsrc: 'https://i.imgur.com/FJeJR8M.jpg'\n\n}, {\n\nplace: 'Lisbon, Portugal',\n\nsrc: 'https://i.imgur.com/dB2LRbj.jpg'\n\n}, {\n\nplace: 'Bilbao, Spain',\n\nsrc: 'https://i.imgur.com/z08o2TS.jpg'\n\n}, {\n\nplace: 'Valparaíso, Chile',\n\nsrc: 'https://i.imgur.com/Y3utgTi.jpg'\n\n}, {\n\nplace: 'Schwyz, Switzerland',\n\nsrc: 'https://i.imgur.com/JBbMpWY.jpg'\n\n}, {\n\nplace: 'Prague, Czechia',\n\nsrc: 'https://i.imgur.com/QwUKKmF.jpg'\n\n}, {\n\nplace: 'Ljubljana, Slovenia',\n\nsrc: 'https://i.imgur.com/3aIiwfm.jpg'\n\n}];\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1710":{"pageContent":"src: 'https://i.imgur.com/JBbMpWY.jpg'\n\n}, {\n\nplace: 'Prague, Czechia',\n\nsrc: 'https://i.imgur.com/QwUKKmF.jpg'\n\n}, {\n\nplace: 'Ljubljana, Slovenia',\n\nsrc: 'https://i.imgur.com/3aIiwfm.jpg'\n\n}];\n\n```\n\n```css\n\nimg { width: 150px; height: 150px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can provide a `key` to the `<img>` tag. When that `key` changes, React will re-create the `<img>` DOM node from scratch. This causes a brief flash when each image loads, so it's not something you'd want to do for every image in your app. But it makes sense if you want to ensure the image always matches the text.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Gallery() {\n\nconst [index, setIndex] = useState(0);\n\nconst hasNext = index < images.length - 1;\n\nfunction handleClick() {\n\nif (hasNext) {\n\nsetIndex(index + 1);\n\n} else {\n\nsetIndex(0);\n\n}\n\n}\n\nlet image = images[index];\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nNext\n\n</button>\n\n<h3>\n\nImage {index + 1} of {images.length}\n\n</h3>\n\n<img key={image.src} src={image.src} />\n\n<p>\n\n{image.place}\n\n</p>\n\n</>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1711":{"pageContent":"}\n\n}\n\nlet image = images[index];\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nNext\n\n</button>\n\n<h3>\n\nImage {index + 1} of {images.length}\n\n</h3>\n\n<img key={image.src} src={image.src} />\n\n<p>\n\n{image.place}\n\n</p>\n\n</>\n\n);\n\n}\n\nlet images = [{\n\nplace: 'Penang, Malaysia',\n\nsrc: 'https://i.imgur.com/FJeJR8M.jpg'\n\n}, {\n\nplace: 'Lisbon, Portugal',\n\nsrc: 'https://i.imgur.com/dB2LRbj.jpg'\n\n}, {\n\nplace: 'Bilbao, Spain',\n\nsrc: 'https://i.imgur.com/z08o2TS.jpg'\n\n}, {\n\nplace: 'Valparaíso, Chile',\n\nsrc: 'https://i.imgur.com/Y3utgTi.jpg'\n\n}, {\n\nplace: 'Schwyz, Switzerland',\n\nsrc: 'https://i.imgur.com/JBbMpWY.jpg'\n\n}, {\n\nplace: 'Prague, Czechia',\n\nsrc: 'https://i.imgur.com/QwUKKmF.jpg'\n\n}, {\n\nplace: 'Ljubljana, Slovenia',\n\nsrc: 'https://i.imgur.com/3aIiwfm.jpg'\n\n}];\n\n```\n\n```css\n\nimg { width: 150px; height: 150px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix misplaced state in the list {/*fix-misplaced-state-in-the-list*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1712":{"pageContent":"src: 'https://i.imgur.com/3aIiwfm.jpg'\n\n}];\n\n```\n\n```css\n\nimg { width: 150px; height: 150px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix misplaced state in the list {/*fix-misplaced-state-in-the-list*/}\n\nIn this list, each `Contact` has state that determines whether \"Show email\" has been pressed for it. Press \"Show email\" for Alice, and then tick the \"Show in reverse order\" checkbox. You will notice that it's _Taylor's_ email that is expanded now, but Alice's--which has moved to the bottom--appears collapsed.\n\nFix it so that the expanded state is associated with each contact, regardless of the chosen ordering.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Contact from './Contact.js';\n\nexport default function ContactList() {\n\nconst [reverse, setReverse] = useState(false);\n\nconst displayedContacts = [...contacts];\n\nif (reverse) {\n\ndisplayedContacts.reverse();\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nvalue={reverse}\n\nonChange={e => {\n\nsetReverse(e.target.checked)\n\n}}\n\n/>{' '}\n\nShow in reverse order\n\n</label>\n\n<ul>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1713":{"pageContent":"if (reverse) {\n\ndisplayedContacts.reverse();\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nvalue={reverse}\n\nonChange={e => {\n\nsetReverse(e.target.checked)\n\n}}\n\n/>{' '}\n\nShow in reverse order\n\n</label>\n\n<ul>\n\n{displayedContacts.map((contact, i) =>\n\n<li key={i}>\n\n<Contact contact={contact} />\n\n</li>\n\n)}\n\n</ul>\n\n</>\n\n);\n\n}\n\nconst contacts = [\n\n{ id: 0, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 1, name: 'Bob', email: 'bob@mail.com' },\n\n{ id: 2, name: 'Taylor', email: 'taylor@mail.com' }\n\n];\n\n```\n\n```js Contact.js\n\nimport { useState } from 'react';\n\nexport default function Contact({ contact }) {\n\nconst [expanded, setExpanded] = useState(false);\n\nreturn (\n\n<>\n\n<p><b>{contact.name}</b></p>\n\n{expanded &&\n\n<p><i>{contact.email}</i></p>\n\n}\n\n<button onClick={() => {\n\nsetExpanded(!expanded);\n\n}}>\n\n{expanded ? 'Hide' : 'Show'} email\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli {\n\nmargin-bottom: 20px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1714":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli {\n\nmargin-bottom: 20px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem is that this example was using index as a `key`:\n\n```js\n\n{displayedContacts.map((contact, i) =>\n\n<li key={i}>\n\n```\n\nHowever, you want the state to be associated with _each particular contact_.\n\nUsing the contact ID as a `key` instead fixes the issue:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport Contact from './Contact.js';\n\nexport default function ContactList() {\n\nconst [reverse, setReverse] = useState(false);\n\nconst displayedContacts = [...contacts];\n\nif (reverse) {\n\ndisplayedContacts.reverse();\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nvalue={reverse}\n\nonChange={e => {\n\nsetReverse(e.target.checked)\n\n}}\n\n/>{' '}\n\nShow in reverse order\n\n</label>\n\n<ul>\n\n{displayedContacts.map(contact =>\n\n<li key={contact.id}>\n\n<Contact contact={contact} />\n\n</li>\n\n)}\n\n</ul>\n\n</>\n\n);\n\n}\n\nconst contacts = [","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1715":{"pageContent":"setReverse(e.target.checked)\n\n}}\n\n/>{' '}\n\nShow in reverse order\n\n</label>\n\n<ul>\n\n{displayedContacts.map(contact =>\n\n<li key={contact.id}>\n\n<Contact contact={contact} />\n\n</li>\n\n)}\n\n</ul>\n\n</>\n\n);\n\n}\n\nconst contacts = [\n\n{ id: 0, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 1, name: 'Bob', email: 'bob@mail.com' },\n\n{ id: 2, name: 'Taylor', email: 'taylor@mail.com' }\n\n];\n\n```\n\n```js Contact.js\n\nimport { useState } from 'react';\n\nexport default function Contact({ contact }) {\n\nconst [expanded, setExpanded] = useState(false);\n\nreturn (\n\n<>\n\n<p><b>{contact.name}</b></p>\n\n{expanded &&\n\n<p><i>{contact.email}</i></p>\n\n}\n\n<button onClick={() => {\n\nsetExpanded(!expanded);\n\n}}>\n\n{expanded ? 'Hide' : 'Show'} email\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli {\n\nmargin-bottom: 20px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\nState is associated with the tree position. A `key` lets you specify a named position instead of relying on order.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/preserving-and-resetting-state.md"}},"1716":{"pageContent":"--\n\ntitle: Importing and Exporting Components\n\n--\n\n<Intro>\n\nThe magic of components lies in their reusability: you can create components that are composed of other components. But as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat a root component file is\n\nHow to import and export a component\n\nWhen to use default and named imports and exports\n\nHow to import and export multiple components from one file\n\nHow to split components into multiple files\n\n</YouWillLearn>\n\n## The root component file {/*the-root-component-file*/}\n\nIn [Your First Component](/learn/your-first-component), you made a `Profile` component and a `Gallery` component that renders it:\n\n<Sandpack>\n\n```js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/MK3eW3As.jpg\"\n\nalt=\"Katherine Johnson\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1717":{"pageContent":"```js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/MK3eW3As.jpg\"\n\nalt=\"Katherine Johnson\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\nThese currently live in a **root component file,** named `App.js` in this example. In [Create React App](https://create-react-app.dev/), your app lives in `src/App.js`. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page.\n\n## Exporting and importing a component {/*exporting-and-importing-a-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1718":{"pageContent":"## Exporting and importing a component {/*exporting-and-importing-a-component*/}\n\nWhat if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move `Gallery` and `Profile` out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:\n\n1. **Make** a new JS file to put the components in.\n\n2. **Export** your function component from that file (using either [default](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_the_default_export) or [named](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/export#using_named_exports) exports).","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1719":{"pageContent":"3. **Import** it in the file where you’ll use the component (using the corresponding technique for importing [default](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#importing_defaults) or [named](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import#import_a_single_export_from_a_module) exports).\n\nHere both `Profile` and `Gallery` have been moved out of `App.js` into a new file called `Gallery.js`. Now you can change `App.js` to import `Gallery` from `Gallery.js`:\n\n<Sandpack>\n\n```js App.js\n\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n\nreturn (\n\n<Gallery />\n\n);\n\n}\n\n```\n\n```js Gallery.js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1720":{"pageContent":"/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\nNotice how this example is broken down into two component files now:\n\n1. `Gallery.js`:\n\nDefines the `Profile` component which is only used within the same file and is not exported.\n\nExports the `Gallery` component as a **default export.**\n\n2. `App.js`:\n\nImports `Gallery` as a **default import** from `Gallery.js`.\n\nExports the root `App` component as a **default export.**\n\n<Note>\n\nYou may encounter files that leave off the `.js` file extension like so:\n\n```js\n\nimport Gallery from './Gallery';\n\n```\n\nEither `'./Gallery.js'` or `'./Gallery'` will work with React, though the former is closer to how [native ES Modules](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Modules) work.\n\n</Note>\n\n<DeepDive>\n\n#### Default vs named exports {/*default-vs-named-exports*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1721":{"pageContent":"</Note>\n\n<DeepDive>\n\n#### Default vs named exports {/*default-vs-named-exports*/}\n\nThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. **A file can have no more than one _default_ export, but it can have as many _named_ exports as you like.**\n\n![Default and named exports](/images/docs/illustrations/i_import-export.svg)\n\nHow you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:\n\n| Syntax           | Export statement                           | Import statement                          |\n\n| -----------      | -----------                                | -----------                               |\n\n| Default  | `export default function Button() {}` | `import Button from './button.js';`     |","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1722":{"pageContent":"| Default  | `export default function Button() {}` | `import Button from './button.js';`     |\n\n| Named    | `export function Button() {}`         | `import { Button } from './button.js';` |\n\nWhen you write a _default_ import, you can put any name you want after `import`. For example, you could write `import Banana from './button.js'` instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That's why they are called _named_ imports!\n\n*People often use default exports if the file exports only one component, and use named exports if it exports multiple components and values.** Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like `export default () => {}`, are discouraged because they make debugging harder.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1723":{"pageContent":"</DeepDive>\n\n## Exporting and importing multiple components from the same file {/*exporting-and-importing-multiple-components-from-the-same-file*/}\n\nWhat if you want to show just one `Profile` instead of a gallery? You can export the `Profile` component, too. But `Gallery.js` already has a *default* export, and you can't have _two_ default exports. You could create a new file with a default export, or you could add a *named* export for `Profile`. **A file can only have one default export, but it can have numerous named exports!**\n\n> To reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. It's a matter of preference. Do what works best for you!\n\nFirst, **export** `Profile` from `Gallery.js` using a named export (no `default` keyword):\n\n```js\n\nexport function Profile() {\n\n// ...\n\n}\n\n```\n\nThen, **import** `Profile` from `Gallery.js` to `App.js` using a named import (with the curly braces):","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1724":{"pageContent":"```js\n\nexport function Profile() {\n\n// ...\n\n}\n\n```\n\nThen, **import** `Profile` from `Gallery.js` to `App.js` using a named import (with the curly braces):\n\n```js\n\nimport { Profile } from './Gallery.js';\n\n```\n\nFinally, **render** `<Profile />` from the `App` component:\n\n```js\n\nexport default function App() {\n\nreturn <Profile />;\n\n}\n\n```\n\nNow `Gallery.js` contains two exports: a default `Gallery` export, and a named `Profile` export. `App.js` imports both of them. Try editing `<Profile />` to `<Gallery />` and back in this example:\n\n<Sandpack>\n\n```js App.js\n\nimport Gallery from './Gallery.js';\n\nimport { Profile } from './Gallery.js';\n\nexport default function App() {\n\nreturn (\n\n<Profile />\n\n);\n\n}\n\n```\n\n```js Gallery.js\n\nexport function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1725":{"pageContent":"/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\nNow you're using a mix of default and named exports:\n\n`Gallery.js`:\n\nExports the `Profile` component as a **named export called `Profile`.**\n\nExports the `Gallery` component as a **default export.**\n\n`App.js`:\n\nImports `Profile` as a **named import called `Profile`** from `Gallery.js`.\n\nImports `Gallery` as a **default import** from `Gallery.js`.\n\nExports the root `App` component as a **default export.**\n\n<Recap>\n\nOn this page you learned:\n\nWhat a root component file is\n\nHow to import and export a component\n\nWhen and how to use default and named imports and exports\n\nHow to export multiple components from the same file\n\n</Recap>\n\n<Challenges>\n\n#### Split the components further {/*split-the-components-further*/}\n\nCurrently, `Gallery.js` exports both `Profile` and `Gallery`, which is a bit confusing.","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1726":{"pageContent":"</Recap>\n\n<Challenges>\n\n#### Split the components further {/*split-the-components-further*/}\n\nCurrently, `Gallery.js` exports both `Profile` and `Gallery`, which is a bit confusing.\n\nMove the `Profile` component to its own `Profile.js`, and then change the `App` component to render both `<Profile />` and `<Gallery />` one after another.\n\nYou may use either a default or a named export for `Profile`, but make sure that you use the corresponding import syntax in both `App.js` and `Gallery.js`! You can refer to the table from the deep dive above:\n\n| Syntax           | Export statement                           | Import statement                          |\n\n| -----------      | -----------                                | -----------                               |\n\n| Default  | `export default function Button() {}` | `import Button from './button.js';`     |\n\n| Named    | `export function Button() {}`         | `import { Button } from './button.js';` |\n\n<Hint>","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1727":{"pageContent":"| Default  | `export default function Button() {}` | `import Button from './button.js';`     |\n\n| Named    | `export function Button() {}`         | `import { Button } from './button.js';` |\n\n<Hint>\n\nDon't forget to import your components where they are called. Doesn't `Gallery` use `Profile`, too?\n\n</Hint>\n\n<Sandpack>\n\n```js App.js\n\nimport Gallery from './Gallery.js';\n\nimport { Profile } from './Gallery.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<Profile />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Gallery.js active\n\n// Move me to Profile.js!\n\nexport function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```js Profile.js\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\nAfter you get it working with one kind of exports, make it work with the other kind.\n\n<Solution>\n\nThis is the solution with named exports:\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1728":{"pageContent":"```\n\n</Sandpack>\n\nAfter you get it working with one kind of exports, make it work with the other kind.\n\n<Solution>\n\nThis is the solution with named exports:\n\n<Sandpack>\n\n```js App.js\n\nimport Gallery from './Gallery.js';\n\nimport { Profile } from './Profile.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<Profile />\n\n<Gallery />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Gallery.js\n\nimport { Profile } from './Profile.js';\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```js Profile.js\n\nexport function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\nThis is the solution with default exports:\n\n<Sandpack>\n\n```js App.js\n\nimport Gallery from './Gallery.js';\n\nimport Profile from './Profile.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<Profile />\n\n<Gallery />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Gallery.js\n\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1729":{"pageContent":"export default function App() {\n\nreturn (\n\n<div>\n\n<Profile />\n\n<Gallery />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Gallery.js\n\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```js Profile.js\n\nexport default function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/importing-and-exporting-components.md"}},"1730":{"pageContent":"--\n\ntitle: Render and Commit\n\n--\n\n<Intro>\n\nBefore your components are displayed on screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat rendering means in React\n\nWhen and why React renders a component\n\nThe steps involved in displaying a component on screen\n\nWhy rendering does not always produce a DOM update\n\n</YouWillLearn>\n\nImagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:\n\n1. **Triggering** a render (delivering the guest's order to the kitchen)\n\n2. **Rendering** the component (preparing the order in the kitchen)\n\n3. **Committing** to the DOM (placing the order on the table)\n\n<IllustrationBlock sequential>","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1731":{"pageContent":"2. **Rendering** the component (preparing the order in the kitchen)\n\n3. **Committing** to the DOM (placing the order on the table)\n\n<IllustrationBlock sequential>\n\n<Illustration caption=\"Trigger\" alt=\"React as a server in a restaurant, fetching orders from the users and delivering them to the Component Kitchen.\" src=\"/images/docs/illustrations/i_render-and-commit1.png\" />\n\n<Illustration caption=\"Render\" alt=\"The Card Chef gives React a fresh Card component.\" src=\"/images/docs/illustrations/i_render-and-commit2.png\" />\n\n<Illustration caption=\"Commit\" alt=\"React delivers the Card to the user at their table.\" src=\"/images/docs/illustrations/i_render-and-commit3.png\" />\n\n</IllustrationBlock>\n\n## Step 1: Trigger a render {/*step-1-trigger-a-render*/}\n\nThere are two reasons for a component to render:\n\n1. It's the component's **initial render.**\n\n2. The component's (or one of its ancestors') **state has been updated.**\n\n### Initial render {/*initial-render*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1732":{"pageContent":"1. It's the component's **initial render.**\n\n2. The component's (or one of its ancestors') **state has been updated.**\n\n### Initial render {/*initial-render*/}\n\nWhen your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it's done by calling [`createRoot`](https://beta.reactjs.org/apis/react-dom/client/createRoot) with the target DOM node, and then calling its `render` method with your component:\n\n<Sandpack>\n\n```js index.js active\n\nimport Image from './Image.js';\n\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\n\nroot.render(<Image />);\n\n```\n\n```js Image.js\n\nexport default function Image() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/ZF6s192.jpg\"\n\nalt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n\n/>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTry commenting out the `root.render()` call and see the component disappear!","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1733":{"pageContent":"/>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nTry commenting out the `root.render()` call and see the component disappear!\n\n### Re-renders when state updates {/*re-renders-when-state-updates*/}\n\nOnce the component has been initially rendered, you can trigger further renders by updating its state with the [`set` function.](/reference/react/useState#setstate) Updating your component's state automatically queues a render. (You can imagine these as a restaurant guest ordering tea, dessert, and all sorts of things after putting in their first order, depending on the state of their thirst or hunger.)\n\n<IllustrationBlock sequential>\n\n<Illustration caption=\"State update...\" alt=\"React as a server in a restaurant, serving a Card UI to the user, represented as a patron with a cursor for their head. They patron expresses they want a pink card, not a black one!\" src=\"/images/docs/illustrations/i_rerender1.png\" />","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1734":{"pageContent":"<Illustration caption=\"...triggers...\" alt=\"React returns to the Component Kitchen and tells the Card Chef they need a pink Card.\" src=\"/images/docs/illustrations/i_rerender2.png\" />\n\n<Illustration caption=\"...render!\" alt=\"The Card Chef gives React the pink Card.\" src=\"/images/docs/illustrations/i_rerender3.png\" />\n\n</IllustrationBlock>\n\n## Step 2: React renders your components {/*step-2-react-renders-your-components*/}\n\nAfter you trigger a render, React calls your components to figure out what to display on screen. **\"Rendering\" is React calling your components.**\n\n**On initial render,** React will call the root component.\n\n**For subsequent renders,** React will call the function component whose state update triggered the render.","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1735":{"pageContent":"**On initial render,** React will call the root component.\n\n**For subsequent renders,** React will call the function component whose state update triggered the render.\n\nThis process is recursive: if the updated component returns some other component, React will render _that_ component next, and if that component also returns something, it will render _that_ component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.\n\nIn the following example, React will call `Gallery()` and  `Image()` several times:\n\n<Sandpack>\n\n```js Gallery.js active\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Inspiring Sculptures</h1>\n\n<Image />\n\n<Image />\n\n<Image />\n\n</section>\n\n);\n\n}\n\nfunction Image() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/ZF6s192.jpg\"\n\nalt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n\n/>\n\n);\n\n}\n\n```\n\n```js index.js\n\nimport Gallery from './Gallery.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1736":{"pageContent":"src=\"https://i.imgur.com/ZF6s192.jpg\"\n\nalt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"\n\n/>\n\n);\n\n}\n\n```\n\n```js index.js\n\nimport Gallery from './Gallery.js';\n\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'))\n\nroot.render(<Gallery />);\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; }\n\n```\n\n</Sandpack>\n\n**During the initial render,** React will [create the DOM nodes](https://developer.mozilla.org/docs/Web/API/Document/createElement) for `<section>`, `<h1>`, and three `<img>` tags.\n\n**During a re-render,** React will calculate which of their properties, if any, have changed since the previous render. It won't do anything with that information until the next step, the commit phase.\n\n<Pitfall>\n\nRendering must always be a [pure calculation](/learn/keeping-components-pure):","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1737":{"pageContent":"<Pitfall>\n\nRendering must always be a [pure calculation](/learn/keeping-components-pure):\n\n**Same inputs, same output.** Given the same inputs, a component should always return the same JSX. (When someone orders a salad with tomatoes, they should not receive a salad with onions!)\n\n**It minds its own business.** It should not change any objects or variables that existed before rendering. (One order should not change anyone else's order.)\n\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity. When developing in \"Strict Mode\", React calls each component's function twice, which can help surface mistakes caused by impure functions.\n\n</Pitfall>\n\n<DeepDive>\n\n#### Optimizing performance {/*optimizing-performance*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1738":{"pageContent":"</Pitfall>\n\n<DeepDive>\n\n#### Optimizing performance {/*optimizing-performance*/}\n\nThe default behavior of rendering all components nested within the updated component is not optimal for performance if the updated component is very high in the tree. If you run into a performance issue, there are several opt-in ways to solve it described in the [Performance](https://reactjs.org/docs/optimizing-performance.html) section. **Don't optimize prematurely!**\n\n</DeepDive>\n\n## Step 3: React commits changes to the DOM {/*step-3-react-commits-changes-to-the-dom*/}\n\nAfter rendering (calling) your components, React will modify the DOM.\n\n**For the initial render,** React will use the [`appendChild()`](https://developer.mozilla.org/docs/Web/API/Node/appendChild) DOM API to put all the DOM nodes it has created on screen.\n\n**For re-renders,** React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1739":{"pageContent":"**For re-renders,** React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.\n\n*React only changes the DOM nodes if there's a difference between renders.** For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the `<input>`, updating its `value`, but the text doesn't disappear when the component re-renders:\n\n<Sandpack>\n\n```js Clock.js active\n\nexport default function Clock({ time }) {\n\nreturn (\n\n<>\n\n<h1>{time}</h1>\n\n<input />\n\n</>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nreturn (\n\n<Clock time={time.toLocaleTimeString()} />\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1740":{"pageContent":"}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nreturn (\n\n<Clock time={time.toLocaleTimeString()} />\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis works because during this last step, React only updates the content of `<h1>` with the new `time`. It sees that the `<input>` appears in the JSX in the same place as last time, so React doesn't touch the `<input>`—or its `value`!\n\n## Epilogue: Browser paint {/*epilogue-browser-paint*/}\n\nAfter rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as \"browser rendering\", we'll refer to it as \"painting\" to avoid confusion in the rest of these docs.\n\n<Illustration alt=\"A browser painting 'still life with card element'.\" src=\"/images/docs/illustrations/i_browser-paint.png\" />\n\n<Recap>\n\nAny screen update in a React app happens in three steps:\n\n1. Trigger\n\n2. Render\n\n3. Commit\n\nYou can use Strict Mode to find mistakes in your components","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1741":{"pageContent":"<Recap>\n\nAny screen update in a React app happens in three steps:\n\n1. Trigger\n\n2. Render\n\n3. Commit\n\nYou can use Strict Mode to find mistakes in your components\n\nReact does not touch the DOM if the rendering result is the same as last time\n\n</Recap>","metadata":{"source":"reactjs.org/beta/src/content/learn/render-and-commit.md"}},"1742":{"pageContent":"--\n\ntitle: Editor Setup\n\n--\n\n<Intro>\n\nA properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you're looking to tune up your current editor, we have a few recommendations.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat the most popular editors are\n\nHow to format your code automatically\n\n</YouWillLearn>\n\n## Your editor {/*your-editor*/}\n\n[VS Code](https://code.visualstudio.com/) is one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!\n\nOther popular text editors used in the React community include:\n\n[WebStorm](https://www.jetbrains.com/webstorm/) is an integrated development environment designed specifically for JavaScript.","metadata":{"source":"reactjs.org/beta/src/content/learn/editor-setup.md"}},"1743":{"pageContent":"Other popular text editors used in the React community include:\n\n[WebStorm](https://www.jetbrains.com/webstorm/) is an integrated development environment designed specifically for JavaScript.\n\n[Sublime Text](https://www.sublimetext.com/) has support for JSX and TypeScript, [syntax highlighting](https://stackoverflow.com/a/70960574/458193) and autocomplete built in.\n\n[Vim](https://www.vim.org/) is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as \"vi\" with most UNIX systems and with Apple OS X.\n\n## Recommended text editor features {/*recommended-text-editor-features*/}\n\nSome editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!\n\n### Linting {/*linting*/}\n\nCode linters find problems in your code as you write, helping you fix them early. [ESLint](https://eslint.org/) is a popular, open source linter for JavaScript.","metadata":{"source":"reactjs.org/beta/src/content/learn/editor-setup.md"}},"1744":{"pageContent":"### Linting {/*linting*/}\n\nCode linters find problems in your code as you write, helping you fix them early. [ESLint](https://eslint.org/) is a popular, open source linter for JavaScript.\n\n[Install ESLint with the recommended configuration for React](https://www.npmjs.com/package/eslint-config-react-app) (be sure you have [Node installed!](https://nodejs.org/en/download/current/))\n\n[Integrate ESLint in VSCode with the official extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n\n*Make sure that you've enabled all the [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks) rules for your project.** They are essential and catch the most severe bugs early. The recommended [`eslint-config-react-app`](https://www.npmjs.com/package/eslint-config-react-app) preset already includes them.\n\n### Formatting {/*formatting*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/editor-setup.md"}},"1745":{"pageContent":"### Formatting {/*formatting*/}\n\nThe last thing you want to do when sharing your code with another contributor is get into an discussion about [tabs vs spaces](https://www.google.com/search?q=tabs+vs+spaces)! Fortunately, [Prettier](https://prettier.io/) will clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces—and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.\n\nYou can install the [Prettier extension in VSCode](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) by following these steps:\n\n1. Launch VS Code\n\n2. Use Quick Open (press Ctrl/Cmd+P)\n\n3. Paste in `ext install esbenp.prettier-vscode`\n\n4. Press Enter\n\n#### Formatting on save {/*formatting-on-save*/}\n\nIdeally, you should format your code on every save. VS Code has settings for this!","metadata":{"source":"reactjs.org/beta/src/content/learn/editor-setup.md"}},"1746":{"pageContent":"3. Paste in `ext install esbenp.prettier-vscode`\n\n4. Press Enter\n\n#### Formatting on save {/*formatting-on-save*/}\n\nIdeally, you should format your code on every save. VS Code has settings for this!\n\n1. In VS Code, press `CTRL/CMD + SHIFT + P`.\n\n2. Type \"settings\"\n\n3. Hit Enter\n\n4. In the search bar, type \"format on save\"\n\n5. Be sure the \"format on save\" option is ticked!\n\n> If your ESLint preset has formatting rules, they may conflict with Prettier. We recommend to disable all formatting rules in your ESLint preset using [`eslint-config-prettier`](https://github.com/prettier/eslint-config-prettier) so that ESLint is *only* used for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, use [`prettier --check`](https://prettier.io/docs/en/cli.html#--check) for your continuous integration.","metadata":{"source":"reactjs.org/beta/src/content/learn/editor-setup.md"}},"1747":{"pageContent":"--\n\ntitle: Reacting to Input with State\n\n--\n\n<Intro>\n\nReact uses a declarative way to manipulate the UI. Instead of manipulating individual pieces of the UI directly, you describe the different states that your component can be in, and switch between them in response to the user input. This is similar to how designers think about the UI.\n\n</Intro>\n\n<YouWillLearn>\n\nHow declarative UI programming differs from imperative UI programming\n\nHow to enumerate the different visual states your component can be in\n\nHow to trigger the changes between the different visual states from code\n\n</YouWillLearn>\n\n## How declarative UI compares to imperative {/*how-declarative-ui-compares-to-imperative*/}\n\nWhen you design UI interactions, you probably think about how the UI *changes* in response to user actions. Consider a form that lets the user submit an answer:\n\nWhen you type something into a form, the \"Submit\" button **becomes enabled.**","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1748":{"pageContent":"When you type something into a form, the \"Submit\" button **becomes enabled.**\n\nWhen you press \"Submit\", both form and the button **become disabled,** and a spinner **appears.**\n\nIf the network request succeeds, the form **gets hidden,** and the \"Thank you\" message **appears.**\n\nIf the network request fails, an error message **appears,** and the form **becomes enabled** again.\n\nIn **imperative programming,** the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here's another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.\n\n<Illustration src=\"/images/docs/illustrations/i_imperative-ui-programming.png\"  alt=\"In a car driven by an anxious-looking person representing JavaScript, a passenger orders the driver to execute a sequence of complicated turn by turn navigations.\" />","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1749":{"pageContent":"They don't know where you want to go, they just follow your commands. (And if you get the directions wrong, you end up in the wrong place!) It's called *imperative* because you have to \"command\" each element, from the spinner to the button, telling the computer *how* to update the UI.\n\nIn this example of imperative UI programming, the form is built *without* React. It uses the built-in browser [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model):\n\n<Sandpack>\n\n```js index.js active\n\nasync function handleFormSubmit(e) {\n\ne.preventDefault();\n\ndisable(textarea);\n\ndisable(button);\n\nshow(loadingMessage);\n\nhide(errorMessage);\n\ntry {\n\nawait submitForm(textarea.value);\n\nshow(successMessage);\n\nhide(form);\n\n} catch (err) {\n\nshow(errorMessage);\n\nerrorMessage.textContent = err.message;\n\n} finally {\n\nhide(loadingMessage);\n\nenable(textarea);\n\nenable(button);\n\n}\n\n}\n\nfunction handleTextareaChange() {\n\nif (textarea.value.length === 0) {\n\ndisable(button);\n\n} else {\n\nenable(button);\n\n}\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1750":{"pageContent":"enable(textarea);\n\nenable(button);\n\n}\n\n}\n\nfunction handleTextareaChange() {\n\nif (textarea.value.length === 0) {\n\ndisable(button);\n\n} else {\n\nenable(button);\n\n}\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}\n\nfunction show(el) {\n\nel.style.display = '';\n\n}\n\nfunction enable(el) {\n\nel.disabled = false;\n\n}\n\nfunction disable(el) {\n\nel.disabled = true;\n\n}\n\nfunction submitForm(answer) {\n\n// Pretend it's hitting the network.\n\nreturn new Promise((resolve, reject) => {\n\nsetTimeout(() => {\n\nif (answer.toLowerCase() == 'istanbul') {\n\nresolve();\n\n} else {\n\nreject(new Error('Good guess but a wrong answer. Try again!'));\n\n}\n\n}, 1500);\n\n});\n\n}\n\nlet form = document.getElementById('form');\n\nlet textarea = document.getElementById('textarea');\n\nlet button = document.getElementById('button');\n\nlet loadingMessage = document.getElementById('loading');\n\nlet errorMessage = document.getElementById('error');\n\nlet successMessage = document.getElementById('success');\n\nform.onsubmit = handleFormSubmit;\n\ntextarea.oninput = handleTextareaChange;\n\n```\n\n```js sandbox.config.json hidden\n\n{","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1751":{"pageContent":"let successMessage = document.getElementById('success');\n\nform.onsubmit = handleFormSubmit;\n\ntextarea.oninput = handleTextareaChange;\n\n```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n```html public/index.html\n\n<form id=\"form\">\n\n<h2>City quiz</h2>\n\n<p>\n\nWhat city is located on two continents?\n\n</p>\n\n<textarea id=\"textarea\"></textarea>\n\n<br />\n\n<button id=\"button\" disabled>Submit</button>\n\n<p id=\"loading\" style=\"display: none\">Loading...</p>\n\n<p id=\"error\" style=\"display: none; color: red;\"></p>\n\n</form>\n\n<h1 id=\"success\" style=\"display: none\">That's right!</h1>\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\n</style>\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1752":{"pageContent":"</form>\n\n<h1 id=\"success\" style=\"display: none\">That's right!</h1>\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\n</style>\n\n```\n\n</Sandpack>\n\nManipulating the UI imperatively works well enough for isolated examples, but it gets exponentially more difficult to manage in more complex systems. Imagine updating a page full of different forms like this one. Adding a new UI element or a new interaction would require carefully checking all existing code to make sure you haven't introduced a bug (for example, forgetting to show or hide something).\n\nReact was built to solve this problem.","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1753":{"pageContent":"React was built to solve this problem.\n\nIn React, you don't directly manipulate the UI--meaning you don't enable, disable, show, or hide components directly. Instead, you **declare what you want to show,** and React figures out how to update the UI. Think of getting into a taxi and telling the driver where you want to go instead of telling them exactly where to turn. It's the driver's job to get you there, and they might even know some shortcuts you haven't considered!\n\n<Illustration src=\"/images/docs/illustrations/i_declarative-ui-programming.png\" alt=\"In a car driven by React, a passenger asks to be taken to a specific place on the map. React figures out how to do that.\" />\n\n## Thinking about UI declaratively {/*thinking-about-ui-declaratively*/}\n\nYou've seen how to implement a form imperatively above. To better understand how to think in React, you'll walk through reimplementing this UI in React below:\n\n1. **Identify** your component's different visual states","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1754":{"pageContent":"1. **Identify** your component's different visual states\n\n2. **Determine** what triggers those state changes\n\n3. **Represent** the state in memory using `useState`\n\n4. **Remove** any non-essential state variables\n\n5. **Connect** the event handlers to set the state\n\n### Step 1: Identify your component's different visual states {/*step-1-identify-your-components-different-visual-states*/}\n\nIn computer science, you may hear about a [\"state machine\"](https://en.wikipedia.org/wiki/Finite-state_machine) being in one of several “states”. If you work with a designer, you may have seen mockups for different \"visual states\". React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.\n\nFirst, you need to visualize all the different \"states\" of the UI the user might see:\n\n**Empty**: Form has a disabled \"Submit\" button.\n\n**Typing**: Form has an enabled \"Submit\" button.\n\n**Submitting**: Form is completely disabled. Spinner is shown.","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1755":{"pageContent":"**Empty**: Form has a disabled \"Submit\" button.\n\n**Typing**: Form has an enabled \"Submit\" button.\n\n**Submitting**: Form is completely disabled. Spinner is shown.\n\n**Success**: \"Thank you\" message is shown instead of a form.\n\n**Error**: Same as Typing state, but with an extra error message.\n\nJust like a designer, you'll want to \"mock up\" or create \"mocks\" for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop called `status` with a default value of `'empty'`:\n\n<Sandpack>\n\n```js\n\nexport default function Form({\n\nstatus = 'empty'\n\n}) {\n\nif (status === 'success') {\n\nreturn <h1>That's right!</h1>\n\n}\n\nreturn (\n\n<>\n\n<h2>City quiz</h2>\n\n<p>\n\nIn which city is there a billboard that turns air into drinkable water?\n\n</p>\n\n<form>\n\n<textarea />\n\n<br />\n\n<button>\n\nSubmit\n\n</button>\n\n</form>\n\n</>\n\n)\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1756":{"pageContent":"}\n\nreturn (\n\n<>\n\n<h2>City quiz</h2>\n\n<p>\n\nIn which city is there a billboard that turns air into drinkable water?\n\n</p>\n\n<form>\n\n<textarea />\n\n<br />\n\n<button>\n\nSubmit\n\n</button>\n\n</form>\n\n</>\n\n)\n\n}\n\n```\n\n</Sandpack>\n\nYou could call that prop anything you like, the naming is not important. Try editing `status = 'empty'` to `status = 'success'` to see the success message appear. Mocking lets you quickly iterate on the UI before you wire up any logic. Here is a more fleshed out prototype of the same component, still \"controlled\" by the `status` prop:\n\n<Sandpack>\n\n```js\n\nexport default function Form({\n\n// Try 'submitting', 'error', 'success':\n\nstatus = 'empty'\n\n}) {\n\nif (status === 'success') {\n\nreturn <h1>That's right!</h1>\n\n}\n\nreturn (\n\n<>\n\n<h2>City quiz</h2>\n\n<p>\n\nIn which city is there a billboard that turns air into drinkable water?\n\n</p>\n\n<form>\n\n<textarea disabled={\n\nstatus === 'submitting'\n\n} />\n\n<br />\n\n<button disabled={\n\nstatus === 'empty' ||\n\nstatus === 'submitting'\n\n}>\n\nSubmit\n\n</button>\n\n{status === 'error' &&\n\n<p className=\"Error\">","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1757":{"pageContent":"</p>\n\n<form>\n\n<textarea disabled={\n\nstatus === 'submitting'\n\n} />\n\n<br />\n\n<button disabled={\n\nstatus === 'empty' ||\n\nstatus === 'submitting'\n\n}>\n\nSubmit\n\n</button>\n\n{status === 'error' &&\n\n<p className=\"Error\">\n\nGood guess but a wrong answer. Try again!\n\n</p>\n\n}\n\n</form>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\n.Error { color: red; }\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### Displaying many visual states at once {/*displaying-many-visual-states-at-once*/}\n\nIf a component has a lot of visual states, it can be convenient to show them all on one page:\n\n<Sandpack>\n\n```js App.js active\n\nimport Form from './Form.js';\n\nlet statuses = [\n\n'empty',\n\n'typing',\n\n'submitting',\n\n'success',\n\n'error',\n\n];\n\nexport default function App() {\n\nreturn (\n\n<>\n\n{statuses.map(status => (\n\n<section key={status}>\n\n<h4>Form ({status}):</h4>\n\n<Form status={status} />\n\n</section>\n\n))}\n\n</>\n\n);\n\n}\n\n```\n\n```js Form.js\n\nexport default function Form({ status }) {\n\nif (status === 'success') {\n\nreturn <h1>That's right!</h1>\n\n}\n\nreturn (\n\n<form>\n\n<textarea disabled={\n\nstatus === 'submitting'\n\n} />\n\n<br />\n\n<button disabled={\n\nstatus === 'empty' ||","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1758":{"pageContent":"if (status === 'success') {\n\nreturn <h1>That's right!</h1>\n\n}\n\nreturn (\n\n<form>\n\n<textarea disabled={\n\nstatus === 'submitting'\n\n} />\n\n<br />\n\n<button disabled={\n\nstatus === 'empty' ||\n\nstatus === 'submitting'\n\n}>\n\nSubmit\n\n</button>\n\n{status === 'error' &&\n\n<p className=\"Error\">\n\nGood guess but a wrong answer. Try again!\n\n</p>\n\n}\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nsection { border-bottom: 1px solid #aaa; padding: 20px; }\n\nh4 { color: #222; }\n\nbody { margin: 0; }\n\n.Error { color: red; }\n\n```\n\n</Sandpack>\n\nPages like this are often called \"living styleguides\" or \"storybooks\".\n\n</DeepDive>\n\n### Step 2: Determine what triggers those state changes {/*step-2-determine-what-triggers-those-state-changes*/}\n\nYou can trigger state updates in response to two kinds of inputs:\n\n**Human inputs,** like clicking a button, typing in a field, navigating a link.\n\n**Computer inputs,** like a network response arriving, a timeout completing, an image loading.\n\n<IllustrationBlock>\n\n<Illustration caption=\"Human inputs\" alt=\"A finger.\" src=\"/images/docs/illustrations/i_inputs1.png\" />","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1759":{"pageContent":"<IllustrationBlock>\n\n<Illustration caption=\"Human inputs\" alt=\"A finger.\" src=\"/images/docs/illustrations/i_inputs1.png\" />\n\n<Illustration caption=\"Computer inputs\" alt=\"Ones and zeroes.\" src=\"/images/docs/illustrations/i_inputs2.png\" />\n\n</IllustrationBlock>\n\nIn both cases, **you must set [state variables](/learn/state-a-components-memory#anatomy-of-usestate) to update the UI.** For the form you're developing, you will need to change state in response to a few different inputs:\n\n**Changing the text input** (human) should switch it from the *Empty* state to the *Typing* state or back, depending on whether the text box is empty or not.\n\n**Clicking the Submit button** (human) should switch it to the *Submitting* state.\n\n**Successful network response** (computer) should switch it to the *Success* state.\n\n**Failed network response** (computer) should switch it to the *Error* state with the matching error message.\n\n> Notice that human inputs often require [event handlers](/learn/responding-to-events)!","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1760":{"pageContent":"**Failed network response** (computer) should switch it to the *Error* state with the matching error message.\n\n> Notice that human inputs often require [event handlers](/learn/responding-to-events)!\n\nTo help visualize this flow, try drawing each state on paper as a labeled circle, and each change between two states as an arrow. You can sketch out many flows this way and sort out bugs long before implementation.\n\n<DiagramGroup>\n\n<Diagram name=\"responding_to_input_flow\" height={350} width={688} alt=\"Flow chart moving left to right with 5 nodes. The first node labeled 'empty' has one edge labeled 'start typing' connected to a node labeled 'typing'. That node has one edge labeled 'press submit' connected to a node labeled 'submitting', which has two edges. The left edge is labeled 'network error' connecting to a node labeled 'error'. The right edge is labeled 'network success' connecting to a node labeled 'success'.\">\n\nForm states\n\n</Diagram>\n\n</DiagramGroup>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1761":{"pageContent":"Form states\n\n</Diagram>\n\n</DiagramGroup>\n\n### Step 3: Represent the state in memory with `useState` {/*step-3-represent-the-state-in-memory-with-usestate*/}\n\nNext you'll need to represent the visual states of your component in memory with [`useState`.](/reference/react/useState) Simplicity is key: each piece of state is a \"moving piece\", and **you want as few \"moving pieces\" as possible.** More complexity leads to more bugs!\n\nStart with the state that *absolutely must* be there. For example, you'll need to store the `answer` for the input, and the `error` (if it exists) to store the last error:\n\n```js\n\nconst [answer, setAnswer] = useState('');\n\nconst [error, setError] = useState(null);\n\n```\n\nThen, you'll need a state variable representing which one of the visual states described earlier you want to display. There's usually more than a single way to represent that in memory, so you'll need to experiment with it.","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1762":{"pageContent":"If you struggle to think of the best way immediately, start by adding enough state that you're *definitely* sure that all the possible visual states are covered:\n\n```js\n\nconst [isEmpty, setIsEmpty] = useState(true);\n\nconst [isTyping, setIsTyping] = useState(false);\n\nconst [isSubmitting, setIsSubmitting] = useState(false);\n\nconst [isSuccess, setIsSuccess] = useState(false);\n\nconst [isError, setIsError] = useState(false);\n\n```\n\nYour first idea likely won't be the best, but that's ok--refactoring state is a part of the process!\n\n### Step 4: Remove any non-essential state variables {/*step-4-remove-any-non-essential-state-variables*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1763":{"pageContent":"### Step 4: Remove any non-essential state variables {/*step-4-remove-any-non-essential-state-variables*/}\n\nYou want to avoid duplication in the state content so you're only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings. Your goal is to **prevent the cases where the state in memory doesn't represent any valid UI that you'd want a user to see.** (For example, you never want to show an error message and disable the input at the same time, or the user won't be able to correct the error!)\n\nHere are some questions you can ask about your state variables:","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1764":{"pageContent":"Here are some questions you can ask about your state variables:\n\n**Does this state cause a paradox?** For example, `isTyping` and `isSubmitting` can't both be `true`. A paradox usually means that the state is not constrained enough. There are four possible combinations of two booleans, but only three correspond to valid states. To remove the \"impossible\" state, you can combine these into a `status` that must be one of three values: `'typing'`, `'submitting'`, or `'success'`.\n\n**Is the same information available in another state variable already?** Another paradox: `isEmpty` and `isTyping` can't be `true` at the same time. By making them separate state variables, you risk them going out of sync and causing bugs. Fortunately, you can remove `isEmpty` and instead check `answer.length === 0`.\n\n**Can you get the same information from the inverse of another state variable?** `isError` is not needed because you can check `error !== null` instead.","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1765":{"pageContent":"**Can you get the same information from the inverse of another state variable?** `isError` is not needed because you can check `error !== null` instead.\n\nAfter this clean-up, you're left with 3 (down from 7!) *essential* state variables:\n\n```js\n\nconst [answer, setAnswer] = useState('');\n\nconst [error, setError] = useState(null);\n\nconst [status, setStatus] = useState('typing'); // 'typing', 'submitting', or 'success'\n\n```\n\nYou know they are essential, because you can't remove any of them without breaking the functionality.\n\n<DeepDive>\n\n#### Eliminating “impossible” states with a reducer {/*eliminating-impossible-states-with-a-reducer*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1766":{"pageContent":"<DeepDive>\n\n#### Eliminating “impossible” states with a reducer {/*eliminating-impossible-states-with-a-reducer*/}\n\nThese three variables are a good enough representation of this form's state. However, there are still some intermediate states that don't fully make sense. For example, a non-null `error` doesn't make sense when `status` is `'success'`. To model the state more precisely, you can [extract it into a reducer.](/learn/extracting-state-logic-into-a-reducer) Reducers let you unify multiple state variables into a single object and consolidate all the related logic!\n\n</DeepDive>\n\n### Step 5: Connect the event handlers to set state {/*step-5-connect-the-event-handlers-to-set-state*/}\n\nLastly, create event handlers to set the state variables. Below is the final form, with all event handlers wired up:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [answer, setAnswer] = useState('');\n\nconst [error, setError] = useState(null);","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1767":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [answer, setAnswer] = useState('');\n\nconst [error, setError] = useState(null);\n\nconst [status, setStatus] = useState('typing');\n\nif (status === 'success') {\n\nreturn <h1>That's right!</h1>\n\n}\n\nasync function handleSubmit(e) {\n\ne.preventDefault();\n\nsetStatus('submitting');\n\ntry {\n\nawait submitForm(answer);\n\nsetStatus('success');\n\n} catch (err) {\n\nsetStatus('typing');\n\nsetError(err);\n\n}\n\n}\n\nfunction handleTextareaChange(e) {\n\nsetAnswer(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<h2>City quiz</h2>\n\n<p>\n\nIn which city is there a billboard that turns air into drinkable water?\n\n</p>\n\n<form onSubmit={handleSubmit}>\n\n<textarea\n\nvalue={answer}\n\nonChange={handleTextareaChange}\n\ndisabled={status === 'submitting'}\n\n/>\n\n<br />\n\n<button disabled={\n\nanswer.length === 0 ||\n\nstatus === 'submitting'\n\n}>\n\nSubmit\n\n</button>\n\n{error !== null &&\n\n<p className=\"Error\">\n\n{error.message}\n\n</p>\n\n}\n\n</form>\n\n</>\n\n);\n\n}\n\nfunction submitForm(answer) {\n\n// Pretend it's hitting the network.\n\nreturn new Promise((resolve, reject) => {","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1768":{"pageContent":"}>\n\nSubmit\n\n</button>\n\n{error !== null &&\n\n<p className=\"Error\">\n\n{error.message}\n\n</p>\n\n}\n\n</form>\n\n</>\n\n);\n\n}\n\nfunction submitForm(answer) {\n\n// Pretend it's hitting the network.\n\nreturn new Promise((resolve, reject) => {\n\nsetTimeout(() => {\n\nlet shouldError = answer.toLowerCase() !== 'lima'\n\nif (shouldError) {\n\nreject(new Error('Good guess but a wrong answer. Try again!'));\n\n} else {\n\nresolve();\n\n}\n\n}, 1500);\n\n});\n\n}\n\n```\n\n```css\n\n.Error { color: red; }\n\n```\n\n</Sandpack>\n\nAlthough this code is longer than the original imperative example, it is much less fragile. Expressing all interactions as state changes lets you later introduce new visual states without breaking existing ones. It also lets you change what should be displayed in each state without changing the logic of the interaction itself.\n\n<Recap>\n\nDeclarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).\n\nWhen developing a component:\n\n1. Identify all its visual states.\n\n2. Determine the human and computer triggers for state changes.","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1769":{"pageContent":"When developing a component:\n\n1. Identify all its visual states.\n\n2. Determine the human and computer triggers for state changes.\n\n3. Model the state with `useState`.\n\n4. Remove non-essential state to avoid bugs and paradoxes.\n\n5. Connect the event handlers to set state.\n\n</Recap>\n\n<Challenges>\n\n#### Add and remove a CSS class {/*add-and-remove-a-css-class*/}\n\nMake it so that clicking on the picture *removes* the `background--active` CSS class from the outer `<div>`, but *adds* the `picture--active` class to the `<img>`. Clicking the background again should restore the original CSS classes.\n\nVisually, you should expect that clicking on the picture removes the purple background and highlights the picture border. Clicking outside the picture highlights the background, but removes the picture border highlight.\n\n<Sandpack>\n\n```js\n\nexport default function Picture() {\n\nreturn (\n\n<div className=\"background background--active\">\n\n<img\n\nclassName=\"picture\"\n\nalt=\"Rainbow houses in Kampung Pelangi, Indonesia\"","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1770":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function Picture() {\n\nreturn (\n\n<div className=\"background background--active\">\n\n<img\n\nclassName=\"picture\"\n\nalt=\"Rainbow houses in Kampung Pelangi, Indonesia\"\n\nsrc=\"https://i.imgur.com/5qwVYb1.jpeg\"\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n.background {\n\nwidth: 100vw;\n\nheight: 100vh;\n\ndisplay: flex;\n\njustify-content: center;\n\nalign-items: center;\n\nbackground: #eee;\n\n}\n\n.background--active {\n\nbackground: #a6b5ff;\n\n}\n\n.picture {\n\nwidth: 200px;\n\nheight: 200px;\n\nborder-radius: 10px;\n\n}\n\n.picture--active {\n\nborder: 5px solid #a6b5ff;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThis component has two visual states: when the image is active, and when the image is inactive:\n\nWhen the image is active, the CSS classes are `background` and `picture picture--active`.\n\nWhen the image is inactive, the CSS classes are `background background--active` and `picture`.","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1771":{"pageContent":"When the image is active, the CSS classes are `background` and `picture picture--active`.\n\nWhen the image is inactive, the CSS classes are `background background--active` and `picture`.\n\nA single boolean state variable is enough to remember whether the image is active. The original task was to remove or add CSS classes. However, in React you need to *describe* what you want to see rather than *manipulate* the UI elements. So you need to calculate both CSS classes based on the current state. You also need to [stop the propagation](/learn/responding-to-events#stopping-propagation) so that clicking the image doesn't register as a click on the background.\n\nVerify that this version works by clicking the image and then outside of it:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Picture() {\n\nconst [isActive, setIsActive] = useState(false);\n\nlet backgroundClassName = 'background';\n\nlet pictureClassName = 'picture';\n\nif (isActive) {\n\npictureClassName += ' picture--active';\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1772":{"pageContent":"const [isActive, setIsActive] = useState(false);\n\nlet backgroundClassName = 'background';\n\nlet pictureClassName = 'picture';\n\nif (isActive) {\n\npictureClassName += ' picture--active';\n\n} else {\n\nbackgroundClassName += ' background--active';\n\n}\n\nreturn (\n\n<div\n\nclassName={backgroundClassName}\n\nonClick={() => setIsActive(false)}\n\n>\n\n<img\n\nonClick={e => {\n\ne.stopPropagation();\n\nsetIsActive(true);\n\n}}\n\nclassName={pictureClassName}\n\nalt=\"Rainbow houses in Kampung Pelangi, Indonesia\"\n\nsrc=\"https://i.imgur.com/5qwVYb1.jpeg\"\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n.background {\n\nwidth: 100vw;\n\nheight: 100vh;\n\ndisplay: flex;\n\njustify-content: center;\n\nalign-items: center;\n\nbackground: #eee;\n\n}\n\n.background--active {\n\nbackground: #a6b5ff;\n\n}\n\n.picture {\n\nwidth: 200px;\n\nheight: 200px;\n\nborder-radius: 10px;\n\nborder: 5px solid transparent;\n\n}\n\n.picture--active {\n\nborder: 5px solid #a6b5ff;\n\n}\n\n```\n\n</Sandpack>\n\nAlternatively, you could return two separate chunks of JSX:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Picture() {","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1773":{"pageContent":"border: 5px solid #a6b5ff;\n\n}\n\n```\n\n</Sandpack>\n\nAlternatively, you could return two separate chunks of JSX:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Picture() {\n\nconst [isActive, setIsActive] = useState(false);\n\nif (isActive) {\n\nreturn (\n\n<div\n\nclassName=\"background\"\n\nonClick={() => setIsActive(false)}\n\n>\n\n<img\n\nclassName=\"picture picture--active\"\n\nalt=\"Rainbow houses in Kampung Pelangi, Indonesia\"\n\nsrc=\"https://i.imgur.com/5qwVYb1.jpeg\"\n\nonClick={e => e.stopPropagation()}\n\n/>\n\n</div>\n\n);\n\n}\n\nreturn (\n\n<div className=\"background background--active\">\n\n<img\n\nclassName=\"picture\"\n\nalt=\"Rainbow houses in Kampung Pelangi, Indonesia\"\n\nsrc=\"https://i.imgur.com/5qwVYb1.jpeg\"\n\nonClick={() => setIsActive(true)}\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { margin: 0; padding: 0; height: 250px; }\n\n.background {\n\nwidth: 100vw;\n\nheight: 100vh;\n\ndisplay: flex;\n\njustify-content: center;\n\nalign-items: center;\n\nbackground: #eee;\n\n}\n\n.background--active {\n\nbackground: #a6b5ff;\n\n}\n\n.picture {\n\nwidth: 200px;\n\nheight: 200px;\n\nborder-radius: 10px;\n\nborder: 5px solid transparent;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1774":{"pageContent":"justify-content: center;\n\nalign-items: center;\n\nbackground: #eee;\n\n}\n\n.background--active {\n\nbackground: #a6b5ff;\n\n}\n\n.picture {\n\nwidth: 200px;\n\nheight: 200px;\n\nborder-radius: 10px;\n\nborder: 5px solid transparent;\n\n}\n\n.picture--active {\n\nborder: 5px solid #a6b5ff;\n\n}\n\n```\n\n</Sandpack>\n\nKeep in mind that if two different JSX chunks describe the same tree, their nesting (first `<div>` → first `<img>`) has to line up. Otherwise, toggling `isActive` would recreate the whole tree below and [reset its state.](/learn/preserving-and-resetting-state) This is why, if a similar JSX tree gets returned in both cases, it is better to write them as a single piece of JSX.\n\n</Solution>\n\n#### Profile editor {/*profile-editor*/}\n\nHere is a small form implemented with plain JavaScript and DOM. Play with it to understand its behavior:\n\n<Sandpack>\n\n```js index.js active\n\nfunction handleFormSubmit(e) {\n\ne.preventDefault();\n\nif (editButton.textContent === 'Edit Profile') {\n\neditButton.textContent = 'Save Profile';\n\nhide(firstNameText);\n\nhide(lastNameText);","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1775":{"pageContent":"```js index.js active\n\nfunction handleFormSubmit(e) {\n\ne.preventDefault();\n\nif (editButton.textContent === 'Edit Profile') {\n\neditButton.textContent = 'Save Profile';\n\nhide(firstNameText);\n\nhide(lastNameText);\n\nshow(firstNameInput);\n\nshow(lastNameInput);\n\n} else {\n\neditButton.textContent = 'Edit Profile';\n\nhide(firstNameInput);\n\nhide(lastNameInput);\n\nshow(firstNameText);\n\nshow(lastNameText);\n\n}\n\n}\n\nfunction handleFirstNameChange() {\n\nfirstNameText.textContent = firstNameInput.value;\n\nhelloText.textContent = (\n\n'Hello ' +\n\nfirstNameInput.value + ' ' +\n\nlastNameInput.value + '!'\n\n);\n\n}\n\nfunction handleLastNameChange() {\n\nlastNameText.textContent = lastNameInput.value;\n\nhelloText.textContent = (\n\n'Hello ' +\n\nfirstNameInput.value + ' ' +\n\nlastNameInput.value + '!'\n\n);\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}\n\nfunction show(el) {\n\nel.style.display = '';\n\n}\n\nlet form = document.getElementById('form');\n\nlet editButton = document.getElementById('editButton');\n\nlet firstNameInput = document.getElementById('firstNameInput');","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1776":{"pageContent":"el.style.display = '';\n\n}\n\nlet form = document.getElementById('form');\n\nlet editButton = document.getElementById('editButton');\n\nlet firstNameInput = document.getElementById('firstNameInput');\n\nlet firstNameText = document.getElementById('firstNameText');\n\nlet lastNameInput = document.getElementById('lastNameInput');\n\nlet lastNameText = document.getElementById('lastNameText');\n\nlet helloText = document.getElementById('helloText');\n\nform.onsubmit = handleFormSubmit;\n\nfirstNameInput.oninput = handleFirstNameChange;\n\nlastNameInput.oninput = handleLastNameChange;\n\n```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n```html public/index.html\n\n<form id=\"form\">\n\n<label>\n\nFirst name:\n\n<b id=\"firstNameText\">Jane</b>\n\n<input\n\nid=\"firstNameInput\"\n\nvalue=\"Jane\"\n\nstyle=\"display: none\">\n\n</label>\n\n<label>\n\nLast name:\n\n<b id=\"lastNameText\">Jacobs</b>\n\n<input\n\nid=\"lastNameInput\"\n\nvalue=\"Jacobs\"\n\nstyle=\"display: none\">\n\n</label>\n\n<button type=\"submit\" id=\"editButton\">Edit Profile</button>\n\n<p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n\n</form>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1777":{"pageContent":"<input\n\nid=\"lastNameInput\"\n\nvalue=\"Jacobs\"\n\nstyle=\"display: none\">\n\n</label>\n\n<button type=\"submit\" id=\"editButton\">Edit Profile</button>\n\n<p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n\n</form>\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\nlabel { display: block; margin-bottom: 20px; }\n\n</style>\n\n```\n\n</Sandpack>\n\nThis form switches between two modes: in the editing mode, you see the inputs, and in the viewing mode, you only see the result. The button label changes between \"Edit\" and \"Save\" depending on the mode you're in. When you change the inputs, the welcome message at the bottom updates in real time.\n\nYour task is to reimplement it in React in the sandbox below. For your convenience, the markup was already converted to JSX, but you'll need to make it show and hide the inputs like the original does.\n\nMake sure that it updates the text at the bottom, too!\n\n<Sandpack>\n\n```js\n\nexport default function EditProfile() {\n\nreturn (\n\n<form>\n\n<label>\n\nFirst name:{' '}\n\n<b>Jane</b>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1778":{"pageContent":"Make sure that it updates the text at the bottom, too!\n\n<Sandpack>\n\n```js\n\nexport default function EditProfile() {\n\nreturn (\n\n<form>\n\n<label>\n\nFirst name:{' '}\n\n<b>Jane</b>\n\n<input />\n\n</label>\n\n<label>\n\nLast name:{' '}\n\n<b>Jacobs</b>\n\n<input />\n\n</label>\n\n<button type=\"submit\">\n\nEdit Profile\n\n</button>\n\n<p><i>Hello, Jane Jacobs!</i></p>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou will need two state variables to hold the input values: `firstName` and `lastName`. You're also going to need an `isEditing` state variable that holds whether to display the inputs or not. You should _not_ need a `fullName` variable because the full name can always be calculated from the `firstName` and the `lastName`.\n\nFinally, you should use [conditional rendering](/learn/conditional-rendering) to show or hide the inputs depending on `isEditing`.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function EditProfile() {\n\nconst [isEditing, setIsEditing] = useState(false);","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1779":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function EditProfile() {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nconst [firstName, setFirstName] = useState('Jane');\n\nconst [lastName, setLastName] = useState('Jacobs');\n\nreturn (\n\n<form onSubmit={e => {\n\ne.preventDefault();\n\nsetIsEditing(!isEditing);\n\n}}>\n\n<label>\n\nFirst name:{' '}\n\n{isEditing ? (\n\n<input\n\nvalue={firstName}\n\nonChange={e => {\n\nsetFirstName(e.target.value)\n\n}}\n\n/>\n\n) : (\n\n<b>{firstName}</b>\n\n)}\n\n</label>\n\n<label>\n\nLast name:{' '}\n\n{isEditing ? (\n\n<input\n\nvalue={lastName}\n\nonChange={e => {\n\nsetLastName(e.target.value)\n\n}}\n\n/>\n\n) : (\n\n<b>{lastName}</b>\n\n)}\n\n</label>\n\n<button type=\"submit\">\n\n{isEditing ? 'Save' : 'Edit'} Profile\n\n</button>\n\n<p><i>Hello, {firstName} {lastName}!</i></p>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\nCompare this solution to the original imperative code. How are they different?\n\n</Solution>\n\n#### Refactor the imperative solution without React {/*refactor-the-imperative-solution-without-react*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1780":{"pageContent":"Compare this solution to the original imperative code. How are they different?\n\n</Solution>\n\n#### Refactor the imperative solution without React {/*refactor-the-imperative-solution-without-react*/}\n\nHere is the original sandbox from the previous challenge, written imperatively without React:\n\n<Sandpack>\n\n```js index.js active\n\nfunction handleFormSubmit(e) {\n\ne.preventDefault();\n\nif (editButton.textContent === 'Edit Profile') {\n\neditButton.textContent = 'Save Profile';\n\nhide(firstNameText);\n\nhide(lastNameText);\n\nshow(firstNameInput);\n\nshow(lastNameInput);\n\n} else {\n\neditButton.textContent = 'Edit Profile';\n\nhide(firstNameInput);\n\nhide(lastNameInput);\n\nshow(firstNameText);\n\nshow(lastNameText);\n\n}\n\n}\n\nfunction handleFirstNameChange() {\n\nfirstNameText.textContent = firstNameInput.value;\n\nhelloText.textContent = (\n\n'Hello ' +\n\nfirstNameInput.value + ' ' +\n\nlastNameInput.value + '!'\n\n);\n\n}\n\nfunction handleLastNameChange() {\n\nlastNameText.textContent = lastNameInput.value;\n\nhelloText.textContent = (\n\n'Hello ' +\n\nfirstNameInput.value + ' ' +","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1781":{"pageContent":"firstNameInput.value + ' ' +\n\nlastNameInput.value + '!'\n\n);\n\n}\n\nfunction handleLastNameChange() {\n\nlastNameText.textContent = lastNameInput.value;\n\nhelloText.textContent = (\n\n'Hello ' +\n\nfirstNameInput.value + ' ' +\n\nlastNameInput.value + '!'\n\n);\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}\n\nfunction show(el) {\n\nel.style.display = '';\n\n}\n\nlet form = document.getElementById('form');\n\nlet editButton = document.getElementById('editButton');\n\nlet firstNameInput = document.getElementById('firstNameInput');\n\nlet firstNameText = document.getElementById('firstNameText');\n\nlet lastNameInput = document.getElementById('lastNameInput');\n\nlet lastNameText = document.getElementById('lastNameText');\n\nlet helloText = document.getElementById('helloText');\n\nform.onsubmit = handleFormSubmit;\n\nfirstNameInput.oninput = handleFirstNameChange;\n\nlastNameInput.oninput = handleLastNameChange;\n\n```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n```html public/index.html\n\n<form id=\"form\">\n\n<label>\n\nFirst name:\n\n<b id=\"firstNameText\">Jane</b>\n\n<input","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1782":{"pageContent":"```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n```html public/index.html\n\n<form id=\"form\">\n\n<label>\n\nFirst name:\n\n<b id=\"firstNameText\">Jane</b>\n\n<input\n\nid=\"firstNameInput\"\n\nvalue=\"Jane\"\n\nstyle=\"display: none\">\n\n</label>\n\n<label>\n\nLast name:\n\n<b id=\"lastNameText\">Jacobs</b>\n\n<input\n\nid=\"lastNameInput\"\n\nvalue=\"Jacobs\"\n\nstyle=\"display: none\">\n\n</label>\n\n<button type=\"submit\" id=\"editButton\">Edit Profile</button>\n\n<p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n\n</form>\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\nlabel { display: block; margin-bottom: 20px; }\n\n</style>\n\n```\n\n</Sandpack>\n\nImagine React didn't exist. Can you refactor this code in a way that makes the logic less fragile and more similar to the React version? What would it look like if the state was explicit, like in React?","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1783":{"pageContent":"If you're struggling to think where to start, the stub below already has most of the structure in place. If you start here, fill in the missing logic in the `updateDOM` function. (Refer to the original code where needed.)\n\n<Sandpack>\n\n```js index.js active\n\nlet firstName = 'Jane';\n\nlet lastName = 'Jacobs';\n\nlet isEditing = false;\n\nfunction handleFormSubmit(e) {\n\ne.preventDefault();\n\nsetIsEditing(!isEditing);\n\n}\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nfunction setFirstName(value) {\n\nfirstName = value;\n\nupdateDOM();\n\n}\n\nfunction setLastName(value) {\n\nlastName = value;\n\nupdateDOM();\n\n}\n\nfunction setIsEditing(value) {\n\nisEditing = value;\n\nupdateDOM();\n\n}\n\nfunction updateDOM() {\n\nif (isEditing) {\n\neditButton.textContent = 'Save Profile';\n\n// TODO: show inputs, hide content\n\n} else {\n\neditButton.textContent = 'Edit Profile';\n\n// TODO: hide inputs, show content\n\n}\n\n// TODO: update text labels\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}\n\nfunction show(el) {","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1784":{"pageContent":"} else {\n\neditButton.textContent = 'Edit Profile';\n\n// TODO: hide inputs, show content\n\n}\n\n// TODO: update text labels\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}\n\nfunction show(el) {\n\nel.style.display = '';\n\n}\n\nlet form = document.getElementById('form');\n\nlet editButton = document.getElementById('editButton');\n\nlet firstNameInput = document.getElementById('firstNameInput');\n\nlet firstNameText = document.getElementById('firstNameText');\n\nlet lastNameInput = document.getElementById('lastNameInput');\n\nlet lastNameText = document.getElementById('lastNameText');\n\nlet helloText = document.getElementById('helloText');\n\nform.onsubmit = handleFormSubmit;\n\nfirstNameInput.oninput = handleFirstNameChange;\n\nlastNameInput.oninput = handleLastNameChange;\n\n```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n```html public/index.html\n\n<form id=\"form\">\n\n<label>\n\nFirst name:\n\n<b id=\"firstNameText\">Jane</b>\n\n<input\n\nid=\"firstNameInput\"\n\nvalue=\"Jane\"\n\nstyle=\"display: none\">\n\n</label>\n\n<label>\n\nLast name:\n\n<b id=\"lastNameText\">Jacobs</b>\n\n<input","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1785":{"pageContent":"<form id=\"form\">\n\n<label>\n\nFirst name:\n\n<b id=\"firstNameText\">Jane</b>\n\n<input\n\nid=\"firstNameInput\"\n\nvalue=\"Jane\"\n\nstyle=\"display: none\">\n\n</label>\n\n<label>\n\nLast name:\n\n<b id=\"lastNameText\">Jacobs</b>\n\n<input\n\nid=\"lastNameInput\"\n\nvalue=\"Jacobs\"\n\nstyle=\"display: none\">\n\n</label>\n\n<button type=\"submit\" id=\"editButton\">Edit Profile</button>\n\n<p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n\n</form>\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\nlabel { display: block; margin-bottom: 20px; }\n\n</style>\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe missing logic included toggling the display of inputs and content, and updating the labels:\n\n<Sandpack>\n\n```js index.js active\n\nlet firstName = 'Jane';\n\nlet lastName = 'Jacobs';\n\nlet isEditing = false;\n\nfunction handleFormSubmit(e) {\n\ne.preventDefault();\n\nsetIsEditing(!isEditing);\n\n}\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nfunction setFirstName(value) {\n\nfirstName = value;\n\nupdateDOM();\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1786":{"pageContent":"}\n\nfunction handleFirstNameChange(e) {\n\nsetFirstName(e.target.value);\n\n}\n\nfunction handleLastNameChange(e) {\n\nsetLastName(e.target.value);\n\n}\n\nfunction setFirstName(value) {\n\nfirstName = value;\n\nupdateDOM();\n\n}\n\nfunction setLastName(value) {\n\nlastName = value;\n\nupdateDOM();\n\n}\n\nfunction setIsEditing(value) {\n\nisEditing = value;\n\nupdateDOM();\n\n}\n\nfunction updateDOM() {\n\nif (isEditing) {\n\neditButton.textContent = 'Save Profile';\n\nhide(firstNameText);\n\nhide(lastNameText);\n\nshow(firstNameInput);\n\nshow(lastNameInput);\n\n} else {\n\neditButton.textContent = 'Edit Profile';\n\nhide(firstNameInput);\n\nhide(lastNameInput);\n\nshow(firstNameText);\n\nshow(lastNameText);\n\n}\n\nfirstNameText.textContent = firstName;\n\nlastNameText.textContent = lastName;\n\nhelloText.textContent = (\n\n'Hello ' +\n\nfirstName + ' ' +\n\nlastName + '!'\n\n);\n\n}\n\nfunction hide(el) {\n\nel.style.display = 'none';\n\n}\n\nfunction show(el) {\n\nel.style.display = '';\n\n}\n\nlet form = document.getElementById('form');\n\nlet editButton = document.getElementById('editButton');\n\nlet firstNameInput = document.getElementById('firstNameInput');","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1787":{"pageContent":"el.style.display = '';\n\n}\n\nlet form = document.getElementById('form');\n\nlet editButton = document.getElementById('editButton');\n\nlet firstNameInput = document.getElementById('firstNameInput');\n\nlet firstNameText = document.getElementById('firstNameText');\n\nlet lastNameInput = document.getElementById('lastNameInput');\n\nlet lastNameText = document.getElementById('lastNameText');\n\nlet helloText = document.getElementById('helloText');\n\nform.onsubmit = handleFormSubmit;\n\nfirstNameInput.oninput = handleFirstNameChange;\n\nlastNameInput.oninput = handleLastNameChange;\n\n```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n```html public/index.html\n\n<form id=\"form\">\n\n<label>\n\nFirst name:\n\n<b id=\"firstNameText\">Jane</b>\n\n<input\n\nid=\"firstNameInput\"\n\nvalue=\"Jane\"\n\nstyle=\"display: none\">\n\n</label>\n\n<label>\n\nLast name:\n\n<b id=\"lastNameText\">Jacobs</b>\n\n<input\n\nid=\"lastNameInput\"\n\nvalue=\"Jacobs\"\n\nstyle=\"display: none\">\n\n</label>\n\n<button type=\"submit\" id=\"editButton\">Edit Profile</button>\n\n<p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n\n</form>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1788":{"pageContent":"<input\n\nid=\"lastNameInput\"\n\nvalue=\"Jacobs\"\n\nstyle=\"display: none\">\n\n</label>\n\n<button type=\"submit\" id=\"editButton\">Edit Profile</button>\n\n<p><i id=\"helloText\">Hello, Jane Jacobs!</i></p>\n\n</form>\n\n<style>\n\n{ box-sizing: border-box; }\n\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\n\nlabel { display: block; margin-bottom: 20px; }\n\n</style>\n\n```\n\n</Sandpack>\n\nThe `updateDOM` function you wrote shows what React does under the hood when you set the state. (However, React also avoids touching the DOM for properties that have not changed since the last time they were set.)\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/reacting-to-input-with-state.md"}},"1789":{"pageContent":"--\n\ntitle: Installation\n\n--\n\n<Intro>\n\nReact has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.\n\n</Intro>\n\n<YouWillLearn isChapter={true}>\n\n[How to add React to an HTML page](/learn/add-react-to-a-website)\n\n[How to start a standalone React project](/learn/start-a-new-react-project)\n\n[How to set up your editor](/learn/editor-setup)\n\n[How to install React Developer Tools](/learn/react-developer-tools)\n\n</YouWillLearn>\n\n## Try React {/*try-react*/}\n\nYou don't need to install anything to play with React. Try editing this sandbox!\n\n<Sandpack>\n\n```js\n\nfunction Greeting({ name }) {\n\nreturn <h1>Hello, {name}</h1>;\n\n}\n\nexport default function App() {\n\nreturn <Greeting name=\"world\" />\n\n}\n\n```\n\n</Sandpack>\n\nYou can edit it directly or open it in a new tab by pressing the \"Fork\" button in the upper right corner.","metadata":{"source":"reactjs.org/beta/src/content/learn/installation.md"}},"1790":{"pageContent":"}\n\nexport default function App() {\n\nreturn <Greeting name=\"world\" />\n\n}\n\n```\n\n</Sandpack>\n\nYou can edit it directly or open it in a new tab by pressing the \"Fork\" button in the upper right corner.\n\nMost pages in the React documentation contain sandboxes like this. Outside of the React documentation, there are many online sandboxes that support React: for example, [CodeSandbox](https://codesandbox.io/s/new), [StackBlitz](https://stackblitz.com/fork/react), or [CodePen.](https://codepen.io/pen?&editors=0010&layout=left&prefill_data_id=3f4569d1-1b11-4bce-bd46-89090eed5ddb)\n\n### Try React locally {/*try-react-locally*/}\n\nTo try React locally on your computer, [download this HTML page.](https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html) Open it in your editor and in your browser!\n\n## Add React to a page {/*add-react-to-a-page*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/installation.md"}},"1791":{"pageContent":"## Add React to a page {/*add-react-to-a-page*/}\n\nIf you're working with an existing site and need to add a little bit of React, you can [add React with a script tag.](/learn/add-react-to-a-website)\n\n## Start a React project {/*start-a-react-project*/}\n\nIf you're ready to [start a standalone project](/learn/start-a-new-react-project) with React, you can set up a minimal toolchain for a pleasant developer experience. You can also start with a framework that makes a lot of decisions for you out of the box.\n\n## Next steps {/*next-steps*/}\n\nHead to the [Quick Start](/learn) guide for a tour of the most important React concepts you will encounter every day.","metadata":{"source":"reactjs.org/beta/src/content/learn/installation.md"}},"1792":{"pageContent":"--\n\ntitle: 'You Might Not Need an Effect'\n\n--\n\n<Intro>\n\nEffects are an escape hatch from the React paradigm. They let you \"step outside\" of React and synchronize your components with some external system like a non-React widget, network, or the browser DOM. If there is no external system involved (for example, if you want to update a component's state when some props or state change), you shouldn't need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.\n\n</Intro>\n\n<YouWillLearn>\n\nWhy and how to remove unnecessary Effects from your components\n\nHow to cache expensive computations without Effects\n\nHow to reset and adjust component state without Effects\n\nHow to share logic between event handlers\n\nWhich logic should be moved to event handlers\n\nHow to notify parent components about changes\n\n</YouWillLearn>\n\n## How to remove unnecessary Effects {/*how-to-remove-unnecessary-effects*/}\n\nThere are two common cases in which you don't need Effects:","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1793":{"pageContent":"How to notify parent components about changes\n\n</YouWillLearn>\n\n## How to remove unnecessary Effects {/*how-to-remove-unnecessary-effects*/}\n\nThere are two common cases in which you don't need Effects:\n\n**You don't need Effects to transform data for rendering.** For example, let's say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update your component's state, React will first call your component functions to calculate what should be on the screen. Then React will [\"commit\"](/learn/render-and-commit) these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect *also* immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1794":{"pageContent":"**You don't need Effects to handle user events.** For example, let's say you want to send an `/api/buy` POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don't know *what* the user did (for example, which button was clicked). This is why you'll usually handle user events in the corresponding event handlers.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1795":{"pageContent":"You *do* need Effects to [synchronize](/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events) with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern [frameworks](/learn/start-a-new-react-project#building-with-a-full-featured-framework) provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.\n\nTo help you gain the right intuition, let's look at some common concrete examples!\n\n### Updating state based on props or state {/*updating-state-based-on-props-or-state*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1796":{"pageContent":"To help you gain the right intuition, let's look at some common concrete examples!\n\n### Updating state based on props or state {/*updating-state-based-on-props-or-state*/}\n\nSuppose you have a component with two state variables: `firstName` and `lastName`. You want to calculate a `fullName` from them by concatenating them. Moreover, you'd like `fullName` to update whenever `firstName` or `lastName` change. Your first instinct might be to add a `fullName` state variable and update it in an Effect:\n\n```js {5-9}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\n// 🔴 Avoid: redundant state and unnecessary Effect\n\nconst [fullName, setFullName] = useState('');\n\nuseEffect(() => {\n\nsetFullName(firstName + ' ' + lastName);\n\n}, [firstName, lastName]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1797":{"pageContent":"// 🔴 Avoid: redundant state and unnecessary Effect\n\nconst [fullName, setFullName] = useState('');\n\nuseEffect(() => {\n\nsetFullName(firstName + ' ' + lastName);\n\n}, [firstName, lastName]);\n\n// ...\n\n}\n\n```\n\nThis is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for `fullName`, then immediately re-renders with the updated value. Remove both the state variable and the Effect:\n\n```js {4-5}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\n// ✅ Good: calculated during rendering\n\nconst fullName = firstName + ' ' + lastName;\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1798":{"pageContent":"const [firstName, setFirstName] = useState('Taylor');\n\nconst [lastName, setLastName] = useState('Swift');\n\n// ✅ Good: calculated during rendering\n\nconst fullName = firstName + ' ' + lastName;\n\n// ...\n\n}\n\n```\n\n*When something can be calculated from the existing props or state, [don't put it in state.](/learn/choosing-the-state-structure#avoid-redundant-state) Instead, calculate it during rendering.** This makes your code faster (you avoid the extra \"cascading\" updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, [Thinking in React](/learn/thinking-in-react#step-3-find-the-minimal-but-complete-representation-of-ui-state) has some guidance on what should go into state.\n\n### Caching expensive calculations {/*caching-expensive-calculations*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1799":{"pageContent":"### Caching expensive calculations {/*caching-expensive-calculations*/}\n\nThis component computes `visibleTodos` by taking the `todos` it receives by props and filtering them according to the `filter` prop. You might feel tempted to store the result in a state variable and update it in an Effect:\n\n```js {4-8}\n\nfunction TodoList({ todos, filter }) {\n\nconst [newTodo, setNewTodo] = useState('');\n\n// 🔴 Avoid: redundant state and unnecessary Effect\n\nconst [visibleTodos, setVisibleTodos] = useState([]);\n\nuseEffect(() => {\n\nsetVisibleTodos(getFilteredTodos(todos, filter));\n\n}, [todos, filter]);\n\n// ...\n\n}\n\n```\n\nLike in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:\n\n```js {3-4}\n\nfunction TodoList({ todos, filter }) {\n\nconst [newTodo, setNewTodo] = useState('');\n\n// ✅ This is fine if getFilteredTodos() is not slow.\n\nconst visibleTodos = getFilteredTodos(todos, filter);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1800":{"pageContent":"function TodoList({ todos, filter }) {\n\nconst [newTodo, setNewTodo] = useState('');\n\n// ✅ This is fine if getFilteredTodos() is not slow.\n\nconst visibleTodos = getFilteredTodos(todos, filter);\n\n// ...\n\n}\n\n```\n\nIn many cases, this code is fine! But maybe `getFilteredTodos()` is slow or you have a lot of `todos`. In that case you don't want to recalculate `getFilteredTodos()` if some unrelated state variable like `newTodo` has changed.\n\nYou can cache (or [\"memoize\"](https://en.wikipedia.org/wiki/Memoization)) an expensive calculation by wrapping it in a [`useMemo`](/reference/react/useMemo) Hook:\n\n```js {5-8}\n\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n\nconst [newTodo, setNewTodo] = useState('');\n\nconst visibleTodos = useMemo(() => {\n\n// ✅ Does not re-run unless todos or filter change\n\nreturn getFilteredTodos(todos, filter);\n\n}, [todos, filter]);\n\n// ...\n\n}\n\n```\n\nOr, written as a single line:\n\n```js {5-6}\n\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1801":{"pageContent":"return getFilteredTodos(todos, filter);\n\n}, [todos, filter]);\n\n// ...\n\n}\n\n```\n\nOr, written as a single line:\n\n```js {5-6}\n\nimport { useMemo, useState } from 'react';\n\nfunction TodoList({ todos, filter }) {\n\nconst [newTodo, setNewTodo] = useState('');\n\n// ✅ Does not re-run getFilteredTodos() unless todos or filter change\n\nconst visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);\n\n// ...\n\n}\n\n```\n\n*This tells React that you don't want the inner function to re-run unless either `todos` or `filter` have changed.** React will remember the return value of `getFilteredTodos()` during the initial render. During the next renders, it will check if `todos` or `filter` are different. If they're the same as last time, `useMemo` will return the last result it has stored. But if they are different, React will call the wrapped function again (and store _that_ result instead).","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1802":{"pageContent":"The function you wrap in [`useMemo`](/reference/react/useMemo) runs during rendering, so this only works for [pure calculations.](/learn/keeping-components-pure)\n\n<DeepDive>\n\n#### How to tell if a calculation is expensive? {/*how-to-tell-if-a-calculation-is-expensive*/}\n\nIn general, unless you're creating or looping over thousands of objects, it's probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:\n\n```js {1,3}\n\nconsole.time('filter array');\n\nconst visibleTodos = getFilteredTodos(todos, filter);\n\nconsole.timeEnd('filter array');\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1803":{"pageContent":"```js {1,3}\n\nconsole.time('filter array');\n\nconst visibleTodos = getFilteredTodos(todos, filter);\n\nconsole.timeEnd('filter array');\n\n```\n\nPerform the interaction you're measuring (for example, typing into the input). You will then see logs like `filter array: 0.15ms` in your console. If the overall logged time adds up to a significant amount (say, `1ms` or more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation in `useMemo` to verify whether the total logged time has decreased for that interaction or not:\n\n```js\n\nconsole.time('filter array');\n\nconst visibleTodos = useMemo(() => {\n\nreturn getFilteredTodos(todos, filter); // Skipped if todos and filter haven't changed\n\n}, [todos, filter]);\n\nconsole.timeEnd('filter array');\n\n```\n\n`useMemo` won't make the *first* render faster. It only helps you skip unnecessary work on updates.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1804":{"pageContent":"}, [todos, filter]);\n\nconsole.timeEnd('filter array');\n\n```\n\n`useMemo` won't make the *first* render faster. It only helps you skip unnecessary work on updates.\n\nKeep in mind that your machine is probably faster than your users' so it's a good idea to test the performance with an artificial slowdown. For example, Chrome offers a [CPU Throttling](https://developer.chrome.com/blog/new-in-devtools-61/#throttling) option for this.\n\nAlso note that measuring performance in development will not give you the most accurate results. (For example, when [Strict Mode](/reference/react/StrictMode) is on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have.\n\n</DeepDive>\n\n### Resetting all state when a prop changes {/*resetting-all-state-when-a-prop-changes*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1805":{"pageContent":"</DeepDive>\n\n### Resetting all state when a prop changes {/*resetting-all-state-when-a-prop-changes*/}\n\nThis `ProfilePage` component receives a `userId` prop. The page contains a comment input, and you use a `comment` state variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, the `comment` state does not get reset. As a result, it's easy to accidentally post a comment on a wrong user's profile. To fix the issue, you want to clear out the `comment` state variable whenever the `userId` changes:\n\n```js {4-7}\n\nexport default function ProfilePage({ userId }) {\n\nconst [comment, setComment] = useState('');\n\n// 🔴 Avoid: Resetting state on prop change in an Effect\n\nuseEffect(() => {\n\nsetComment('');\n\n}, [userId]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1806":{"pageContent":"const [comment, setComment] = useState('');\n\n// 🔴 Avoid: Resetting state on prop change in an Effect\n\nuseEffect(() => {\n\nsetComment('');\n\n}, [userId]);\n\n// ...\n\n}\n\n```\n\nThis is inefficient because `ProfilePage` and its children will first render with the stale value, and then render again. It is also complicated because you'd need to do this in *every* component that has some state inside `ProfilePage`. For example, if the comment UI is nested, you'd want to clear out nested comment state too.\n\nInstead, you can tell React that each user's profile is conceptually a _different_ profile by giving it an explicit key. Split your component in two and pass a `key` attribute from the outer component to the inner one:\n\n```js {5,11-12}\n\nexport default function ProfilePage({ userId }) {\n\nreturn (\n\n<Profile\n\nuserId={userId}\n\nkey={userId}\n\n/>\n\n);\n\n}\n\nfunction Profile({ userId }) {\n\n// ✅ This and any other state below will reset on key change automatically\n\nconst [comment, setComment] = useState('');\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1807":{"pageContent":"<Profile\n\nuserId={userId}\n\nkey={userId}\n\n/>\n\n);\n\n}\n\nfunction Profile({ userId }) {\n\n// ✅ This and any other state below will reset on key change automatically\n\nconst [comment, setComment] = useState('');\n\n// ...\n\n}\n\n```\n\nNormally, React preserves the state when the same component is rendered in the same spot. **By passing `userId` as a `key` to the `Profile` component, you're asking React to treat two `Profile` components with different `userId` as two different components that should not share any state.** Whenever the key (which you've set to `userId`) changes, React will recreate the DOM and [reset the state](/learn/preserving-and-resetting-state#option-2-resetting-state-with-a-key) of the `Profile` component and all of its children. As a result, the `comment` field will clear out automatically when navigating between profiles.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1808":{"pageContent":"Note that in this example, only the outer `ProfilePage` component is exported and visible to other files in the project. Components rendering `ProfilePage` don't need to pass the key to it: they pass `userId` as a regular prop. The fact `ProfilePage` passes it as a `key` to the inner `Profile` component is an implementation detail.\n\n### Adjusting some state when a prop changes {/*adjusting-some-state-when-a-prop-changes*/}\n\nSometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.\n\nThis `List` component receives a list of `items` as a prop, and maintains the selected item in the `selection` state variable. You want to reset the `selection` to `null` whenever the `items` prop receives a different array:\n\n```js {5-8}\n\nfunction List({ items }) {\n\nconst [isReverse, setIsReverse] = useState(false);\n\nconst [selection, setSelection] = useState(null);\n\n// 🔴 Avoid: Adjusting state on prop change in an Effect\n\nuseEffect(() => {\n\nsetSelection(null);\n\n}, [items]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1809":{"pageContent":"const [selection, setSelection] = useState(null);\n\n// 🔴 Avoid: Adjusting state on prop change in an Effect\n\nuseEffect(() => {\n\nsetSelection(null);\n\n}, [items]);\n\n// ...\n\n}\n\n```\n\nThis, too, is not ideal. Every time the `items` change, the `List` and its child components will render with a stale `selection` value at first. Then React will update the DOM and run the Effects. Finally, the `setSelection(null)` call will cause another re-render of the `List` and its child components, restarting this whole process again.\n\nStart by deleting the Effect. Instead, adjust the state directly during rendering:\n\n```js {5-11}\n\nfunction List({ items }) {\n\nconst [isReverse, setIsReverse] = useState(false);\n\nconst [selection, setSelection] = useState(null);\n\n// Better: Adjust the state while rendering\n\nconst [prevItems, setPrevItems] = useState(items);\n\nif (items !== prevItems) {\n\nsetPrevItems(items);\n\nsetSelection(null);\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1810":{"pageContent":"// Better: Adjust the state while rendering\n\nconst [prevItems, setPrevItems] = useState(items);\n\nif (items !== prevItems) {\n\nsetPrevItems(items);\n\nsetSelection(null);\n\n}\n\n// ...\n\n}\n\n```\n\n[Storing information from previous renders](/reference/react/useState#storing-information-from-previous-renders) like this can be hard to understand, but it’s better than updating the same state in an Effect. In the above example, `setSelection` is called directly during a render. React will re-render the `List` *immediately* after it exits with a `return` statement. By that point, React hasn't rendered the `List` children or updated the DOM yet, so this lets the `List` children skip rendering the stale `selection` value.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1811":{"pageContent":"When you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update the *same* component's state during a render. If you update another component's state during a render, you'll see an error. A condition like `items !== prevItems` is necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting a timeout) should remain in event handlers or Effects to [keep your components predictable.](/learn/keeping-components-pure)","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1812":{"pageContent":"*Although this pattern is more efficient than an Effect, most components shouldn't need it either.** No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you can [reset all state with a key](#resetting-all-state-when-a-prop-changes) or [calculate everything during rendering](#updating-state-based-on-props-or-state) instead. For example, instead of storing (and resetting) the selected *item*, you can store the selected *item ID:*\n\n```js {3-5}\n\nfunction List({ items }) {\n\nconst [isReverse, setIsReverse] = useState(false);\n\nconst [selectedId, setSelectedId] = useState(null);\n\n// ✅ Best: Calculate everything during rendering\n\nconst selection = items.find(item => item.id === selectedId) ?? null;\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1813":{"pageContent":"const [selectedId, setSelectedId] = useState(null);\n\n// ✅ Best: Calculate everything during rendering\n\nconst selection = items.find(item => item.id === selectedId) ?? null;\n\n// ...\n\n}\n\n```\n\nNow there is no need to \"adjust\" the state at all. If the item with the selected ID is in the list, it remains selected. If it's not, the `selection` calculated during rendering will be `null` because no matching item was found. This behavior is a bit different, but arguably it's better because most changes to `items` now preserve the selection. However, you'd need to use `selection` in all the logic below because an item with `selectedId` might not exist.\n\n### Sharing logic between event handlers {/*sharing-logic-between-event-handlers*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1814":{"pageContent":"### Sharing logic between event handlers {/*sharing-logic-between-event-handlers*/}\n\nLet's say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. Adding the `showNotification()` call to both buttons' click handlers feels repetitive so you might be tempted to place this logic in an Effect:\n\n```js {2-7}\n\nfunction ProductPage({ product, addToCart }) {\n\n// 🔴 Avoid: Event-specific logic inside an Effect\n\nuseEffect(() => {\n\nif (product.isInCart) {\n\nshowNotification(`Added ${product.name} to the shopping cart!`);\n\n}\n\n}, [product]);\n\nfunction handleBuyClick() {\n\naddToCart(product);\n\n}\n\nfunction handleCheckoutClick() {\n\naddToCart(product);\n\nnavigateTo('/checkout');\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1815":{"pageContent":"}\n\n}, [product]);\n\nfunction handleBuyClick() {\n\naddToCart(product);\n\n}\n\nfunction handleCheckoutClick() {\n\naddToCart(product);\n\nnavigateTo('/checkout');\n\n}\n\n// ...\n\n}\n\n```\n\nThis Effect is unnecessary. It will also most likely cause bugs. For example, let's say that your app \"remembers\" the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product's page. This is because `product.isInCart` will already be `true` on the page load, so the Effect above will call `showNotification()`.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1816":{"pageContent":"*When you're not sure whether some code should be in an Effect or in an event handler, ask yourself *why* this code needs to run. Use Effects only for code that should run *because* the component was displayed to the user.** In this example, the notification should appear because the user *pressed the button*, not because the page was displayed! Delete the Effect and put the shared logic into a function that you call from both event handlers:\n\n```js {2-6,9,13}\n\nfunction ProductPage({ product, addToCart }) {\n\n// ✅ Good: Event-specific logic is called from event handlers\n\nfunction buyProduct() {\n\naddToCart(product);\n\nshowNotification(`Added ${product.name} to the shopping cart!`);\n\n}\n\nfunction handleBuyClick() {\n\nbuyProduct();\n\n}\n\nfunction handleCheckoutClick() {\n\nbuyProduct();\n\nnavigateTo('/checkout');\n\n}\n\n// ...\n\n}\n\n```\n\nThis both removes the unnecessary Effect and fixes the bug.\n\n### Sending a POST request {/*sending-a-post-request*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1817":{"pageContent":"}\n\nfunction handleCheckoutClick() {\n\nbuyProduct();\n\nnavigateTo('/checkout');\n\n}\n\n// ...\n\n}\n\n```\n\nThis both removes the unnecessary Effect and fixes the bug.\n\n### Sending a POST request {/*sending-a-post-request*/}\n\nThis `Form` component sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the `/api/register` endpoint:\n\n```js {5-8,10-16}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\n// ✅ Good: This logic should run because the component was displayed\n\nuseEffect(() => {\n\npost('/analytics/event', { eventName: 'visit_form' });\n\n}, []);\n\n// 🔴 Avoid: Event-specific logic inside an Effect\n\nconst [jsonToSubmit, setJsonToSubmit] = useState(null);\n\nuseEffect(() => {\n\nif (jsonToSubmit !== null) {\n\npost('/api/register', jsonToSubmit);\n\n}\n\n}, [jsonToSubmit]);\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetJsonToSubmit({ firstName, lastName });\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1818":{"pageContent":"useEffect(() => {\n\nif (jsonToSubmit !== null) {\n\npost('/api/register', jsonToSubmit);\n\n}\n\n}, [jsonToSubmit]);\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetJsonToSubmit({ firstName, lastName });\n\n}\n\n// ...\n\n}\n\n```\n\nLet's apply the same criteria as in the example before.\n\nThe analytics POST request should remain in an Effect. This is because the _reason_ to send the analytics event is that the form was displayed. (It would fire twice in development, but [see here](/learn/synchronizing-with-effects#sending-analytics) for how to deal with that.)\n\nHowever, the `/api/register` POST request is not caused by the form being _displayed_. You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happen _on that particular interaction_. Delete the second Effect and move that POST request into the event handler:\n\n```js {12-13}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1819":{"pageContent":"```js {12-13}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\n// ✅ Good: This logic runs because the component was displayed\n\nuseEffect(() => {\n\npost('/analytics/event', { eventName: 'visit_form' });\n\n}, []);\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\n// ✅ Good: Event-specific logic is in the event handler\n\npost('/api/register', { firstName, lastName });\n\n}\n\n// ...\n\n}\n\n```\n\nWhen you choose whether to put some logic into an event handler or an Effect, the main question you need to answer is _what kind of logic_ it is from the user's perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it's caused by the user _seeing_ the component on the screen, keep it in the Effect.\n\n### Chains of computations {/*chains-of-computations*/}\n\nSometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:\n\n```js {7-29}\n\nfunction Game() {\n\nconst [card, setCard] = useState(null);","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1820":{"pageContent":"Sometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:\n\n```js {7-29}\n\nfunction Game() {\n\nconst [card, setCard] = useState(null);\n\nconst [goldCardCount, setGoldCardCount] = useState(0);\n\nconst [round, setRound] = useState(1);\n\nconst [isGameOver, setIsGameOver] = useState(false);\n\n// 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other\n\nuseEffect(() => {\n\nif (card !== null && card.gold) {\n\nsetGoldCardCount(c => c + 1);\n\n}\n\n}, [card]);\n\nuseEffect(() => {\n\nif (goldCardCount > 3) {\n\nsetRound(r => r + 1)\n\nsetGoldCardCount(0);\n\n}\n\n}, [goldCardCount]);\n\nuseEffect(() => {\n\nif (round > 5) {\n\nsetIsGameOver(true);\n\n}\n\n}, [round]);\n\nuseEffect(() => {\n\nalert('Good game!');\n\n}, [isGameOver]);\n\nfunction handlePlaceCard(nextCard) {\n\nif (isGameOver) {\n\nthrow Error('Game already ended.');\n\n} else {\n\nsetCard(nextCard);\n\n}\n\n}\n\n// ...\n\n```\n\nThere are two problems with this code.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1821":{"pageContent":"alert('Good game!');\n\n}, [isGameOver]);\n\nfunction handlePlaceCard(nextCard) {\n\nif (isGameOver) {\n\nthrow Error('Game already ended.');\n\n} else {\n\nsetCard(nextCard);\n\n}\n\n}\n\n// ...\n\n```\n\nThere are two problems with this code.\n\nOne problem is that it is very inefficient: the component (and its children) have to re-render between each `set` call in the chain. In the example above, in the worst case (`setCard` → render → `setGoldCardCount` → render → `setRound` → render → `setIsGameOver` → render) there are three unnecessary re-renders of the tree below.\n\nEven if it weren't slow, as your code evolves, you will run into cases where the \"chain\" you wrote doesn't fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You'd do it by updating each state variable to a value from the past. However, setting the `card` state to a value from the past would trigger the Effect chain again and change the data you're showing. Code like this is often rigid and fragile.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1822":{"pageContent":"In this case, it's better to calculate what you can during rendering, and adjust the state in the event handler:\n\n```js {6-7,14-26}\n\nfunction Game() {\n\nconst [card, setCard] = useState(null);\n\nconst [goldCardCount, setGoldCardCount] = useState(0);\n\nconst [round, setRound] = useState(1);\n\n// ✅ Calculate what you can during rendering\n\nconst isGameOver = round > 5;\n\nfunction handlePlaceCard(nextCard) {\n\nif (isGameOver) {\n\nthrow Error('Game already ended.');\n\n}\n\n// ✅ Calculate all the next state in the event handler\n\nsetCard(nextCard);\n\nif (nextCard.gold) {\n\nif (goldCardCount <= 3) {\n\nsetGoldCardCount(goldCardCount + 1);\n\n} else {\n\nsetGoldCardCount(0);\n\nsetRound(round + 1);\n\nif (round === 5) {\n\nalert('Good game!');\n\n}\n\n}\n\n}\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1823":{"pageContent":"setCard(nextCard);\n\nif (nextCard.gold) {\n\nif (goldCardCount <= 3) {\n\nsetGoldCardCount(goldCardCount + 1);\n\n} else {\n\nsetGoldCardCount(0);\n\nsetRound(round + 1);\n\nif (round === 5) {\n\nalert('Good game!');\n\n}\n\n}\n\n}\n\n}\n\n// ...\n\n```\n\nThis is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you can [extract a function](#sharing-logic-between-event-handlers) and call it from those handlers.\n\nRemember that inside event handlers, [state behaves like a snapshot.](/learn/state-as-a-snapshot) For example, even after you call `setRound(round + 1)`, the `round` variable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually like `const nextRound = round + 1`.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1824":{"pageContent":"In some cases, you *can't* calculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects fetching data is appropriate because you are synchronizing with network.\n\n### Initializing the application {/*initializing-the-application*/}\n\nSome logic should only run once when the app loads. You might place it in an Effect in the top-level component:\n\n```js {2-6}\n\nfunction App() {\n\n// 🔴 Avoid: Effects with logic that should only ever run once\n\nuseEffect(() => {\n\nloadDataFromLocalStorage();\n\ncheckAuthToken();\n\n}, []);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1825":{"pageContent":"```js {2-6}\n\nfunction App() {\n\n// 🔴 Avoid: Effects with logic that should only ever run once\n\nuseEffect(() => {\n\nloadDataFromLocalStorage();\n\ncheckAuthToken();\n\n}, []);\n\n// ...\n\n}\n\n```\n\nHowever, you'll quickly discover that it [runs twice in development.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development) This can cause issues--for example, maybe it invalidates the authentication token because the function wasn't designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-level `App` component. Although it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must run *once per app load* rather than *once per component mount*, you can add a top-level variable to track whether it has already executed, and always skip re-running it:\n\n```js {1,5-6,10}\n\nlet didInit = false;\n\nfunction App() {\n\nuseEffect(() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1826":{"pageContent":"```js {1,5-6,10}\n\nlet didInit = false;\n\nfunction App() {\n\nuseEffect(() => {\n\nif (!didInit) {\n\ndidInit = true;\n\n// ✅ Only runs once per app load\n\nloadDataFromLocalStorage();\n\ncheckAuthToken();\n\n}\n\n}, []);\n\n// ...\n\n}\n\n```\n\nYou can also run it during module initialization and before the app renders:\n\n```js {1,5}\n\nif (typeof window !== 'undefined') { // Check if we're running in the browser.\n\n// ✅ Only runs once per app load\n\ncheckAuthToken();\n\nloadDataFromLocalStorage();\n\n}\n\nfunction App() {\n\n// ...\n\n}\n\n```\n\nCode at the top level runs once when your component is imported--even if it doesn't end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don't overuse this pattern. Keep app-wide initialization logic to root component modules like `App.js` or in your application's entry point module.\n\n### Notifying parent components about state changes {/*notifying-parent-components-about-state-changes*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1827":{"pageContent":"### Notifying parent components about state changes {/*notifying-parent-components-about-state-changes*/}\n\nLet's say you're writing a `Toggle` component with an internal `isOn` state which can be either `true` or `false`. There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever the `Toggle` internal state changes, so you expose an `onChange` event and call it from an Effect:\n\n```js {4-7}\n\nfunction Toggle({ onChange }) {\n\nconst [isOn, setIsOn] = useState(false);\n\n// 🔴 Avoid: The onChange handler runs too late\n\nuseEffect(() => {\n\nonChange(isOn);\n\n}, [isOn, onChange])\n\nfunction handleClick() {\n\nsetIsOn(!isOn);\n\n}\n\nfunction handleDragEnd(e) {\n\nif (isCloserToRightEdge(e)) {\n\nsetIsOn(true);\n\n} else {\n\nsetIsOn(false);\n\n}\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1828":{"pageContent":"useEffect(() => {\n\nonChange(isOn);\n\n}, [isOn, onChange])\n\nfunction handleClick() {\n\nsetIsOn(!isOn);\n\n}\n\nfunction handleDragEnd(e) {\n\nif (isCloserToRightEdge(e)) {\n\nsetIsOn(true);\n\n} else {\n\nsetIsOn(false);\n\n}\n\n}\n\n// ...\n\n}\n\n```\n\nLike earlier, this is not ideal. The `Toggle` updates its state first, and React updates the screen. Then React runs the Effect, which calls the `onChange` function passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass instead.\n\nDelete the Effect and instead update the state of *both* components within the same event handler:\n\n```js {5-7,11,16,18}\n\nfunction Toggle({ onChange }) {\n\nconst [isOn, setIsOn] = useState(false);\n\nfunction updateToggle(nextIsOn) {\n\n// ✅ Good: Perform all updates during the event that caused them\n\nsetIsOn(nextIsOn);\n\nonChange(nextIsOn);\n\n}\n\nfunction handleClick() {\n\nupdateToggle(!isOn);\n\n}\n\nfunction handleDragEnd(e) {\n\nif (isCloserToRightEdge(e)) {\n\nupdateToggle(true);\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1829":{"pageContent":"setIsOn(nextIsOn);\n\nonChange(nextIsOn);\n\n}\n\nfunction handleClick() {\n\nupdateToggle(!isOn);\n\n}\n\nfunction handleDragEnd(e) {\n\nif (isCloserToRightEdge(e)) {\n\nupdateToggle(true);\n\n} else {\n\nupdateToggle(false);\n\n}\n\n}\n\n// ...\n\n}\n\n```\n\nWith this approach, both the `Toggle` component and its parent component update their state during the event. React [batches updates](/learn/queueing-a-series-of-state-updates) from different components together, so there will only be one render pass as a result.\n\nYou might also be able to remove the state altogether, and instead receive `isOn` from the parent component:\n\n```js {1,2}\n\n// ✅ Also good: the component is fully controlled by its parent\n\nfunction Toggle({ isOn, onChange }) {\n\nfunction handleClick() {\n\nonChange(!isOn);\n\n}\n\nfunction handleDragEnd(e) {\n\nif (isCloserToRightEdge(e)) {\n\nonChange(true);\n\n} else {\n\nonChange(false);\n\n}\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1830":{"pageContent":"function Toggle({ isOn, onChange }) {\n\nfunction handleClick() {\n\nonChange(!isOn);\n\n}\n\nfunction handleDragEnd(e) {\n\nif (isCloserToRightEdge(e)) {\n\nonChange(true);\n\n} else {\n\nonChange(false);\n\n}\n\n}\n\n// ...\n\n}\n\n```\n\n[\"Lifting state up\"](/learn/sharing-state-between-components) lets the parent component fully control the `Toggle` by toggling the parent's own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, it's a sign to try lifting state up instead!\n\n### Passing data to the parent {/*passing-data-to-the-parent*/}\n\nThis `Child` component fetches some data and then passes it to the `Parent` component in an Effect:\n\n```js {9-14}\n\nfunction Parent() {\n\nconst [data, setData] = useState(null);\n\n// ...\n\nreturn <Child onFetched={setData} />;\n\n}\n\nfunction Child({ onFetched }) {\n\nconst data = useSomeAPI();\n\n// 🔴 Avoid: Passing data to the parent in an Effect\n\nuseEffect(() => {\n\nif (data) {\n\nonFetched(data);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1831":{"pageContent":"// ...\n\nreturn <Child onFetched={setData} />;\n\n}\n\nfunction Child({ onFetched }) {\n\nconst data = useSomeAPI();\n\n// 🔴 Avoid: Passing data to the parent in an Effect\n\nuseEffect(() => {\n\nif (data) {\n\nonFetched(data);\n\n}\n\n}, [onFetched, data]);\n\n// ...\n\n}\n\n```\n\nIn React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent component need the same data, let the parent component fetch that data, and *pass it down* to the child instead:\n\n```js {4-5}\n\nfunction Parent() {\n\nconst data = useSomeAPI();\n\n// ...\n\n// ✅ Good: Passing data down to the child\n\nreturn <Child data={data} />;\n\n}\n\nfunction Child({ data }) {\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1832":{"pageContent":"```js {4-5}\n\nfunction Parent() {\n\nconst data = useSomeAPI();\n\n// ...\n\n// ✅ Good: Passing data down to the child\n\nreturn <Child data={data} />;\n\n}\n\nfunction Child({ data }) {\n\n// ...\n\n}\n\n```\n\nThis is simpler and keeps the data flow predictable: the data flows down from the parent to the child.\n\n### Subscribing to an external store {/*subscribing-to-an-external-store*/}\n\nSometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React's knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:\n\n```js {2-17}\n\nfunction useOnlineStatus() {\n\n// Not ideal: Manual store subscription in an Effect\n\nconst [isOnline, setIsOnline] = useState(true);\n\nuseEffect(() => {\n\nfunction updateState() {\n\nsetIsOnline(navigator.onLine);\n\n}\n\nupdateState();\n\nwindow.addEventListener('online', updateState);\n\nwindow.addEventListener('offline', updateState);\n\nreturn () => {","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1833":{"pageContent":"useEffect(() => {\n\nfunction updateState() {\n\nsetIsOnline(navigator.onLine);\n\n}\n\nupdateState();\n\nwindow.addEventListener('online', updateState);\n\nwindow.addEventListener('offline', updateState);\n\nreturn () => {\n\nwindow.removeEventListener('online', updateState);\n\nwindow.removeEventListener('offline', updateState);\n\n};\n\n}, []);\n\nreturn isOnline;\n\n}\n\nfunction ChatIndicator() {\n\nconst isOnline = useOnlineStatus();\n\n// ...\n\n}\n\n```\n\nHere, the component subscribes to an external data store (in this case, the browser `navigator.onLine` API). Since this API does not exist on the server (so it can't be used to generate the initial HTML), initially the state is set to `true`. Whenever the value of that data store changes in the browser, the component updates its state.\n\nAlthough it's common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call to [`useSyncExternalStore`](/reference/react/useSyncExternalStore):\n\n```js {11-16}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1834":{"pageContent":"```js {11-16}\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\nfunction useOnlineStatus() {\n\n// ✅ Good: Subscribing to an external store with a built-in Hook\n\nreturn useSyncExternalStore(\n\nsubscribe, // React won't resubscribe for as long as you pass the same function\n\n() => navigator.onLine, // How to get the value on the client\n\n() => true // How to get the value on the server\n\n);\n\n}\n\nfunction ChatIndicator() {\n\nconst isOnline = useOnlineStatus();\n\n// ...\n\n}\n\n```\n\nThis approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you'll write a custom Hook like `useOnlineStatus()` above so that you don't need to repeat this code in the individual components. [Read more about subscribing to external stores from React components.](/reference/react/useSyncExternalStore)","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1835":{"pageContent":"### Fetching data {/*fetching-data*/}\n\nMany apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:\n\n```js {5-10}\n\nfunction SearchResults({ query }) {\n\nconst [results, setResults] = useState([]);\n\nconst [page, setPage] = useState(1);\n\nuseEffect(() => {\n\n// 🔴 Avoid: Fetching without cleanup logic\n\nfetchResults(query, page).then(json => {\n\nsetResults(json);\n\n});\n\n}, [query, page]);\n\nfunction handleNextPageClick() {\n\nsetPage(page + 1);\n\n}\n\n// ...\n\n}\n\n```\n\nYou *don't* need to move this fetch to an event handler.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1836":{"pageContent":"fetchResults(query, page).then(json => {\n\nsetResults(json);\n\n});\n\n}, [query, page]);\n\nfunction handleNextPageClick() {\n\nsetPage(page + 1);\n\n}\n\n// ...\n\n}\n\n```\n\nYou *don't* need to move this fetch to an event handler.\n\nThis might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it's not *the typing event* that's the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input. It doesn't matter where `page` and `query` come from. While this component is visible, you want to keep `results` [synchronized](/learn/synchronizing-with-effects) with data from the network according to the current `page` and `query`. This is why it's an Effect.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1837":{"pageContent":"However, the code above has a bug. Imagine you type `\"hello\"` fast. Then the `query` will change from `\"h\"`, to `\"he\"`, `\"hel\"`, `\"hell\"`, and `\"hello\"`. This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the `\"hell\"` response may arrive *after* the `\"hello\"` response. Since it will call `setResults()` last, you will be displaying the wrong search results. This is called a [\"race condition\"](https://en.wikipedia.org/wiki/Race_condition): two different requests \"raced\" against each other and came in a different order than you expected.\n\n*To fix the race condition, you need to [add a cleanup function](/learn/synchronizing-with-effects#fetching-data) to ignore stale responses:**\n\n```js {5,7,9,11-13}\n\nfunction SearchResults({ query }) {\n\nconst [results, setResults] = useState([]);\n\nconst [page, setPage] = useState(1);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetchResults(query, page).then(json => {\n\nif (!ignore) {\n\nsetResults(json);\n\n}\n\n});","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1838":{"pageContent":"const [results, setResults] = useState([]);\n\nconst [page, setPage] = useState(1);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetchResults(query, page).then(json => {\n\nif (!ignore) {\n\nsetResults(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [query, page]);\n\nfunction handleNextPageClick() {\n\nsetPage(page + 1);\n\n}\n\n// ...\n\n}\n\n```\n\nThis ensures that when your Effect fetches data, all responses except the last requested one will be ignored.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1839":{"pageContent":"setPage(page + 1);\n\n}\n\n// ...\n\n}\n\n```\n\nThis ensures that when your Effect fetches data, all responses except the last requested one will be ignored.\n\nHandling race conditions is not the only difficulty with implementing data fetching. You might also want to think about how to cache the responses (so that the user can click Back and see the previous screen instantly instead of a spinner), how to fetch them on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child component that needs to fetch data doesn't have to wait for every parent above it to finish fetching their data before it can start). **These issues apply to any UI library, not just React. Solving them is not trivial, which is why modern [frameworks](/learn/start-a-new-react-project#building-with-a-full-featured-framework) provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.**","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1840":{"pageContent":"If you don't use a framework (and don't want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:\n\n```js {4}\n\nfunction SearchResults({ query }) {\n\nconst [page, setPage] = useState(1);\n\nconst params = new URLSearchParams({ query, page });\n\nconst results = useData(`/api/search?${params}`);\n\nfunction handleNextPageClick() {\n\nsetPage(page + 1);\n\n}\n\n// ...\n\n}\n\nfunction useData(url) {\n\nconst [data, setData] = useState(null);\n\nuseEffect(() => {\n\nlet ignore = false;\n\nfetch(url)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetData(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [url]);\n\nreturn data;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1841":{"pageContent":"useEffect(() => {\n\nlet ignore = false;\n\nfetch(url)\n\n.then(response => response.json())\n\n.then(json => {\n\nif (!ignore) {\n\nsetData(json);\n\n}\n\n});\n\nreturn () => {\n\nignore = true;\n\n};\n\n}, [url]);\n\nreturn data;\n\n}\n\n```\n\nYou'll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem. **Although this alone won't be as efficient as using a framework's built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.**\n\nIn general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API like `useData` above. The fewer raw `useEffect` calls you have in your components, the easier you will find to maintain your application.\n\n<Recap>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1842":{"pageContent":"<Recap>\n\nIf you can calculate something during render, you don't need an Effect.\n\nTo cache expensive calculations, add `useMemo` instead of `useEffect`.\n\nTo reset the state of an entire component tree, pass a different `key` to it.\n\nTo reset a particular bit of state in response to a prop change, set it during rendering.\n\nCode that needs to run because a component was *displayed* should be in Effects, the rest should be in events.\n\nIf you need to update the state of several components, it's better to do it during a single event.\n\nWhenever you try to synchronize state variables in different components, consider lifting state up.\n\nYou can fetch data with Effects, but you need to implement cleanup to avoid race conditions.\n\n</Recap>\n\n<Challenges>\n\n#### Transform data without Effects {/*transform-data-without-effects*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1843":{"pageContent":"You can fetch data with Effects, but you need to implement cleanup to avoid race conditions.\n\n</Recap>\n\n<Challenges>\n\n#### Transform data without Effects {/*transform-data-without-effects*/}\n\nThe `TodoList` below displays a list of todos. When the \"Show only active todos\" checkbox is ticked, completed todos are not displayed in the list. Regardless of which todos are visible, the footer displays the count of todos that are not yet completed.\n\nSimplify this component by removing all the unnecessary state and Effects.\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { initialTodos, createTodo } from './todos.js';\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(initialTodos);\n\nconst [showActive, setShowActive] = useState(false);\n\nconst [activeTodos, setActiveTodos] = useState([]);\n\nconst [visibleTodos, setVisibleTodos] = useState([]);\n\nconst [footer, setFooter] = useState(null);\n\nuseEffect(() => {\n\nsetActiveTodos(todos.filter(todo => !todo.completed));\n\n}, [todos]);","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1844":{"pageContent":"const [visibleTodos, setVisibleTodos] = useState([]);\n\nconst [footer, setFooter] = useState(null);\n\nuseEffect(() => {\n\nsetActiveTodos(todos.filter(todo => !todo.completed));\n\n}, [todos]);\n\nuseEffect(() => {\n\nsetVisibleTodos(showActive ? activeTodos : todos);\n\n}, [showActive, todos, activeTodos]);\n\nuseEffect(() => {\n\nsetFooter(\n\n<footer>\n\n{activeTodos.length} todos left\n\n</footer>\n\n);\n\n}, [activeTodos]);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}\n\n/>\n\nShow only active todos\n\n</label>\n\n<NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ? <s>{todo.text}</s> : todo.text}\n\n</li>\n\n))}\n\n</ul>\n\n{footer}\n\n</>\n\n);\n\n}\n\nfunction NewTodo({ onAdd }) {\n\nconst [text, setText] = useState('');\n\nfunction handleAddClick() {\n\nsetText('');\n\nonAdd(createTodo(text));\n\n}\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={handleAddClick}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js todos.js\n\nlet nextId = 0;","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1845":{"pageContent":"setText('');\n\nonAdd(createTodo(text));\n\n}\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={handleAddClick}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js todos.js\n\nlet nextId = 0;\n\nexport function createTodo(text, completed = false) {\n\nreturn {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Hint>\n\nIf you can calculate something during rendering, you don't need state or an Effect that updates it.\n\n</Hint>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1846":{"pageContent":"];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Hint>\n\nIf you can calculate something during rendering, you don't need state or an Effect that updates it.\n\n</Hint>\n\n<Solution>\n\nThere are only two essential pieces of state in this example: the list of `todos` and the `showActive` state variable which represents whether the checkbox is ticked. All of the other state variables are [redundant](/learn/choosing-the-state-structure#avoid-redundant-state) and can be calculated during rendering instead. This includes the `footer` which you can move directly into the surrounding JSX.\n\nYour result should end up looking like this:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { initialTodos, createTodo } from './todos.js';\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(initialTodos);\n\nconst [showActive, setShowActive] = useState(false);\n\nconst activeTodos = todos.filter(todo => !todo.completed);\n\nconst visibleTodos = showActive ? activeTodos : todos;","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1847":{"pageContent":"const [showActive, setShowActive] = useState(false);\n\nconst activeTodos = todos.filter(todo => !todo.completed);\n\nconst visibleTodos = showActive ? activeTodos : todos;\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}\n\n/>\n\nShow only active todos\n\n</label>\n\n<NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ? <s>{todo.text}</s> : todo.text}\n\n</li>\n\n))}\n\n</ul>\n\n<footer>\n\n{activeTodos.length} todos left\n\n</footer>\n\n</>\n\n);\n\n}\n\nfunction NewTodo({ onAdd }) {\n\nconst [text, setText] = useState('');\n\nfunction handleAddClick() {\n\nsetText('');\n\nonAdd(createTodo(text));\n\n}\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={handleAddClick}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js todos.js\n\nlet nextId = 0;\n\nexport function createTodo(text, completed = false) {\n\nreturn {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1848":{"pageContent":"let nextId = 0;\n\nexport function createTodo(text, completed = false) {\n\nreturn {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Cache a calculation without Effects {/*cache-a-calculation-without-effects*/}\n\nIn this example, filtering the todos was extracted into a separate function called `getVisibleTodos()`. This function contains a `console.log()` call inside of it which helps you notice when it's being called. Toggle \"Show only active todos\" and notice that it causes `getVisibleTodos()` to re-run. This is expected because visible todos change when you toggle which ones to display.","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1849":{"pageContent":"Your task is to remove the Effect that recomputes the `visibleTodos` list in the `TodoList` component. However, you need to make sure that `getVisibleTodos()` does *not* re-run (and so does not print any logs) when you type into the input.\n\n<Hint>\n\nOne solution is to add a `useMemo` call to cache the visible todos. There is also another, less obvious solution.\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nimport { initialTodos, createTodo, getVisibleTodos } from './todos.js';\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(initialTodos);\n\nconst [showActive, setShowActive] = useState(false);\n\nconst [text, setText] = useState('');\n\nconst [visibleTodos, setVisibleTodos] = useState([]);\n\nuseEffect(() => {\n\nsetVisibleTodos(getVisibleTodos(todos, showActive));\n\n}, [todos, showActive]);\n\nfunction handleAddClick() {\n\nsetText('');\n\nsetTodos([...todos, createTodo(text)]);\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1850":{"pageContent":"function handleAddClick() {\n\nsetText('');\n\nsetTodos([...todos, createTodo(text)]);\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}\n\n/>\n\nShow only active todos\n\n</label>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={handleAddClick}>\n\nAdd\n\n</button>\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ? <s>{todo.text}</s> : todo.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js todos.js\n\nlet nextId = 0;\n\nlet calls = 0;\n\nexport function getVisibleTodos(todos, showActive) {\n\nconsole.log(`getVisibleTodos() was called ${++calls} times`);\n\nconst activeTodos = todos.filter(todo => !todo.completed);\n\nconst visibleTodos = showActive ? activeTodos : todos;\n\nreturn visibleTodos;\n\n}\n\nexport function createTodo(text, completed = false) {\n\nreturn {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1851":{"pageContent":"return {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nRemove the state variable and the Effect, and instead add a `useMemo` call to cache the result of calling `getVisibleTodos()`:\n\n<Sandpack>\n\n```js\n\nimport { useState, useMemo } from 'react';\n\nimport { initialTodos, createTodo, getVisibleTodos } from './todos.js';\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(initialTodos);\n\nconst [showActive, setShowActive] = useState(false);\n\nconst [text, setText] = useState('');\n\nconst visibleTodos = useMemo(\n\n() => getVisibleTodos(todos, showActive),\n\n[todos, showActive]\n\n);\n\nfunction handleAddClick() {\n\nsetText('');\n\nsetTodos([...todos, createTodo(text)]);\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}\n\n/>\n\nShow only active todos\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1852":{"pageContent":"setText('');\n\nsetTodos([...todos, createTodo(text)]);\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}\n\n/>\n\nShow only active todos\n\n</label>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={handleAddClick}>\n\nAdd\n\n</button>\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ? <s>{todo.text}</s> : todo.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js todos.js\n\nlet nextId = 0;\n\nlet calls = 0;\n\nexport function getVisibleTodos(todos, showActive) {\n\nconsole.log(`getVisibleTodos() was called ${++calls} times`);\n\nconst activeTodos = todos.filter(todo => !todo.completed);\n\nconst visibleTodos = showActive ? activeTodos : todos;\n\nreturn visibleTodos;\n\n}\n\nexport function createTodo(text, completed = false) {\n\nreturn {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1853":{"pageContent":"};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nWith this change, `getVisibleTodos()` will be called only if `todos` or `showActive` change. Typing into the input only changes the `text` state variable, so it does not trigger a call to `getVisibleTodos()`.\n\nThere is also another solution which does not need `useMemo`. Since the `text` state variable can't possibly affect the list of todos, you can extract the `NewTodo` form into a separate component, and move the `text` state variable inside of it:\n\n<Sandpack>\n\n```js\n\nimport { useState, useMemo } from 'react';\n\nimport { initialTodos, createTodo, getVisibleTodos } from './todos.js';\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(initialTodos);\n\nconst [showActive, setShowActive] = useState(false);\n\nconst visibleTodos = getVisibleTodos(todos, showActive);\n\nreturn (\n\n<>\n\n<label>\n\n<input","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1854":{"pageContent":"const [todos, setTodos] = useState(initialTodos);\n\nconst [showActive, setShowActive] = useState(false);\n\nconst visibleTodos = getVisibleTodos(todos, showActive);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={showActive}\n\nonChange={e => setShowActive(e.target.checked)}\n\n/>\n\nShow only active todos\n\n</label>\n\n<NewTodo onAdd={newTodo => setTodos([...todos, newTodo])} />\n\n<ul>\n\n{visibleTodos.map(todo => (\n\n<li key={todo.id}>\n\n{todo.completed ? <s>{todo.text}</s> : todo.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\nfunction NewTodo({ onAdd }) {\n\nconst [text, setText] = useState('');\n\nfunction handleAddClick() {\n\nsetText('');\n\nonAdd(createTodo(text));\n\n}\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<button onClick={handleAddClick}>\n\nAdd\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n```js todos.js\n\nlet nextId = 0;\n\nlet calls = 0;\n\nexport function getVisibleTodos(todos, showActive) {\n\nconsole.log(`getVisibleTodos() was called ${++calls} times`);\n\nconst activeTodos = todos.filter(todo => !todo.completed);\n\nconst visibleTodos = showActive ? activeTodos : todos;","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1855":{"pageContent":"console.log(`getVisibleTodos() was called ${++calls} times`);\n\nconst activeTodos = todos.filter(todo => !todo.completed);\n\nconst visibleTodos = showActive ? activeTodos : todos;\n\nreturn visibleTodos;\n\n}\n\nexport function createTodo(text, completed = false) {\n\nreturn {\n\nid: nextId++,\n\ntext,\n\ncompleted\n\n};\n\n}\n\nexport const initialTodos = [\n\ncreateTodo('Get apples', true),\n\ncreateTodo('Get oranges', true),\n\ncreateTodo('Get carrots'),\n\n];\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-top: 10px; }\n\n```\n\n</Sandpack>\n\nThis approach satisfies the requirements too. When you type into the input, only the `text` state variable updates. Since the `text` state variable is in the child `NewTodo` component, the parent `TodoList` component won't get re-rendered. This is why `getVisibleTodos()` doesn't get called when you type. (It would still be called if the `TodoList` re-renders for another reason.)\n\n</Solution>\n\n#### Reset state without Effects {/*reset-state-without-effects*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1856":{"pageContent":"</Solution>\n\n#### Reset state without Effects {/*reset-state-without-effects*/}\n\nThis `EditContact` component receives a contact object shaped like `{ id, name, email }` as the `savedContact` prop. Try editing the name and email input fields. When you press Save, the contact's button above the form updates to the edited name. When you press Reset, any pending changes in the form are discarded. Play around with this UI to get a feel for it.\n\nWhen you select a contact with the buttons at the top, the form resets to reflect that contact's details. This is done with an Effect inside `EditContact.js`. Remove this Effect. Find another way to reset the form when `savedContact.id` changes.\n\n<Sandpack>\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ContactList from './ContactList.js';\n\nimport EditContact from './EditContact.js';\n\nexport default function ContactManager() {\n\nconst [\n\ncontacts,\n\nsetContacts\n\n] = useState(initialContacts);\n\nconst [\n\nselectedId,\n\nsetSelectedId\n\n] = useState(0);","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1857":{"pageContent":"import EditContact from './EditContact.js';\n\nexport default function ContactManager() {\n\nconst [\n\ncontacts,\n\nsetContacts\n\n] = useState(initialContacts);\n\nconst [\n\nselectedId,\n\nsetSelectedId\n\n] = useState(0);\n\nconst selectedContact = contacts.find(c =>\n\nc.id === selectedId\n\n);\n\nfunction handleSave(updatedData) {\n\nconst nextContacts = contacts.map(c => {\n\nif (c.id === updatedData.id) {\n\nreturn updatedData;\n\n} else {\n\nreturn c;\n\n}\n\n});\n\nsetContacts(nextContacts);\n\n}\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={selectedId}\n\nonSelect={id => setSelectedId(id)}\n\n/>\n\n<hr />\n\n<EditContact\n\nsavedContact={selectedContact}\n\nonSave={handleSave}\n\n/>\n\n</div>\n\n)\n\n}\n\nconst initialContacts = [\n\n{ id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n\n{ id: 1, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js hidden\n\nexport default function ContactList({\n\ncontacts,\n\nselectedId,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section>\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact.id);\n\n}}>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1858":{"pageContent":"export default function ContactList({\n\ncontacts,\n\nselectedId,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section>\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact.id);\n\n}}>\n\n{contact.id === selectedId ?\n\n<b>{contact.name}</b> :\n\ncontact.name\n\n}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js EditContact.js active\n\nimport { useState, useEffect } from 'react';\n\nexport default function EditContact({ savedContact, onSave }) {\n\nconst [name, setName] = useState(savedContact.name);\n\nconst [email, setEmail] = useState(savedContact.email);\n\nuseEffect(() => {\n\nsetName(savedContact.name);\n\nsetEmail(savedContact.email);\n\n}, [savedContact]);\n\nreturn (\n\n<section>\n\n<label>\n\nName:{' '}\n\n<input\n\ntype=\"text\"\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nEmail:{' '}\n\n<input\n\ntype=\"email\"\n\nvalue={email}\n\nonChange={e => setEmail(e.target.value)}\n\n/>\n\n</label>\n\n<button onClick={() => {\n\nconst updatedData = {\n\nid: savedContact.id,\n\nname: name,\n\nemail: email\n\n};\n\nonSave(updatedData);\n\n}}>\n\nSave\n\n</button>\n\n<button onClick={() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1859":{"pageContent":"onChange={e => setEmail(e.target.value)}\n\n/>\n\n</label>\n\n<button onClick={() => {\n\nconst updatedData = {\n\nid: savedContact.id,\n\nname: name,\n\nemail: email\n\n};\n\nonSave(updatedData);\n\n}}>\n\nSave\n\n</button>\n\n<button onClick={() => {\n\nsetName(savedContact.name);\n\nsetEmail(savedContact.email);\n\n}}>\n\nReset\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli { display: inline-block; }\n\nli button {\n\npadding: 10px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<Hint>\n\nIt would be nice if there was a way to tell React that when `savedContact.id` is different, the `EditContact` form is conceptually a _different contact's form_ and should not preserve state. Do you recall any such way?\n\n</Hint>\n\n<Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1860":{"pageContent":"</Hint>\n\n<Solution>\n\nSplit the `EditContact` component in two. Move all the form state into the inner `EditForm` component. Export the outer `EditContact` component, and make it pass `savedContact.id` as the `key` to the inner `EditContact` component. As a result, the inner `EditForm` component resets all of the form state and recreates the DOM whenever you select a different contact.\n\n<Sandpack>\n\n```js App.js hidden\n\nimport { useState } from 'react';\n\nimport ContactList from './ContactList.js';\n\nimport EditContact from './EditContact.js';\n\nexport default function ContactManager() {\n\nconst [\n\ncontacts,\n\nsetContacts\n\n] = useState(initialContacts);\n\nconst [\n\nselectedId,\n\nsetSelectedId\n\n] = useState(0);\n\nconst selectedContact = contacts.find(c =>\n\nc.id === selectedId\n\n);\n\nfunction handleSave(updatedData) {\n\nconst nextContacts = contacts.map(c => {\n\nif (c.id === updatedData.id) {\n\nreturn updatedData;\n\n} else {\n\nreturn c;\n\n}\n\n});\n\nsetContacts(nextContacts);\n\n}\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={selectedId}","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1861":{"pageContent":"if (c.id === updatedData.id) {\n\nreturn updatedData;\n\n} else {\n\nreturn c;\n\n}\n\n});\n\nsetContacts(nextContacts);\n\n}\n\nreturn (\n\n<div>\n\n<ContactList\n\ncontacts={contacts}\n\nselectedId={selectedId}\n\nonSelect={id => setSelectedId(id)}\n\n/>\n\n<hr />\n\n<EditContact\n\nsavedContact={selectedContact}\n\nonSave={handleSave}\n\n/>\n\n</div>\n\n)\n\n}\n\nconst initialContacts = [\n\n{ id: 0, name: 'Taylor', email: 'taylor@mail.com' },\n\n{ id: 1, name: 'Alice', email: 'alice@mail.com' },\n\n{ id: 2, name: 'Bob', email: 'bob@mail.com' }\n\n];\n\n```\n\n```js ContactList.js hidden\n\nexport default function ContactList({\n\ncontacts,\n\nselectedId,\n\nonSelect\n\n}) {\n\nreturn (\n\n<section>\n\n<ul>\n\n{contacts.map(contact =>\n\n<li key={contact.id}>\n\n<button onClick={() => {\n\nonSelect(contact.id);\n\n}}>\n\n{contact.id === selectedId ?\n\n<b>{contact.name}</b> :\n\ncontact.name\n\n}\n\n</button>\n\n</li>\n\n)}\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n```js EditContact.js active\n\nimport { useState } from 'react';\n\nexport default function EditContact(props) {\n\nreturn (\n\n<EditForm\n\n{...props}\n\nkey={props.savedContact.id}\n\n/>\n\n);\n\n}\n\nfunction EditForm({ savedContact, onSave }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1862":{"pageContent":"import { useState } from 'react';\n\nexport default function EditContact(props) {\n\nreturn (\n\n<EditForm\n\n{...props}\n\nkey={props.savedContact.id}\n\n/>\n\n);\n\n}\n\nfunction EditForm({ savedContact, onSave }) {\n\nconst [name, setName] = useState(savedContact.name);\n\nconst [email, setEmail] = useState(savedContact.email);\n\nreturn (\n\n<section>\n\n<label>\n\nName:{' '}\n\n<input\n\ntype=\"text\"\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nEmail:{' '}\n\n<input\n\ntype=\"email\"\n\nvalue={email}\n\nonChange={e => setEmail(e.target.value)}\n\n/>\n\n</label>\n\n<button onClick={() => {\n\nconst updatedData = {\n\nid: savedContact.id,\n\nname: name,\n\nemail: email\n\n};\n\nonSave(updatedData);\n\n}}>\n\nSave\n\n</button>\n\n<button onClick={() => {\n\nsetName(savedContact.name);\n\nsetEmail(savedContact.email);\n\n}}>\n\nReset\n\n</button>\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nul, li {\n\nlist-style: none;\n\nmargin: 0;\n\npadding: 0;\n\n}\n\nli { display: inline-block; }\n\nli button {\n\npadding: 10px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1863":{"pageContent":"margin: 0;\n\npadding: 0;\n\n}\n\nli { display: inline-block; }\n\nli button {\n\npadding: 10px;\n\n}\n\nlabel {\n\ndisplay: block;\n\nmargin: 10px 0;\n\n}\n\nbutton {\n\nmargin-right: 10px;\n\nmargin-bottom: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Submit a form without Effects {/*submit-a-form-without-effects*/}\n\nThis `Form` component lets you send a message to a friend. When you submit the form, the `showForm` state variable is set to `false`. This triggers an Effect calling `sendMessage(message)`, which sends the message (you can see it in the console). After the message is sent, you see a \"Thank you\" dialog with an \"Open chat\" button that lets you get back to the form.\n\nYour app's users are sending way too many messages. To make chatting a little bit more difficult, you've decided to show the \"Thank you\" dialog *first* rather than the form. Change the `showForm` state variable to initialize to `false` instead of `true`. As soon as you make that change, the console will show that an empty message was sent. Something in this logic is wrong!","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1864":{"pageContent":"What's the root cause of this problem? And how can you fix it?\n\n<Hint>\n\nShould the message be sent _because_ the user saw the \"Thank you\" dialog? Or is it the other way around?\n\n</Hint>\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Form() {\n\nconst [showForm, setShowForm] = useState(true);\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nif (!showForm) {\n\nsendMessage(message);\n\n}\n\n}, [showForm, message]);\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetShowForm(false);\n\n}\n\nif (!showForm) {\n\nreturn (\n\n<>\n\n<h1>Thanks for using our services!</h1>\n\n<button onClick={() => {\n\nsetMessage('');\n\nsetShowForm(true);\n\n}}>\n\nOpen chat\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<button type=\"submit\" disabled={message === ''}>\n\nSend\n\n</button>\n\n</form>\n\n);\n\n}\n\nfunction sendMessage(message) {\n\nconsole.log('Sending message: ' + message);\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1865":{"pageContent":"Send\n\n</button>\n\n</form>\n\n);\n\n}\n\nfunction sendMessage(message) {\n\nconsole.log('Sending message: ' + message);\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe `showForm` state variable determines whether to show the form or the \"Thank you\" dialog. However, you aren't sending the message because the \"Thank you\" dialog was _displayed_. You want to send the message because the user has _submitted the form._ Delete the misleading Effect and move the `sendMessage` call inside the `handleSubmit` event handler:\n\n<Sandpack>\n\n```js\n\nimport { useState, useEffect } from 'react';\n\nexport default function Form() {\n\nconst [showForm, setShowForm] = useState(true);\n\nconst [message, setMessage] = useState('');\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nsetShowForm(false);\n\nsendMessage(message);\n\n}\n\nif (!showForm) {\n\nreturn (\n\n<>\n\n<h1>Thanks for using our services!</h1>\n\n<button onClick={() => {\n\nsetMessage('');\n\nsetShowForm(true);\n\n}}>\n\nOpen chat\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1866":{"pageContent":"}\n\nif (!showForm) {\n\nreturn (\n\n<>\n\n<h1>Thanks for using our services!</h1>\n\n<button onClick={() => {\n\nsetMessage('');\n\nsetShowForm(true);\n\n}}>\n\nOpen chat\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<textarea\n\nplaceholder=\"Message\"\n\nvalue={message}\n\nonChange={e => setMessage(e.target.value)}\n\n/>\n\n<button type=\"submit\" disabled={message === ''}>\n\nSend\n\n</button>\n\n</form>\n\n);\n\n}\n\nfunction sendMessage(message) {\n\nconsole.log('Sending message: ' + message);\n\n}\n\n```\n\n```css\n\nlabel, textarea { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>\n\nNotice how in this version, only _submitting the form_ (which is an event) causes the message to be sent. It works equally well regardless of whether `showForm` is initially set to `true` or `false`. (Set it to `false` and notice no extra console messages.)\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/you-might-not-need-an-effect.md"}},"1867":{"pageContent":"--\n\ntitle: The React Blog\n\n--\n\n<Intro>\n\nThis blog is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted here first. You can also follow the [@reactjs](https://twitter.com/reactjs) account on Twitter, but you won’t miss anything essential if you only read this blog.\n\n</Intro>\n\n--\n\n### React Labs: What We've Been Working On – June 2022 {/*react-labs-what-weve-been-working-on--june-2022*/}\n\nJune 15, 2022*\n\nReact 18 was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring. [...]\n\n<ReadBlogPost path=\"/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022\" />\n\n--","metadata":{"source":"reactjs.org/beta/src/content/blog/index.md"}},"1868":{"pageContent":"<ReadBlogPost path=\"/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022\" />\n\n--\n\n### React v18.0 {/*react-v180*/}\n\nMarch 29, 2022*\n\nReact 18 is now available on npm! In our last post, we shared step-by-step instructions for upgrading your app to React 18. In this post, we’ll give an overview of what’s new in React 18, and what it means for the future. [...]\n\n<ReadBlogPost path=\"/blog/2022/03/29/react-v18\" />\n\n--\n\n### How to Upgrade to React 18 {/*how-to-upgrade-to-react-18*/}\n\nMarch 8, 2022*\n\nAs we shared in the release post, React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18. [...]\n\n<ReadBlogPost path=\"/blog/2022/03/08/react-18-upgrade-guide\" />\n\n--\n\n### React Conf 2021 Recap {/*react-conf-2021-recap*/}\n\nDecember 17, 2021*","metadata":{"source":"reactjs.org/beta/src/content/blog/index.md"}},"1869":{"pageContent":"<ReadBlogPost path=\"/blog/2022/03/08/react-18-upgrade-guide\" />\n\n--\n\n### React Conf 2021 Recap {/*react-conf-2021-recap*/}\n\nDecember 17, 2021*\n\nLast week we hosted our 6th React Conf.  In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features. [...]\n\n<ReadBlogPost path=\"/blog/2021/12/17/react-conf-2021-recap\" />\n\n--\n\n### The Plan for React 18 {/*the-plan-for-react-18*/}\n\nJune 8, 2021*\n\nThe React team is excited to share a few updates:\n\nWe’ve started work on the React 18 release, which will be our next major version.\n\nWe’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.\n\nWe’ve published a React 18 Alpha so that library authors can try it and provide feedback.\n\n[...]\n\n<ReadBlogPost path=\"/blog/2021/06/08/the-plan-for-react-18\" />\n\n--","metadata":{"source":"reactjs.org/beta/src/content/blog/index.md"}},"1870":{"pageContent":"We’ve published a React 18 Alpha so that library authors can try it and provide feedback.\n\n[...]\n\n<ReadBlogPost path=\"/blog/2021/06/08/the-plan-for-react-18\" />\n\n--\n\n### Introducing Zero-Bundle-Size React Server Components {/*introducing-zero-bundle-size-react-server-components*/}\n\nDecember 21, 2020*\n\n2020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size React Server Components. To introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year. [...]\n\n<ReadBlogPost path=\"/blog/2020/12/21/data-fetching-with-react-server-components\" />\n\n--\n\n### All release notes {/*all-release-notes*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/index.md"}},"1871":{"pageContent":"<ReadBlogPost path=\"/blog/2020/12/21/data-fetching-with-react-server-components\" />\n\n--\n\n### All release notes {/*all-release-notes*/}\n\nNot every React release deserves its own blog post, but you can find a detailed changelog for every release in the [`CHANGELOG.md`](https://github.com/facebook/react/blob/main/CHANGELOG.md) file in the React repository, as well as on the [Releases](https://github.com/facebook/react/releases) page.\n\n--\n\n### Older posts {/*older-posts*/}\n\nSee the [older posts.](https://reactjs.org/blog/all.html)","metadata":{"source":"reactjs.org/beta/src/content/blog/index.md"}},"1872":{"pageContent":"--\n\ntitle: \"React v18.0\"\n\n--\n\nMarch 29, 2022 by [The React Team](/community/team)\n\n--\n\n<Intro>\n\nReact 18 is now available on npm! In our last post, we shared step-by-step instructions for [upgrading your app to React 18](/blog/2022/03/08/react-18-upgrade-guide). In this post, we'll give an overview of what's new in React 18, and what it means for the future.\n\n</Intro>\n\n--\n\nOur latest major version includes out-of-the-box improvements like automatic batching, new APIs like startTransition, and streaming server-side rendering with support for Suspense.\n\nMany of the features in React 18 are built on top of our new concurrent renderer, a behind-the-scenes change that unlocks powerful new capabilities. Concurrent React is opt-in — it's only enabled when you use a concurrent feature — but we think it will have a big impact on the way people build applications.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1873":{"pageContent":"We've spent years researching and developing support for concurrency in React, and we've taken extra care to provide a gradual adoption path for existing users. Last summer, [we formed the React 18 Working Group](/blog/2021/06/08/the-plan-for-react-18) to gather feedback from experts in the community and ensure a smooth upgrade experience for the entire React ecosystem.\n\nIn case you missed it, we shared a lot of this vision at React Conf 2021:\n\nIn [the keynote](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa), we explain how React 18 fits into our mission to make it easy for developers to build great user experiences\n\n[Shruti Kapoor](https://twitter.com/shrutikapoor08) [demonstrated how to use the new features in React 18](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1874":{"pageContent":"[Shruti Kapoor](https://twitter.com/shrutikapoor08) [demonstrated how to use the new features in React 18](https://www.youtube.com/watch?v=ytudH8je5ko&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=2)\n\n[Shaundai Person](https://twitter.com/shaundai) gave us an overview of [streaming server rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&index=3)\n\nBelow is a full overview of what to expect in this release, starting with Concurrent Rendering.\n\n<Note>\n\nFor React Native users, React 18 will ship in React Native with the New React Native Architecture. For more information, see the [React Conf keynote here](https://www.youtube.com/watch?v=FZ0cG47msEk&t=1530s).\n\n</Note>\n\n## What is Concurrent React? {/*what-is-concurrent-react*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1875":{"pageContent":"</Note>\n\n## What is Concurrent React? {/*what-is-concurrent-react*/}\n\nThe most important addition in React 18 is something we hope you never have to think about: concurrency. We think this is largely true for application developers, though the story may be a bit more complicated for library maintainers.\n\nConcurrency is not a feature, per se. It's a new behind-the-scenes mechanism that enables React to prepare multiple versions of your UI at the same time. You can think of concurrency as an implementation detail — it's valuable because of the features that it unlocks. React uses sophisticated techniques in its internal implementation, like priority queues and multiple buffering. But you won't see those concepts anywhere in our public APIs.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1876":{"pageContent":"When we design APIs, we try to hide implementation details from developers. As a React developer, you focus on *what* you want the user experience to look like, and React handles *how* to deliver that experience. So we don’t expect React developers to know how concurrency works under the hood.\n\nHowever, Concurrent React is more important than a typical implementation detail — it's a foundational update to React's core rendering model. So while it's not super important to know how concurrency works, it may be worth knowing what it is at a high level.\n\nA key property of Concurrent React is that rendering is interruptible. When you first upgrade to React 18, before adding any concurrent features, updates are rendered the same as in previous versions of React — in a single, uninterrupted, synchronous transaction. With synchronous rendering, once an update starts rendering, nothing can interrupt it until the user can see the result on screen.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1877":{"pageContent":"In a concurrent render, this is not always the case. React may start rendering an update, pause in the middle, then continue later. It may even abandon an in-progress render altogether. React guarantees that the UI will appear consistent even if a render is interrupted. To do this, it waits to perform DOM mutations until the end, once the entire tree has been evaluated. With this capability, React can prepare new screens in the background without blocking the main thread. This means the UI can respond immediately to user input even if it’s in the middle of a large rendering task, creating a fluid user experience.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1878":{"pageContent":"Another example is reusable state. Concurrent React can remove sections of the UI from the screen, then add them back later while reusing the previous state. For example, when a user tabs away from a screen and back, React should be able to restore the previous screen in the same state it was in before. In an upcoming minor, we're planning to add a new component called `<Offscreen>` that implements this pattern. Similarly, you’ll be able to use Offscreen to prepare new UI in the background so that it’s ready before the user reveals it.\n\nConcurrent rendering is a powerful new tool in React and most of our new features are built to take advantage of it, including Suspense, transitions, and streaming server rendering. But React 18 is just the beginning of what we aim to build on this new foundation.\n\n## Gradually Adopting Concurrent Features {/*gradually-adopting-concurrent-features*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1879":{"pageContent":"## Gradually Adopting Concurrent Features {/*gradually-adopting-concurrent-features*/}\n\nTechnically, concurrent rendering is a breaking change. Because concurrent rendering is interruptible, components behave slightly differently when it is enabled.\n\nIn our testing, we've upgraded thousands of components to React 18. What we've found is that nearly all existing components \"just work\" with concurrent rendering, without any changes. However, some of them may require some additional migration effort. Although the changes are usually small, you'll still have the ability to make them at your own pace. The new rendering behavior in React 18 is **only enabled in the parts of your app that use new features.**","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1880":{"pageContent":"The overall upgrade strategy is to get your application running on React 18 without breaking existing code. Then you can gradually start adding concurrent features at your own pace. You can use [`<StrictMode>`](/reference/react/StrictMode) to help surface concurrency-related bugs during development. Strict Mode doesn't affect production behavior, but during development it will log extra warnings and double-invoke functions that are expected to be idempotent. It won't catch everything, but it's effective at preventing the most common types of mistakes.\n\nAfter you upgrade to React 18, you’ll be able to start using concurrent features immediately. For example, you can use startTransition to navigate between screens without blocking user input. Or useDeferredValue to throttle expensive re-renders.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1881":{"pageContent":"However, long term, we expect the main way you’ll add concurrency to your app is by using a concurrent-enabled library or framework. In most cases, you won’t interact with concurrent APIs directly. For example, instead of developers calling startTransition whenever they navigate to a new screen, router libraries will automatically wrap navigations in startTransition.\n\nIt may take some time for libraries to upgrade to be concurrent compatible. We’ve provided new APIs to make it easier for libraries to take advantage of concurrent features. In the meantime, please be patient with maintainers as we work to gradually migrate the React ecosystem.\n\nFor more info, see our previous post: [How to upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide).\n\n## Suspense in Data Frameworks {/*suspense-in-data-frameworks*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1882":{"pageContent":"For more info, see our previous post: [How to upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide).\n\n## Suspense in Data Frameworks {/*suspense-in-data-frameworks*/}\n\nIn React 18, you can start using Suspense for data fetching in opinionated frameworks like Relay, Next.js, Hydrogen, or Remix. Ad hoc data fetching with Suspense is technically possible, but still not recommended as a general strategy.\n\nIn the future, we may expose additional primitives that could make it easier to access your data with Suspense, perhaps without the use of an opinionated framework. However, Suspense works best when it’s deeply integrated into your application’s architecture: your router, your data layer, and your server rendering environment. So even long term, we expect that libraries and frameworks will play a crucial role in the React ecosystem.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1883":{"pageContent":"As in previous versions of React, you can also use Suspense for code splitting on the client with React.lazy. But our vision for Suspense has always been about much more than loading code — the goal is to extend support for Suspense so that eventually, the same declarative Suspense fallback can handle any asynchronous operation (loading code, data, images, etc).\n\n## Server Components is Still in Development {/*server-components-is-still-in-development*/}\n\n[**Server Components**](/blog/2020/12/21/data-fetching-with-react-server-components) is an upcoming feature that allows developers to build apps that span the server and client, combining the rich interactivity of client-side apps with the improved performance of traditional server rendering. Server Components is not inherently coupled to Concurrent React, but it’s designed to work best with concurrent features like Suspense and streaming server rendering.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1884":{"pageContent":"Server Components is still experimental, but we expect to release an initial version in a minor 18.x release. In the meantime, we’re working with frameworks like Next.js, Hydrogen, and Remix to advance the proposal and get it ready for broad adoption.\n\n## What's New in React 18 {/*whats-new-in-react-18*/}\n\n### New Feature: Automatic Batching {/*new-feature-automatic-batching*/}\n\nBatching is when React groups multiple state updates into a single re-render for better performance. Without automatic batching, we only batched updates inside React event handlers. Updates inside of promises, setTimeout, native event handlers, or any other event were not batched in React by default. With automatic batching, these updates will be batched automatically:\n\n```js\n\n// Before: only React events were batched.\n\nsetTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will render twice, once for each state update (no batching)\n\n}, 1000);\n\n// After: updates inside of timeouts, promises,","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1885":{"pageContent":"setTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will render twice, once for each state update (no batching)\n\n}, 1000);\n\n// After: updates inside of timeouts, promises,\n\n// native event handlers or any other event are batched.\n\nsetTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will only re-render once at the end (that's batching!)\n\n}, 1000);\n\n```\n\nFor more info, see this post for [Automatic batching for fewer renders in React 18](https://github.com/reactwg/react-18/discussions/21).\n\n### New Feature: Transitions {/*new-feature-transitions*/}\n\nA transition is a new concept in React to distinguish between urgent and non-urgent updates.\n\n**Urgent updates** reflect direct interaction, like typing, clicking, pressing, and so on.\n\n**Transition updates** transition the UI from one view to another.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1886":{"pageContent":"**Urgent updates** reflect direct interaction, like typing, clicking, pressing, and so on.\n\n**Transition updates** transition the UI from one view to another.\n\nUrgent updates like typing, clicking, or pressing, need immediate response to match our intuitions about how physical objects behave. Otherwise they feel \"wrong\". However, transitions are different because the user doesn’t expect to see every intermediate value on screen.\n\nFor example, when you select a filter in a dropdown, you expect the filter button itself to respond immediately when you click. However, the actual results may transition separately. A small delay would be imperceptible and often expected. And if you change the filter again before the results are done rendering, you only care to see the latest results.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1887":{"pageContent":"Typically, for the best user experience, a single user input should result in both an urgent update and a non-urgent one. You can use startTransition API inside an input event to inform React which updates are urgent and which are \"transitions\":\n\n```js\n\nimport {startTransition} from 'react';\n\n// Urgent: Show what was typed\n\nsetInputValue(input);\n\n// Mark any state updates inside as transitions\n\nstartTransition(() => {\n\n// Transition: Show the results\n\nsetSearchQuery(input);\n\n});\n\n```\n\nUpdates wrapped in startTransition are handled as non-urgent and will be interrupted if more urgent updates like clicks or key presses come in. If a transition gets interrupted by the user (for example, by typing multiple characters in a row), React will throw out the stale rendering work that wasn’t finished and render only the latest update.\n\n`useTransition`: a hook to start transitions, including a value to track the pending state.\n\n`startTransition`: a method to start transitions when the hook cannot be used.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1888":{"pageContent":"`useTransition`: a hook to start transitions, including a value to track the pending state.\n\n`startTransition`: a method to start transitions when the hook cannot be used.\n\nTransitions will opt in to concurrent rendering, which allows the update to be interrupted. If the content re-suspends, transitions also tell React to continue showing the current content while rendering the transition content in the background (see the [Suspense RFC](https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md) for more info).\n\n[See docs for transitions here](/reference/react/useTransition).\n\n### New Suspense Features {/*new-suspense-features*/}\n\nSuspense lets you declaratively specify the loading state for a part of the component tree if it's not yet ready to be displayed:\n\n```js\n\n<Suspense fallback={<Spinner />}>\n\n<Comments />\n\n</Suspense>\n\n```\n\nSuspense makes the \"UI loading state\" a first-class declarative concept in the React programming model. This lets us build higher-level features on top of it.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1889":{"pageContent":"<Comments />\n\n</Suspense>\n\n```\n\nSuspense makes the \"UI loading state\" a first-class declarative concept in the React programming model. This lets us build higher-level features on top of it.\n\nWe introduced a limited version of Suspense several years ago. However, the only supported use case was code splitting with React.lazy, and it wasn't supported at all when rendering on the server.\n\nIn React 18, we've added support for Suspense on the server and expanded its capabilities using concurrent rendering features.\n\nSuspense in React 18 works best when combined with the transition API. If you suspend during a transition, React will prevent already-visible content from being replaced by a fallback. Instead, React will delay the render until enough data has loaded to prevent a bad loading state.\n\nFor more, see the RFC for [Suspense in React 18](https://github.com/reactjs/rfcs/blob/main/text/0213-suspense-in-react-18.md).\n\n### New Client and Server Rendering APIs {/*new-client-and-server-rendering-apis*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1890":{"pageContent":"### New Client and Server Rendering APIs {/*new-client-and-server-rendering-apis*/}\n\nIn this release we took the opportunity to redesign the APIs we expose for rendering on the client and server. These changes allow users to continue using the old APIs in React 17 mode while they upgrade to the new APIs in React 18.\n\n#### React DOM Client {/*react-dom-client*/}\n\nThese new APIs are now exported from `react-dom/client`:\n\n`createRoot`: New method to create a root to `render` or `unmount`. Use it instead of `ReactDOM.render`. New features in React 18 don't work without it.\n\n`hydrateRoot`: New method to hydrate a server rendered application. Use it instead of  `ReactDOM.hydrate` in conjunction with the new React DOM Server APIs. New features in React 18 don't work without it.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1891":{"pageContent":"Both `createRoot` and `hydrateRoot` accept a new option called `onRecoverableError` in case you want to be notified when React recovers from errors during rendering or hydration for logging. By default, React will use [`reportError`](https://developer.mozilla.org/en-US/docs/Web/API/reportError), or `console.error` in the older browsers.\n\n[See docs for React DOM Client here](/reference/react-dom/client).\n\n#### React DOM Server {/*react-dom-server*/}\n\nThese new APIs are now exported from `react-dom/server` and have full support for streaming Suspense on the server:\n\n`renderToPipeableStream`: for streaming in Node environments.\n\n`renderToReadableStream`: for modern edge runtime environments, such as Deno and Cloudflare workers.\n\nThe existing `renderToString` method keeps working but is discouraged.\n\n[See docs for React DOM Server here](/reference/react-dom/server).\n\n### New Strict Mode Behaviors {/*new-strict-mode-behaviors*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1892":{"pageContent":"The existing `renderToString` method keeps working but is discouraged.\n\n[See docs for React DOM Server here](/reference/react-dom/server).\n\n### New Strict Mode Behaviors {/*new-strict-mode-behaviors*/}\n\nIn the future, we’d like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React would unmount and remount trees using the same component state as before.\n\nThis feature will give React apps better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects assume they are only mounted or destroyed once.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1893":{"pageContent":"To help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.\n\nBefore this change, React would mount the component and create the effects:\n\n```\n\nReact mounts the component.\n\nLayout effects are created.\n\nEffects are created.\n\n```\n\nWith Strict Mode in React 18, React will simulate unmounting and remounting the component in development mode:\n\n```\n\nReact mounts the component.\n\nLayout effects are created.\n\nEffects are created.\n\nReact simulates unmounting the component.\n\nLayout effects are destroyed.\n\nEffects are destroyed.\n\nReact simulates mounting the component with the previous state.\n\nLayout effects are created.\n\nEffects are created.\n\n```\n\n[See docs for ensuring reusable state here](/reference/react/StrictMode#fixing-bugs-found-by-re-running-effects-in-development).\n\n### New Hooks {/*new-hooks*/}\n\n#### useId {/*useid*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1894":{"pageContent":"```\n\n[See docs for ensuring reusable state here](/reference/react/StrictMode#fixing-bugs-found-by-re-running-effects-in-development).\n\n### New Hooks {/*new-hooks*/}\n\n#### useId {/*useid*/}\n\n`useId` is a new hook for generating unique IDs on both the client and server, while avoiding hydration mismatches. It is primarily useful for component libraries integrating with accessibility APIs that require unique IDs. This solves an issue that already exists in React 17 and below, but it's even more important in React 18 because of how the new streaming server renderer delivers HTML out-of-order. [See docs here](/reference/react/useId).\n\n> Note\n\n>\n\n> `useId` is **not** for generating [keys in a list](/learn/rendering-lists#where-to-get-your-key). Keys should be generated from your data.\n\n#### useTransition {/*usetransition*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1895":{"pageContent":"> Note\n\n>\n\n> `useId` is **not** for generating [keys in a list](/learn/rendering-lists#where-to-get-your-key). Keys should be generated from your data.\n\n#### useTransition {/*usetransition*/}\n\n`useTransition` and `startTransition` let you mark some state updates as not urgent. Other state updates are considered urgent by default. React will allow urgent state updates (for example, updating a text input) to interrupt non-urgent state updates (for example, rendering a list of search results). [See docs here](/reference/react/useTransition)\n\n#### useDeferredValue {/*usedeferredvalue*/}\n\n`useDeferredValue` lets you defer re-rendering a non-urgent part of the tree. It is similar to debouncing, but has a few advantages compared to it. There is no fixed time delay, so React will attempt the deferred render right after the first render is reflected on the screen. The deferred render is interruptible and doesn't block user input. [See docs here](/reference/react/useDeferredValue).","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1896":{"pageContent":"#### useSyncExternalStore {/*usesyncexternalstore*/}\n\n`useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. It removes the need for useEffect when implementing subscriptions to external data sources, and is recommended for any library that integrates with state external to React. [See docs here](/reference/react/useSyncExternalStore).\n\n> Note\n\n>\n\n> `useSyncExternalStore` is intended to be used by libraries, not application code.\n\n#### useInsertionEffect {/*useinsertioneffect*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1897":{"pageContent":"> Note\n\n>\n\n> `useSyncExternalStore` is intended to be used by libraries, not application code.\n\n#### useInsertionEffect {/*useinsertioneffect*/}\n\n`useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you’ve already built a CSS-in-JS library we don’t expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout. [See docs here](/reference/react/useInsertionEffect).\n\n> Note\n\n>\n\n> `useInsertionEffect` is intended to be used by libraries, not application code.\n\n## How to Upgrade {/*how-to-upgrade*/}\n\nSee [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1898":{"pageContent":"## How to Upgrade {/*how-to-upgrade*/}\n\nSee [How to Upgrade to React 18](/blog/2022/03/08/react-18-upgrade-guide) for step-by-step instructions and a full list of breaking and notable changes.\n\n## Changelog {/*changelog*/}\n\n### React {/*react*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1899":{"pageContent":"Add `useTransition` and `useDeferredValue` to separate urgent updates from transitions. ([#10426](https://github.com/facebook/react/pull/10426), [#10715](https://github.com/facebook/react/pull/10715), [#15593](https://github.com/facebook/react/pull/15593), [#15272](https://github.com/facebook/react/pull/15272), [#15578](https://github.com/facebook/react/pull/15578), [#15769](https://github.com/facebook/react/pull/15769), [#17058](https://github.com/facebook/react/pull/17058), [#18796](https://github.com/facebook/react/pull/18796), [#19121](https://github.com/facebook/react/pull/19121), [#19703](https://github.com/facebook/react/pull/19703), [#19719](https://github.com/facebook/react/pull/19719), [#19724](https://github.com/facebook/react/pull/19724), [#20672](https://github.com/facebook/react/pull/20672), [#20976](https://github.com/facebook/react/pull/20976) by [@acdlite](https://github.com/acdlite), [@lunaruan](https://github.com/lunaruan), [@rickhanlonii](https://github.com/rickhanlonii), and","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1900":{"pageContent":"[#20976](https://github.com/facebook/react/pull/20976) by [@acdlite](https://github.com/acdlite), [@lunaruan](https://github.com/lunaruan), [@rickhanlonii](https://github.com/rickhanlonii), and [@sebmarkbage](https://github.com/sebmarkbage))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1901":{"pageContent":"Add `useId` for generating unique IDs. ([#17322](https://github.com/facebook/react/pull/17322), [#18576](https://github.com/facebook/react/pull/18576), [#22644](https://github.com/facebook/react/pull/22644), [#22672](https://github.com/facebook/react/pull/22672), [#21260](https://github.com/facebook/react/pull/21260) by [@acdlite](https://github.com/acdlite), [@lunaruan](https://github.com/lunaruan), and [@sebmarkbage](https://github.com/sebmarkbage))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1902":{"pageContent":"Add `useSyncExternalStore` to help external store libraries integrate with React. ([#15022](https://github.com/facebook/react/pull/15022), [#18000](https://github.com/facebook/react/pull/18000), [#18771](https://github.com/facebook/react/pull/18771), [#22211](https://github.com/facebook/react/pull/22211), [#22292](https://github.com/facebook/react/pull/22292), [#22239](https://github.com/facebook/react/pull/22239), [#22347](https://github.com/facebook/react/pull/22347), [#23150](https://github.com/facebook/react/pull/23150) by [@acdlite](https://github.com/acdlite), [@bvaughn](https://github.com/bvaughn), and [@drarmstr](https://github.com/drarmstr))\n\nAdd `startTransition` as a version of `useTransition` without pending feedback. ([#19696](https://github.com/facebook/react/pull/19696)  by [@rickhanlonii](https://github.com/rickhanlonii))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1903":{"pageContent":"Add `startTransition` as a version of `useTransition` without pending feedback. ([#19696](https://github.com/facebook/react/pull/19696)  by [@rickhanlonii](https://github.com/rickhanlonii))\n\nAdd `useInsertionEffect` for CSS-in-JS libraries. ([#21913](https://github.com/facebook/react/pull/21913)  by [@rickhanlonii](https://github.com/rickhanlonii))\n\nMake Suspense remount layout effects when content reappears.  ([#19322](https://github.com/facebook/react/pull/19322), [#19374](https://github.com/facebook/react/pull/19374), [#19523](https://github.com/facebook/react/pull/19523), [#20625](https://github.com/facebook/react/pull/20625), [#21079](https://github.com/facebook/react/pull/21079) by [@acdlite](https://github.com/acdlite), [@bvaughn](https://github.com/bvaughn), and [@lunaruan](https://github.com/lunaruan))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1904":{"pageContent":"Make `<StrictMode>` re-run effects to check for restorable state. ([#19523](https://github.com/facebook/react/pull/19523) , [#21418](https://github.com/facebook/react/pull/21418)  by [@bvaughn](https://github.com/bvaughn) and [@lunaruan](https://github.com/lunaruan))\n\nAssume Symbols are always available. ([#23348](https://github.com/facebook/react/pull/23348)  by [@sebmarkbage](https://github.com/sebmarkbage))\n\nRemove `object-assign` polyfill. ([#23351](https://github.com/facebook/react/pull/23351)  by [@sebmarkbage](https://github.com/sebmarkbage))\n\nRemove unsupported `unstable_changedBits` API.  ([#20953](https://github.com/facebook/react/pull/20953)  by [@acdlite](https://github.com/acdlite))\n\nAllow components to render undefined. ([#21869](https://github.com/facebook/react/pull/21869)  by [@rickhanlonii](https://github.com/rickhanlonii))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1905":{"pageContent":"Allow components to render undefined. ([#21869](https://github.com/facebook/react/pull/21869)  by [@rickhanlonii](https://github.com/rickhanlonii))\n\nFlush `useEffect` resulting from discrete events like clicks synchronously. ([#21150](https://github.com/facebook/react/pull/21150)  by [@acdlite](https://github.com/acdlite))\n\nSuspense `fallback={undefined}` now behaves the same as `null` and isn't ignored. ([#21854](https://github.com/facebook/react/pull/21854)  by [@rickhanlonii](https://github.com/rickhanlonii))\n\nConsider all `lazy()` resolving to the same component equivalent. ([#20357](https://github.com/facebook/react/pull/20357)  by [@sebmarkbage](https://github.com/sebmarkbage))\n\nDon't patch console during first render. ([#22308](https://github.com/facebook/react/pull/22308)  by [@lunaruan](https://github.com/lunaruan))\n\nImprove memory usage. ([#21039](https://github.com/facebook/react/pull/21039)  by [@bgirard](https://github.com/bgirard))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1906":{"pageContent":"Improve memory usage. ([#21039](https://github.com/facebook/react/pull/21039)  by [@bgirard](https://github.com/bgirard))\n\nImprove messages if string coercion throws (Temporal.*, Symbol, etc.) ([#22064](https://github.com/facebook/react/pull/22064)  by [@justingrant](https://github.com/justingrant))\n\nUse `setImmediate` when available over `MessageChannel`. ([#20834](https://github.com/facebook/react/pull/20834)  by [@gaearon](https://github.com/gaearon))\n\nFix context failing to propagate inside suspended trees. ([#23095](https://github.com/facebook/react/pull/23095)  by [@gaearon](https://github.com/gaearon))\n\nFix `useReducer` observing incorrect props by removing the eager bailout mechanism. ([#22445](https://github.com/facebook/react/pull/22445)  by [@josephsavona](https://github.com/josephsavona))\n\nFix `setState` being ignored in Safari when appending iframes. ([#23111](https://github.com/facebook/react/pull/23111)  by [@gaearon](https://github.com/gaearon))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1907":{"pageContent":"Fix `setState` being ignored in Safari when appending iframes. ([#23111](https://github.com/facebook/react/pull/23111)  by [@gaearon](https://github.com/gaearon))\n\nFix a crash when rendering `ZonedDateTime` in the tree. ([#20617](https://github.com/facebook/react/pull/20617)  by [@dimaqq](https://github.com/dimaqq))\n\nFix a crash when document is set to `null` in tests. ([#22695](https://github.com/facebook/react/pull/22695)  by [@SimenB](https://github.com/SimenB))\n\nFix `onLoad` not triggering when concurrent features are on. ([#23316](https://github.com/facebook/react/pull/23316)  by [@gnoff](https://github.com/gnoff))\n\nFix a warning when a selector returns `NaN`.  ([#23333](https://github.com/facebook/react/pull/23333)  by [@hachibeeDI](https://github.com/hachibeeDI))\n\nFix a crash when document is set to `null` in tests. ([#22695](https://github.com/facebook/react/pull/22695) by [@SimenB](https://github.com/SimenB))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1908":{"pageContent":"Fix a crash when document is set to `null` in tests. ([#22695](https://github.com/facebook/react/pull/22695) by [@SimenB](https://github.com/SimenB))\n\nFix the generated license header. ([#23004](https://github.com/facebook/react/pull/23004)  by [@vitaliemiron](https://github.com/vitaliemiron))\n\nAdd `package.json` as one of the entry points. ([#22954](https://github.com/facebook/react/pull/22954)  by [@Jack](https://github.com/Jack-Works))\n\nAllow suspending outside a Suspense boundary. ([#23267](https://github.com/facebook/react/pull/23267)  by [@acdlite](https://github.com/acdlite))\n\nLog a recoverable error whenever hydration fails. ([#23319](https://github.com/facebook/react/pull/23319)  by [@acdlite](https://github.com/acdlite))\n\n### React DOM {/*react-dom*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1909":{"pageContent":"Add `createRoot` and `hydrateRoot`. ([#10239](https://github.com/facebook/react/pull/10239), [#11225](https://github.com/facebook/react/pull/11225), [#12117](https://github.com/facebook/react/pull/12117), [#13732](https://github.com/facebook/react/pull/13732), [#15502](https://github.com/facebook/react/pull/15502), [#15532](https://github.com/facebook/react/pull/15532), [#17035](https://github.com/facebook/react/pull/17035), [#17165](https://github.com/facebook/react/pull/17165), [#20669](https://github.com/facebook/react/pull/20669), [#20748](https://github.com/facebook/react/pull/20748), [#20888](https://github.com/facebook/react/pull/20888), [#21072](https://github.com/facebook/react/pull/21072), [#21417](https://github.com/facebook/react/pull/21417), [#21652](https://github.com/facebook/react/pull/21652), [#21687](https://github.com/facebook/react/pull/21687), [#23207](https://github.com/facebook/react/pull/23207), [#23385](https://github.com/facebook/react/pull/23385) by","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1910":{"pageContent":"[#21687](https://github.com/facebook/react/pull/21687), [#23207](https://github.com/facebook/react/pull/23207), [#23385](https://github.com/facebook/react/pull/23385) by [@acdlite](https://github.com/acdlite), [@bvaughn](https://github.com/bvaughn), [@gaearon](https://github.com/gaearon), [@lunaruan](https://github.com/lunaruan), [@rickhanlonii](https://github.com/rickhanlonii), [@trueadm](https://github.com/trueadm), and [@sebmarkbage](https://github.com/sebmarkbage))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1911":{"pageContent":"Add selective hydration. ([#14717](https://github.com/facebook/react/pull/14717), [#14884](https://github.com/facebook/react/pull/14884), [#16725](https://github.com/facebook/react/pull/16725), [#16880](https://github.com/facebook/react/pull/16880), [#17004](https://github.com/facebook/react/pull/17004), [#22416](https://github.com/facebook/react/pull/22416), [#22629](https://github.com/facebook/react/pull/22629), [#22448](https://github.com/facebook/react/pull/22448), [#22856](https://github.com/facebook/react/pull/22856), [#23176](https://github.com/facebook/react/pull/23176) by [@acdlite](https://github.com/acdlite), [@gaearon](https://github.com/gaearon), [@salazarm](https://github.com/salazarm), and [@sebmarkbage](https://github.com/sebmarkbage))\n\nAdd `aria-description` to the list of known ARIA attributes. ([#22142](https://github.com/facebook/react/pull/22142)  by [@mahyareb](https://github.com/mahyareb))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1912":{"pageContent":"Add `aria-description` to the list of known ARIA attributes. ([#22142](https://github.com/facebook/react/pull/22142)  by [@mahyareb](https://github.com/mahyareb))\n\nAdd `onResize` event to video elements. ([#21973](https://github.com/facebook/react/pull/21973)  by [@rileyjshaw](https://github.com/rileyjshaw))\n\nAdd `imageSizes` and `imageSrcSet` to known props. ([#22550](https://github.com/facebook/react/pull/22550)  by [@eps1lon](https://github.com/eps1lon))\n\nAllow non-string `<option>` children if `value` is provided.  ([#21431](https://github.com/facebook/react/pull/21431)  by [@sebmarkbage](https://github.com/sebmarkbage))\n\nFix `aspectRatio` style not being applied. ([#21100](https://github.com/facebook/react/pull/21100)  by [@gaearon](https://github.com/gaearon))\n\nWarn if `renderSubtreeIntoContainer` is called. ([#23355](https://github.com/facebook/react/pull/23355)  by [@acdlite](https://github.com/acdlite))\n\n### React DOM Server {/*react-dom-server-1*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1913":{"pageContent":"Warn if `renderSubtreeIntoContainer` is called. ([#23355](https://github.com/facebook/react/pull/23355)  by [@acdlite](https://github.com/acdlite))\n\n### React DOM Server {/*react-dom-server-1*/}\n\nAdd the new streaming renderer. ([#14144](https://github.com/facebook/react/pull/14144), [#20970](https://github.com/facebook/react/pull/20970), [#21056](https://github.com/facebook/react/pull/21056), [#21255](https://github.com/facebook/react/pull/21255), [#21200](https://github.com/facebook/react/pull/21200), [#21257](https://github.com/facebook/react/pull/21257), [#21276](https://github.com/facebook/react/pull/21276), [#22443](https://github.com/facebook/react/pull/22443), [#22450](https://github.com/facebook/react/pull/22450), [#23247](https://github.com/facebook/react/pull/23247), [#24025](https://github.com/facebook/react/pull/24025), [#24030](https://github.com/facebook/react/pull/24030) by [@sebmarkbage](https://github.com/sebmarkbage))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1914":{"pageContent":"Fix context providers in SSR when handling multiple requests. ([#23171](https://github.com/facebook/react/pull/23171)  by [@frandiox](https://github.com/frandiox))\n\nRevert to client render on text mismatch. ([#23354](https://github.com/facebook/react/pull/23354)  by [@acdlite](https://github.com/acdlite))\n\nDeprecate `renderToNodeStream`. ([#23359](https://github.com/facebook/react/pull/23359)  by [@sebmarkbage](https://github.com/sebmarkbage))\n\nFix a spurious error log in the new server renderer. ([#24043](https://github.com/facebook/react/pull/24043)  by [@eps1lon](https://github.com/eps1lon))\n\nFix a bug in the new server renderer. ([#22617](https://github.com/facebook/react/pull/22617)  by [@shuding](https://github.com/shuding))\n\nIgnore function and symbol values inside custom elements on the server. ([#21157](https://github.com/facebook/react/pull/21157)  by [@sebmarkbage](https://github.com/sebmarkbage))\n\n### React DOM Test Utils {/*react-dom-test-utils*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1915":{"pageContent":"### React DOM Test Utils {/*react-dom-test-utils*/}\n\nThrow when `act` is used in production. ([#21686](https://github.com/facebook/react/pull/21686)  by [@acdlite](https://github.com/acdlite))\n\nSupport disabling spurious act warnings with `global.IS_REACT_ACT_ENVIRONMENT`. ([#22561](https://github.com/facebook/react/pull/22561)  by [@acdlite](https://github.com/acdlite))\n\nExpand act warning to cover all APIs that might schedule React work. ([#22607](https://github.com/facebook/react/pull/22607)  by [@acdlite](https://github.com/acdlite))\n\nMake `act` batch updates. ([#21797](https://github.com/facebook/react/pull/21797)  by [@acdlite](https://github.com/acdlite))\n\nRemove warning for dangling passive effects. ([#22609](https://github.com/facebook/react/pull/22609)  by [@acdlite](https://github.com/acdlite))\n\n### React Refresh {/*react-refresh*/}\n\nTrack late-mounted roots in Fast Refresh. ([#22740](https://github.com/facebook/react/pull/22740)  by [@anc95](https://github.com/anc95))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1916":{"pageContent":"### React Refresh {/*react-refresh*/}\n\nTrack late-mounted roots in Fast Refresh. ([#22740](https://github.com/facebook/react/pull/22740)  by [@anc95](https://github.com/anc95))\n\nAdd `exports` field to `package.json`. ([#23087](https://github.com/facebook/react/pull/23087)  by [@otakustay](https://github.com/otakustay))\n\n### Server Components (Experimental) {/*server-components-experimental*/}\n\nAdd Server Context support. ([#23244](https://github.com/facebook/react/pull/23244)  by [@salazarm](https://github.com/salazarm))\n\nAdd `lazy` support. ([#24068](https://github.com/facebook/react/pull/24068)  by [@gnoff](https://github.com/gnoff))\n\nUpdate webpack plugin for webpack 5 ([#22739](https://github.com/facebook/react/pull/22739)  by [@michenly](https://github.com/michenly))\n\nFix a mistake in the Node loader. ([#22537](https://github.com/facebook/react/pull/22537)  by [@btea](https://github.com/btea))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1917":{"pageContent":"Fix a mistake in the Node loader. ([#22537](https://github.com/facebook/react/pull/22537)  by [@btea](https://github.com/btea))\n\nUse `globalThis` instead of `window` for edge environments. ([#22777](https://github.com/facebook/react/pull/22777)  by [@huozhi](https://github.com/huozhi))","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/29/react-v18.md"}},"1918":{"pageContent":"--\n\ntitle: \"How to Upgrade to React 18\"\n\n--\n\nMarch 08, 2022 by [Rick Hanlon](https://twitter.com/rickhanlonii)\n\n--\n\n<Intro>\n\nAs we shared in the [release post](/blog/2022/03/29/react-v18), React 18 introduces features powered by our new concurrent renderer, with a gradual adoption strategy for existing applications. In this post, we will guide you through the steps for upgrading to React 18.\n\nPlease [report any issues](https://github.com/facebook/react/issues/new/choose) you encounter while upgrading to React 18.\n\n</Intro>\n\n<Note>\n\nFor React Native users, React 18 will ship in a future version of React Native. This is because React 18 relies on the New React Native Architecture to benefit from the new capabilities presented in this blogpost. For more information, see the [React Conf keynote here](https://www.youtube.com/watch?v=FZ0cG47msEk&t=1530s).\n\n</Note>\n\n--\n\n## Installing {/*installing*/}\n\nTo install the latest version of React:\n\n```bash\n\nnpm install react react-dom\n\n```\n\nOr if you’re using yarn:\n\n```bash","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1919":{"pageContent":"</Note>\n\n--\n\n## Installing {/*installing*/}\n\nTo install the latest version of React:\n\n```bash\n\nnpm install react react-dom\n\n```\n\nOr if you’re using yarn:\n\n```bash\n\nyarn add react react-dom\n\n```\n\n## Updates to Client Rendering APIs {/*updates-to-client-rendering-apis*/}\n\nWhen you first install React 18, you will see a warning in the console:\n\n<ConsoleBlock level=\"error\">\n\nReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot\n\n</ConsoleBlock>\n\nReact 18 introduces a new root API which provides better ergonomics for managing roots. The new root API also enables the new concurrent renderer, which allows you to opt-into concurrent features.\n\n```js\n\n// Before\n\nimport { render } from 'react-dom';\n\nconst container = document.getElementById('app');\n\nrender(<App tab=\"home\" />, container);\n\n// After\n\nimport { createRoot } from 'react-dom/client';","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1920":{"pageContent":"```js\n\n// Before\n\nimport { render } from 'react-dom';\n\nconst container = document.getElementById('app');\n\nrender(<App tab=\"home\" />, container);\n\n// After\n\nimport { createRoot } from 'react-dom/client';\n\nconst container = document.getElementById('app');\n\nconst root = createRoot(container); // createRoot(container!) if you use TypeScript\n\nroot.render(<App tab=\"home\" />);\n\n```\n\nWe’ve also changed `unmountComponentAtNode` to `root.unmount`:\n\n```js\n\n// Before\n\nunmountComponentAtNode(container);\n\n// After\n\nroot.unmount();\n\n```\n\nWe've also removed the callback from render, since it usually does not have the expected result when using Suspense:\n\n```js\n\n// Before\n\nconst container = document.getElementById('app');\n\nrender(<App tab=\"home\" />, container, () => {\n\nconsole.log('rendered');\n\n});\n\n// After\n\nfunction AppWithCallbackAfterRender() {\n\nuseEffect(() => {\n\nconsole.log('rendered');\n\n});\n\nreturn <App tab=\"home\" />\n\n}\n\nconst container = document.getElementById('app');\n\nconst root = createRoot(container);\n\nroot.render(<AppWithCallbackAfterRender />);\n\n```\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1921":{"pageContent":"console.log('rendered');\n\n});\n\nreturn <App tab=\"home\" />\n\n}\n\nconst container = document.getElementById('app');\n\nconst root = createRoot(container);\n\nroot.render(<AppWithCallbackAfterRender />);\n\n```\n\n<Note>\n\nThere is no one-to-one replacement for the old render callback API — it depends on your use case. See the working group post for [Replacing render with createRoot](https://github.com/reactwg/react-18/discussions/5) for more information.\n\n</Note>\n\nFinally, if your app uses server-side rendering with hydration, upgrade `hydrate` to `hydrateRoot`:\n\n```js\n\n// Before\n\nimport { hydrate } from 'react-dom';\n\nconst container = document.getElementById('app');\n\nhydrate(<App tab=\"home\" />, container);\n\n// After\n\nimport { hydrateRoot } from 'react-dom/client';\n\nconst container = document.getElementById('app');\n\nconst root = hydrateRoot(container, <App tab=\"home\" />);\n\n// Unlike with createRoot, you don't need a separate root.render() call here.\n\n```","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1922":{"pageContent":"const container = document.getElementById('app');\n\nconst root = hydrateRoot(container, <App tab=\"home\" />);\n\n// Unlike with createRoot, you don't need a separate root.render() call here.\n\n```\n\nFor more information, see the [working group discussion here](https://github.com/reactwg/react-18/discussions/5).\n\n<Note>\n\n*If your app doesn't work after upgrading, check whether it's wrapped in `<StrictMode>`.** [Strict Mode has gotten stricter in React 18](#updates-to-strict-mode), and not all your components may be resilient to the new checks it adds in development mode. If removing Strict Mode fixes your app, you can remove it during the upgrade, and then add it back (either at the top or for a part of the tree) after you fix the issues that it's pointing out.\n\n</Note>\n\n## Updates to Server Rendering APIs {/*updates-to-server-rendering-apis*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1923":{"pageContent":"</Note>\n\n## Updates to Server Rendering APIs {/*updates-to-server-rendering-apis*/}\n\nIn this release, we’re revamping our `react-dom/server` APIs to fully support Suspense on the server and Streaming SSR. As part of these changes, we're deprecating the old Node streaming API, which does not support incremental Suspense streaming on the server.\n\nUsing this API will now warn:\n\n`renderToNodeStream`: **Deprecated ⛔️️**\n\nInstead, for streaming in Node environments, use:\n\n`renderToPipeableStream`: **New ✨**\n\nWe're also introducing a new API to support streaming SSR with Suspense for modern edge runtime environments, such as Deno and Cloudflare workers:\n\n`renderToReadableStream`: **New ✨**\n\nThe following APIs will continue working, but with limited support for Suspense:\n\n`renderToString`: **Limited** ⚠️\n\n`renderToStaticMarkup`: **Limited** ⚠️\n\nFinally, this API will continue to work for rendering e-mails:\n\n`renderToStaticNodeStream`","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1924":{"pageContent":"`renderToString`: **Limited** ⚠️\n\n`renderToStaticMarkup`: **Limited** ⚠️\n\nFinally, this API will continue to work for rendering e-mails:\n\n`renderToStaticNodeStream`\n\nFor more information on the changes to server rendering APIs, see the working group post on [Upgrading to React 18 on the server](https://github.com/reactwg/react-18/discussions/22), a [deep dive on the new Suspense SSR Architecture](https://github.com/reactwg/react-18/discussions/37), and [Shaundai Person’s](https://twitter.com/shaundai) talk on [Streaming Server Rendering with Suspense](https://www.youtube.com/watch?v=pj5N-Khihgc) at React Conf 2021.\n\n## Updates to TypeScript definitions {/*updates-to-typescript-definitions*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1925":{"pageContent":"## Updates to TypeScript definitions {/*updates-to-typescript-definitions*/}\n\nIf your project uses TypeScript, you will need to update your `@types/react` and `@types/react-dom` dependencies to the latest versions. The new types are safer and catch issues that used to be ignored by the type checker. The most notable change is that the `children` prop now needs to be listed explicitly when defining props, for example:\n\n```typescript{3}\n\ninterface MyButtonProps {\n\ncolor: string;\n\nchildren?: React.ReactNode;\n\n}\n\n```\n\nSee the [React 18 typings pull request](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210) for a full list of type-only changes. It links to example fixes in library types so you can see how to adjust your code. You can use the [automated migration script](https://github.com/eps1lon/types-react-codemod) to help port your application code to the new and safer typings faster.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1926":{"pageContent":"If you find a bug in the typings, please [file an issue](https://github.com/DefinitelyTyped/DefinitelyTyped/discussions/new?category=issues-with-a-types-package) in the DefinitelyTyped repo.\n\n## Automatic Batching {/*automatic-batching*/}\n\nReact 18 adds out-of-the-box performance improvements by doing more batching by default. Batching is when React groups multiple state updates into a single re-render for better performance. Before React 18, we only batched updates inside React event handlers. Updates inside of promises, setTimeout, native event handlers, or any other event were not batched in React by default:\n\n```js\n\n// Before React 18 only React events were batched\n\nfunction handleClick() {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will only re-render once at the end (that's batching!)\n\n}\n\nsetTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will render twice, once for each state update (no batching)\n\n}, 1000);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1927":{"pageContent":"// React will only re-render once at the end (that's batching!)\n\n}\n\nsetTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will render twice, once for each state update (no batching)\n\n}, 1000);\n\n```\n\nStarting in React 18 with `createRoot`, all updates will be automatically batched, no matter where they originate from. This means that updates inside of timeouts, promises, native event handlers or any other event will batch the same way as updates inside of React events:\n\n```js\n\n// After React 18 updates inside of timeouts, promises,\n\n// native event handlers or any other event are batched.\n\nfunction handleClick() {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will only re-render once at the end (that's batching!)\n\n}\n\nsetTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will only re-render once at the end (that's batching!)\n\n}, 1000);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1928":{"pageContent":"// React will only re-render once at the end (that's batching!)\n\n}\n\nsetTimeout(() => {\n\nsetCount(c => c + 1);\n\nsetFlag(f => !f);\n\n// React will only re-render once at the end (that's batching!)\n\n}, 1000);\n\n```\n\nThis is a breaking change, but we expect this to result in less work rendering, and therefore better performance in your applications. To opt-out of automatic batching, you can use `flushSync`:\n\n```js\n\nimport { flushSync } from 'react-dom';\n\nfunction handleClick() {\n\nflushSync(() => {\n\nsetCounter(c => c + 1);\n\n});\n\n// React has updated the DOM by now\n\nflushSync(() => {\n\nsetFlag(f => !f);\n\n});\n\n// React has updated the DOM by now\n\n}\n\n```\n\nFor more information, see the [Automatic batching deep dive](https://github.com/reactwg/react-18/discussions/21).\n\n## New APIs for Libraries {/*new-apis-for-libraries*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1929":{"pageContent":"}\n\n```\n\nFor more information, see the [Automatic batching deep dive](https://github.com/reactwg/react-18/discussions/21).\n\n## New APIs for Libraries {/*new-apis-for-libraries*/}\n\nIn the React 18 Working Group we worked with library maintainers to create new APIs needed to support concurrent rendering for use cases specific to their use case in areas like styles, and external stores. To support React 18, some libraries may need to switch to one of the following APIs:\n\n`useSyncExternalStore` is a new hook that allows external stores to support concurrent reads by forcing updates to the store to be synchronous. This new API is recommended for any library that integrates with state external to React. For more information, see the [useSyncExternalStore overview post](https://github.com/reactwg/react-18/discussions/70) and [useSyncExternalStore API details](https://github.com/reactwg/react-18/discussions/86).","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1930":{"pageContent":"`useInsertionEffect` is a new hook that allows CSS-in-JS libraries to address performance issues of injecting styles in render. Unless you've already built a CSS-in-JS library we don't expect you to ever use this. This hook will run after the DOM is mutated, but before layout effects read the new layout. This solves an issue that already exists in React 17 and below, but is even more important in React 18 because React yields to the browser during concurrent rendering, giving it a chance to recalculate layout. For more information, see the [Library Upgrade Guide for `<style>`](https://github.com/reactwg/react-18/discussions/110).\n\nReact 18 also introduces new APIs for concurrent rendering such as `startTransition`, `useDeferredValue` and `useId`, which we share more about in the [release post](/blog/2022/03/29/react-v18).\n\n## Updates to Strict Mode {/*updates-to-strict-mode*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1931":{"pageContent":"## Updates to Strict Mode {/*updates-to-strict-mode*/}\n\nIn the future, we'd like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React would unmount and remount trees using the same component state as before.\n\nThis feature will give React better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects assume they are only mounted or destroyed once.\n\nTo help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.\n\nBefore this change, React would mount the component and create the effects:\n\n```","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1932":{"pageContent":"Before this change, React would mount the component and create the effects:\n\n```\n\nReact mounts the component.\n\nLayout effects are created.\n\nEffect effects are created.\n\n```\n\nWith Strict Mode in React 18, React will simulate unmounting and remounting the component in development mode:\n\n```\n\nReact mounts the component.\n\nLayout effects are created.\n\nEffect effects are created.\n\nReact simulates unmounting the component.\n\nLayout effects are destroyed.\n\nEffects are destroyed.\n\nReact simulates mounting the component with the previous state.\n\nLayout effect setup code runs\n\nEffect setup code runs\n\n```\n\nFor more information, see the Working Group posts for [Adding Reusable State to StrictMode](https://github.com/reactwg/react-18/discussions/19) and [How to support Reusable State in Effects](https://github.com/reactwg/react-18/discussions/18).\n\n## Configuring Your Testing Environment {/*configuring-your-testing-environment*/}\n\nWhen you first update your tests to use `createRoot`, you may see this warning in your test console:","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1933":{"pageContent":"## Configuring Your Testing Environment {/*configuring-your-testing-environment*/}\n\nWhen you first update your tests to use `createRoot`, you may see this warning in your test console:\n\n<ConsoleBlock level=\"error\">\n\nThe current testing environment is not configured to support act(...)\n\n</ConsoleBlock>\n\nTo fix this, set `globalThis.IS_REACT_ACT_ENVIRONMENT` to `true` before running your test:\n\n```js\n\n// In your test setup file\n\nglobalThis.IS_REACT_ACT_ENVIRONMENT = true;\n\n```\n\nThe purpose of the flag is to tell React that it's running in a unit test-like environment. React will log helpful warnings if you forget to wrap an update with `act`.\n\nYou can also set the flag to `false` to tell React that `act` isn't needed. This can be useful for end-to-end tests that simulate a full browser environment.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1934":{"pageContent":"You can also set the flag to `false` to tell React that `act` isn't needed. This can be useful for end-to-end tests that simulate a full browser environment.\n\nEventually, we expect testing libraries will configure this for you automatically. For example, the [next version of React Testing Library has built-in support for React 18](https://github.com/testing-library/react-testing-library/issues/509#issuecomment-917989936) without any additional configuration.\n\n[More background on the `act` testing API and related changes](https://github.com/reactwg/react-18/discussions/102) is available in the working group.\n\n## Dropping Support for Internet Explorer {/*dropping-support-for-internet-explorer*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1935":{"pageContent":"## Dropping Support for Internet Explorer {/*dropping-support-for-internet-explorer*/}\n\nIn this release, React is dropping support for Internet Explorer, which is [going out of support on June 15, 2022](https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge). We’re making this change now because new features introduced in React 18 are built using modern browser features such as microtasks which cannot be adequately polyfilled in IE.\n\nIf you need to support Internet Explorer we recommend you stay with React 17.\n\n## Deprecations {/*deprecations*/}\n\n`react-dom`: `ReactDOM.render` has been deprecated. Using it will warn and run your app in React 17 mode.\n\n`react-dom`: `ReactDOM.hydrate` has been deprecated. Using it will warn and run your app in React 17 mode.\n\n`react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.\n\n`react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1936":{"pageContent":"`react-dom`: `ReactDOM.unmountComponentAtNode` has been deprecated.\n\n`react-dom`: `ReactDOM.renderSubtreeIntoContainer` has been deprecated.\n\n`react-dom/server`: `ReactDOMServer.renderToNodeStream` has been deprecated.\n\n## Other Breaking Changes {/*other-breaking-changes*/}\n\n**Consistent useEffect timing**: React now always synchronously flushes effect functions if the update was triggered during a discrete user input event such as a click or a keydown event. Previously, the behavior wasn't always predictable or consistent.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1937":{"pageContent":"**Stricter hydration errors**: Hydration mismatches due to missing or extra text content are now treated like errors instead of warnings. React will no longer attempt to \"patch up\" individual nodes by inserting or deleting a node on the client in an attempt to match the server markup, and will revert to client rendering up to the closest `<Suspense>` boundary in the tree. This ensures the hydrated tree is consistent and avoids potential privacy and security holes that can be caused by hydration mismatches.\n\n**Suspense trees are always consistent:** If a component suspends before it's fully added to the tree, React will not add it to the tree in an incomplete state or fire its effects. Instead, React will throw away the new tree completely, wait for the asynchronous operation to finish, and then retry rendering again from scratch. React will render the retry attempt concurrently, and without blocking the browser.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1938":{"pageContent":"**Layout Effects with Suspense**: When a tree re-suspends and reverts to a fallback, React will now clean up layout effects, and then re-create them when the content inside the boundary is shown again. This fixes an issue which prevented component libraries from correctly measuring layout when used with Suspense.\n\n**New JS Environment Requirements**: React now depends on modern browsers features including `Promise`, `Symbol`, and `Object.assign`. If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.\n\n## Other Notable Changes {/*other-notable-changes*/}\n\n### React {/*react*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1939":{"pageContent":"## Other Notable Changes {/*other-notable-changes*/}\n\n### React {/*react*/}\n\n**Components can now render `undefined`:** React no longer warns if you return `undefined` from a component. This makes the allowed component return values consistent with values that are allowed in the middle of a component tree. We suggest to use a linter to prevent mistakes like forgetting a `return` statement before JSX.\n\n**In tests, `act` warnings are now opt-in:** If you're running end-to-end tests, the `act` warnings are unnecessary. We've introduced an [opt-in](https://github.com/reactwg/react-18/discussions/102) mechanism so you can enable them only for unit tests where they are useful and beneficial.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1940":{"pageContent":"**No warning about `setState` on unmounted components:** Previously, React warned about memory leaks when you call `setState` on an unmounted component. This warning was added for subscriptions, but people primarily run into it in scenarios where setting state is fine, and workarounds make the code worse. We've [removed](https://github.com/facebook/react/pull/22114) this warning.\n\n**No suppression of console logs:** When you use Strict Mode, React renders each component twice to help you find unexpected side effects. In React 17, we've suppressed console logs for one of the two renders to make the logs easier to read. In response to [community feedback](https://github.com/facebook/react/issues/21783) about this being confusing, we've removed the suppression. Instead, if you have React DevTools installed, the second log's renders will be displayed in grey, and there will be an option (off by default) to suppress them completely.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1941":{"pageContent":"**Improved memory usage:** React now cleans up more internal fields on unmount, making the impact from unfixed memory leaks that may exist in your application code less severe.\n\n### React DOM Server {/*react-dom-server*/}\n\n**`renderToString`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary and then retry rendering the same content on the client. It is still recommended that you switch to a streaming API like `renderToPipeableStream` or `renderToReadableStream` instead.\n\n**`renderToStaticMarkup`:** Will no longer error when suspending on the server. Instead, it will emit the fallback HTML for the closest `<Suspense>` boundary.\n\n## Changelog {/*changelog*/}\n\nYou can view the [full changelog here](https://github.com/facebook/react/blob/main/CHANGELOG.md).","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/03/08/react-18-upgrade-guide.md"}},"1942":{"pageContent":"--\n\ntitle: \"React Labs: What We've Been Working On – June 2022\"\n\n--\n\nJune 15, 2022 by [Andrew Clark](https://twitter.com/acdlite), [Dan Abramov](https://twitter.com/dan_abramov), [Jan Kassens](https://twitter.com/kassens), [Joseph Savona](https://twitter.com/en_JS), [Josh Story](https://twitter.com/joshcstory), [Lauren Tan](https://twitter.com/potetotes), [Luna Ruan](https://twitter.com/lunaruan), [Mengdi Chen](https://twitter.com/mengdi_en), [Rick Hanlon](https://twitter.com/rickhanlonii), [Robert Zhang](https://twitter.com/jiaxuanzhang01), [Sathya Gunasekaran](https://twitter.com/_gsathya), [Sebastian Markbåge](https://twitter.com/sebmarkbage), and [Xuan Huang](https://twitter.com/Huxpro)\n\n--\n\n<Intro>","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1943":{"pageContent":"--\n\n<Intro>\n\n[React 18](https://reactjs.org/blog/2022/03/29/react-v18) was years in the making, and with it brought valuable lessons for the React team. Its release was the result of many years of research and exploring many paths. Some of those paths were successful; many more were dead-ends that led to new insights. One lesson we’ve learned is that it’s frustrating for the community to wait for new features without having insight into these paths that we’re exploring.\n\n</Intro>\n\n--\n\nWe typically have a number of projects being worked on at any time, ranging from the more experimental to the clearly defined. Looking ahead, we’d like to start regularly sharing more about what we’ve been working on with the community across these projects.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1944":{"pageContent":"To set expectations, this is not a roadmap with clear timelines. Many of these projects are under active research and are difficult to put concrete ship dates on. They may possibly never even ship in their current iteration depending on what we learn. Instead, we want to share with you the problem spaces we’re actively thinking about, and what we’ve learned so far.\n\n## Server Components {/*server-components*/}\n\nWe announced an [experimental demo of React Server Components](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components) (RSC) in December 2020. Since then we’ve been finishing up its dependencies in React 18, and working on changes inspired by experimental feedback.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1945":{"pageContent":"In particular, we’re abandoning the idea of having forked I/O libraries (eg react-fetch), and instead adopting an async/await model for better compatibility. This doesn’t technically block RSC’s release because you can also use routers for data fetching. Another change is that we’re also moving away from the file extension approach in favor of [annotating boundaries](https://github.com/reactjs/rfcs/pull/189#issuecomment-1116482278).\n\nWe’re working together with Vercel and Shopify to unify bundler support for shared semantics in both Webpack and Vite. Before launch, we want to make sure that the semantics of RSCs are the same across the whole React ecosystem. This is the major blocker for reaching stable.\n\n## Asset Loading {/*asset-loading*/}\n\nCurrently, assets like scripts, external styles, fonts, and images are typically preloaded and loaded using external systems. This can make it tricky to coordinate across new environments like streaming, server components, and more.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1946":{"pageContent":"We’re looking at adding APIs to preload and load deduplicated external assets through React APIs that work in all React environments.\n\nWe’re also looking at having these support Suspense so you can have images, CSS, and fonts that block display until they’re loaded but don’t block streaming and concurrent rendering. This can help avoid [“popcorning“](https://twitter.com/sebmarkbage/status/1516852731251724293) as the visuals pop and layout shifts.\n\n## Static Server Rendering Optimizations {/*static-server-rendering-optimizations*/}\n\nStatic Site Generation (SSG) and Incremental Static Regeneration (ISR) are great ways to get performance for cacheable pages, but we think we can add features to improve performance of dynamic Server Side Rendering (SSR) – especially when most but not all of the content is cacheable. We're exploring ways to optimize server rendering utilizing compilation and static passes.\n\n## React Optimizing Compiler {/*react-compiler*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1947":{"pageContent":"## React Optimizing Compiler {/*react-compiler*/}\n\nWe gave an [early preview](https://www.youtube.com/watch?v=lGEMwh32soc) of React Forget at React Conf 2021. It’s a compiler that automatically generates the equivalent of `useMemo` and `useCallback` calls to minimize the cost of re-rendering, while retaining React’s programming model.\n\nRecently, we finished a rewrite of the compiler to make it more reliable and capable. This new architecture allows us to analyze and memoize more complex patterns such as the use of [local mutations](https://beta.reactjs.org/learn/keeping-components-pure#local-mutation-your-components-little-secret), and opens up many new compile-time optimization opportunities beyond just being on par with memoization hooks.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1948":{"pageContent":"We’re also working on a playground for exploring many aspects of the compiler. While the goal of the playground is to make development of the compiler easier, we think that it will make it easier to try it out and build intuition for what the compiler does. It reveals various insights into how it works under the hood, and live renders the compiler’s outputs as you type. This will be shipped together with the compiler when it’s released.\n\n## Offscreen {/*offscreen*/}\n\nToday, if you want to hide and show a component, you have two options. One is to add or remove it from the tree completely. The problem with this approach is that the state of your UI is lost each time you unmount, including state stored in the DOM, like scroll position.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1949":{"pageContent":"The other option is to keep the component mounted and toggle the appearance visually using CSS. This preserves the state of your UI, but it comes at a performance cost, because React must keep rendering the hidden component and all of its children whenever it receives new updates.\n\nOffscreen introduces a third option: hide the UI visually, but deprioritize its content. The idea is similar in spirit to the `content-visibility` CSS property: when content is hidden, it doesn't need to stay in sync with the rest of the UI. React can defer the rendering work until the rest of the app is idle, or until the content becomes visible again.\n\nOffscreen is a low level capability that unlocks high level features. Similar to React's other concurrent features like `startTransition`, in most cases you won't interact with the Offscreen API directly, but instead via an opinionated framework to implement patterns like:","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1950":{"pageContent":"**Instant transitions.** Some routing frameworks already prefetch data to speed up subsequent navigations, like when hovering over a link. With Offscreen, they'll also be able to prerender the next screen in the background.\n\n**Reusable state.** Similarly, when navigating between routes or tabs, you can use Offscreen to preserve the state of the previous screen so you can switch back and pick up where you left off.\n\n**Virtualized list rendering.** When displaying large lists of items, virtualized list frameworks will prerender more rows than are currently visible. You can use Offscreen to prerender the hidden rows at a lower priority than the visible items in the list.\n\n**Backgrounded content.** We're also exploring a related feature for deprioritizing content in the background without hiding it, like when displaying a modal overlay.\n\n## Transition Tracing {/*transition-tracing*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1951":{"pageContent":"## Transition Tracing {/*transition-tracing*/}\n\nCurrently, React has two profiling tools. The [original Profiler](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html) shows an overview of all the commits in a profiling session. For each commit, it also shows all components that rendered and the amount of time it took for them to render. We also have a beta version of a [Timeline Profiler](https://github.com/reactwg/react-18/discussions/76) introduced in React 18 that shows when components schedule updates and when React works on these updates. Both of these profilers help developers identify performance problems in their code.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1952":{"pageContent":"We’ve realized that developers don’t find knowing about individual slow commits or components out of context that useful. It’s more useful to know about what actually causes the slow commits. And that developers want to be able to track specific interactions (eg a button click, an initial load, or a page navigation) to watch for performance regressions and to understand why an interaction was slow and how to fix it.\n\nWe previously tried to solve this issue by creating an [Interaction Tracing API](https://gist.github.com/bvaughn/8de925562903afd2e7a12554adcdda16), but it had some fundamental design flaws that reduced the accuracy of tracking why an interaction was slow and sometimes resulted in interactions never ending. We ended up [removing this API](https://github.com/facebook/react/pull/20037) because of these issues.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1953":{"pageContent":"We are working on a new version for the Interaction Tracing API (tentatively called Transition Tracing because it is initiated via `startTransition`) that solves these problems.\n\n## New React Docs {/*new-react-docs*/}\n\nLast year, we announced the [beta version](https://beta.reactjs.org/) of the new React documentation website. The new learning materials teach Hooks first and has new diagrams, illustrations, as well as many interactive examples and challenges. We took a break from that work to focus on the React 18 release, but now that React 18 is out, we’re actively working to finish and ship the new documentation.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1954":{"pageContent":"We are currently writing a detailed section about effects, as we’ve heard that is one of the more challenging topics for both new and experienced React users. [Synchronizing with Effects](https://beta.reactjs.org/learn/synchronizing-with-effects) is the first published page in the series, and there are more to come in the following weeks. When we first started writing a detailed section about effects, we’ve realized that many common effect patterns can be simplified by adding a new primitive to React. We’ve shared some initial thoughts on that in the [useEvent RFC](https://github.com/reactjs/rfcs/pull/220). It is currently in early research, and we are still iterating on the idea. We appreciate the community’s comments on the RFC so far, as well as the [feedback](https://github.com/reactjs/reactjs.org/issues/3308) and contributions to the ongoing documentation rewrite. We’d specifically like to thank [Harish Kumar](https://github.com/harish-sethuraman) for submitting and reviewing many improvements to the new website implementation.","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1955":{"pageContent":"Thanks to [Sophie Alpert](https://twitter.com/sophiebits) for reviewing this blog post!*","metadata":{"source":"reactjs.org/beta/src/content/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.md"}},"1956":{"pageContent":"--\n\ntitle: \"The Plan for React 18\"\n\n--\n\nJune 8, 2021 by [Andrew Clark](https://twitter.com/acdlite), [Brian Vaughn](https://github.com/bvaughn), [Christine Abernathy](https://twitter.com/abernathyca), [Dan Abramov](https://twitter.com/dan_abramov), [Rachel Nabors](https://twitter.com/rachelnabors), [Rick Hanlon](https://twitter.com/rickhanlonii), [Sebastian Markbåge](https://twitter.com/sebmarkbage), and [Seth Webster](https://twitter.com/sethwebster)\n\n--\n\n<Intro>\n\nThe React team is excited to share a few updates:\n\n1. We’ve started work on the React 18 release, which will be our next major version.\n\n2. We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.\n\n3. We’ve published a React 18 Alpha so that library authors can try it and provide feedback.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1957":{"pageContent":"2. We’ve created a Working Group to prepare the community for gradual adoption of new features in React 18.\n\n3. We’ve published a React 18 Alpha so that library authors can try it and provide feedback.\n\nThese updates are primarily aimed at maintainers of third-party libraries. If you’re learning, teaching, or using React to build user-facing applications, you can safely ignore this post. But you are welcome to follow the discussions in the React 18 Working Group if you're curious!\n\n--\n\n</Intro>\n\n## What’s coming in React 18 {/*whats-coming-in-react-18*/}\n\nWhen it’s released, React 18 will include out-of-the-box improvements (like [automatic batching](https://github.com/reactwg/react-18/discussions/21)), new APIs (like [`startTransition`](https://github.com/reactwg/react-18/discussions/41)), and a [new streaming server renderer](https://github.com/reactwg/react-18/discussions/37) with built-in support for `React.lazy`.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1958":{"pageContent":"These features are possible thanks to a new opt-in mechanism we’re adding in React 18. It’s called “concurrent rendering” and it lets React prepare multiple versions of the UI at the same time. This change is mostly behind-the-scenes, but it unlocks new possibilities to improve both real and perceived performance of your app.\n\nIf you've been following our research into the future of React (we don't expect you to!), you might have heard of something called “concurrent mode” or that it might break your app. In response to this feedback from the community, we’ve redesigned the upgrade strategy for gradual adoption. Instead of an all-or-nothing “mode”, concurrent rendering will only be enabled for updates triggered by one of the new features. In practice, this means **you will be able to adopt React 18 without rewrites and try the new features at your own pace.**\n\n## A gradual adoption strategy {/*a-gradual-adoption-strategy*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1959":{"pageContent":"## A gradual adoption strategy {/*a-gradual-adoption-strategy*/}\n\nSince concurrency in React 18 is opt-in, there are no significant out-of-the-box breaking changes to component behavior. **You can upgrade to React 18 with minimal or no changes to your application code, with a level of effort comparable to a typical major React release**. Based on our experience converting several apps to React 18, we expect that many users will be able to upgrade within a single afternoon.\n\nWe successfully shipped concurrent features to tens of thousands of components at Facebook, and in our experience, we've found that most React components “just work” without additional changes. We're committed to making sure this is a smooth upgrade for the entire community, so today we're announcing the React 18 Working Group.\n\n## Working with the community {/*working-with-the-community*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1960":{"pageContent":"## Working with the community {/*working-with-the-community*/}\n\nWe’re trying something new for this release: We've invited a panel of experts, developers, library authors, and educators from across the React community to participate in our [React 18 Working Group](https://github.com/reactwg/react-18) to provide feedback, ask questions, and collaborate on the release. We couldn't invite everyone we wanted to this initial, small group, but if this experiment works out, we hope there will be more in the future!","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1961":{"pageContent":"*The goal of the React 18 Working Group is to prepare the ecosystem for a smooth, gradual adoption of React 18 by existing applications and libraries.** The Working Group is hosted on [GitHub Discussions](https://github.com/reactwg/react-18/discussions) and is available for the public to read. Members of the working group can leave feedback, ask questions, and share ideas. The core team will also use the discussions repo to share our research findings. As the stable release gets closer, any important information will also be posted on this blog.\n\nFor more information on upgrading to React 18, or additional resources about the release, see the [React 18 announcement post](https://github.com/reactwg/react-18/discussions/4).\n\n## Accessing the React 18 Working Group {/*accessing-the-react-18-working-group*/}\n\nEveryone can read the discussions in the [React 18 Working Group repo](https://github.com/reactwg/react-18).","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1962":{"pageContent":"## Accessing the React 18 Working Group {/*accessing-the-react-18-working-group*/}\n\nEveryone can read the discussions in the [React 18 Working Group repo](https://github.com/reactwg/react-18).\n\nBecause we expect an initial surge of interest in the Working Group, only invited members will be allowed to create or comment on threads. However, the threads are fully visible to the public, so everyone has access to the same information. We believe this is a good compromise between creating a productive environment for working group members, while maintaining transparency with the wider community.\n\nAs always, you can submit bug reports, questions, and general feedback to our [issue tracker](https://github.com/facebook/react/issues).\n\n## How to try React 18 Alpha today {/*how-to-try-react-18-alpha-today*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1963":{"pageContent":"## How to try React 18 Alpha today {/*how-to-try-react-18-alpha-today*/}\n\nNew alphas are [regularly published to npm using the `@alpha` tag](https://github.com/reactwg/react-18/discussions/9). These releases are built using the most recent commit to our main repo. When a feature or bugfix is merged, it will appear in an alpha the following weekday.\n\nThere may be significant behavioral or API changes between alpha releases. Please remember that **alpha releases are not recommended for user-facing, production applications**.\n\n## Projected React 18 release timeline {/*projected-react-18-release-timeline*/}\n\nWe don't have a specific release date scheduled, but we expect it will take several months of feedback and iteration before React 18 is ready for most production applications.\n\nLibrary Alpha: Available today\n\nPublic Beta: At least several months\n\nRelease Candidate (RC): At least several weeks after Beta\n\nGeneral Availability: At least several weeks after RC","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1964":{"pageContent":"Library Alpha: Available today\n\nPublic Beta: At least several months\n\nRelease Candidate (RC): At least several weeks after Beta\n\nGeneral Availability: At least several weeks after RC\n\nMore details about our projected release timeline are [available in the Working Group](https://github.com/reactwg/react-18/discussions/9). We'll post updates on this blog when we're closer to a public release.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/06/08/the-plan-for-react-18.md"}},"1965":{"pageContent":"--\n\ntitle: \"React Conf 2021 Recap\"\n\n--\n\nDecember 17, 2021 by [Jesslyn Tannady](https://twitter.com/jtannady) and [Rick Hanlon](https://twitter.com/rickhanlonii)\n\n--\n\n<Intro>\n\nLast week we hosted our 6th React Conf. In previous years, we've used the React Conf stage to deliver industry changing announcements such as [_React Native_](https://engineering.fb.com/2015/03/26/android/react-native-bringing-modern-web-techniques-to-mobile/) and [_React Hooks_](https://reactjs.org/docs/hooks-intro.html). This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features.\n\n</Intro>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1966":{"pageContent":"</Intro>\n\n--\n\nThis was the first time React Conf was hosted online, and it was streamed for free, translated to 8 different languages. Participants from all over the world joined our conference Discord and the replay event for accessibility in all timezones. Over 50,000 people registered, with over 60,000 views of 19 talks, and 5,000 participants in Discord across both events.\n\nAll the talks are [available to stream online](https://www.youtube.com/watch?v=FZ0cG47msEk&list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa).\n\nHere’s a summary of what was shared on stage:\n\n## React 18 and concurrent features {/*react-18-and-concurrent-features*/}\n\nIn the keynote, we shared our vision for the future of React starting with React 18.\n\nReact 18 adds the long-awaited concurrent renderer and updates to Suspense without any major breaking changes. Apps can upgrade to React 18 and begin gradually adopting concurrent features with the amount of effort on par with any other major release.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1967":{"pageContent":"*This means there is no concurrent mode, only concurrent features.**\n\nIn the keynote, we also shared our vision for Suspense, Server Components, new React working groups, and our long-term many-platform vision for React Native.\n\nWatch the full keynote from [Andrew Clark](https://twitter.com/acdlite), [Juan Tejada](https://twitter.com/_jstejada), [Lauren Tan](https://twitter.com/potetotes), and [Rick Hanlon](https://twitter.com/rickhanlonii) here:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/FZ0cG47msEk\" />\n\n## React 18 for Application Developers {/*react-18-for-application-developers*/}\n\nIn the keynote, we also announced that the React 18 RC is available to try now. Pending further feedback, this is the exact version of React that we will publish to stable early next year.\n\nTo try the React 18 RC, upgrade your dependencies:\n\n```bash\n\nnpm install react@rc react-dom@rc\n\n```\n\nand switch to the new `createRoot` API:\n\n```js\n\n// before\n\nconst container = document.getElementById('root');","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1968":{"pageContent":"To try the React 18 RC, upgrade your dependencies:\n\n```bash\n\nnpm install react@rc react-dom@rc\n\n```\n\nand switch to the new `createRoot` API:\n\n```js\n\n// before\n\nconst container = document.getElementById('root');\n\nReactDOM.render(<App />, container);\n\n// after\n\nconst container = document.getElementById('root');\n\nconst root = ReactDOM.createRoot(container);\n\nroot.render(<App/>);\n\n```\n\nFor a demo of upgrading to React 18, see [Shruti Kapoor](https://twitter.com/shrutikapoor08)’s talk here:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/ytudH8je5ko\" />\n\n## Streaming Server Rendering with Suspense {/*streaming-server-rendering-with-suspense*/}\n\nReact 18 also includes improvements to server-side rendering performance using Suspense.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1969":{"pageContent":"## Streaming Server Rendering with Suspense {/*streaming-server-rendering-with-suspense*/}\n\nReact 18 also includes improvements to server-side rendering performance using Suspense.\n\nStreaming server rendering lets you generate HTML from React components on the server, and stream that HTML to your users. In React 18, you can use `Suspense` to break down your app into smaller independent units which can be streamed independently of each other without blocking the rest of the app. This means users will see your content sooner and be able to start interacting with it much faster.\n\nFor a deep dive, see [Shaundai Person](https://twitter.com/shaundai)’s talk here:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/pj5N-Khihgc\" />\n\n## The first React working group {/*the-first-react-working-group*/}","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1970":{"pageContent":"<YouTubeIframe src=\"https://www.youtube.com/embed/pj5N-Khihgc\" />\n\n## The first React working group {/*the-first-react-working-group*/}\n\nFor React 18, we created our first Working Group to collaborate with a panel of experts, developers, library maintainers, and educators. Together we worked to create our gradual adoption strategy and refine new APIs such as `useId`, `useSyncExternalStore`, and `useInsertionEffect`.\n\nFor an overview of this work, see [Aakansha' Doshi](https://twitter.com/aakansha1216)'s talk:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/qn7gRClrC9U\" />\n\n## React Developer Tooling {/*react-developer-tooling*/}\n\nTo support the new features in this release, we also announced the newly formed React DevTools team and a new Timeline Profiler to help developers debug their React apps.\n\nFor more information and a demo of new DevTools features, see [Brian Vaughn](https://twitter.com/brian_d_vaughn)’s talk:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/oxDfrke8rZg\" />","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1971":{"pageContent":"For more information and a demo of new DevTools features, see [Brian Vaughn](https://twitter.com/brian_d_vaughn)’s talk:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/oxDfrke8rZg\" />\n\n## React without memo {/*react-without-memo*/}\n\nLooking further into the future, [Xuan Huang (黄玄)](https://twitter.com/Huxpro) shared an update from our React Labs research into an auto-memoizing compiler. Check out this talk for more information and a demo of the compiler prototype:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/lGEMwh32soc\" />\n\n## React docs keynote {/*react-docs-keynote*/}\n\n[Rachel Nabors](https://twitter.com/rachelnabors) kicked off a section of talks about learning and designing with React with a keynote about our investment in React's [new docs](https://beta.reactjs.org/):\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/mneDaMYOKP8\" />\n\n## And more... {/*and-more*/}\n\n*We also heard talks on learning and designing with React:**","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1972":{"pageContent":"<YouTubeIframe src=\"https://www.youtube.com/embed/mneDaMYOKP8\" />\n\n## And more... {/*and-more*/}\n\n*We also heard talks on learning and designing with React:**\n\nDebbie O'Brien: [Things I learnt from the new React docs](https://youtu.be/-7odLW_hG7s).\n\nSarah Rainsberger: [Learning in the Browser](https://youtu.be/5X-WEQflCL0).\n\nLinton Ye: [The ROI of Designing with React](https://youtu.be/7cPWmID5XAk).\n\nDelba de Oliveira: [Interactive playgrounds with React](https://youtu.be/zL8cz2W0z34).\n\n*Talks from the Relay, React Native, and PyTorch teams:**\n\nRobert Balicki: [Re-introducing Relay](https://youtu.be/lhVGdErZuN4).\n\nEric Rozell and Steven Moyes: [React Native Desktop](https://youtu.be/9L4FFrvwJwY).\n\nRoman Rädle: [On-device Machine Learning for React Native](https://youtu.be/NLj73vrc2I8)\n\n*And talks from the community on accessibility, tooling, and Server Components:**\n\nDaishi Kato: [React 18 for External Store Libraries](https://youtu.be/oPfSC5bQPR8).","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1973":{"pageContent":"*And talks from the community on accessibility, tooling, and Server Components:**\n\nDaishi Kato: [React 18 for External Store Libraries](https://youtu.be/oPfSC5bQPR8).\n\nDiego Haz: [Building Accessible Components in React 18](https://youtu.be/dcm8fjBfro8).\n\nTafu Nakazaki: [Accessible Japanese Form Components with React](https://youtu.be/S4a0QlsH0pU).\n\nLyle Troxell: [UI tools for artists](https://youtu.be/b3l4WxipFsE).\n\nHelen Lin: [Hydrogen + React 18](https://youtu.be/HS6vIYkSNks).\n\n## Thank you {/*thank-you*/}\n\nThis was our first year planning a conference ourselves, and we have a lot of people to thank.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1974":{"pageContent":"First, thanks to all of our speakers [Aakansha Doshi](https://twitter.com/aakansha1216), [Andrew Clark](https://twitter.com/acdlite), [Brian Vaughn](https://twitter.com/brian_d_vaughn), [Daishi Kato](https://twitter.com/dai_shi), [Debbie O'Brien](https://twitter.com/debs_obrien), [Delba de Oliveira](https://twitter.com/delba_oliveira), [Diego Haz](https://twitter.com/diegohaz), [Eric Rozell](https://twitter.com/EricRozell), [Helen Lin](https://twitter.com/wizardlyhel), [Juan Tejada](https://twitter.com/_jstejada), [Lauren Tan](https://twitter.com/potetotes), [Linton Ye](https://twitter.com/lintonye), [Lyle Troxell](https://twitter.com/lyle), [Rachel Nabors](https://twitter.com/rachelnabors), [Rick Hanlon](https://twitter.com/rickhanlonii), [Robert Balicki](https://twitter.com/StatisticsFTW), [Roman Rädle](https://twitter.com/raedle), [Sarah Rainsberger](https://twitter.com/sarah11918), [Shaundai Person](https://twitter.com/shaundai), [Shruti Kapoor](https://twitter.com/shrutikapoor08), [Steven Moyes](https://twitter.com/moyessa),","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1975":{"pageContent":"[Sarah Rainsberger](https://twitter.com/sarah11918), [Shaundai Person](https://twitter.com/shaundai), [Shruti Kapoor](https://twitter.com/shrutikapoor08), [Steven Moyes](https://twitter.com/moyessa), [Tafu Nakazaki](https://twitter.com/hawaiiman0), and  [Xuan Huang (黄玄)](https://twitter.com/Huxpro).","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1976":{"pageContent":"Thanks to everyone who helped provide feedback on talks including [Andrew Clark](https://twitter.com/acdlite), [Dan Abramov](https://twitter.com/dan_abramov), [Dave McCabe](https://twitter.com/mcc_abe), [Eli White](https://twitter.com/Eli_White), [Joe Savona](https://twitter.com/en_JS),  [Lauren Tan](https://twitter.com/potetotes), [Rachel Nabors](https://twitter.com/rachelnabors), and [Tim Yung](https://twitter.com/yungsters).\n\nThanks to [Lauren Tan](https://twitter.com/potetotes) for setting up the conference Discord and serving as our Discord admin.\n\nThanks to [Seth Webster](https://twitter.com/sethwebster) for feedback on overall direction and making sure we were focused on diversity and inclusion.\n\nThanks to [Rachel Nabors](https://twitter.com/rachelnabors) for spearheading our moderation effort, and [Aisha Blake](https://twitter.com/AishaBlake) for creating our moderation guide, leading our moderation team, training the translators and moderators, and helping to moderate both events.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1977":{"pageContent":"Thanks to our moderators [Jesslyn Tannady](https://twitter.com/jtannady), [Suzie Grange](https://twitter.com/missuze), [Becca Bailey](https://twitter.com/beccaliz), [Luna Wei](https://twitter.com/lunaleaps), [Joe Previte](https://twitter.com/jsjoeio), [Nicola Corti](https://twitter.com/Cortinico), [Gijs Weterings](https://twitter.com/gweterings), [Claudio Procida](https://twitter.com/claudiopro), Julia Neumann, Mengdi Chen, Jean Zhang, Ricky Li, and [Xuan Huang (黄玄)](https://twitter.com/Huxpro).\n\nThanks to [Manjula Dube](https://twitter.com/manjula_dube), [Sahil Mhapsekar](https://twitter.com/apheri0), and Vihang Patel from [React India](https://www.reactindia.io/), and [Jasmine Xie](https://twitter.com/jasmine_xby), [QiChang Li](https://twitter.com/QCL15), and [YanLun Li](https://twitter.com/anneincoding) from [React China](https://twitter.com/ReactChina) for helping moderate our replay event and keep it engaging for the community.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1978":{"pageContent":"Thanks to Vercel for publishing their [Virtual Event Starter Kit](https://vercel.com/virtual-event-starter-kit), which the conference website was built on, and to [Lee Robinson](https://twitter.com/leeerob) and [Delba de Oliveira](https://twitter.com/delba_oliveira) for sharing their experience running Next.js Conf.\n\nThanks to [Leah Silber](https://twitter.com/wifelette) for sharing her experience running conferences, learnings from running [RustConf](https://rustconf.com/), and for her book [Event Driven](https://leanpub.com/eventdriven/) and the advice it contains for running conferences.\n\nThanks to [Kevin Lewis](https://twitter.com/_phzn) and [Rachel Nabors](https://twitter.com/rachelnabors) for sharing their experience running Women of React Conf.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1979":{"pageContent":"Thanks to [Kevin Lewis](https://twitter.com/_phzn) and [Rachel Nabors](https://twitter.com/rachelnabors) for sharing their experience running Women of React Conf.\n\nThanks to [Aakansha Doshi](https://twitter.com/aakansha1216), [Laurie Barth](https://twitter.com/laurieontech), [Michael Chan](https://twitter.com/chantastic), and [Shaundai Person](https://twitter.com/shaundai) for their advice and ideas throughout planning.\n\nThanks to [Dan Lebowitz](https://twitter.com/lebo) for help designing and building the conference website and tickets.\n\nThanks to Laura Podolak Waddell, Desmond Osei-Acheampong, Mark Rossi, Josh Toberman and others on the Facebook Video Productions team for recording the videos for the Keynote and Meta employee talks.\n\nThanks to our partner HitPlay for helping to organize the conference, editing all the videos in the stream, translating all the talks, and moderating the Discord in multiple languages.","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1980":{"pageContent":"Thanks to our partner HitPlay for helping to organize the conference, editing all the videos in the stream, translating all the talks, and moderating the Discord in multiple languages.\n\nFinally, thanks to all of our participants for making this a great React Conf!","metadata":{"source":"reactjs.org/beta/src/content/blog/2021/12/17/react-conf-2021-recap.md"}},"1981":{"pageContent":"--\n\ntitle: \"Introducing Zero-Bundle-Size React Server Components\"\n\n--\n\nDecember 21, 2020 by [Dan Abramov](https://twitter.com/dan_abramov), [Lauren Tan](https://twitter.com/potetotes), [Joseph Savona](https://twitter.com/en_JS), and [Sebastian Markbåge](https://twitter.com/sebmarkbage)\n\n--\n\n<Intro>\n\n2020 has been a long year. As it comes to an end we wanted to share a special Holiday Update on our research into zero-bundle-size **React Server Components**.\n\n</Intro>\n\n--\n\nTo introduce React Server Components, we have prepared a talk and a demo. If you want, you can check them out during the holidays, or later when work picks back up in the new year.\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/TQQPAU21ZUw\" />\n\n*React Server Components are still in research and development.** We are sharing this work in the spirit of transparency and to get initial feedback from the React community. There will be plenty of time for that, so **don't feel like you have to catch up right now!**","metadata":{"source":"reactjs.org/beta/src/content/blog/2020/12/21/data-fetching-with-react-server-components.md"}},"1982":{"pageContent":"If you want to check them out, we recommend to go in the following order:\n\n1. **Watch the talk** to learn about React Server Components and see the demo.\n\n2. **[Clone the demo](http://github.com/reactjs/server-components-demo)** to play with React Server Components on your computer.\n\n3. **[Read the RFC (with FAQ at the end)](https://github.com/reactjs/rfcs/pull/188)** for a deeper technical breakdown and to provide feedback.\n\nWe are excited to hear from you on the RFC or in replies to the [@reactjs](https://twitter.com/reactjs) Twitter handle. Happy holidays, stay safe, and see you next year!","metadata":{"source":"reactjs.org/beta/src/content/blog/2020/12/21/data-fetching-with-react-server-components.md"}},"1983":{"pageContent":"--\n\ntitle: Keeping Components Pure\n\n--\n\n<Intro>\n\nSome JavaScript functions are *pure.* Pure functions only perform a calculation and nothing more. By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat purity is and how it helps you avoid bugs\n\nHow to keep components pure by keeping changes out of the render phase\n\nHow to use Strict Mode to find mistakes in your components\n\n</YouWillLearn>\n\n## Purity: Components as formulas {/*purity-components-as-formulas*/}\n\nIn computer science (and especially the world of functional programming), [a pure function](https://wikipedia.org/wiki/Pure_function) is a function with the following characteristics:\n\n**It minds its own business.** It does not change any objects or variables that existed before it was called.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1984":{"pageContent":"**It minds its own business.** It does not change any objects or variables that existed before it was called.\n\n**Same inputs, same output.** Given the same inputs, a pure function should always return the same result.\n\nYou might already be familiar with one example of pure functions: formulas in math.\n\nConsider this math formula: <Math><MathI>y</MathI> = 2<MathI>x</MathI></Math>.\n\nIf <Math><MathI>x</MathI> = 2</Math> then <Math><MathI>y</MathI> = 4</Math>. Always.\n\nIf <Math><MathI>x</MathI> = 3</Math> then <Math><MathI>y</MathI> = 6</Math>. Always.\n\nIf <Math><MathI>x</MathI> = 3</Math>, <MathI>y</MathI> won't sometimes be <Math>9</Math> or <Math>–1</Math> or <Math>2.5</Math> depending on the time of day or the state of the stock market.\n\nIf <Math><MathI>y</MathI> = 2<MathI>x</MathI></Math> and <Math><MathI>x</MathI> = 3</Math>, <MathI>y</MathI> will _always_ be <Math>6</Math>.\n\nIf we made this into a JavaScript function, it would look like this:\n\n```js\n\nfunction double(number) {\n\nreturn 2 * number;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1985":{"pageContent":"If we made this into a JavaScript function, it would look like this:\n\n```js\n\nfunction double(number) {\n\nreturn 2 * number;\n\n}\n\n```\n\nIn the above example, `double` is a **pure function.** If you pass it `3`, it will return `6`. Always.\n\nReact is designed around this concept. **React assumes that every component you write is a pure function.** This means that React components you write must always return the same JSX given the same inputs:\n\n<Sandpack>\n\n```js App.js\n\nfunction Recipe({ drinkers }) {\n\nreturn (\n\n<ol>\n\n<li>Boil {drinkers} cups of water.</li>\n\n<li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>\n\n<li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>\n\n</ol>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<section>\n\n<h1>Spiced Chai Recipe</h1>\n\n<h2>For two</h2>\n\n<Recipe drinkers={2} />\n\n<h2>For a gathering</h2>\n\n<Recipe drinkers={4} />\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nWhen you pass `drinkers={2}` to `Recipe`, it will return JSX containing `2 cups of water`. Always.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1986":{"pageContent":"<Recipe drinkers={2} />\n\n<h2>For a gathering</h2>\n\n<Recipe drinkers={4} />\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nWhen you pass `drinkers={2}` to `Recipe`, it will return JSX containing `2 cups of water`. Always.\n\nIf you pass `drinkers={4}`, it will return JSX containing `4 cups of water`. Always.\n\nJust like a math formula.\n\nYou could think of your components as recipes: if you follow them and don't introduce new ingredients during the cooking process, you will get the same dish every time. That \"dish\" is the JSX that the component serves to React to [render.](/learn/render-and-commit)\n\n<Illustration src=\"/images/docs/illustrations/i_puritea-recipe.png\" alt=\"A tea recipe for x people: take x cups of water, add x spoons of tea and 0.5x spoons of spices, and 0.5x cups of milk\" />\n\n## Side Effects: (un)intended consequences {/*side-effects-unintended-consequences*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1987":{"pageContent":"## Side Effects: (un)intended consequences {/*side-effects-unintended-consequences*/}\n\nReact's rendering process must always be pure. Components should only *return* their JSX, and not *change* any objects or variables that existed before rendering—that would make them impure!\n\nHere is a component that breaks this rule:\n\n<Sandpack>\n\n```js\n\nlet guest = 0;\n\nfunction Cup() {\n\n// Bad: changing a preexisting variable!\n\nguest = guest + 1;\n\nreturn <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaSet() {\n\nreturn (\n\n<>\n\n<Cup />\n\n<Cup />\n\n<Cup />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis component is reading and writing a `guest` variable declared outside of it. This means that **calling this component multiple times will produce different JSX!** And what's more, if _other_ components read `guest`, they will produce different JSX, too, depending on when they were rendered! That's not predictable.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1988":{"pageContent":"Going back to our formula <Math><MathI>y</MathI> = 2<MathI>x</MathI></Math>, now even if <Math><MathI>x</MathI> = 2</Math>, we cannot trust that <Math><MathI>y</MathI> = 4</Math>. Our tests could fail, our users would be baffled, planes would fall out of the sky—you can see how this would lead to confusing bugs!\n\nYou can fix this component by [passing `guest` as a prop instead](/learn/passing-props-to-a-component):\n\n<Sandpack>\n\n```js\n\nfunction Cup({ guest }) {\n\nreturn <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaSet() {\n\nreturn (\n\n<>\n\n<Cup guest={1} />\n\n<Cup guest={2} />\n\n<Cup guest={3} />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNow your component is pure, as the JSX it returns only depends on the `guest` prop.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1989":{"pageContent":"}\n\nexport default function TeaSet() {\n\nreturn (\n\n<>\n\n<Cup guest={1} />\n\n<Cup guest={2} />\n\n<Cup guest={3} />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNow your component is pure, as the JSX it returns only depends on the `guest` prop.\n\nIn general, you should not expect your components to be rendered in any particular order. It doesn't matter if you call <Math><MathI>y</MathI> = 2<MathI>x</MathI></Math> before or after <Math><MathI>y</MathI> = 5<MathI>x</MathI></Math>: both formulas will resolve independently of each other. In the same way, each component should only \"think for itself\", and not attempt to coordinate with or depend upon others during rendering. Rendering is like a school exam: each component should calculate JSX on their own!\n\n<DeepDive>\n\n#### Detecting impure calculations with StrictMode {/*detecting-impure-calculations-with-strict-mode*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1990":{"pageContent":"<DeepDive>\n\n#### Detecting impure calculations with StrictMode {/*detecting-impure-calculations-with-strict-mode*/}\n\nAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: [props](/learn/passing-props-to-a-component), [state](/learn/state-a-components-memory), and [context.](/learn/passing-data-deeply-with-context) You should always treat these inputs as read-only.\n\nWhen you want to *change* something in response to user input, you should [set state](/learn/state-a-components-memory) instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.\n\nReact offers a \"Strict Mode\" in which it calls each component's function twice during development. **By calling the component functions twice, Strict Mode helps find components that break these rules.**","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1991":{"pageContent":"Notice how the original example displayed \"Guest #2\", \"Guest #4\", and \"Guest #6\" instead of \"Guest #1\", \"Guest #2\", and \"Guest #3\". The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. **Pure functions only calculate, so calling them twice won't change anything**--just like calling `double(2)` twice doesn't change what's returned, and solving <Math><MathI>y</MathI> = 2<MathI>x</MathI></Math> twice doesn't change what <MathI>y</MathI> is. Same inputs, same outputs. Always.\n\nStrict Mode has no effect in production, so it won't slow down the app for your users. To opt into Strict Mode, you can wrap your root component into `<React.StrictMode>`. Some frameworks do this by default.\n\n</DeepDive>\n\n### Local mutation: Your component's little secret {/*local-mutation-your-components-little-secret*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1992":{"pageContent":"</DeepDive>\n\n### Local mutation: Your component's little secret {/*local-mutation-your-components-little-secret*/}\n\nIn the above example, the problem was that the component changed a *preexisting* variable while rendering. This is often called a **\"mutation\"** to make it sound a bit scarier. Pure functions don't mutate variables outside of the function's scope or objects that were created before the call—that makes them impure!\n\nHowever, **it's completely fine to change variables and objects that you've *just* created while rendering.** In this example, you create an `[]` array, assign it to a `cups` variable, and then `push` a dozen cups into it:\n\n<Sandpack>\n\n```js\n\nfunction Cup({ guest }) {\n\nreturn <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaGathering() {\n\nlet cups = [];\n\nfor (let i = 1; i <= 12; i++) {\n\ncups.push(<Cup key={i} guest={i} />);\n\n}\n\nreturn cups;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1993":{"pageContent":"return <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaGathering() {\n\nlet cups = [];\n\nfor (let i = 1; i <= 12; i++) {\n\ncups.push(<Cup key={i} guest={i} />);\n\n}\n\nreturn cups;\n\n}\n\n```\n\n</Sandpack>\n\nIf the `cups` variable or the `[]` array were created outside the `TeaGathering` function, this would be a huge problem! You would be changing a *preexisting* object by pushing items into that array.\n\nHowever, it's fine because you've created them *during the same render*, inside `TeaGathering`. No code outside of `TeaGathering` will ever know that this happened. This is called **\"local mutation\"**—it's like your component's little secret.\n\n## Where you _can_ cause side effects {/*where-you-_can_-cause-side-effects*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1994":{"pageContent":"## Where you _can_ cause side effects {/*where-you-_can_-cause-side-effects*/}\n\nWhile functional programming relies heavily on purity, at some point, somewhere, _something_ has to change. That's kind of the point of programming! These changes—updating the screen, starting an animation, changing the data—are called **side effects.** They're things that happen _\"on the side\"_, not during rendering.\n\nIn React, **side effects usually belong inside [event handlers.](/learn/responding-to-events)** Event handlers are functions that React runs when you perform some action—for example, when you click a button. Even though event handlers are defined *inside* your component, they don't run *during* rendering! **So event handlers don't need to be pure.**","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1995":{"pageContent":"If you've exhausted all other options and can't find the right event handler for your side effect, you can still attach it to your returned JSX with a [`useEffect`](/reference/react/useEffect) call in your component. This tells React to execute it later, after rendering, when side effects are allowed. **However, this approach should be your last resort.**\n\nWhen possible, try to express your logic with rendering alone. You'll be surprised how far this can take you!\n\n<DeepDive>\n\n#### Why does React care about purity? {/*why-does-react-care-about-purity*/}\n\nWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\n\nYour components could run in a different environment—for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1996":{"pageContent":"Your components could run in a different environment—for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.\n\nYou can improve performance by [skipping rendering](/reference/react/memo) components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\n\nIf some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\n\nEvery new React feature we're building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm.\n\n</DeepDive>\n\n<Recap>\n\nA component must be pure, meaning:\n\n**It minds its own business.** It should not change any objects or variables that existed before rendering.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1997":{"pageContent":"</DeepDive>\n\n<Recap>\n\nA component must be pure, meaning:\n\n**It minds its own business.** It should not change any objects or variables that existed before rendering.\n\n**Same inputs, same output.** Given the same inputs, a component should always return the same JSX.\n\nRendering can happen at any time, so components should not depend on each others' rendering sequence.\n\nYou should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, [\"set\" state](/learn/state-a-components-memory) instead of mutating preexisting objects.\n\nStrive to express your component's logic in the JSX you return. When you need to \"change things\", you'll usually want to do it in an event handler. As a last resort, you can `useEffect`.\n\nWriting pure functions takes a bit of practice, but it unlocks the power of React's paradigm.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a broken clock {/*fix-a-broken-clock*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1998":{"pageContent":"Writing pure functions takes a bit of practice, but it unlocks the power of React's paradigm.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a broken clock {/*fix-a-broken-clock*/}\n\nThis component tries to set the `<h1>`'s CSS class to `\"night\"` during the time from midnight to six hours in the morning, and `\"day\"` at all other times. However, it doesn't work. Can you fix this component?\n\nYou can verify whether your solution works by temporarily changing the computer's timezone. When the current time is between midnight and six in the morning, the clock should have inverted colors!\n\n<Hint>\n\nRendering is a *calculation*, it shouldn't try to \"do\" things. Can you express the same idea differently?\n\n</Hint>\n\n<Sandpack>\n\n```js Clock.js active\n\nexport default function Clock({ time }) {\n\nlet hours = time.getHours();\n\nif (hours >= 0 && hours <= 6) {\n\ndocument.getElementById('time').className = 'night';\n\n} else {\n\ndocument.getElementById('time').className = 'day';\n\n}\n\nreturn (\n\n<h1 id=\"time\">\n\n{time.toLocaleTimeString()}\n\n</h1>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"1999":{"pageContent":"document.getElementById('time').className = 'night';\n\n} else {\n\ndocument.getElementById('time').className = 'day';\n\n}\n\nreturn (\n\n<h1 id=\"time\">\n\n{time.toLocaleTimeString()}\n\n</h1>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nreturn (\n\n<Clock time={time} />\n\n);\n\n}\n\n```\n\n```css\n\nbody > * {\n\nwidth: 100%;\n\nheight: 100%;\n\n}\n\n.day {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n.night {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can fix this component by calculating the `className` and including it in the render output:\n\n<Sandpack>\n\n```js Clock.js active\n\nexport default function Clock({ time }) {\n\nlet hours = time.getHours();\n\nlet className;\n\nif (hours >= 0 && hours <= 6) {\n\nclassName = 'night';\n\n} else {\n\nclassName = 'day';\n\n}\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2000":{"pageContent":"<Sandpack>\n\n```js Clock.js active\n\nexport default function Clock({ time }) {\n\nlet hours = time.getHours();\n\nlet className;\n\nif (hours >= 0 && hours <= 6) {\n\nclassName = 'night';\n\n} else {\n\nclassName = 'day';\n\n}\n\nreturn (\n\n<h1 className={className}>\n\n{time.toLocaleTimeString()}\n\n</h1>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nreturn (\n\n<Clock time={time} />\n\n);\n\n}\n\n```\n\n```css\n\nbody > * {\n\nwidth: 100%;\n\nheight: 100%;\n\n}\n\n.day {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n.night {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n```\n\n</Sandpack>\n\nIn this example, the side effect (modifying the DOM) was not necessary at all. You only needed to return JSX.\n\n</Solution>\n\n#### Fix a broken profile {/*fix-a-broken-profile*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2001":{"pageContent":"color: #fff;\n\n}\n\n```\n\n</Sandpack>\n\nIn this example, the side effect (modifying the DOM) was not necessary at all. You only needed to return JSX.\n\n</Solution>\n\n#### Fix a broken profile {/*fix-a-broken-profile*/}\n\nTwo `Profile` components are rendered side by side with different data. Press \"Collapse\" on the first profile, and then \"Expand\" it. You'll notice that both profiles now show the same person. This is a bug.\n\nFind the cause of the bug and fix it.\n\n<Hint>\n\nThe buggy code is in `Profile.js`. Make sure you read it all from top to bottom!\n\n</Hint>\n\n<Sandpack>\n\n```js Profile.js\n\nimport Panel from './Panel.js';\n\nimport { getImageUrl } from './utils.js';\n\nlet currentPerson;\n\nexport default function Profile({ person }) {\n\ncurrentPerson = person;\n\nreturn (\n\n<Panel>\n\n<Header />\n\n<Avatar />\n\n</Panel>\n\n)\n\n}\n\nfunction Header() {\n\nreturn <h1>{currentPerson.name}</h1>;\n\n}\n\nfunction Avatar() {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(currentPerson)}\n\nalt={currentPerson.name}\n\nwidth={50}\n\nheight={50}\n\n/>\n\n);\n\n}\n\n```\n\n```js Panel.js hidden","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2002":{"pageContent":"return <h1>{currentPerson.name}</h1>;\n\n}\n\nfunction Avatar() {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(currentPerson)}\n\nalt={currentPerson.name}\n\nwidth={50}\n\nheight={50}\n\n/>\n\n);\n\n}\n\n```\n\n```js Panel.js hidden\n\nimport { useState } from 'react';\n\nexport default function Panel({ children }) {\n\nconst [open, setOpen] = useState(true);\n\nreturn (\n\n<section className=\"panel\">\n\n<button onClick={() => setOpen(!open)}>\n\n{open ? 'Collapse' : 'Expand'}\n\n</button>\n\n{open && children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js App.js\n\nimport Profile from './Profile.js';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<Profile person={{\n\nimageId: 'lrWQx8l',\n\nname: 'Subrahmanyan Chandrasekhar',\n\n}} />\n\n<Profile person={{\n\nimageId: 'MK3eW3A',\n\nname: 'Creola Katherine Johnson',\n\n}} />\n\n</>\n\n)\n\n}\n\n```\n\n```js utils.js hidden\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\nwidth: 200px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2003":{"pageContent":"person.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\nwidth: 200px;\n\n}\n\nh1 { margin: 5px; font-size: 18px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThe problem is that the `Profile` component writes to a preexisting variable called `currentPerson`, and the `Header` and `Avatar` components read from it. This makes *all three of them* impure and difficult to predict.\n\nTo fix the bug, remove the `currentPerson` variable. Instead, pass all information from `Profile` to `Header` and `Avatar` via props. You'll need to add a `person` prop to both components and pass it all the way down.\n\n<Sandpack>\n\n```js Profile.js active\n\nimport Panel from './Panel.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function Profile({ person }) {\n\nreturn (\n\n<Panel>\n\n<Header person={person} />\n\n<Avatar person={person} />\n\n</Panel>\n\n)\n\n}\n\nfunction Header({ person }) {\n\nreturn <h1>{person.name}</h1>;\n\n}\n\nfunction Avatar({ person }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2004":{"pageContent":"return (\n\n<Panel>\n\n<Header person={person} />\n\n<Avatar person={person} />\n\n</Panel>\n\n)\n\n}\n\nfunction Header({ person }) {\n\nreturn <h1>{person.name}</h1>;\n\n}\n\nfunction Avatar({ person }) {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\nwidth={50}\n\nheight={50}\n\n/>\n\n);\n\n}\n\n```\n\n```js Panel.js hidden\n\nimport { useState } from 'react';\n\nexport default function Panel({ children }) {\n\nconst [open, setOpen] = useState(true);\n\nreturn (\n\n<section className=\"panel\">\n\n<button onClick={() => setOpen(!open)}>\n\n{open ? 'Collapse' : 'Expand'}\n\n</button>\n\n{open && children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js App.js\n\nimport Profile from './Profile.js';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<Profile person={{\n\nimageId: 'lrWQx8l',\n\nname: 'Subrahmanyan Chandrasekhar',\n\n}} />\n\n<Profile person={{\n\nimageId: 'MK3eW3A',\n\nname: 'Creola Katherine Johnson',\n\n}} />\n\n</>\n\n);\n\n}\n\n```\n\n```js utils.js hidden\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; }\n\n.panel {","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2005":{"pageContent":");\n\n}\n\n```\n\n```js utils.js hidden\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\nwidth: 200px;\n\n}\n\nh1 { margin: 5px; font-size: 18px; }\n\n```\n\n</Sandpack>\n\nRemember that React does not guarantee that component functions will execute in any particular order, so you can't communicate between them by setting variables. All communication must happen through props.\n\n</Solution>\n\n#### Fix a broken story tray {/*fix-a-broken-story-tray*/}\n\nThe CEO of your company is asking you to add \"stories\" to your online clock app, and you can't say no. You've written a `StoryTray` component that accepts a list of `stories`, followed by a \"Create Story\" placeholder.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2006":{"pageContent":"You implemented the \"Create Story\" placeholder by pushing one more fake story at the end of the `stories` array that you receive as a prop. But for some reason, \"Create Story\" appears more than once. Fix the issue.\n\n<Sandpack>\n\n```js StoryTray.js active\n\nexport default function StoryTray({ stories }) {\n\nstories.push({\n\nid: 'create',\n\nlabel: 'Create Story'\n\n});\n\nreturn (\n\n<ul>\n\n{stories.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState([...initialStories])\n\nlet time = useTime();\n\n// HACK: Prevent the memory from growing forever while you read docs.\n\n// We're breaking our own rules here.\n\nif (stories.length > 100) {\n\nstories.length = 100;\n\n}\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2007":{"pageContent":"// We're breaking our own rules here.\n\nif (stories.length > 100) {\n\nstories.length = 100;\n\n}\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<h2>It is {time.toLocaleTimeString()} now.</h2>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n```js sandbox.config.json hidden\n\n{\n\n\"hardReloadOnChange\": true\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nNotice how whenever the clock updates, \"Create Story\" is added *twice*. This serves as a hint that we have a mutation during rendering--Strict Mode calls components twice to make these issues more noticeable.","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2008":{"pageContent":"`StoryTray` function is not pure. By calling `push` on the received `stories` array (a prop!), it is mutating an object that was created *before* `StoryTray` started rendering. This makes it buggy and very difficult to predict.\n\nThe simplest fix is to not touch the array at all, and render \"Create Story\" separately:\n\n<Sandpack>\n\n```js StoryTray.js active\n\nexport default function StoryTray({ stories }) {\n\nreturn (\n\n<ul>\n\n{stories.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n<li>Create Story</li>\n\n</ul>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState([...initialStories])\n\nlet time = useTime();\n\n// HACK: Prevent the memory from growing forever while you read docs.\n\n// We're breaking our own rules here.\n\nif (stories.length > 100) {\n\nstories.length = 100;\n\n}\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2009":{"pageContent":"// HACK: Prevent the memory from growing forever while you read docs.\n\n// We're breaking our own rules here.\n\nif (stories.length > 100) {\n\nstories.length = 100;\n\n}\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<h2>It is {time.toLocaleTimeString()} now.</h2>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>\n\nAlternatively, you could create a _new_ array (by copying the existing one) before you push an item into it:\n\n<Sandpack>\n\n```js StoryTray.js active\n\nexport default function StoryTray({ stories }) {\n\n// Copy the array!\n\nlet storiesToDisplay = stories.slice();\n\n// Does not affect the original array:","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2010":{"pageContent":"<Sandpack>\n\n```js StoryTray.js active\n\nexport default function StoryTray({ stories }) {\n\n// Copy the array!\n\nlet storiesToDisplay = stories.slice();\n\n// Does not affect the original array:\n\nstoriesToDisplay.push({\n\nid: 'create',\n\nlabel: 'Create Story'\n\n});\n\nreturn (\n\n<ul>\n\n{storiesToDisplay.map(story => (\n\n<li key={story.id}>\n\n{story.label}\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport StoryTray from './StoryTray.js';\n\nlet initialStories = [\n\n{id: 0, label: \"Ankit's Story\" },\n\n{id: 1, label: \"Taylor's Story\" },\n\n];\n\nexport default function App() {\n\nlet [stories, setStories] = useState([...initialStories])\n\nlet time = useTime();\n\n// HACK: Prevent the memory from growing forever while you read docs.\n\n// We're breaking our own rules here.\n\nif (stories.length > 100) {\n\nstories.length = 100;\n\n}\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<h2>It is {time.toLocaleTimeString()} now.</h2>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\nfunction useTime() {","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2011":{"pageContent":"}\n\nreturn (\n\n<div\n\nstyle={{\n\nwidth: '100%',\n\nheight: '100%',\n\ntextAlign: 'center',\n\n}}\n\n>\n\n<h2>It is {time.toLocaleTimeString()} now.</h2>\n\n<StoryTray stories={stories} />\n\n</div>\n\n);\n\n}\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\n```\n\n```css\n\nul {\n\nmargin: 0;\n\nlist-style-type: none;\n\n}\n\nli {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nfloat: left;\n\nmargin: 5px;\n\nmargin-bottom: 20px;\n\npadding: 5px;\n\nwidth: 70px;\n\nheight: 100px;\n\n}\n\n```\n\n</Sandpack>\n\nThis keeps your mutation local and your rendering function pure. However, you still need to be careful: for example, if you tried to change any of the array's existing items, you'd have to clone those items too.\n\nIt is useful to remember which operations on arrays mutate them, and which don't. For example, `push`, `pop`, `reverse`, and `sort` will mutate the original array, but `slice`, `filter`, and `map` will create a new one.\n\n</Solution>","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2012":{"pageContent":"</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/keeping-components-pure.md"}},"2013":{"pageContent":"--\n\ntitle: React Videos\n\n--\n\n<Intro>\n\nVideos dedicated to the discussion of React and the React ecosystem.\n\n</Intro>\n\n## React Conf 2021 {/*react-conf-2021*/}\n\n### React 18 Keynote {/*react-18-keynote*/}\n\nIn the keynote, we shared our vision for the future of React starting with React 18.\n\nWatch the full keynote from [Andrew Clark](https://twitter.com/acdlite), [Juan Tejada](https://twitter.com/_jstejada), [Lauren Tan](https://twitter.com/potetotes), and [Rick Hanlon](https://twitter.com/rickhanlonii) here:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/FZ0cG47msEk\" title=\"YouTube video player\" />\n\n### React 18 for Application Developers {/*react-18-for-application-developers*/}\n\nFor a demo of upgrading to React 18, see [Shruti Kapoor](https://twitter.com/shrutikapoor08)’s talk here:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/ytudH8je5ko\" title=\"YouTube video player\" />\n\n### Streaming Server Rendering with Suspense {/*streaming-server-rendering-with-suspense*/}","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2014":{"pageContent":"<YouTubeIframe src=\"https://www.youtube.com/embed/ytudH8je5ko\" title=\"YouTube video player\" />\n\n### Streaming Server Rendering with Suspense {/*streaming-server-rendering-with-suspense*/}\n\nReact 18 also includes improvements to server-side rendering performance using Suspense.\n\nStreaming server rendering lets you generate HTML from React components on the server, and stream that HTML to your users. In React 18, you can use `Suspense` to break down your app into smaller independent units which can be streamed independently of each other without blocking the rest of the app. This means users will see your content sooner and be able to start interacting with it much faster.\n\nFor a deep dive, see [Shaundai Person](https://twitter.com/shaundai)’s talk here:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/pj5N-Khihgc\" title=\"YouTube video player\" />\n\n### The first React working group {/*the-first-react-working-group*/}","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2015":{"pageContent":"<YouTubeIframe src=\"https://www.youtube.com/embed/pj5N-Khihgc\" title=\"YouTube video player\" />\n\n### The first React working group {/*the-first-react-working-group*/}\n\nFor React 18, we created our first Working Group to collaborate with a panel of experts, developers, library maintainers, and educators. Together we worked to create our gradual adoption strategy and refine new APIs such as `useId`, `useSyncExternalStore`, and `useInsertionEffect`.\n\nFor an overview of this work, see [Aakansha' Doshi](https://twitter.com/aakansha1216)'s talk:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/qn7gRClrC9U\" title=\"YouTube video player\" />\n\n### React Developer Tooling {/*react-developer-tooling*/}\n\nTo support the new features in this release, we also announced the newly formed React DevTools team and a new Timeline Profiler to help developers debug their React apps.\n\nFor more information and a demo of new DevTools features, see [Brian Vaughn](https://twitter.com/brian_d_vaughn)’s talk:","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2016":{"pageContent":"For more information and a demo of new DevTools features, see [Brian Vaughn](https://twitter.com/brian_d_vaughn)’s talk:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/oxDfrke8rZg\" title=\"YouTube video player\" />\n\n### React without memo {/*react-without-memo*/}\n\nLooking further into the future, [Xuan Huang (黄玄)](https://twitter.com/Huxpro) shared an update from our React Labs research into an auto-memoizing compiler. Check out this talk for more information and a demo of the compiler prototype:\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/lGEMwh32soc\" title=\"YouTube video player\" />\n\n### React docs keynote {/*react-docs-keynote*/}\n\n[Rachel Nabors](https://twitter.com/rachelnabors) kicked off a section of talks about learning and designing with React with a keynote about our investment in React's [new docs](https://beta.reactjs.org/):\n\n<YouTubeIframe src=\"https://www.youtube.com/embed/mneDaMYOKP8\" title=\"YouTube video player\" />\n\n### And more... {/*and-more*/}","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2017":{"pageContent":"<YouTubeIframe src=\"https://www.youtube.com/embed/mneDaMYOKP8\" title=\"YouTube video player\" />\n\n### And more... {/*and-more*/}\n\n*We also heard talks on learning and designing with React:**\n\nDebbie O'Brien: [Things I learnt from the new React docs](https://youtu.be/-7odLW_hG7s).\n\nSarah Rainsberger: [Learning in the Browser](https://youtu.be/5X-WEQflCL0).\n\nLinton Ye: [The ROI of Designing with React](https://youtu.be/7cPWmID5XAk).\n\nDelba de Oliveira: [Interactive playgrounds with React](https://youtu.be/zL8cz2W0z34).\n\n*Talks from the Relay, React Native, and PyTorch teams:**\n\nRobert Balicki: [Re-introducing Relay](https://youtu.be/lhVGdErZuN4).\n\nEric Rozell and Steven Moyes: [React Native Desktop](https://youtu.be/9L4FFrvwJwY).\n\nRoman Rädle: [On-device Machine Learning for React Native](https://youtu.be/NLj73vrc2I8)\n\n*And talks from the community on accessibility, tooling, and Server Components:**\n\nDaishi Kato: [React 18 for External Store Libraries](https://youtu.be/oPfSC5bQPR8).","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2018":{"pageContent":"*And talks from the community on accessibility, tooling, and Server Components:**\n\nDaishi Kato: [React 18 for External Store Libraries](https://youtu.be/oPfSC5bQPR8).\n\nDiego Haz: [Building Accessible Components in React 18](https://youtu.be/dcm8fjBfro8).\n\nTafu Nakazaki: [Accessible Japanese Form Components with React](https://youtu.be/S4a0QlsH0pU).\n\nLyle Troxell: [UI tools for artists](https://youtu.be/b3l4WxipFsE).\n\nHelen Lin: [Hydrogen + React 18](https://youtu.be/HS6vIYkSNks).\n\n## Older videos {/*older-videos*/}\n\n### React Conf 2019 {/*react-conf-2019*/}\n\nA playlist of videos from React Conf 2019.\n\n<YouTubeIframe title=\"React Conf 2019\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLPxbbTqCLbGHPxZpw4xj_Wwg8-fdNxJRh\" />\n\n### React Conf 2018 {/*react-conf-2018*/}\n\nA playlist of videos from React Conf 2018.\n\n<YouTubeIframe title=\"React Conf 2018\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLPxbbTqCLbGE5AihOSExAa4wUM-P42EIJ\" />\n\n### React.js Conf 2017 {/*reactjs-conf-2017*/}","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2019":{"pageContent":"<YouTubeIframe title=\"React Conf 2018\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLPxbbTqCLbGE5AihOSExAa4wUM-P42EIJ\" />\n\n### React.js Conf 2017 {/*reactjs-conf-2017*/}\n\nA playlist of videos from React.js Conf 2017.\n\n<YouTubeIframe title=\"React.js Conf 2017\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0\" />\n\n### React.js Conf 2016 {/*reactjs-conf-2016*/}\n\nA playlist of videos from React.js Conf 2016.\n\n<YouTubeIframe title=\"React.js Conf 2016\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLb0IAmt7-GS0M8Q95RIc2lOM6nc77q1IY\" />\n\n### React.js Conf 2015 {/*reactjs-conf-2015*/}\n\nA playlist of videos from React.js Conf 2015.\n\n<YouTubeIframe title=\"React.js Conf 2015\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr\" />\n\n### Rethinking Best Practices {/*rethinking-best-practices*/}","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2020":{"pageContent":"<YouTubeIframe title=\"React.js Conf 2015\" src=\"https://www.youtube-nocookie.com/embed/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr\" />\n\n### Rethinking Best Practices {/*rethinking-best-practices*/}\n\nPete Hunt's talk at JSConf EU 2013 covers three topics: throwing out the notion of templates and building views with JavaScript, “re-rendering” your entire application when your data changes, and a lightweight implementation of the DOM and events - (2013 - 0h30m).\n\n<YouTubeIframe title=\"Pete Hunt: React: Rethinking Best Practices - JSConf EU 2013\" src=\"https://www.youtube-nocookie.com/embed/x7cQ3mrcKaY\" />\n\n### Introduction to React {/*introduction-to-react*/}\n\nTom Occhino and Jordan Walke introduce React at Facebook Seattle - (2013 - 1h20m).\n\n<YouTubeIframe title=\"Tom Occhino and Jordan Walke introduce React at Facebook Seattle\" src=\"https://www.youtube-nocookie.com/embed/XxVg_s8xAms\" />","metadata":{"source":"reactjs.org/beta/src/content/community/videos.md"}},"2021":{"pageContent":"--\n\ntitle: React Conferences\n\n--\n\n<Intro>\n\nDo you know of a local React.js conference? Add it here! (Please keep the list chronological)\n\n</Intro>\n\n## Upcoming Conferences {/*upcoming-conferences*/}\n\n### RemixConf 2023 {/*remixconf-2023*/}\n\nMay, 2023. Salt Lake City, UT\n\n[Website](https://remix.run/conf/2023) - [Twitter](https://twitter.com/remix_run)\n\n### App.js Conf 2023 {/*appjs-conf-2023*/}\n\nMay 10 - 12, 2023. In-person in Kraków, Poland + remote\n\n[Website](https://appjs.co) - [Twitter](https://twitter.com/appjsconf)\n\n### Render(ATL) 2023 🍑 {/*renderatl-2023-*/}\n\nMay 31 - June 2, 2023. Atlanta, GA, USA\n\n[Website](https://renderatl.com) - [Discord](https://www.renderatl.com/discord) - [Twitter](https://twitter.com/renderATL) - [Instagram](https://www.instagram.com/renderatl/) - [Facebook](https://www.facebook.com/renderatl/) - [LinkedIn](https://www.linkedin.com/company/renderatl) - [Podcast](https://www.renderatl.com/culture-and-code#/)\n\n### React Summit 2023 {/*react-summit-2023*/}","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2022":{"pageContent":"### React Summit 2023 {/*react-summit-2023*/}\n\nJune 2 & 6, 2023. In-person in Amsterdam, Netherlands + remote first interactivity (hybrid event)\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### ReactNext 2023 {/*reactnext-2023*/}\n\nJune 27th, 2023. Tel Aviv, Israel\n\n[Website](https://www.react-next.com/) - [Facebook](https://www.facebook.com/ReactNextConf) - [Youtube](https://www.youtube.com/@ReactNext)\n\n### React Nexus 2023 {/*react-nexus-2023*/}\n\nJuly 07 & 08, 2023. Bangalore, India (In-person event)\n\n[Website](https://reactnexus.com/) - [Twitter](https://twitter.com/ReactNexus) - [Linkedin](https://www.linkedin.com/company/react-nexus) - [YouTube](https://www.youtube.com/reactify_in)\n\n### React India 2023 {/*react-india-2023*/}\n\nOct 5 - 7, 2023. In-person in Goa, India (hybrid event) + Oct 3 2023 - remote day","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2023":{"pageContent":"### React India 2023 {/*react-india-2023*/}\n\nOct 5 - 7, 2023. In-person in Goa, India (hybrid event) + Oct 3 2023 - remote day\n\n[Website](https://www.reactindia.io) - [Twitter](https://twitter.com/react_india) - [Facebook](https://www.facebook.com/ReactJSIndia) - [Youtube](https://www.youtube.com/channel/UCaFbHCBkPvVv1bWs_jwYt3w)\n\n## Past Conferences {/*past-conferences*/}\n\n### React Day Berlin 2022 {/*react-day-berlin-2022*/}\n\nDecember 2, 2022. In-person in Berlin, Germany + remote (hybrid event)\n\n[Website](https://reactday.berlin) - [Twitter](https://twitter.com/reactdayberlin) - [Facebook](https://www.facebook.com/reactdayberlin/) - [Videos](https://www.youtube.com/c/ReactConferences)\n\n### React Global Online Summit 22.2 by Geekle {/*react-global-online-summit-222-by-geekle*/}\n\nNovember 8 - 9, 2022 - Online Summit","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2024":{"pageContent":"### React Global Online Summit 22.2 by Geekle {/*react-global-online-summit-222-by-geekle*/}\n\nNovember 8 - 9, 2022 - Online Summit\n\n[Website](https://events.geekle.us/react3/) - [LinkedIn](https://www.linkedin.com/posts/geekle-us_event-react-reactjs-activity-6964904611207864320-gpDx?utm_source=share&utm_medium=member_desktop)\n\n### Remix Conf Europe 2022 {/*remix-conf-europe-2022*/}\n\nNovember 18, 2022, 7am PST / 10am EST / 4pm CET - remote event\n\n[Website](https://remixconf.eu/) - [Twitter](https://twitter.com/remixconfeu)\n\n### React Advanced 2022 {/*react-advanced-2022*/}\n\nOctober 21 & 25, 2022. In-person in London, UK + remote (hybrid event)\n\n[Website](https://www.reactadvanced.com/) - [Twitter](https://twitter.com/ReactAdvanced) - [Facebook](https://www.facebook.com/ReactAdvanced) - [Videos](https://www.youtube.com/c/ReactConferences)\n\n### ReactJS Day 2022 {/*reactjs-day-2022*/}\n\nOctober 21, 2022 in Verona, Italy","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2025":{"pageContent":"### ReactJS Day 2022 {/*reactjs-day-2022*/}\n\nOctober 21, 2022 in Verona, Italy\n\n[Website](https://2022.reactjsday.it/) - [Twitter](https://twitter.com/reactjsday) - [LinkedIn](https://www.linkedin.com/company/grusp/) - [Facebook](https://www.facebook.com/reactjsday/) - [Videos](https://www.youtube.com/c/grusp)\n\n### React Brussels 2022 {/*react-brussels-2022*/}\n\nOctober 14, 2022. In-person in Brussels, Belgium + remote (hybrid event)\n\n[Website](https://www.react.brussels/) - [Twitter](https://twitter.com/BrusselsReact) - [LinkedIn](https://www.linkedin.com/events/6938421827153088512/) - [Facebook](https://www.facebook.com/events/1289080838167252/) - [Videos](https://www.youtube.com/channel/UCvES7lMpnx-t934qGxD4w4g)\n\n### React Alicante 2022 {/*react-alicante-2022*/}\n\nSeptember 29 - October 1, 2022. In-person in Alicante, Spain + remote (hybrid event)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2026":{"pageContent":"### React Alicante 2022 {/*react-alicante-2022*/}\n\nSeptember 29 - October 1, 2022. In-person in Alicante, Spain + remote (hybrid event)\n\n[Website](https://reactalicante.es/) - [Twitter](https://twitter.com/reactalicante) - [Facebook](https://www.facebook.com/ReactAlicante) - [Videos](https://www.youtube.com/channel/UCaSdUaITU1Cz6PvC97A7e0w)\n\n### React India 2022 {/*react-india-2022*/}\n\nSeptember 22 - 24, 2022. In-person in Goa, India + remote (hybrid event)\n\n[Website](https://www.reactindia.io) - [Twitter](https://twitter.com/react_india) - [Facebook](https://www.facebook.com/ReactJSIndia) - [Videos](https://www.youtube.com/channel/UCaFbHCBkPvVv1bWs_jwYt3w)\n\n### React Finland 2022 {/*react-finland-2022*/}\n\nSeptember 12 - 16, 2022. In-person in Helsinki, Finland\n\n[Website](https://react-finland.fi/) - [Twitter](https://twitter.com/ReactFinland) - [Schedule](https://react-finland.fi/schedule/) - [Speakers](https://react-finland.fi/speakers/)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2027":{"pageContent":"[Website](https://react-finland.fi/) - [Twitter](https://twitter.com/ReactFinland) - [Schedule](https://react-finland.fi/schedule/) - [Speakers](https://react-finland.fi/speakers/)\n\n### React Native EU 2022: Powered by callstack {/*react-native-eu-2022-powered-by-callstack*/}\n\nSeptember 1-2, 2022 - Remote event\n\n[Website](https://www.react-native.eu/?utm_campaign=React_Native_EU&utm_source=referral&utm_content=reactjs_community_conferences) -\n\n[Twitter](https://twitter.com/react_native_eu) -\n\n[Linkedin](https://www.linkedin.com/showcase/react-native-eu) -\n\n[Facebook](https://www.facebook.com/reactnativeeu/) -\n\n[Instagram](https://www.instagram.com/reactnative_eu/)\n\n### ReactNext 2022 {/*reactnext-2022*/}\n\nJune 28, 2022. Tel-Aviv, Israel\n\n[Website](https://react-next.com) - [Twitter](https://twitter.com/ReactNext) - [Videos](https://www.youtube.com/c/ReactNext)\n\n### React Norway 2022 {/*react-norway-2022*/}\n\nJune 24, 2022. In-person at Farris Bad Hotel in Larvik, Norway and online (hybrid event).","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2028":{"pageContent":"### React Norway 2022 {/*react-norway-2022*/}\n\nJune 24, 2022. In-person at Farris Bad Hotel in Larvik, Norway and online (hybrid event).\n\n[Website](https://reactnorway.com/) - [Twitter](https://twitter.com/ReactNorway)\n\n### React Summit 2022 {/*react-summit-2022*/}\n\nJune 17 & 21, 2022. In-person in Amsterdam, Netherlands + remote first interactivity (hybrid event)\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### App.js Conf 2022 {/*appjs-conf-2022*/}\n\nJune 8 - 10, 2022. In-person in Kraków, Poland + remote\n\n[Website](https://appjs.co) - [Twitter](https://twitter.com/appjsconf)\n\n### React Day Bangalore 2022 {/*react-day-bangalore-2022*/}\n\nJune 8 - 9, 2022.  Remote\n\n[Website](https://reactday.in/) - [Twitter](https://twitter.com/ReactDayIn) - [Linkedin](https://www.linkedin.com/company/react-day/) - [YouTube](https://www.youtube.com/reactify_in)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2029":{"pageContent":"[Website](https://reactday.in/) - [Twitter](https://twitter.com/ReactDayIn) - [Linkedin](https://www.linkedin.com/company/react-day/) - [YouTube](https://www.youtube.com/reactify_in)\n\n### render(ATL) 2022 🍑 {/*renderatl-2022-*/}\n\nJune 1 - 4, 2022. Atlanta, GA, USA\n\n[Website](https://renderatl.com) - [Discord](https://www.renderatl.com/discord) - [Twitter](https://twitter.com/renderATL) - [Instagram](https://www.instagram.com/renderatl/) - [Facebook](https://www.facebook.com/renderatl/) - [LinkedIn](https://www.linkedin.com/company/renderatl) - [Podcast](https://www.renderatl.com/culture-and-code#/)\n\n### RemixConf 2022 {/*remixconf-2022*/}\n\nMay 24 - 25, 2022. Salt Lake City, UT\n\n[Website](https://remix.run/conf/2022) - [Twitter](https://twitter.com/remix_run) - [YouTube](https://www.youtube.com/playlist?list=PLXoynULbYuEC36XutMMWEuTu9uuh171wx)\n\n### Reactathon 2022 {/*reactathon-2022*/}\n\nMay 3 - 5, 2022. Berkeley, CA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2030":{"pageContent":"### Reactathon 2022 {/*reactathon-2022*/}\n\nMay 3 - 5, 2022. Berkeley, CA\n\n[Website](https://reactathon.com) - [Twitter](https://twitter.com/reactathon) -[YouTube](https://www.youtube.com/watch?v=-YG5cljNXIA)\n\n### React Global Online Summit 2022 by Geekle {/*react-global-online-summit-2022-by-geekle*/}\n\nApril 20 - 21, 2022 - Online Summit\n\n[Website](https://events.geekle.us/react2/) - [LinkedIn](https://www.linkedin.com/events/reactglobalonlinesummit-226887417664541614081/)\n\n### React Miami 2022 🌴 {/*react-miami-2022-*/}\n\nApril 18 - 19, 2022. Miami, Florida\n\n[Website](https://www.reactmiami.com/)\n\n### React Live 2022 {/*react-live-2022*/}\n\nApril 1, 2022. Amsterdam, The Netherlands\n\n[Website](https://www.reactlive.nl/) - [Twitter](https://twitter.com/reactlivenl)\n\n### AgentConf 2022 {/*agentconf-2022*/}\n\nJanuary 27 - 30, 2022. In-person in Dornbirn and Lech Austria\n\n[Website](https://agent.sh/) - [Twitter](https://twitter.com/AgentConf) - [Instagram](https://www.instagram.com/teamagent/)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2031":{"pageContent":"January 27 - 30, 2022. In-person in Dornbirn and Lech Austria\n\n[Website](https://agent.sh/) - [Twitter](https://twitter.com/AgentConf) - [Instagram](https://www.instagram.com/teamagent/)\n\n### React Conf 2021 {/*react-conf-2021*/}\n\nDecember 8, 2021 - remote event (replay event on December 9)\n\n[Website](https://conf.reactjs.org/)\n\n### ReactEurope 2021 {/*reacteurope-2021*/}\n\nDecember 9-10, 2021 - remote event\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### ReactNext 2021 {/*reactnext-2021*/}\n\nDecember 15, 2021. Tel-Aviv, Israel\n\n[Website](https://react-next.com) - [Twitter](https://twitter.com/ReactNext) - [Videos](https://www.youtube.com/channel/UC3BT8hh3yTTYxbLQy_wbk2w)\n\n### React India 2021 {/*react-india-2021*/}\n\nNovember 12-13, 2021 - remote event","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2032":{"pageContent":"### React India 2021 {/*react-india-2021*/}\n\nNovember 12-13, 2021 - remote event\n\n[Website](https://www.reactindia.io) - [Twitter](https://twitter.com/react_india) - [Facebook](https://www.facebook.com/ReactJSIndia/) - [LinkedIn](https://www.linkedin.com/showcase/14545585) - [YouTube](https://www.youtube.com/channel/UCaFbHCBkPvVv1bWs_jwYt3w/videos)\n\n### React Global by Geekle {/*react-global-by-geekle*/}\n\nNovember 3-4, 2021 - remote event\n\n[Website](https://geekle.us/react) - [LinkedIn](https://www.linkedin.com/events/javascriptglobalsummit6721691514176720896/) - [YouTube](https://www.youtube.com/watch?v=0HhWIvPhbu0)\n\n### React Advanced 2021 {/*react-advanced-2021*/}\n\nOctober 22-23, 2021. In-person in London, UK + remote (hybrid event)\n\n[Website](https://reactadvanced.com) - [Twitter](https://twitter.com/reactadvanced) - [Facebook](https://www.facebook.com/ReactAdvanced) - [Videos](https://youtube.com/c/ReactConferences)\n\n### React Conf Brasil 2021 {/*react-conf-brasil-2021*/}","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2033":{"pageContent":"### React Conf Brasil 2021 {/*react-conf-brasil-2021*/}\n\nOctober 16, 2021 - remote event\n\n[Website](http://reactconf.com.br) - [Twitter](https://twitter.com/reactconfbr) - [Slack](https://react.now.sh) - [Facebook](https://facebook.com/reactconf) - [Instagram](https://instagram.com/reactconfbr) - [YouTube](https://www.youtube.com/channel/UCJL5eorStQfC0x1iiWhvqPA/videos)\n\n### React Brussels 2021 {/*react-brussels-2021*/}\n\nOctober 15, 2021 - remote event\n\n[Website](https://www.react.brussels/) - [Twitter](https://twitter.com/BrusselsReact) - [LinkedIn](https://www.linkedin.com/events/6805708233819336704/)\n\n### render(ATL) 2021 {/*renderatl-2021*/}\n\nSeptember 13-15, 2021. Atlanta, GA, USA\n\n[Website](https://renderatl.com) - [Twitter](https://twitter.com/renderATL) - [Instagram](https://www.instagram.com/renderatl/) - [Facebook](https://www.facebook.com/renderatl/) - [LinkedIn](https://www.linkedin.com/company/renderatl)\n\n### React Native EU 2021 {/*react-native-eu-2021*/}\n\nSeptember 1-2, 2021 - remote event","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2034":{"pageContent":"### React Native EU 2021 {/*react-native-eu-2021*/}\n\nSeptember 1-2, 2021 - remote event\n\n[Website](https://www.react-native.eu/) - [Twitter](https://twitter.com/react_native_eu) - [Facebook](https://www.facebook.com/reactnativeeu/) - [Instagram](https://www.instagram.com/reactnative_eu/)\n\n### React Finland 2021 {/*react-finland-2021*/}\n\nAugust 30 - September 3, 2021 - remote event\n\n[Website](https://react-finland.fi/) - [Twitter](https://twitter.com/ReactFinland) - [LinkedIn](https://www.linkedin.com/company/react-finland/)\n\n### React Case Study Festival 2021 {/*react-case-study-festival-2021*/}\n\nApril 27-28, 2021 - remote event\n\n[Website](https://link.geekle.us/react/offsite) - [LinkedIn](https://www.linkedin.com/events/reactcasestudyfestival6721300943411015680/) - [Facebook](https://www.facebook.com/events/255715435820203)\n\n### React Summit - Remote Edition 2021 {/*react-summit---remote-edition-2021*/}\n\nApril 14-16, 2021, 7am PST / 10am EST / 4pm CEST - remote event","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2035":{"pageContent":"### React Summit - Remote Edition 2021 {/*react-summit---remote-edition-2021*/}\n\nApril 14-16, 2021, 7am PST / 10am EST / 4pm CEST - remote event\n\n[Website](https://remote.reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### React fwdays’21 {/*react-fwdays21*/}\n\nMarch 27, 2021 - remote event\n\n[Website](https://fwdays.com/en/event/react-fwdays-2021) - [Twitter](https://twitter.com/fwdays) - [Facebook](https://www.facebook.com/events/1133828147054286) - [LinkedIn](https://www.linkedin.com/events/reactfwdays-21onlineconference6758046347334582273) - [Meetup](https://www.meetup.com/ru-RU/Fwdays/events/275764431/)\n\n### React Next 2020 {/*react-next-2020*/}\n\nDecember 1-2, 2020 - remote event\n\n[Website](https://react-next.com/) - [Twitter](https://twitter.com/reactnext) - [Facebook](https://www.facebook.com/ReactNext2016/)\n\n### React Conf Brasil 2020 {/*react-conf-brasil-2020*/}","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2036":{"pageContent":"[Website](https://react-next.com/) - [Twitter](https://twitter.com/reactnext) - [Facebook](https://www.facebook.com/ReactNext2016/)\n\n### React Conf Brasil 2020 {/*react-conf-brasil-2020*/}\n\nNovember 21, 2020 - remote event\n\n[Website](https://reactconf.com.br/) - [Twitter](https://twitter.com/reactconfbr) - [Slack](https://react.now.sh/)\n\n### React Summit 2020 {/*react-summit-2020*/}\n\nOctober 15-16, 2020, 7am PST / 10am EST / 4pm CEST - remote event\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### React Native EU 2020 {/*react-native-eu-2020*/}\n\nSeptember 3-4, 2020 - remote event","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2037":{"pageContent":"### React Native EU 2020 {/*react-native-eu-2020*/}\n\nSeptember 3-4, 2020 - remote event\n\n[Website](https://www.react-native.eu/) - [Twitter](https://twitter.com/react_native_eu) - [Facebook](https://www.facebook.com/reactnativeeu/) - [YouTube](https://www.youtube.com/watch?v=m0GfmlGFh3E&list=PLZ3MwD-soTTHy9_88QPLF8DEJkvoB5Tl-) - [Instagram](https://www.instagram.com/reactnative_eu/)\n\n### ReactEurope 2020 {/*reacteurope-2020*/}\n\nMay 14-15, 2020 in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### Byteconf React 2020 {/*byteconf-react-2020*/}\n\nMay 1, 2020. Streamed online on YouTube.\n\n[Website](https://www.bytesized.xyz) - [Twitter](https://twitter.com/bytesizedcode) - [YouTube](https://www.youtube.com/channel/UC046lFvJZhiwSRWsoH8SFjg)\n\n### React Summit - Remote Edition 2020 {/*react-summit---remote-edition-2020*/}\n\n3pm CEST time, April 17, 2020 - remote event","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2038":{"pageContent":"### React Summit - Remote Edition 2020 {/*react-summit---remote-edition-2020*/}\n\n3pm CEST time, April 17, 2020 - remote event\n\n[Website](https://remote.reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### Reactathon 2020 {/*reactathon-2020*/}\n\nMarch 30 - 31, 2020 in San Francisco, CA\n\n[Website](https://www.reactathon.com) - [Twitter](https://twitter.com/reactathon) - [Facebook](https://www.facebook.com/events/575942819854160/)\n\n### ReactConf AU 2020 {/*reactconf-au-2020*/}\n\nFebruary 27 & 28, 2020 in Sydney, Australia\n\n[Website](https://reactconfau.com/) - [Twitter](https://twitter.com/reactconfau) - [Facebook](https://www.facebook.com/reactconfau) - [Instagram](https://www.instagram.com/reactconfau/)\n\n### React Barcamp Cologne 2020 {/*react-barcamp-cologne-2020*/}\n\nFebruary 1-2, 2020 in Cologne, Germany","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2039":{"pageContent":"### React Barcamp Cologne 2020 {/*react-barcamp-cologne-2020*/}\n\nFebruary 1-2, 2020 in Cologne, Germany\n\n[Website](https://react-barcamp.de/) - [Twitter](https://twitter.com/ReactBarcamp) - [Facebook](https://www.facebook.com/reactbarcamp)\n\n### React Day Berlin 2019 {/*react-day-berlin-2019*/}\n\nDecember 6, 2019 in Berlin, Germany\n\n[Website](https://reactday.berlin) - [Twitter](https://twitter.com/reactdayberlin) - [Facebook](https://www.facebook.com/reactdayberlin/) - [Videos](https://www.youtube.com/reactdayberlin)\n\n### React Summit 2019 {/*react-summit-2019*/}\n\nNovember 30, 2019 in Lagos, Nigeria\n\n[Website](https://reactsummit2019.splashthat.com) -[Twitter](https://twitter.com/react_summit)\n\n### React Conf Brasil 2019 {/*react-conf-brasil-2019*/}\n\nOctober 19, 2019 in São Paulo, BR\n\n[Website](https://reactconf.com.br/) - [Twitter](https://twitter.com/reactconfbr) - [Facebook](https://www.facebook.com/ReactAdvanced) - [Slack](https://react.now.sh/)\n\n### React Advanced 2019 {/*react-advanced-2019*/}","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2040":{"pageContent":"### React Advanced 2019 {/*react-advanced-2019*/}\n\nOctober 25, 2019 in London, UK\n\n[Website](https://reactadvanced.com) - [Twitter](http://twitter.com/reactadvanced) - [Facebook](https://www.facebook.com/ReactAdvanced) - [Videos](https://youtube.com/c/ReactConferences)\n\n### React Conf 2019 {/*react-conf-2019*/}\n\nOctober 24-25, 2019 in Henderson, Nevada USA\n\n[Website](https://conf.reactjs.org/) - [Twitter](https://twitter.com/reactjs)\n\n### React Alicante 2019 {/*react-alicante-2019*/}\n\nSeptember 26-28, 2019 in Alicante, Spain\n\n[Website](http://reactalicante.es/) - [Twitter](https://twitter.com/reactalicante) - [Facebook](https://www.facebook.com/ReactAlicante)\n\n### React India 2019 {/*react-india-2019*/}\n\nSeptember 26-28, 2019 in Goa, India\n\n[Website](https://www.reactindia.io/) - [Twitter](https://twitter.com/react_india) - [Facebook](https://www.facebook.com/ReactJSIndia)\n\n### React Boston 2019 {/*react-boston-2019*/}\n\nSeptember 21-22, 2019 in Boston, Massachusetts USA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2041":{"pageContent":"### React Boston 2019 {/*react-boston-2019*/}\n\nSeptember 21-22, 2019 in Boston, Massachusetts USA\n\n[Website](https://www.reactboston.com/) - [Twitter](https://twitter.com/reactboston)\n\n### React Live 2019 {/*react-live-2019*/}\n\nSeptember 13th, 2019. Amsterdam, The Netherlands\n\n[Website](https://www.reactlive.nl/) - [Twitter](https://twitter.com/reactlivenl)\n\n### React New York 2019 {/*react-new-york-2019*/}\n\nSeptember 13th, 2019. New York, USA\n\n[Website](https://reactnewyork.com/) - [Twitter](https://twitter.com/reactnewyork)\n\n### ComponentsConf 2019 {/*componentsconf-2019*/}\n\nSeptember 6, 2019 in Melbourne, Australia\n\n[Website](https://www.componentsconf.com.au/) - [Twitter](https://twitter.com/componentsconf)\n\n### React Native EU 2019 {/*react-native-eu-2019*/}\n\nSeptember 5-6 in Wrocław, Poland\n\n[Website](https://react-native.eu) - [Twitter](https://twitter.com/react_native_eu) - [Facebook](https://www.facebook.com/reactnativeeu)\n\n### React Conf Iran 2019 {/*react-conf-iran-2019*/}\n\nAugust 29, 2019. Tehran, Iran.","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2042":{"pageContent":"### React Conf Iran 2019 {/*react-conf-iran-2019*/}\n\nAugust 29, 2019. Tehran, Iran.\n\n[Website](https://reactconf.ir/) - [Videos](https://www.youtube.com/playlist?list=PL-VNqZFI5Nf-Nsj0rD3CWXGPkH-DI_0VY) - [Highlights](https://github.com/ReactConf/react-conf-highlights)\n\n### React Rally 2019 {/*react-rally-2019*/}\n\nAugust 22-23, 2019. Salt Lake City, USA.\n\n[Website](https://www.reactrally.com/) - [Twitter](https://twitter.com/ReactRally) - [Instagram](https://www.instagram.com/reactrally/)\n\n### Chain React 2019 {/*chain-react-2019*/}\n\nJuly 11-12, 2019. Portland, OR, USA.\n\n[Website](https://infinite.red/ChainReactConf)\n\n### React Loop 2019 {/*react-loop-2019*/}\n\nJune 21, 2019 Chicago, Illinois USA\n\n[Website](https://reactloop.com) - [Twitter](https://twitter.com/ReactLoop)\n\n### React Norway 2019 {/*react-norway-2019*/}\n\nJune 12, 2019. Larvik, Norway\n\n[Website](https://reactnorway.com) - [Twitter](https://twitter.com/ReactNorway)\n\n### ReactNext 2019 {/*reactnext-2019*/}\n\nJune 11, 2019. Tel Aviv, Israel","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2043":{"pageContent":"June 12, 2019. Larvik, Norway\n\n[Website](https://reactnorway.com) - [Twitter](https://twitter.com/ReactNorway)\n\n### ReactNext 2019 {/*reactnext-2019*/}\n\nJune 11, 2019. Tel Aviv, Israel\n\n[Website](https://react-next.com) - [Twitter](https://twitter.com/ReactNext) - [Videos](https://www.youtube.com/channel/UC3BT8hh3yTTYxbLQy_wbk2w)\n\n### React Conf Armenia 2019 {/*react-conf-armenia-2019*/}\n\nMay 25, 2019 in Yerevan, Armenia\n\n[Website](https://reactconf.am/) - [Twitter](https://twitter.com/ReactConfAM) - [Facebook](https://www.facebook.com/reactconf.am/) - [YouTube](https://www.youtube.com/c/JavaScriptConferenceArmenia) - [CFP](http://bit.ly/speakReact)\n\n### ReactEurope 2019 {/*reacteurope-2019*/}\n\nMay 23-24, 2019 in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### React.NotAConf 2019 {/*reactnotaconf-2019*/}\n\nMay 11 in Sofia, Bulgaria\n\n[Website](http://react-not-a-conf.com/) - [Twitter](https://twitter.com/reactnotaconf) - [Facebook](https://www.facebook.com/events/780891358936156)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2044":{"pageContent":"May 11 in Sofia, Bulgaria\n\n[Website](http://react-not-a-conf.com/) - [Twitter](https://twitter.com/reactnotaconf) - [Facebook](https://www.facebook.com/events/780891358936156)\n\n### ReactJS Girls Conference {/*reactjs-girls-conference*/}\n\nMay 3, 2019 in London, UK\n\n[Website](https://reactjsgirls.com/) - [Twitter](https://twitter.com/reactjsgirls)\n\n### React Finland 2019 {/*react-finland-2019*/}\n\nApril 24-26 in Helsinki, Finland\n\n[Website](https://react-finland.fi/) - [Twitter](https://twitter.com/ReactFinland)\n\n### React Amsterdam 2019 {/*react-amsterdam-2019*/}\n\nApril 12, 2019 in Amsterdam, The Netherlands\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### App.js Conf 2019 {/*appjs-conf-2019*/}\n\nApril 4-5, 2019 in Kraków, Poland\n\n[Website](https://appjs.co) - [Twitter](https://twitter.com/appjsconf)\n\n### Reactathon 2019 {/*reactathon-2019*/}","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2045":{"pageContent":"### App.js Conf 2019 {/*appjs-conf-2019*/}\n\nApril 4-5, 2019 in Kraków, Poland\n\n[Website](https://appjs.co) - [Twitter](https://twitter.com/appjsconf)\n\n### Reactathon 2019 {/*reactathon-2019*/}\n\nMarch 30-31, 2019 in San Francisco, USA\n\n[Website](https://www.reactathon.com/) - [Twitter](https://twitter.com/reactathon)\n\n### React Iran 2019 {/*react-iran-2019*/}\n\nJanuary 31, 2019 in Tehran, Iran\n\n[Website](http://reactiran.com) - [Instagram](https://www.instagram.com/reactiran/)\n\n### React Day Berlin 2018 {/*react-day-berlin-2018*/}\n\nNovember 30, Berlin, Germany\n\n[Website](https://reactday.berlin) - [Twitter](https://twitter.com/reactdayberlin) - [Facebook](https://www.facebook.com/reactdayberlin/) - [Videos](https://www.youtube.com/channel/UC1EYHmQYBUJjkmL6OtK4rlw)\n\n### ReactNext 2018 {/*reactnext-2018*/}\n\nNovember 4 in Tel Aviv, Israel\n\n[Website](https://react-next.com) - [Twitter](https://twitter.com/ReactNext) - [Facebook](https://facebook.com/ReactNext2016)\n\n### React Conf 2018 {/*react-conf-2018*/}","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2046":{"pageContent":"November 4 in Tel Aviv, Israel\n\n[Website](https://react-next.com) - [Twitter](https://twitter.com/ReactNext) - [Facebook](https://facebook.com/ReactNext2016)\n\n### React Conf 2018 {/*react-conf-2018*/}\n\nOctober 25-26 in Henderson, Nevada USA\n\n[Website](https://conf.reactjs.org/)\n\n### React Conf Brasil 2018 {/*react-conf-brasil-2018*/}\n\nOctober 20 in Sao Paulo, Brazil\n\n[Website](http://reactconfbr.com.br) - [Twitter](https://twitter.com/reactconfbr) - [Facebook](https://www.facebook.com/reactconf)\n\n### ReactJS Day 2018 {/*reactjs-day-2018*/}\n\nOctober 5 in Verona, Italy\n\n[Website](http://2018.reactjsday.it) - [Twitter](https://twitter.com/reactjsday)\n\n### React Boston 2018 {/*react-boston-2018*/}\n\nSeptember 29-30 in Boston, Massachusetts USA\n\n[Website](http://www.reactboston.com/) - [Twitter](https://twitter.com/ReactBoston)\n\n### React Alicante 2018 {/*react-alicante-2018*/}\n\nSeptember 13-15 in Alicante, Spain\n\n[Website](http://reactalicante.es) - [Twitter](https://twitter.com/ReactAlicante)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2047":{"pageContent":"### React Alicante 2018 {/*react-alicante-2018*/}\n\nSeptember 13-15 in Alicante, Spain\n\n[Website](http://reactalicante.es) - [Twitter](https://twitter.com/ReactAlicante)\n\n### React Native EU 2018 {/*react-native-eu-2018*/}\n\nSeptember 5-6 in Wrocław, Poland\n\n[Website](https://react-native.eu) - [Twitter](https://twitter.com/react_native_eu) - [Facebook](https://www.facebook.com/reactnativeeu)\n\n### Byteconf React 2018 {/*byteconf-react-2018*/}\n\nAugust 31 streamed online, via Twitch\n\n[Website](https://byteconf.com) - [Twitch](https://twitch.tv/byteconf) - [Twitter](https://twitter.com/byteconf)\n\n### ReactFoo Delhi {/*reactfoo-delhi*/}\n\nAugust 18 in Delhi, India\n\n[Website](https://reactfoo.in/2018-delhi/) - [Twitter](https://twitter.com/reactfoo) - [Past talks](https://hasgeek.tv)\n\n### React DEV Conf China {/*react-dev-conf-china*/}\n\nAugust 18 in Guangzhou, China\n\n[Website](https://react.w3ctech.com)\n\n### React Rally {/*react-rally*/}\n\nAugust 16-17 in Salt Lake City, Utah USA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2048":{"pageContent":"### React DEV Conf China {/*react-dev-conf-china*/}\n\nAugust 18 in Guangzhou, China\n\n[Website](https://react.w3ctech.com)\n\n### React Rally {/*react-rally*/}\n\nAugust 16-17 in Salt Lake City, Utah USA\n\n[Website](http://www.reactrally.com) - [Twitter](https://twitter.com/reactrally)\n\n### Chain React 2018 {/*chain-react-2018*/}\n\nJuly 11-13 in Portland, Oregon USA\n\n[Website](https://infinite.red/ChainReactConf) - [Twitter](https://twitter.com/chainreactconf)\n\n### ReactFoo Mumbai {/*reactfoo-mumbai*/}\n\nMay 26 in Mumbai, India\n\n[Website](https://reactfoo.in/2018-mumbai/) - [Twitter](https://twitter.com/reactfoo) - [Past talks](https://hasgeek.tv)\n\n### ReactEurope 2018 {/*reacteurope-2018*/}\n\nMay 17-18 in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### React.NotAConf 2018 {/*reactnotaconf-2018*/}\n\nApril 28 in Sofia, Bulgaria\n\n[Website](http://react-not-a-conf.com/) - [Twitter](https://twitter.com/reactnotaconf) - [Facebook](https://www.facebook.com/groups/1614950305478021/)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2049":{"pageContent":"April 28 in Sofia, Bulgaria\n\n[Website](http://react-not-a-conf.com/) - [Twitter](https://twitter.com/reactnotaconf) - [Facebook](https://www.facebook.com/groups/1614950305478021/)\n\n### React Finland 2018 {/*react-finland-2018*/}\n\nApril 24-26 in Helsinki, Finland\n\n[Website](https://react-finland.fi/) - [Twitter](https://twitter.com/ReactFinland)\n\n### React Amsterdam 2018 {/*react-amsterdam-2018*/}\n\nApril 13 in Amsterdam, The Netherlands\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam)\n\n### React Native Camp UA 2018 {/*react-native-camp-ua-2018*/}\n\nMarch 31 in Kiev, Ukraine\n\n[Website](http://reactnative.com.ua/) - [Twitter](https://twitter.com/reactnativecamp) - [Facebook](https://www.facebook.com/reactnativecamp/)\n\n### Reactathon 2018 {/*reactathon-2018*/}\n\nMarch 20-22 in San Francisco, USA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2050":{"pageContent":"### Reactathon 2018 {/*reactathon-2018*/}\n\nMarch 20-22 in San Francisco, USA\n\n[Website](https://www.reactathon.com/) - [Twitter](https://twitter.com/reactathon) - [Videos (fundamentals)](https://www.youtube.com/watch?v=knn364bssQU&list=PLRvKvw42Rc7OWK5s-YGGFSmByDzzgC0HP), [Videos (advanced day1)](https://www.youtube.com/watch?v=57hmk4GvJpk&list=PLRvKvw42Rc7N0QpX2Rc5CdrqGuxzwD_0H), [Videos (advanced day2)](https://www.youtube.com/watch?v=1hvQ8p8q0a0&list=PLRvKvw42Rc7Ne46QAjWNWFo1Jf0mQdnIW)\n\n### ReactFest 2018 {/*reactfest-2018*/}\n\nMarch 8-9 in London, UK\n\n[Website](https://reactfest.uk/) - [Twitter](https://twitter.com/ReactFest) - [Videos](https://www.youtube.com/watch?v=YOCrJ5vRCnw&list=PLRgweB8YtNRt-Sf-A0y446wTJNUaAAmle)\n\n### AgentConf 2018 {/*agentconf-2018*/}\n\nJanuary 25-28 in Dornbirn, Austria\n\n[Website](http://agent.sh/)\n\n### ReactFoo Pune {/*reactfoo-pune*/}\n\nJanuary 19-20, Pune, India\n\n[Website](https://reactfoo.in/2018-pune/) - [Twitter](https://twitter.com/ReactFoo)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2051":{"pageContent":"[Website](http://agent.sh/)\n\n### ReactFoo Pune {/*reactfoo-pune*/}\n\nJanuary 19-20, Pune, India\n\n[Website](https://reactfoo.in/2018-pune/) - [Twitter](https://twitter.com/ReactFoo)\n\n### React Day Berlin 2017 {/*react-day-berlin-2017*/}\n\nDecember 2, Berlin, Germany\n\n[Website](https://reactday.berlin) - [Twitter](https://twitter.com/reactdayberlin) - [Facebook](https://www.facebook.com/reactdayberlin/) - [Videos](https://www.youtube.com/watch?v=UnNLJvHKfSY&list=PL-3BrJ5CiIx5GoXci54-VsrO6GwLhSHEK)\n\n### React Seoul 2017 {/*react-seoul-2017*/}\n\nNovember 4 in Seoul, South Korea\n\n[Website](http://seoul.reactjs.kr/en)\n\n### ReactiveConf 2017 {/*reactiveconf-2017*/}\n\nOctober 25–27, Bratislava, Slovakia\n\n[Website](https://reactiveconf.com) - [Videos](https://www.youtube.com/watch?v=BOKxSFB2hOE&list=PLa2ZZ09WYepMB-I7AiDjDYR8TjO8uoNjs)\n\n### React Summit 2017 {/*react-summit-2017*/}\n\nOctober 21 in Lagos, Nigeria","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2052":{"pageContent":"### React Summit 2017 {/*react-summit-2017*/}\n\nOctober 21 in Lagos, Nigeria\n\n[Website](https://reactsummit2017.splashthat.com/) - [Twitter](https://twitter.com/DevCircleLagos/) - [Facebook](https://www.facebook.com/groups/DevCLagos/)\n\n### State.js Conference 2017 {/*statejs-conference-2017*/}\n\nOctober 13 in Stockholm, Sweden\n\n[Website](https://statejs.com/)\n\n### React Conf Brasil 2017 {/*react-conf-brasil-2017*/}\n\nOctober 7 in Sao Paulo, Brazil\n\n[Website](http://reactconfbr.com.br) - [Twitter](https://twitter.com/reactconfbr) - [Facebook](https://www.facebook.com/reactconf/)\n\n### ReactJS Day 2017 {/*reactjs-day-2017*/}\n\nOctober 6 in Verona, Italy\n\n[Website](http://2017.reactjsday.it) - [Twitter](https://twitter.com/reactjsday) - [Videos](https://www.youtube.com/watch?v=bUqqJPIgjNU&list=PLWK9j6ps_unl293VhhN4RYMCISxye3xH9)\n\n### React Alicante 2017 {/*react-alicante-2017*/}\n\nSeptember 28-30 in Alicante, Spain","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2053":{"pageContent":"### React Alicante 2017 {/*react-alicante-2017*/}\n\nSeptember 28-30 in Alicante, Spain\n\n[Website](http://reactalicante.es) - [Twitter](https://twitter.com/ReactAlicante) - [Videos](https://www.youtube.com/watch?v=UMZvRCWo6Dw&list=PLd7nkr8mN0sWvBH_s0foCE6eZTX8BmLUM)\n\n### React Boston 2017 {/*react-boston-2017*/}\n\nSeptember 23-24 in Boston, Massachusetts USA\n\n[Website](http://www.reactboston.com/) - [Twitter](https://twitter.com/ReactBoston) - [Videos](https://www.youtube.com/watch?v=2iPE5l3cl_s&list=PL-fCkV3wv4ub8zJMIhmrrLcQqSR5XPlIT)\n\n### ReactFoo 2017 {/*reactfoo-2017*/}\n\nSeptember 14 in Bangalore, India\n\n[Website](https://reactfoo.in/2017/) - [Videos](https://www.youtube.com/watch?v=3G6tMg29Wnw&list=PL279M8GbNsespKKm1L0NAzYLO6gU5LvfH)\n\n### ReactNext 2017 {/*reactnext-2017*/}\n\nSeptember 8-10 in Tel Aviv, Israel","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2054":{"pageContent":"### ReactNext 2017 {/*reactnext-2017*/}\n\nSeptember 8-10 in Tel Aviv, Israel\n\n[Website](http://react-next.com/) - [Twitter](https://twitter.com/ReactNext) - [Videos (Hall A)](https://www.youtube.com/watch?v=eKXQw5kR86c&list=PLMYVq3z1QxSqq6D7jxVdqttOX7H_Brq8Z), [Videos (Hall B)](https://www.youtube.com/watch?v=1InokWxYGnE&list=PLMYVq3z1QxSqCZmaqgTXLsrcJ8mZmBF7T)\n\n### React Native EU 2017 {/*react-native-eu-2017*/}\n\nSeptember 6-7 in Wroclaw, Poland\n\n[Website](http://react-native.eu/) - [Videos](https://www.youtube.com/watch?v=453oKJAqfy0&list=PLzUKC1ci01h_hkn7_KoFA-Au0DXLAQZR7)\n\n### React Rally 2017 {/*react-rally-2017*/}\n\nAugust 24-25 in Salt Lake City, Utah USA\n\n[Website](http://www.reactrally.com) - [Twitter](https://twitter.com/reactrally) - [Videos](https://www.youtube.com/watch?v=f4KnHNCZcH4&list=PLUD4kD-wL_zZUhvAIHJjueJDPr6qHvkni)\n\n### Chain React 2017 {/*chain-react-2017*/}\n\nJuly 10-11 in Portland, Oregon USA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2055":{"pageContent":"### Chain React 2017 {/*chain-react-2017*/}\n\nJuly 10-11 in Portland, Oregon USA\n\n[Website](https://infinite.red/ChainReactConf) - [Twitter](https://twitter.com/chainreactconf) - [Videos](https://www.youtube.com/watch?v=cz5BzwgATpc&list=PLFHvL21g9bk3RxJ1Ut5nR_uTZFVOxu522)\n\n### ReactEurope 2017 {/*reacteurope-2017*/}\n\nMay 18th & 19th in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### React Amsterdam 2017 {/*react-amsterdam-2017*/}\n\nApril 21st in Amsterdam, The Netherlands\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Videos](https://youtube.com/c/ReactConferences)\n\n### React London 2017 {/*react-london-2017*/}\n\nMarch 28th at the [QEII Centre, London](http://qeiicentre.london/)\n\n[Website](http://react.london/) - [Videos](https://www.youtube.com/watch?v=2j9rSur_mnk&list=PLW6ORi0XZU0CFjdoYeC0f5QReBG-NeNKJ)\n\n### React Conf 2017 {/*react-conf-2017*/}\n\nMarch 13-14 in Santa Clara, CA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2056":{"pageContent":"[Website](http://react.london/) - [Videos](https://www.youtube.com/watch?v=2j9rSur_mnk&list=PLW6ORi0XZU0CFjdoYeC0f5QReBG-NeNKJ)\n\n### React Conf 2017 {/*react-conf-2017*/}\n\nMarch 13-14 in Santa Clara, CA\n\n[Website](http://conf.reactjs.org/) - [Videos](https://www.youtube.com/watch?v=7HSd1sk07uU&list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0)\n\n### Agent Conference 2017 {/*agent-conference-2017*/}\n\nJanuary 20-21 in Dornbirn, Austria\n\n[Website](http://agent.sh/)\n\n### React Remote Conf 2016 {/*react-remote-conf-2016*/}\n\nOctober 26-28 online\n\n[Website](https://allremoteconfs.com/react-2016) - [Schedule](https://allremoteconfs.com/react-2016#schedule)\n\n### Reactive 2016 {/*reactive-2016*/}\n\nOctober 26-28 in Bratislava, Slovakia\n\n[Website](https://reactiveconf.com/)\n\n### ReactNL 2016 {/*reactnl-2016*/}\n\nOctober 13 in Amsterdam, The Netherlands\n\n[Website](http://reactnl.org/) - [Schedule](http://reactnl.org/#program)\n\n### ReactNext 2016 {/*reactnext-2016*/}\n\nSeptember 15 in Tel Aviv, Israel","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2057":{"pageContent":"October 13 in Amsterdam, The Netherlands\n\n[Website](http://reactnl.org/) - [Schedule](http://reactnl.org/#program)\n\n### ReactNext 2016 {/*reactnext-2016*/}\n\nSeptember 15 in Tel Aviv, Israel\n\n[Website](http://react-next.com/) - [Schedule](http://react-next.com/#schedule) - [Videos](https://www.youtube.com/channel/UC3BT8hh3yTTYxbLQy_wbk2w)\n\n### ReactRally 2016 {/*reactrally-2016*/}\n\nAugust 25-26 in Salt Lake City, UT\n\n[Website](http://www.reactrally.com/) - [Schedule](http://www.reactrally.com/#/schedule) - [Videos](https://www.youtube.com/playlist?list=PLUD4kD-wL_zYSfU3tIYsb4WqfFQzO_EjQ)\n\n### ReactEurope 2016 {/*reacteurope-2016*/}\n\nJune 2 & 3 in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### React Amsterdam 2016 {/*react-amsterdam-2016*/}\n\nApril 16 in Amsterdam, The Netherlands\n\n[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2058":{"pageContent":"[Website](https://reactsummit.com) - [Twitter](https://twitter.com/reactsummit) - [Facebook](https://www.facebook.com/reactamsterdam) - [Videos](https://youtube.com/c/ReactConferences)\n\n### React.js Conf 2016 {/*reactjs-conf-2016*/}\n\nFebruary 22 & 23 in San Francisco, CA\n\n[Website](http://conf2016.reactjs.org/) - [Schedule](http://conf2016.reactjs.org/schedule.html) - [Videos](https://www.youtube.com/playlist?list=PLb0IAmt7-GS0M8Q95RIc2lOM6nc77q1IY)\n\n### Reactive 2015 {/*reactive-2015*/}\n\nNovember 2-4 in Bratislava, Slovakia\n\n[Website](https://reactive2015.com/) - [Schedule](https://reactive2015.com/schedule_speakers.html#schedule)\n\n### ReactEurope 2015 {/*reacteurope-2015*/}\n\nJuly 2 & 3 in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### React.js Conf 2015 {/*reactjs-conf-2015*/}\n\nJanuary 28 & 29 in Facebook HQ, CA","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2059":{"pageContent":"July 2 & 3 in Paris, France\n\n[Videos](https://www.youtube.com/c/ReacteuropeOrgConf)\n\n### React.js Conf 2015 {/*reactjs-conf-2015*/}\n\nJanuary 28 & 29 in Facebook HQ, CA\n\n[Website](http://conf2015.reactjs.org/) - [Schedule](http://conf2015.reactjs.org/schedule.html) - [Videos](https://www.youtube.com/playlist?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr)","metadata":{"source":"reactjs.org/beta/src/content/community/conferences.md"}},"2060":{"pageContent":"--\n\ntitle: Acknowledgements\n\n--\n\n<Intro>\n\nReact was originally created by [Jordan Walke.](https://github.com/jordwalke) Today, React has a [dedicated full-time team working on it](/community/team), as well as over a thousand [open source contributors.](https://github.com/facebook/react/blob/main/AUTHORS)\n\n</Intro>\n\n## Past contributors {/*past-contributors*/}\n\nWe'd like to recognize a few people who have made significant contributions to React and its documentation in the past and have helped maintain them over the years:\n\n[Almero Steyn](https://github.com/AlmeroSteyn)\n\n[Andreas Svensson](https://github.com/syranide)\n\n[Alex Krolick](https://github.com/alexkrolick)\n\n[Alexey Pyltsyn](https://github.com/lex111)\n\n[Brandon Dail](https://github.com/aweary)\n\n[Brian Vaughn](https://github.com/bvaughn)\n\n[Caleb Meredith](https://github.com/calebmer)\n\n[Chang Yan](https://github.com/cyan33)\n\n[Cheng Lou](https://github.com/chenglou)\n\n[Christoph Nakazawa](https://github.com/cpojer)\n\n[Christopher Chedeau](https://github.com/vjeux)","metadata":{"source":"reactjs.org/beta/src/content/community/acknowledgements.md"}},"2061":{"pageContent":"[Chang Yan](https://github.com/cyan33)\n\n[Cheng Lou](https://github.com/chenglou)\n\n[Christoph Nakazawa](https://github.com/cpojer)\n\n[Christopher Chedeau](https://github.com/vjeux)\n\n[Clement Hoang](https://github.com/clemmy)\n\n[Dominic Gannaway](https://github.com/trueadm)\n\n[Flarnie Marchan](https://github.com/flarnie)\n\n[Jason Quense](https://github.com/jquense)\n\n[Jesse Beach](https://github.com/jessebeach)\n\n[Jessica Franco](https://github.com/Jessidhia)\n\n[Jim Sproch](https://github.com/jimfb)\n\n[Josh Duck](https://github.com/joshduck)\n\n[Joe Critchley](https://github.com/joecritch)\n\n[Jeff Morrison](https://github.com/jeffmo)\n\n[Keyan Zhang](https://github.com/keyz)\n\n[Marco Salazar](https://github.com/salazarm)\n\n[Nat Alison](https://github.com/tesseralis)\n\n[Nathan Hunzaker](https://github.com/nhunzaker)\n\n[Nicolas Gallagher](https://github.com/necolas)\n\n[Paul O'Shannessy](https://github.com/zpao)\n\n[Pete Hunt](https://github.com/petehunt)\n\n[Philipp Spiess](https://github.com/philipp-spiess)","metadata":{"source":"reactjs.org/beta/src/content/community/acknowledgements.md"}},"2062":{"pageContent":"[Nicolas Gallagher](https://github.com/necolas)\n\n[Paul O'Shannessy](https://github.com/zpao)\n\n[Pete Hunt](https://github.com/petehunt)\n\n[Philipp Spiess](https://github.com/philipp-spiess)\n\n[Rachel Nabors](https://github.com/rachelnabors)\n\n[Robert Zhang](https://github.com/robertzhidealx)\n\n[Sander Spies](https://github.com/sanderspies)\n\n[Sasha Aickin](https://github.com/aickin)\n\n[Seth Webster](https://github.com/sethwebster)\n\n[Sophia Shoemaker](https://github.com/mrscobbler)\n\n[Sophie Alpert](https://github.com/sophiebits)\n\n[Sunil Pai](https://github.com/threepointone)\n\n[Tim Yung](https://github.com/yungsters)\n\n[Xuan Huang](https://github.com/huxpro)\n\n[Yuzhi Zheng](https://github.com/yuzhi)\n\nThis list is not exhaustive.\n\nWe'd like to give special thanks to [Tom Occhino](https://github.com/tomocchino) and [Adam Wolff](https://github.com/wolffiex) for their guidance and support over the years. We are also thankful to all the volunteers who [translated React into other languages.](https://translations.reactjs.org/)","metadata":{"source":"reactjs.org/beta/src/content/community/acknowledgements.md"}},"2063":{"pageContent":"## Additional Thanks {/*additional-thanks*/}\n\nAdditionally, we're grateful to:\n\n[Jeff Barczewski](https://github.com/jeffbski) for allowing us to use the `react` package name on npm\n\n[Christopher Aue](https://christopheraue.net/) for letting us use the reactjs.com domain name and the [@reactjs](https://twitter.com/reactjs) username on Twitter\n\n[ProjectMoon](https://github.com/ProjectMoon) for letting us use the [flux](https://www.npmjs.com/package/flux) package name on npm\n\nShane Anderson for allowing us to use the [react](https://github.com/react) org on GitHub","metadata":{"source":"reactjs.org/beta/src/content/community/acknowledgements.md"}},"2064":{"pageContent":"--\n\ntitle: Community\n\n--\n\n<Intro>\n\nReact has a community of millions of developers. On this page we've listed some React-related communities that you can be a part of; see the other pages in this section for additional online and in-person learning materials.\n\n</Intro>\n\n## Code of Conduct {/*code-of-conduct*/}\n\nBefore participating in React's communities, [please read our Code of Conduct.](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md) We have adopted the [Contributor Covenant](https://www.contributor-covenant.org/) and we expect that all community members adhere to the guidelines within.\n\n## Stack Overflow {/*stack-overflow*/}\n\nStack Overflow is a popular forum to ask code-level questions or if you're stuck with a specific error. Read through the [existing questions](https://stackoverflow.com/questions/tagged/reactjs) tagged with **reactjs** or [ask your own](https://stackoverflow.com/questions/ask?tags=reactjs)!\n\n## Popular Discussion Forums {/*popular-discussion-forums*/}","metadata":{"source":"reactjs.org/beta/src/content/community/index.md"}},"2065":{"pageContent":"## Popular Discussion Forums {/*popular-discussion-forums*/}\n\nThere are many online forums which are a great place for discussion about best practices and application architecture as well as the future of React. If you have an answerable code-level question, Stack Overflow is usually a better fit.\n\nEach community consists of many thousands of React users.\n\n[DEV's React community](https://dev.to/t/react)\n\n[Hashnode's React community](https://hashnode.com/n/reactjs)\n\n[Reactiflux online chat](https://discord.gg/reactiflux)\n\n[Reddit's React community](https://www.reddit.com/r/reactjs/)\n\n## News {/*news*/}\n\nFor the latest news about React, [follow **@reactjs** on Twitter](https://twitter.com/reactjs) and the [official React blog](/blog/) on this website.","metadata":{"source":"reactjs.org/beta/src/content/community/index.md"}},"2066":{"pageContent":"--\n\ntitle: Versioning Policy\n\n--\n\n<Intro>\n\nAll stable builds of React go through a high level of testing and follow semantic versioning (semver). React also offers unstable release channels to encourage early feedback on experimental features. This page describes what you can expect from React releases.\n\n</Intro>\n\n## Stable releases {/*stable-releases*/}\n\nStable React releases (also known as \"Latest\" release channel) follow [semantic versioning (semver)](https://semver.org/) principles.\n\nThat means that with a version number **x.y.z**:\n\nWhen releasing **critical bug fixes**, we make a **patch release** by changing the **z** number (ex: 15.6.2 to 15.6.3).\n\nWhen releasing **new features** or **non-critical fixes**, we make a **minor release** by changing the **y** number (ex: 15.6.2 to 15.7.0).\n\nWhen releasing **breaking changes**, we make a **major release** by changing the **x** number (ex: 15.6.2 to 16.0.0).\n\nMajor releases can also contain new features, and any release can include bug fixes.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2067":{"pageContent":"Major releases can also contain new features, and any release can include bug fixes.\n\nMinor releases are the most common type of release.\n\n### Breaking Changes {/*breaking-changes*/}\n\nBreaking changes are inconvenient for everyone, so we try to minimize the number of major releases – for example, React 15 was released in April 2016 and React 16 was released in September 2017, and React 17 was released in October 2020.\n\nInstead, we release new features in minor versions. That means that minor releases are often more interesting and compelling than majors, despite their unassuming name.\n\n### Commitment to stability {/*commitment-to-stability*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2068":{"pageContent":"### Commitment to stability {/*commitment-to-stability*/}\n\nAs we change React over time, we try to minimize the effort required to take advantage of new features. When possible, we'll keep an older API working, even if that means putting it in a separate package. For example, [mixins have been discouraged for years](/blog/2016/07/13/mixins-considered-harmful.html) but they're supported to this day [via create-react-class](/docs/react-without-es6.html#mixins) and many codebases continue to use them in stable, legacy code.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2069":{"pageContent":"Over a million developers use React, collectively maintaining millions of components. The Facebook codebase alone has over 50,000 React components. That means we need to make it as easy as possible to upgrade to new versions of React; if we make large changes without a migration path, people will be stuck on old versions. We test these upgrade paths on Facebook itself – if our team of less than 10 people can update 50,000+ components alone, we hope the upgrade will be manageable for anyone using React. In many cases, we write [automated scripts](https://github.com/reactjs/react-codemod) to upgrade component syntax, which we then include in the open-source release for everyone to use.\n\n### Gradual upgrades via warnings {/*gradual-upgrades-via-warnings*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2070":{"pageContent":"### Gradual upgrades via warnings {/*gradual-upgrades-via-warnings*/}\n\nDevelopment builds of React include many helpful warnings. Whenever possible, we add warnings in preparation for future breaking changes. That way, if your app has no warnings on the latest release, it will be compatible with the next major release. This allows you to upgrade your apps one component at a time.\n\nDevelopment warnings won't affect the runtime behavior of your app. That way, you can feel confident that your app will behave the same way between the development and production builds -- the only differences are that the production build won't log the warnings and that it is more efficient. (If you ever notice otherwise, please file an issue.)\n\n### What counts as a breaking change? {/*what-counts-as-a-breaking-change*/}\n\nIn general, we *don't* bump the major version number for changes to:","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2071":{"pageContent":"### What counts as a breaking change? {/*what-counts-as-a-breaking-change*/}\n\nIn general, we *don't* bump the major version number for changes to:\n\n**Development warnings.** Since these don't affect production behavior, we may add new warnings or modify existing warnings in between major versions. In fact, this is what allows us to reliably warn about upcoming breaking changes.\n\n**APIs starting with `unstable_`.** These are provided as experimental features whose APIs we are not yet confident in. By releasing these with an `unstable_` prefix, we can iterate faster and get to a stable API sooner.\n\n**Alpha and canary versions of React.** We provide alpha versions of React as a way to test new features early, but we need the flexibility to make changes based on what we learn in the alpha period. If you use these versions, note that APIs may change before the stable release.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2072":{"pageContent":"**Undocumented APIs and internal data structures.** If you access internal property names like `__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` or `__reactInternalInstance$uk43rzhitjg`, there is no warranty.  You are on your own.\n\nThis policy is designed to be pragmatic: certainly, we don't want to cause headaches for you. If we bumped the major version for all of these changes, we would end up releasing more major versions and ultimately causing more versioning pain for the community. It would also mean that we can't make progress in improving React as fast as we'd like.\n\nThat said, if we expect that a change on this list will cause broad problems in the community, we will still do our best to provide a gradual migration path.\n\n### If a minor release includes no new features, why isn't it a patch? {/*if-a-minor-release-includes-no-new-features-why-isnt-it-a-patch*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2073":{"pageContent":"### If a minor release includes no new features, why isn't it a patch? {/*if-a-minor-release-includes-no-new-features-why-isnt-it-a-patch*/}\n\nIt's possible that a minor release will not include new features. [This is allowed by semver](https://semver.org/#spec-item-7), which states **\"[a minor version] MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes.\"**\n\nHowever, it does raise the question of why these releases aren't versioned as patches instead.\n\nThe answer is that any change to React (or other software) carries some risk of breaking in unexpected ways. Imagine a scenario where a patch release that fixes one bug accidentally introduces a different bug. This would not only be disruptive to developers, but also harm their confidence in future patch releases. It's especially regrettable if the original fix is for a bug that is rarely encountered in practice.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2074":{"pageContent":"We have a pretty good track record for keeping React releases free of bugs, but patch releases have an even higher bar for reliability because most developers assume they can be adopted without adverse consequences.\n\nFor these reasons, we reserve patch releases only for the most critical bugs and security vulnerabilities.\n\nIf a release includes non-essential changes — such as internal refactors, changes to implementation details, performance improvements, or minor bugfixes — we will bump the minor version even when there are no new features.\n\n## All release channels {/*all-release-channels*/}\n\nReact relies on a thriving open source community to file bug reports, open pull requests, and [submit RFCs](https://github.com/reactjs/rfcs). To encourage feedback we sometimes share special builds of React that include unreleased features.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2075":{"pageContent":"<Note>\n\nThis section will be most relevant to developers who work on frameworks, libraries, or developer tooling. Developers who use React primarily to build user-facing applications should not need to worry about our prerelease channels.\n\n</Note>\n\nEach of React's release channels is designed for a distinct use case:\n\n[**Latest**](#latest-channel) is for stable, semver React releases. It's what you get when you install React from npm. This is the channel you're already using today. **Use this for all user-facing React applications.**\n\n[**Next**](#next-channel) tracks the main branch of the React source code repository. Think of these as release candidates for the next minor semver release. Use this for integration testing between React and third party projects.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2076":{"pageContent":"[**Experimental**](#experimental-channel) includes experimental APIs and features that aren't available in the stable releases. These also track the main branch, but with additional feature flags turned on. Use this to try out upcoming features before they are released.\n\nAll releases are published to npm, but only Latest uses semantic versioning. Prereleases (those in the Next and Experimental channels) have versions generated from a hash of their contents and the commit date, e.g. `0.0.0-68053d940-20210623` for Next and `0.0.0-experimental-68053d940-20210623` for Experimental.\n\n*The only officially supported release channel for user-facing applications is Latest**. Next and Experimental releases are provided for testing purposes only, and we provide no guarantees that behavior won't change between releases. They do not follow the semver protocol that we use for releases from Latest.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2077":{"pageContent":"By publishing prereleases to the same registry that we use for stable releases, we are able to take advantage of the many tools that support the npm workflow, like [unpkg](https://unpkg.com) and [CodeSandbox](https://codesandbox.io).\n\n### Latest channel {/*latest-channel*/}\n\nLatest is the channel used for stable React releases. It corresponds to the `latest` tag on npm. It is the recommended channel for all React apps that are shipped to real users.\n\n*If you're not sure which channel you should use, it's Latest.** If you're a React developer, this is what you're already using. You can expect updates to Latest to be extremely stable. Versions follow the semantic versioning scheme, as [described earlier.](#stable-releases)\n\n### Next channel {/*next-channel*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2078":{"pageContent":"### Next channel {/*next-channel*/}\n\nThe Next channel is a prerelease channel that tracks the main branch of the React repository. We use prereleases in the Next channel as release candidates for the Latest channel. You can think of Next as a superset of Latest that is updated more frequently.\n\nThe degree of change between the most recent Next release and the most recent Latest release is approximately the same as you would find between two minor semver releases. However, **the Next channel does not conform to semantic versioning.** You should expect occasional breaking changes between successive releases in the Next channel.\n\n*Do not use prereleases in user-facing applications.**\n\nReleases in Next are published with the `next` tag on npm. Versions are generated from a hash of the build's contents and the commit date, e.g. `0.0.0-68053d940-20210623`.\n\n#### Using the next channel for integration testing {/*using-the-next-channel-for-integration-testing*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2079":{"pageContent":"#### Using the next channel for integration testing {/*using-the-next-channel-for-integration-testing*/}\n\nThe Next channel is designed to support integration testing between React and other projects.\n\nAll changes to React go through extensive internal testing before they are released to the public. However, there are a myriad of environments and configurations used throughout the React ecosystem, and it's not possible for us to test against every single one.\n\nIf you're the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you're interested, follow these steps:","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2080":{"pageContent":"Set up a cron job using your preferred continuous integration platform. Cron jobs are supported by both [CircleCI](https://circleci.com/docs/2.0/triggers/#scheduled-builds) and [Travis CI](https://docs.travis-ci.com/user/cron-jobs/).\n\nIn the cron job, update your React packages to the most recent React release in the Next channel, using `next` tag on npm. Using the npm cli:\n\n```console\n\nnpm update react@next react-dom@next\n\n```\n\nOr yarn:\n\n```console\n\nyarn upgrade react@next react-dom@next\n\n```\n\nRun your test suite against the updated packages.\n\nIf everything passes, great! You can expect that your project will work with the next minor React release.\n\nIf something breaks unexpectedly, please let us know by [filing an issue](https://github.com/facebook/react/issues).\n\nA project that uses this workflow is Next.js. (No pun intended! Seriously!) You can refer to their [CircleCI configuration](https://github.com/zeit/next.js/blob/c0a1c0f93966fe33edd93fb53e5fafb0dcd80a9e/.circleci/config.yml) as an example.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2081":{"pageContent":"### Experimental channel {/*experimental-channel*/}\n\nLike Next, the Experimental channel is a prerelease channel that tracks the main branch of the React repository. Unlike Next, Experimental releases include additional features and APIs that are not ready for wider release.\n\nUsually, an update to Next is accompanied by a corresponding update to Experimental. They are based on the same source revision, but are built using a different set of feature flags.\n\nExperimental releases may be significantly different than releases to Next and Latest. **Do not use Experimental releases in user-facing applications.** You should expect frequent breaking changes between releases in the Experimental channel.\n\nReleases in Experimental are published with the `experimental` tag on npm. Versions are generated from a hash of the build's contents and the commit date, e.g. `0.0.0-experimental-68053d940-20210623`.\n\n#### What goes into an experimental release? {/*what-goes-into-an-experimental-release*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2082":{"pageContent":"#### What goes into an experimental release? {/*what-goes-into-an-experimental-release*/}\n\nExperimental features are ones that are not ready to be released to the wider public, and may change drastically before they are finalized. Some experiments may never be finalized -- the reason we have experiments is to test the viability of proposed changes.\n\nFor example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.\n\nYou may find it valuable to run integration tests against Experimental. This is up to you. However, be advised that Experimental is even less stable than Next. **We do not guarantee any stability between Experimental releases.**\n\n#### How can I learn more about experimental features? {/*how-can-i-learn-more-about-experimental-features*/}","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2083":{"pageContent":"#### How can I learn more about experimental features? {/*how-can-i-learn-more-about-experimental-features*/}\n\nExperimental features may or may not be documented. Usually, experiments aren't documented until they are close to shipping in Next or Latest.\n\nIf a feature is not documented, they may be accompanied by an [RFC](https://github.com/reactjs/rfcs).\n\nWe will post to the [React blog](/blog) when we're ready to announce new experiments, but that doesn't mean we will publicize every experiment.\n\nYou can always refer to our public GitHub repository's [history](https://github.com/facebook/react/commits/main) for a comprehensive list of changes.","metadata":{"source":"reactjs.org/beta/src/content/community/versioning-policy.md"}},"2084":{"pageContent":"--\n\ntitle: \"Meet the Team\"\n\n--\n\n<Intro>\n\nReact development is led by a dedicated team working full time at Meta. It also receives contributions from people all over the world.\n\n</Intro>\n\n## React Core {/*react-core*/}\n\nThe React Core team members work full time on the core component APIs, the engine that powers React DOM and React Native, React DevTools, and the React documentation website.\n\nCurrent members of the React team are listed in alphabetical order below.\n\n<TeamMember name=\"Andrew Clark\" permalink=\"andrew-clark\" photo=\"/images/team/acdlite.jpg\" github=\"acdlite\" twitter=\"acdlite\" title=\"Engineer at Meta\">\n\nAndrew got started with web development by making sites with WordPress, and eventually tricked himself into doing JavaScript. His favorite pastime is karaoke. Andrew is either a Disney villain or a Disney princess, depending on the day.\n\n</TeamMember>","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2085":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Dan Abramov\" permalink=\"dan-abramov\" photo=\"/images/team/gaearon.jpg\" github=\"gaearon\" twitter=\"dan_abramov\" title=\"Engineer at Meta\">\n\nDan got into programming after he accidentally discovered Visual Basic inside Microsoft PowerPoint. He has found his true calling in turning [Sebastian](#sebastian-markbåge)'s tweets into long-form blog posts. Dan occasionally wins at Fortnite by hiding in a bush until the game ends.\n\n</TeamMember>\n\n<TeamMember name=\"Jason Bonta\" permalink=\"jason-bonta\" photo=\"/images/team/jasonbonta.jpg\" title=\"Engineering Manager at Meta\">\n\nJason likes having large volumes of Amazon packages delivered to the office so that he can build forts. Despite literally walling himself off from his team at times and not understanding how for-of loops work, we appreciate him for the unique qualities he brings to his work.\n\n</TeamMember>","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2086":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Joe Savona\" permalink=\"joe-savona\" photo=\"/images/team/joe.jpg\" github=\"josephsavona\" twitter=\"en_JS\" title=\"Engineer at Meta\">\n\nJoe was planning to major in math and philosophy but got into computer science after writing physics simulations in Matlab. Prior to React, he worked on Relay, RSocket.js, and the Skip programming language. While he’s not building some sort of reactive system he enjoys running, studying Japanese, and spending time with his family.\n\n</TeamMember>\n\n<TeamMember name=\"Josh Story\" permalink=\"josh-story\" photo=\"/images/team/josh.jpg\" github=\"gnoff\" twitter=\"joshcstory\" title=\"Engineer at Vercel\">","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2087":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Josh Story\" permalink=\"josh-story\" photo=\"/images/team/josh.jpg\" github=\"gnoff\" twitter=\"joshcstory\" title=\"Engineer at Vercel\">\n\nJosh majored in Mathematics and discovered programming while in college. His first professional developer job was to program insurance rate calculations in Microsoft Excel, the paragon of Reactive Programming which must be why he now works on React. In between that time Josh has been an IC, Manager, and Executive at a few startups. outside of work he likes to push his limits with cooking.\n\n</TeamMember>\n\n<TeamMember name=\"Lauren Tan\" permalink=\"lauren-tan\" photo=\"/images/team/lauren.jpg\" github=\"poteto\" twitter=\"potetotes\" personal=\"no.lol\" title=\"Engineer at Meta\">","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2088":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Lauren Tan\" permalink=\"lauren-tan\" photo=\"/images/team/lauren.jpg\" github=\"poteto\" twitter=\"potetotes\" personal=\"no.lol\" title=\"Engineer at Meta\">\n\nLauren’s programming career peaked when she first discovered the `<marquee>` tag. She’s been chasing that high ever since. When she’s not adding bugs into React, she enjoys dropping cheeky memes in chat, and playing all too many video games with her partner, and her dog Zelda.\n\n</TeamMember>\n\n<TeamMember name=\"Luna Ruan\" permalink=\"luna-ruan\" photo=\"/images/team/lunaruan.jpg\" github=\"lunaruan\" twitter=\"lunaruan\" title=\"Engineer at Meta\">\n\nLuna learned programming because she thought it meant creating video games. Instead, she ended up working on the Pinterest web app, and now on React itself. Luna doesn't want to make video games anymore, but she plans to do creative writing if she ever gets bored.\n\n</TeamMember>","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2089":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Mofei Zhang\" permalink=\"mofei-zhang\" photo=\"/images/team/mofei-zhang.png\" github=\"mofeiZ\" title=\"Engineer at Meta\">\n\nMofei started programming when she realized it can help her cheat in video games. She focused on operating systems in undergrad / grad school, but now finds herself happily tinkering on React. Outside of work, she enjoys debugging bouldering problems and planning her next backpacking trip(s).\n\n</TeamMember>\n\n<TeamMember name=\"Rick Hanlon\" permalink=\"rick-hanlon\" photo=\"/images/team/rickhanlonii.jpg\" github=\"rickhanlonii\" twitter=\"rickhanlonii\" personal=\"rickhanlon.codes\" title=\"Engineer at Meta\">\n\nRicky majored in theoretical math and somehow found himself on the React Native team for a couple years before joining the React team. When he's not programming you can find him snowboarding, biking, climbing, golfing, or closing GitHub issues that do not match the issue template.\n\n</TeamMember>","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2090":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Samuel Susla\" permalink=\"samuel-susla\" photo=\"/images/team/sam.jpg\" github=\"sammy-SC\" twitter=\"SamuelSusla\" title=\"Engineer at Meta\">\n\nSamuel’s interest in programming started with the movie Matrix. He still has Matrix screen saver. Before working on React, he was focused on writing iOS apps. Outside of work, Samuel enjoys playing beach volleyball, squash, badminton and spending time with his family.\n\n</TeamMember>\n\n<TeamMember name=\"Sathya Gunasekaran \" permalink=\"sathya-gunasekaran\" photo=\"/images/team/sathya.jpg\" github=\"gsathya\" twitter=\"_gsathya\" title=\"Engineer at Meta\">\n\nSathya hated the Dragon Book in school but somehow ended up working on compilers all his career. When he's not compiling React components, he's either drinking coffee or eating yet another Dosa.\n\n</TeamMember>\n\n<TeamMember name=\"Sebastian Markbåge\" permalink=\"sebastian-markbåge\" photo=\"/images/team/sebmarkbage.jpg\" github=\"sebmarkbage\" twitter=\"sebmarkbage\" title=\"Engineer at Vercel\">","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2091":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Sebastian Markbåge\" permalink=\"sebastian-markbåge\" photo=\"/images/team/sebmarkbage.jpg\" github=\"sebmarkbage\" twitter=\"sebmarkbage\" title=\"Engineer at Vercel\">\n\nSebastian majored in psychology. He's usually quiet. Even when he says something, it often doesn't make sense to the rest of us until a few months later. The correct way to pronounce his surname is \"mark-boa-geh\" but he settled for \"mark-beige\" out of pragmatism -- and that's how he approaches React.\n\n</TeamMember>\n\n<TeamMember name=\"Sebastian Silbermann\" permalink=\"sebastian-silbermann\" photo=\"/images/team/sebsilbermann.jpg\" github=\"eps1lon\" twitter=\"sebsilbermann\" title=\"Independent Engineer\">\n\nSebastian learned programming to make the browser games he played during class more enjoyable. Eventually this lead to contributing to as much open source code as possible. Outside of coding he's busy making sure people don't confuse him with the other Sebastians and Zilberman of the React community.\n\n</TeamMember>","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2092":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Seth Webster\" permalink=\"seth-webster\" photo=\"/images/team/seth.jpg\" github=\"sethwebster\" twitter=\"sethwebster\" personal=\"sethwebster.com\" title=\"Engineering Manager at Meta\">\n\nSeth started programming as a kid growing up in Tucson, AZ. After school, he was bitten by the music bug and was a touring musician for about 10 years before returning to *work*, starting with Intuit. In his spare time, he loves [taking pictures](https://www.sethwebster.com) and flying for animal rescues in the northeastern United States.\n\n</TeamMember>\n\n<TeamMember name=\"Sophie Alpert\" permalink=\"sophie-alpert\" photo=\"/images/team/sophiebits.jpg\" github=\"sophiebits\" twitter=\"sophiebits\" personal=\"sophiebits.com\" title=\"Independent Engineer\">","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2093":{"pageContent":"<TeamMember name=\"Sophie Alpert\" permalink=\"sophie-alpert\" photo=\"/images/team/sophiebits.jpg\" github=\"sophiebits\" twitter=\"sophiebits\" personal=\"sophiebits.com\" title=\"Independent Engineer\">\n\nFour days after React was released, Sophie rewrote the entirety of her then-current project to use it, which she now realizes was perhaps a bit reckless. After she became the project's #1 committer, she wondered why she wasn't getting paid by Facebook like everyone else was and joined the team officially to lead React through its adolescent years. Though she quit that job years ago, somehow she's still in the team's group chats and “providing value”.\n\n</TeamMember>\n\n<TeamMember name=\"Tianyu Yao\" permalink=\"tianyu-yao\" photo=\"/images/team/tianyu.jpg\" github=\"tyao1\" twitter=\"tianyu0\" title=\"Engineer at Meta\">","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2094":{"pageContent":"</TeamMember>\n\n<TeamMember name=\"Tianyu Yao\" permalink=\"tianyu-yao\" photo=\"/images/team/tianyu.jpg\" github=\"tyao1\" twitter=\"tianyu0\" title=\"Engineer at Meta\">\n\nTianyu’s interest in computers started as a kid because he loves video games. So he majored in computer science and still plays childish games like League of Legends. When he is not in front of a computer, he enjoys playing with his two kittens, hiking and kayaking.\n\n</TeamMember>\n\n<TeamMember name=\"Yuzhi Zheng\" permalink=\"yuzhi-zheng\" photo=\"/images/team/yuzhi.jpg\" github=\"yuzhi\" twitter=\"yuzhiz\" title=\"Engineering Manager at Meta\">\n\nYuzhi studied Computer Science in school. She liked the instant gratification of seeing code come to life without having to physically be in a laboratory. Now she’s a manager in the React org. Before management, she used to work on the Relay data fetching framework. In her spare time, Yuzhi enjoys optimizing her life via gardening and home improvement projects.\n\n</TeamMember>","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2095":{"pageContent":"</TeamMember>\n\n## Past contributors {/*past-contributors*/}\n\nYou can find the past team members and other people who significantly contributed to React over the years on the [acknowledgements](/community/acknowledgements) page.","metadata":{"source":"reactjs.org/beta/src/content/community/team.md"}},"2096":{"pageContent":"--\n\ntitle: React Meetups\n\n--\n\n<Intro>\n\nDo you have a local React.js meetup? Add it here! (Please keep the list alphabetical)\n\n</Intro>\n\n## Albania {/*albania*/}\n\n[Tirana](https://www.meetup.com/React-User-Group-Albania/)\n\n## Argentina {/*argentina*/}\n\n[Buenos Aires](https://www.meetup.com/es/React-en-Buenos-Aires)\n\n[Rosario](https://www.meetup.com/es/reactrosario)\n\n## Australia {/*australia*/}\n\n[Brisbane](https://www.meetup.com/reactbris/)\n\n[Melbourne](https://www.meetup.com/React-Melbourne/)\n\n[Sydney](https://www.meetup.com/React-Sydney/)\n\n## Austria {/*austria*/}\n\n[Vienna](https://www.meetup.com/Vienna-ReactJS-Meetup/)\n\n## Belgium {/*belgium*/}\n\n[Belgium](https://www.meetup.com/ReactJS-Belgium/)\n\n## Brazil {/*brazil*/}\n\n[Belo Horizonte](https://www.meetup.com/reactbh/)\n\n[Curitiba](https://www.meetup.com/pt-br/ReactJS-CWB/)\n\n[Florianópolis](https://www.meetup.com/pt-br/ReactJS-Floripa/)\n\n[Goiânia](https://www.meetup.com/pt-br/React-Goiania/)\n\n[Joinville](https://www.meetup.com/pt-BR/React-Joinville/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2097":{"pageContent":"[Florianópolis](https://www.meetup.com/pt-br/ReactJS-Floripa/)\n\n[Goiânia](https://www.meetup.com/pt-br/React-Goiania/)\n\n[Joinville](https://www.meetup.com/pt-BR/React-Joinville/)\n\n[Juiz de Fora](https://www.meetup.com/pt-br/React-Juiz-de-Fora/)\n\n[Maringá](https://www.meetup.com/pt-BR/React-Maringa/)\n\n[Porto Alegre](https://www.meetup.com/pt-BR/React-Porto-Alegre/)\n\n[Rio de Janeiro](https://www.meetup.com/pt-BR/React-Rio-de-Janeiro/)\n\n[Salvador](https://www.meetup.com/pt-BR/ReactSSA)\n\n[São Paulo](https://www.meetup.com/pt-BR/ReactJS-SP/)\n\n[Vila Velha](https://www.meetup.com/pt-BR/React-ES/)\n\n## Bolivia {/*bolivia*/}\n\n[Bolivia](https://www.meetup.com/ReactBolivia/)\n\n## Canada {/*canada*/}\n\n[Halifax, NS](https://www.meetup.com/Halifax-ReactJS-Meetup/)\n\n[Montreal, QC - React Native](https://www.meetup.com/fr-FR/React-Native-MTL/)\n\n[Vancouver, BC](https://www.meetup.com/ReactJS-Vancouver-Meetup/)\n\n[Ottawa, ON](https://www.meetup.com/Ottawa-ReactJS-Meetup/)\n\n[Toronto, ON](https://www.meetup.com/Toronto-React-Native/events/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2098":{"pageContent":"[Vancouver, BC](https://www.meetup.com/ReactJS-Vancouver-Meetup/)\n\n[Ottawa, ON](https://www.meetup.com/Ottawa-ReactJS-Meetup/)\n\n[Toronto, ON](https://www.meetup.com/Toronto-React-Native/events/)\n\n## Chile {/*chile*/}\n\n[Santiago](https://www.meetup.com/es-ES/react-santiago/)\n\n## China {/*china*/}\n\n[Beijing](https://www.meetup.com/Beijing-ReactJS-Meetup/)\n\n## Colombia {/*colombia*/}\n\n[Bogotá](https://www.meetup.com/meetup-group-iHIeHykY/)\n\n[Medellin](https://www.meetup.com/React-Medellin/)\n\n[Cali](https://www.meetup.com/reactcali/)\n\n## Denmark {/*denmark*/}\n\n[Aalborg](https://www.meetup.com/Aalborg-React-React-Native-Meetup/)\n\n[Aarhus](https://www.meetup.com/Aarhus-ReactJS-Meetup/)\n\n## Egypt {/*egypt*/}\n\n[Cairo](https://www.meetup.com/react-cairo/)\n\n## England (UK) {/*england-uk*/}\n\n[Manchester](https://www.meetup.com/Manchester-React-User-Group/)\n\n[React.JS Girls London](https://www.meetup.com/ReactJS-Girls-London/)\n\n[React London : Bring Your Own Project](https://www.meetup.com/React-London-Bring-Your-Own-Project/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2099":{"pageContent":"[React.JS Girls London](https://www.meetup.com/ReactJS-Girls-London/)\n\n[React London : Bring Your Own Project](https://www.meetup.com/React-London-Bring-Your-Own-Project/)\n\n## France {/*france*/}\n\n[Nantes](https://www.meetup.com/React-Nantes/)\n\n[Lille](https://www.meetup.com/ReactBeerLille/)\n\n[Paris](https://www.meetup.com/ReactJS-Paris/)\n\n## Germany {/*germany*/}\n\n[Cologne](https://www.meetup.com/React-Cologne/)\n\n[Düsseldorf](https://www.meetup.com/de-DE/ReactJS-Meetup-Dusseldorf/)\n\n[Hamburg](https://www.meetup.com/Hamburg-React-js-Meetup/)\n\n[Karlsruhe](https://www.meetup.com/react_ka/)\n\n[Kiel](https://www.meetup.com/Kiel-React-Native-Meetup/)\n\n[Munich](https://www.meetup.com/ReactJS-Meetup-Munich/)\n\n[React Berlin](https://www.meetup.com/React-Open-Source/)\n\n## Greece {/*greece*/}\n\n[Athens](https://www.meetup.com/React-To-React-Athens-MeetUp/)\n\n[Thessaloniki](https://www.meetup.com/Thessaloniki-ReactJS-Meetup/)\n\n## Hungary {/*hungary*/}\n\n[Budapest](https://www.meetup.com/React-Budapest/)\n\n## India {/*india*/}","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2100":{"pageContent":"[Thessaloniki](https://www.meetup.com/Thessaloniki-ReactJS-Meetup/)\n\n## Hungary {/*hungary*/}\n\n[Budapest](https://www.meetup.com/React-Budapest/)\n\n## India {/*india*/}\n\n[Bangalore](https://www.meetup.com/ReactJS-Bangalore/)\n\n[Bangalore](https://www.meetup.com/React-Native-Bangalore-Meetup)\n\n[Chandigarh](https://www.meetup.com/Chandigarh-React-Developers/)\n\n[Chennai](https://www.meetup.com/React-Chennai/)\n\n[Delhi NCR](https://www.meetup.com/React-Delhi-NCR/)\n\n[Jaipur](https://www.meetup.com/JaipurJS-Developer-Meetup/)\n\n[Pune](https://www.meetup.com/ReactJS-and-Friends/)\n\n## Indonesia {/*indonesia*/}\n\n[Indonesia](https://www.meetup.com/reactindonesia/)\n\n## Ireland {/*ireland*/}\n\n[Dublin](https://www.meetup.com/ReactJS-Dublin/)\n\n## Israel {/*israel*/}\n\n[Tel Aviv](https://www.meetup.com/ReactJS-Israel/)\n\n## Italy {/*italy*/}\n\n[Milan](https://www.meetup.com/React-JS-Milano/)\n\n## Kenya {/*kenya*/}\n\n[Nairobi - Reactdevske](https://kommunity.com/reactjs-developer-community-kenya-reactdevske)\n\n## Malaysia {/*malaysia*/}","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2101":{"pageContent":"[Milan](https://www.meetup.com/React-JS-Milano/)\n\n## Kenya {/*kenya*/}\n\n[Nairobi - Reactdevske](https://kommunity.com/reactjs-developer-community-kenya-reactdevske)\n\n## Malaysia {/*malaysia*/}\n\n[Kuala Lumpur](https://www.kl-react.com/)\n\n[Penang](https://www.facebook.com/groups/reactpenang/)\n\n## Netherlands {/*netherlands*/}\n\n[Amsterdam](https://www.meetup.com/React-Amsterdam/)\n\n## New Zealand {/*new-zealand*/}\n\n[Wellington](https://www.meetup.com/React-Wellington/)\n\n## Norway {/*norway*/}\n\n[Norway](https://reactjs-norway.webflow.io/)\n\n[Oslo](https://www.meetup.com/ReactJS-Oslo-Meetup/)\n\n## Pakistan {/*pakistan*/}\n\n[Karachi](https://www.facebook.com/groups/902678696597634/)\n\n[Lahore](https://www.facebook.com/groups/ReactjsLahore/)\n\n## Panama {/*panama*/}\n\n[Panama](https://www.meetup.com/React-Panama/)\n\n## Peru {/*peru*/}\n\n[Lima](https://www.meetup.com/ReactJS-Peru/)\n\n## Philippines {/*philippines*/}\n\n[Manila](https://www.meetup.com/reactjs-developers-manila/)\n\n[Manila - ReactJS PH](https://www.meetup.com/ReactJS-Philippines/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2102":{"pageContent":"## Philippines {/*philippines*/}\n\n[Manila](https://www.meetup.com/reactjs-developers-manila/)\n\n[Manila - ReactJS PH](https://www.meetup.com/ReactJS-Philippines/)\n\n## Poland {/*poland*/}\n\n[Warsaw](https://www.meetup.com/React-js-Warsaw/)\n\n[Wrocław](https://www.meetup.com/ReactJS-Wroclaw/)\n\n## Portugal {/*portugal*/}\n\n[Lisbon](https://www.meetup.com/JavaScript-Lisbon/)\n\n## Scotland (UK) {/*scotland-uk*/}\n\n[Edinburgh](https://www.meetup.com/React-Scotland/)\n\n## Spain {/*spain*/}\n\n[Barcelona](https://www.meetup.com/ReactJS-Barcelona/)\n\n[Canarias](https://www.meetup.com/React-Canarias/)\n\n## Sweden {/*sweden*/}\n\n[Goteborg](https://www.meetup.com/ReactJS-Goteborg/)\n\n[Stockholm](https://www.meetup.com/Stockholm-ReactJS-Meetup/)\n\n## Switzerland {/*switzerland*/}\n\n[Zurich](https://www.meetup.com/Zurich-ReactJS-Meetup/)\n\n## Turkey {/*turkey*/}\n\n[Istanbul](https://kommunity.com/reactjs-istanbul)\n\n## Ukraine {/*ukraine*/}\n\n[Kyiv](https://www.meetup.com/Kyiv-ReactJS-Meetup)\n\n## US {/*us*/}","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2103":{"pageContent":"## Turkey {/*turkey*/}\n\n[Istanbul](https://kommunity.com/reactjs-istanbul)\n\n## Ukraine {/*ukraine*/}\n\n[Kyiv](https://www.meetup.com/Kyiv-ReactJS-Meetup)\n\n## US {/*us*/}\n\n[Ann Arbor, MI - ReactJS](https://www.meetup.com/AnnArbor-jsx/)\n\n[Atlanta, GA - ReactJS](https://www.meetup.com/React-ATL/)\n\n[Austin, TX - ReactJS](https://www.meetup.com/ReactJS-Austin-Meetup/)\n\n[Boston, MA - ReactJS](https://www.meetup.com/ReactJS-Boston/)\n\n[Boston, MA - React Native](https://www.meetup.com/Boston-React-Native-Meetup/)\n\n[Charlotte, NC - ReactJS](https://www.meetup.com/ReactJS-Charlotte/)\n\n[Charlotte, NC - React Native](https://www.meetup.com/cltreactnative/)\n\n[Chicago, IL - ReactJS](https://www.meetup.com/React-Chicago/)\n\n[Cleveland, OH - ReactJS](https://www.meetup.com/Cleveland-React/)\n\n[Columbus, OH - ReactJS](https://www.meetup.com/ReactJS-Columbus-meetup/)\n\n[Dallas, TX - ReactJS](https://www.meetup.com/ReactDallas/)\n\n[Dallas, TX - [Remote] React JS](https://www.meetup.com/React-JS-Group/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2104":{"pageContent":"[Dallas, TX - ReactJS](https://www.meetup.com/ReactDallas/)\n\n[Dallas, TX - [Remote] React JS](https://www.meetup.com/React-JS-Group/)\n\n[Detroit, MI - Detroit React User Group](https://www.meetup.com/Detroit-React-User-Group/)\n\n[Indianapolis, IN - React.Indy](https://www.meetup.com/React-Indy)\n\n[Irvine, CA - ReactJS](https://www.meetup.com/ReactJS-OC/)\n\n[Kansas City, MO - ReactJS](https://www.meetup.com/Kansas-City-React-Meetup/)\n\n[Las Vegas, NV - ReactJS](https://www.meetup.com/ReactVegas/)\n\n[Leesburg, VA - ReactJS](https://www.meetup.com/React-NOVA/)\n\n[Los Angeles, CA - ReactJS](https://www.meetup.com/socal-react/)\n\n[Los Angeles, CA - React Native](https://www.meetup.com/React-Native-Los-Angeles/)\n\n[Miami, FL - ReactJS](https://www.meetup.com/React-Miami/)\n\n[Nashville, TN - ReactJS](https://www.meetup.com/NashReact-Meetup/)\n\n[New York, NY - ReactJS](https://www.meetup.com/NYC-Javascript-React-Group/)\n\n[New York, NY - React Ladies](https://www.meetup.com/React-Ladies/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2105":{"pageContent":"[New York, NY - ReactJS](https://www.meetup.com/NYC-Javascript-React-Group/)\n\n[New York, NY - React Ladies](https://www.meetup.com/React-Ladies/)\n\n[New York, NY - React Native](https://www.meetup.com/React-Native-NYC/)\n\n[New York, NY - useReactNYC](https://www.meetup.com/useReactNYC/)\n\n[Omaha, NE - ReactJS/React Native](https://www.meetup.com/omaha-react-meetup-group/)\n\n[Palo Alto, CA - React Native](https://www.meetup.com/React-Native-Silicon-Valley/)\n\n[Philadelphia, PA - ReactJS](https://www.meetup.com/Reactadelphia/)\n\n[Phoenix, AZ - ReactJS](https://www.meetup.com/ReactJS-Phoenix/)\n\n[Pittsburgh, PA - ReactJS/React Native](https://www.meetup.com/ReactPgh/)\n\n[Portland, OR - ReactJS](https://www.meetup.com/Portland-ReactJS/)\n\n[Provo, UT - ReactJS](https://www.meetup.com/ReactJS-Utah/)\n\n[Sacramento, CA - ReactJS](https://www.meetup.com/Sacramento-ReactJS-Meetup/)\n\n[San Diego, CA - San Diego JS](https://www.meetup.com/sandiegojs/)\n\n[San Francisco - Real World React](https://www.meetup.com/Real-World-React)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2106":{"pageContent":"[San Diego, CA - San Diego JS](https://www.meetup.com/sandiegojs/)\n\n[San Francisco - Real World React](https://www.meetup.com/Real-World-React)\n\n[San Francisco - ReactJS](https://www.meetup.com/ReactJS-San-Francisco/)\n\n[San Francisco, CA - React Native](https://www.meetup.com/React-Native-San-Francisco/)\n\n[San Ramon, CA - TriValley Coders](https://www.meetup.com/trivalleycoders/)\n\n[Santa Monica, CA - ReactJS](https://www.meetup.com/Los-Angeles-ReactJS-User-Group/)\n\n[Seattle, WA - React Native](https://www.meetup.com/Seattle-React-Native-Meetup/)\n\n[Seattle, WA - ReactJS](https://www.meetup.com/seattle-react-js/)\n\n[Tampa, FL - ReactJS](https://www.meetup.com/ReactJS-Tampa-Bay/)\n\n[Tucson, AZ - ReactJS](https://www.meetup.com/Tucson-ReactJS-Meetup/)\n\n[Washington, DC - ReactJS](https://www.meetup.com/React-DC/)","metadata":{"source":"reactjs.org/beta/src/content/community/meetups.md"}},"2107":{"pageContent":"--\n\ntitle: Docs Contributors\n\n--\n\n<Intro>\n\nReact documentation is written and maintained by the [React team](/community/team) and [external contributors.](https://github.com/reactjs/reactjs.org/graphs/contributors) On this page, we'd like to thank a few people who've made significant contributions to this site.\n\n</Intro>\n\n## Content {/*content*/}\n\n[Rachel Nabors](https://twitter.com/RachelNabors): editing, writing, illustrating\n\n[Dan Abramov](https://twitter.com/dan_abramov): writing, curriculum design\n\n[Sylwia Vargas](https://twitter.com/SylwiaVargas): example code\n\n[Rick Hanlon](https://twitter.com/rickhanlonii): writing\n\n[David McCabe](https://twitter.com/mcc_abe): writing\n\n## Design {/*design*/}\n\n[Dan Lebowitz](https://twitter.com/lebo): site design\n\n[Razvan Gradinar](https://dribbble.com/GradinarRazvan): sandbox design\n\n[Maggie Appleton](https://maggieappleton.com/): diagram system\n\n[Sophie Alpert](https://twitter.com/sophiebits): color-coded explanations\n\n## Development {/*development*/}","metadata":{"source":"reactjs.org/beta/src/content/community/docs-contributors.md"}},"2108":{"pageContent":"[Maggie Appleton](https://maggieappleton.com/): diagram system\n\n[Sophie Alpert](https://twitter.com/sophiebits): color-coded explanations\n\n## Development {/*development*/}\n\n[Jared Palmer](https://twitter.com/jaredpalmer): site development\n\n[ThisDotLabs](https://www.thisdot.co/) ([Dane Grant](https://twitter.com/danecando), [Dustin Goodman](https://twitter.com/dustinsgoodman)): site development\n\n[CodeSandbox](https://codesandbox.io/) ([Ives van Hoorne](https://twitter.com/CompuIves), [Alex Moldovan](https://twitter.com/alexnmoldovan), [Jasper De Moor](https://twitter.com/JasperDeMoor), [Danilo Woznica](https://twitter.com/danilowoz)): sandbox integration\n\n[Rick Hanlon](https://twitter.com/rickhanlonii): site development\n\n[Harish Kumar](https://www.strek.in/): development and maintenance\n\nWe'd also like to thank countless alpha testers and community members who gave us feedback along the way.","metadata":{"source":"reactjs.org/beta/src/content/community/docs-contributors.md"}},"2109":{"pageContent":"```\n\n```js index.js active\nimport './styles.css';\nimport {render, unmountComponentAtNode} from 'react-dom';\nimport App from './App.js';\n\nconst domNode = document.getElementById('root');\n\ndocument.getElementById('render').addEventListener('click', () => {\n  render(\n\nHello, world!;\n}\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/unmountComponentAtNode.md"}},"2110":{"pageContent":"--\n\ntitle: createPortal\n\n--\n\n<Intro>\n\n`createPortal` lets you render some children into a different part of the DOM.\n\n```js\n\n<div>\n\n<SomeComponent />\n\n{createPortal(children, domNode)}\n\n</div>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `createPortal(children, domNode)` {/*createportal*/}\n\nTo create a portal, call `createPortal`, passing some JSX, and the DOM node where it should be rendered:\n\n```js\n\nimport { createPortal } from 'react-dom';\n\n// ...\n\n<div>\n\n<p>This child is placed in the parent div.</p>\n\n{createPortal(\n\n<p>This child is placed in the document body.</p>,\n\ndocument.body\n\n)}\n\n</div>\n\n```\n\n[See more examples below.](#usage)\n\nA portal only changes the physical placement of the DOM node. In every other way, the JSX you render into a portal acts as a child node of the React component that renders it. For example, the child can access the context provided by the parent tree, and events still bubble up from children to parents according to the React tree.\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2111":{"pageContent":"#### Parameters {/*parameters*/}\n\n`children`: Anything that can be rendered with React, such as a piece of JSX (e.g. `<div />` or `<SomeComponent />`), a [Fragment](/reference/react/Fragment) (`<>...</>`), a string or a number, or an array of these.\n\n`domNode`: Some DOM node, such as those returned by `document.getElementById()`. The node must already exist. Passing a different DOM node during an update will cause the portal content to be recreated.\n\n#### Returns {/*returns*/}\n\n`createPortal` returns a React node that can be included into JSX or returned from a React component. If React encounters it in the render output, it will place the provided `children` inside the provided `domNode`.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2112":{"pageContent":"#### Caveats {/*caveats*/}\n\nEvents from portals propagate according to the React tree rather than the DOM tree. For example, if you click inside a portal, and the portal is wrapped in `<div onClick>`, that `onClick` handler will fire. If this causes issues, either stop the event propagation from inside the portal, or move the portal itself up in the React tree.\n\n--\n\n## Usage {/*usage*/}\n\n### Rendering to a different part of the DOM {/*rendering-to-a-different-part-of-the-dom*/}\n\nPortals* let your components render some of their children into a different place in the DOM. This lets a part of your component \"escape\" from whatever containers it may be in. For example, a component can display a modal dialog or a tooltip that appears above and outside of the rest of the page.\n\nTo create a portal, render the result of `createPortal` with <CodeStep step={1}>some JSX</CodeStep> and the <CodeStep step={2}>DOM node where it should go</CodeStep>:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2113":{"pageContent":"To create a portal, render the result of `createPortal` with <CodeStep step={1}>some JSX</CodeStep> and the <CodeStep step={2}>DOM node where it should go</CodeStep>:\n\n```js [[1, 8, \"<p>This child is placed in the document body.</p>\"], [2, 9, \"document.body\"]]\n\nimport { createPortal } from 'react-dom';\n\nfunction MyComponent() {\n\nreturn (\n\n<div style={{ border: '2px solid black' }}>\n\n<p>This child is placed in the parent div.</p>\n\n{createPortal(\n\n<p>This child is placed in the document body.</p>,\n\ndocument.body\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\nReact will put the DOM nodes for <CodeStep step={1}>the JSX you passed</CodeStep> inside of the <CodeStep step={2}>DOM node you provided</CodeStep>. Without a portal, the second `<p>` would be placed inside the parent `<div>`, but the portal \"teleported\" it into the [`document.body`:](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)\n\n<Sandpack>\n\n```js\n\nimport { createPortal } from 'react-dom';\n\nexport default function MyComponent() {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2114":{"pageContent":"<Sandpack>\n\n```js\n\nimport { createPortal } from 'react-dom';\n\nexport default function MyComponent() {\n\nreturn (\n\n<div style={{ border: '2px solid black' }}>\n\n<p>This child is placed in the parent div.</p>\n\n{createPortal(\n\n<p>This child is placed in the document body.</p>,\n\ndocument.body\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNotice how the second paragraph visually appears outside the parent `<div>` with the border. If you inspect the DOM structure with developer tools, you can confirm that the second `<p>` got placed direcly into the `<body>`:\n\n```html {4-6,9}\n\n<body>\n\n<div id=\"root\">\n\n...\n\n<div style=\"border: 2px solid black\">\n\n<p>This child is placed inside the parent div.</p>\n\n</div>\n\n...\n\n</div>\n\n<p>This child is placed in the document body.</p>\n\n</body>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2115":{"pageContent":"```html {4-6,9}\n\n<body>\n\n<div id=\"root\">\n\n...\n\n<div style=\"border: 2px solid black\">\n\n<p>This child is placed inside the parent div.</p>\n\n</div>\n\n...\n\n</div>\n\n<p>This child is placed in the document body.</p>\n\n</body>\n\n```\n\nA portal only changes the physical placement of the DOM node. In every other way, the JSX you render into a portal acts as a child node of the React component that renders it. For example, the child can access the context provided by the parent tree, and events still bubble up from children to parents according to the React tree.\n\n--\n\n### Rendering a modal dialog with a portal {/*rendering-a-modal-dialog-with-a-portal*/}\n\nYou can use a portal to create a modal dialog that floats above the rest of the page, even if the component that summons the dialog is inside a container with `overflow: hidden` or other styles that interfere with the dialog.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2116":{"pageContent":"In this example, the two containers have styles that disrupt the modal dialog, but the one rendered into a portal is unaffected because, in the DOM, the modal is not contained within the elements rendered by its parents.\n\n<Sandpack>\n\n```js App.js active\n\nimport NoPortalExample from './NoPortalExample';\n\nimport PortalExample from './PortalExample';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<div className=\"clipping-container\">\n\n<NoPortalExample  />\n\n</div>\n\n<div className=\"clipping-container\">\n\n<PortalExample />\n\n</div>\n\n</>\n\n);\n\n}\n\n```\n\n```js NoPortalExample.js\n\nimport { useState } from 'react';\n\nimport ModalContent from './ModalContent.js';\n\nexport default function NoPortalExample() {\n\nconst [showModal, setShowModal] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShowModal(true)}>\n\nShow modal without a portal\n\n</button>\n\n{showModal && (\n\n<ModalContent onClose={() => setShowModal(false)} />\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```js PortalExample.js active\n\nimport { useState } from 'react';\n\nimport { createPortal } from 'react-dom';","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2117":{"pageContent":"</button>\n\n{showModal && (\n\n<ModalContent onClose={() => setShowModal(false)} />\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```js PortalExample.js active\n\nimport { useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport ModalContent from './ModalContent.js';\n\nexport default function PortalExample() {\n\nconst [showModal, setShowModal] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShowModal(true)}>\n\nShow modal using a portal\n\n</button>\n\n{showModal && createPortal(\n\n<ModalContent onClose={() => setShowModal(false)} />,\n\ndocument.body\n\n)}\n\n</>\n\n);\n\n}\n\n```\n\n```js ModalContent.js\n\nexport default function ModalContent({ onClose }) {\n\nreturn (\n\n<div className=\"modal\">\n\n<div>I'm a modal dialog</div>\n\n<button onClick={onClose}>Close</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n.clipping-container {\n\nposition: relative;\n\nborder: 1px solid #aaa;\n\nmargin-bottom: 12px;\n\npadding: 12px;\n\nwidth: 250px;\n\nheight: 80px;\n\noverflow: hidden;\n\n}\n\n.modal {\n\ndisplay: flex;\n\njustify-content: space-evenly;\n\nalign-items: center;\n\nbox-shadow: rgba(100, 100, 111, 0.3) 0px 7px 29px 0px;","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2118":{"pageContent":"padding: 12px;\n\nwidth: 250px;\n\nheight: 80px;\n\noverflow: hidden;\n\n}\n\n.modal {\n\ndisplay: flex;\n\njustify-content: space-evenly;\n\nalign-items: center;\n\nbox-shadow: rgba(100, 100, 111, 0.3) 0px 7px 29px 0px;\n\nbackground-color: white;\n\nborder: 2px solid rgb(240, 240, 240);\n\nborder-radius: 12px;\n\nposition:  absolute;\n\nwidth: 250px;\n\ntop: 70px;\n\nleft: calc(50% - 125px);\n\nbottom: 70px;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nIt's important to make sure that your app is accessible when using portals. For instance, you may need to manage keyboard focus so that the user can move the focus in and out of the portal in a natural way.\n\nFollow the [WAI-ARIA Modal Authoring Practices](https://www.w3.org/WAI/ARIA/apg/#dialog_modal) when creating modals. If you use a community package, ensure that it is accessible and follows these guidelines.\n\n</Pitfall>\n\n--\n\n### Rendering React components into non-React server markup {/*rendering-react-components-into-non-react-server-markup*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2119":{"pageContent":"</Pitfall>\n\n--\n\n### Rendering React components into non-React server markup {/*rendering-react-components-into-non-react-server-markup*/}\n\nPortals can be useful if your React root is only part of a static or server-rendered page that isn't built with React. For example, if your page is built with a server framework like Rails or PHP, you can create areas of interactivity within static areas such as sidebars. Compared with having [multiple separate React roots,](/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react) portals let you treat the app as a single React tree with shared state even though its parts render to different parts of the DOM.\n\n<Sandpack>\n\n```html index.html\n\n<!DOCTYPE html>\n\n<html>\n\n<head><title>My app</title></head>\n\n<body>\n\n<h1>Welcome to my hybrid app</h1>\n\n<div class=\"parent\">\n\n<div class=\"sidebar\">\n\nThis is server non-React markup\n\n<div id=\"sidebar-content\"></div>\n\n</div>\n\n<div id=\"root\"></div>\n\n</div>\n\n</body>\n\n</html>\n\n```\n\n```js index.js\n\nimport { StrictMode } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2120":{"pageContent":"<div class=\"sidebar\">\n\nThis is server non-React markup\n\n<div id=\"sidebar-content\"></div>\n\n</div>\n\n<div id=\"root\"></div>\n\n</div>\n\n</body>\n\n</html>\n\n```\n\n```js index.js\n\nimport { StrictMode } from 'react';\n\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n\n<StrictMode>\n\n<App />\n\n</StrictMode>\n\n);\n\n```\n\n```js App.js active\n\nimport { createPortal } from 'react-dom';\n\nconst sidebarContentEl = document.getElementById('sidebar-content');\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<MainContent />\n\n{createPortal(\n\n<SidebarContent />,\n\nsidebarContentEl\n\n)}\n\n</>\n\n);\n\n}\n\nfunction MainContent() {\n\nreturn <p>This part is rendered by React</p>;\n\n}\n\nfunction SidebarContent() {\n\nreturn <p>This part is also rendered by React!</p>;\n\n}\n\n```\n\n```css\n\n.parent {\n\ndisplay: flex;\n\nflex-direction: row;\n\n}\n\n#root {\n\nmargin-top: 12px;\n\n}\n\n.sidebar {\n\npadding:  12px;\n\nbackground-color: #eee;\n\nwidth: 200px;\n\nheight: 200px;\n\nmargin-right: 12px;\n\n}\n\n#sidebar-content {\n\nmargin-top: 18px;\n\ndisplay: block;","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2121":{"pageContent":"flex-direction: row;\n\n}\n\n#root {\n\nmargin-top: 12px;\n\n}\n\n.sidebar {\n\npadding:  12px;\n\nbackground-color: #eee;\n\nwidth: 200px;\n\nheight: 200px;\n\nmargin-right: 12px;\n\n}\n\n#sidebar-content {\n\nmargin-top: 18px;\n\ndisplay: block;\n\nbackground-color: white;\n\n}\n\np {\n\nmargin: 0;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Rendering React components into non-React DOM nodes {/*rendering-react-components-into-non-react-dom-nodes*/}\n\nYou can also use a portal to manage the content of a DOM node that's managed outside of React. For example, suppose you're integrating with a non-React map widget and you want to render React content inside a popup.\n\nTo do this, declare a `popupContainer` state variable to store the DOM node you're going to render into:\n\n```js\n\nconst [popupContainer, setPopupContainer] = useState(null);\n\n```\n\nWhen you initialize the third-party widget, store the DOM node returned by the widget so you can render into it:\n\n```js {5-6}\n\nuseEffect(() => {\n\nif (mapRef.current === null) {\n\nconst map = createMapWidget(containerRef.current);\n\nmapRef.current = map;","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2122":{"pageContent":"```js {5-6}\n\nuseEffect(() => {\n\nif (mapRef.current === null) {\n\nconst map = createMapWidget(containerRef.current);\n\nmapRef.current = map;\n\nconst popupDiv = addPopupToMapWidget(map);\n\nsetPopupContainer(popupDiv);\n\n}\n\n}, []);\n\n```\n\nThis lets you use `createPortal` to render React content into `popupContainer` once it becomes available:\n\n```js {3-6}\n\nreturn (\n\n<div style={{ width: 250, height: 250 }} ref={containerRef}>\n\n{popupContainer !== null && createPortal(\n\n<p>Hello from React!</p>,\n\npopupContainer\n\n)}\n\n</div>\n\n);\n\n```\n\nHere is a complete example you can play with:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"leaflet\": \"1.9.1\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"remarkable\": \"2.0.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { useRef, useEffect, useState } from 'react';\n\nimport { createPortal } from 'react-dom';","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2123":{"pageContent":"\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { useRef, useEffect, useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport { createMapWidget, addPopupToMapWidget } from './map-widget.js';\n\nexport default function Map() {\n\nconst containerRef = useRef(null);\n\nconst mapRef = useRef(null);\n\nconst [popupContainer, setPopupContainer] = useState(null);\n\nuseEffect(() => {\n\nif (mapRef.current === null) {\n\nconst map = createMapWidget(containerRef.current);\n\nmapRef.current = map;\n\nconst popupDiv = addPopupToMapWidget(map);\n\nsetPopupContainer(popupDiv);\n\n}\n\n}, []);\n\nreturn (\n\n<div style={{ width: 250, height: 250 }} ref={containerRef}>\n\n{popupContainer !== null && createPortal(\n\n<p>Hello from React!</p>,\n\npopupContainer\n\n)}\n\n</div>\n\n);\n\n}\n\n```\n\n```js map-widget.js\n\nimport 'leaflet/dist/leaflet.css';\n\nimport * as L from 'leaflet';\n\nexport function createMapWidget(containerDomNode) {\n\nconst map = L.map(containerDomNode);\n\nmap.setView([0, 0], 0);","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2124":{"pageContent":");\n\n}\n\n```\n\n```js map-widget.js\n\nimport 'leaflet/dist/leaflet.css';\n\nimport * as L from 'leaflet';\n\nexport function createMapWidget(containerDomNode) {\n\nconst map = L.map(containerDomNode);\n\nmap.setView([0, 0], 0);\n\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\nmaxZoom: 19,\n\nattribution: '© OpenStreetMap'\n\n}).addTo(map);\n\nreturn map;\n\n}\n\nexport function addPopupToMapWidget(map) {\n\nconst popupDiv = document.createElement('div');\n\nL.popup()\n\n.setLatLng([0, 0])\n\n.setContent(popupDiv)\n\n.openOn(map);\n\nreturn popupDiv;\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/createPortal.md"}},"2125":{"pageContent":"--\n\ntitle: Describing the UI\n\n--\n\n<Intro>\n\nReact is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable *components.* From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you'll learn to create, customize, and conditionally display React components.\n\n</Intro>\n\n<YouWillLearn isChapter={true}>\n\n[How to write your first React component](/learn/your-first-component)\n\n[When and how to create multi-component files](/learn/importing-and-exporting-components)\n\n[How to add markup to JavaScript with JSX](/learn/writing-markup-with-jsx)\n\n[How to use curly braces with JSX to access JavaScript functionality from your components](/learn/javascript-in-jsx-with-curly-braces)\n\n[How to configure components with props](/learn/passing-props-to-a-component)\n\n[How to conditionally render components](/learn/conditional-rendering)","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2126":{"pageContent":"[How to configure components with props](/learn/passing-props-to-a-component)\n\n[How to conditionally render components](/learn/conditional-rendering)\n\n[How to render multiple components at a time](/learn/rendering-lists)\n\n[How to avoid confusing bugs by keeping components pure](/learn/keeping-components-pure)\n\n</YouWillLearn>\n\n## Your first component {/*your-first-component*/}\n\nReact applications are built from isolated pieces of UI called *components*. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a `Gallery` component rendering three `Profile` components:\n\n<Sandpack>\n\n```js\n\nfunction Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/MK3eW3As.jpg\"\n\nalt=\"Katherine Johnson\"\n\n/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2127":{"pageContent":"/>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; height: 90px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/your-first-component\">\n\nRead **[Your First Component](/learn/your-first-component)** to learn how to declare and use React components.\n\n</LearnMore>\n\n## Importing and exporting components {/*importing-and-exporting-components*/}\n\nYou can declare many components in one file, but large files can get difficult to navigate. To solve this, you can *export* a component into its own file, and then *import* that component from another file:\n\n<Sandpack>\n\n```js App.js hidden\n\nimport Gallery from './Gallery.js';\n\nexport default function App() {\n\nreturn (\n\n<Gallery />\n\n);\n\n}\n\n```\n\n```js Gallery.js active\n\nimport Profile from './Profile.js';\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```js Profile.js","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2128":{"pageContent":"import Profile from './Profile.js';\n\nexport default function Gallery() {\n\nreturn (\n\n<section>\n\n<h1>Amazing scientists</h1>\n\n<Profile />\n\n<Profile />\n\n<Profile />\n\n</section>\n\n);\n\n}\n\n```\n\n```js Profile.js\n\nexport default function Profile() {\n\nreturn (\n\n<img\n\nsrc=\"https://i.imgur.com/QIrZWGIs.jpg\"\n\nalt=\"Alan L. Hart\"\n\n/>\n\n);\n\n}\n\n```\n\n```css\n\nimg { margin: 0 10px 10px 0; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/importing-and-exporting-components\">\n\nRead **[Importing and Exporting Components](/learn/importing-and-exporting-components)** to learn how to split components into their own files.\n\n</LearnMore>\n\n## Writing markup with JSX {/*writing-markup-with-jsx*/}\n\nEach React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\n\nIf we paste existing HTML markup into a React component, it won't always work:\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2129":{"pageContent":"If we paste existing HTML markup into a React component, it won't always work:\n\n<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nreturn (\n\n// This doesn't quite work!\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclass=\"photo\"\n\n>\n\n<ul>\n\n<li>Invent new traffic lights\n\n<li>Rehearse a movie scene\n\n<li>Improve spectrum technology\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 90px; }\n\n```\n\n</Sandpack>\n\nIf you have existing HTML like this, you can fix it using a [converter](https://transform.tools/html-to-jsx):\n\n<Sandpack>\n\n```js\n\nexport default function TodoList() {\n\nreturn (\n\n<>\n\n<h1>Hedy Lamarr's Todos</h1>\n\n<img\n\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\n\nalt=\"Hedy Lamarr\"\n\nclassName=\"photo\"\n\n/>\n\n<ul>\n\n<li>Invent new traffic lights</li>\n\n<li>Rehearse a movie scene</li>\n\n<li>Improve spectrum technology</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 90px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/writing-markup-with-jsx\">\n\nRead **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2130":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```css\n\nimg { height: 90px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/writing-markup-with-jsx\">\n\nRead **[Writing Markup with JSX](/learn/writing-markup-with-jsx)** to learn how to write valid JSX.\n\n</LearnMore>\n\n## JavaScript in JSX with curly braces {/*javascript-in-jsx-with-curly-braces*/}\n\nJSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to \"open a window\" to JavaScript:\n\n<Sandpack>\n\n```js\n\nconst person = {\n\nname: 'Gregorio Y. Zara',\n\ntheme: {\n\nbackgroundColor: 'black',\n\ncolor: 'pink'\n\n}\n\n};\n\nexport default function TodoList() {\n\nreturn (\n\n<div style={person.theme}>\n\n<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2131":{"pageContent":"<h1>{person.name}'s Todos</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/7vQD0fPs.jpg\"\n\nalt=\"Gregorio Y. Zara\"\n\n/>\n\n<ul>\n\n<li>Improve the videophone</li>\n\n<li>Prepare aeronautics lectures</li>\n\n<li>Work on the alcohol-fuelled engine</li>\n\n</ul>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nbody { padding: 0; margin: 0 }\n\nbody > div > div { padding: 20px; }\n\n.avatar { border-radius: 50%; height: 90px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/javascript-in-jsx-with-curly-braces\">\n\nRead **[JavaScript in JSX with Curly Braces](/learn/javascript-in-jsx-with-curly-braces)** to learn how to access JavaScript data from JSX.\n\n</LearnMore>\n\n## Passing props to a component {/*passing-props-to-a-component*/}\n\nReact components use *props* to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2132":{"pageContent":"<Sandpack>\n\n```js\n\nimport { getImageUrl } from './utils.js'\n\nexport default function Profile() {\n\nreturn (\n\n<Card>\n\n<Avatar\n\nsize={100}\n\nperson={{\n\nname: 'Katsuko Saruhashi',\n\nimageId: 'YfeOqp2'\n\n}}\n\n/>\n\n</Card>\n\n);\n\n}\n\nfunction Avatar({ person, size }) {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\nfunction Card({ children }) {\n\nreturn (\n\n<div className=\"card\">\n\n{children}\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.card {\n\nwidth: fit-content;\n\nmargin: 5px;\n\npadding: 5px;\n\nfont-size: 20px;\n\ntext-align: center;\n\nborder: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.avatar {\n\nmargin: 20px;\n\nborder-radius: 50%;\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/passing-props-to-a-component\">\n\nRead **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.\n\n</LearnMore>\n\n## Conditional rendering {/*conditional-rendering*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2133":{"pageContent":"Read **[Passing Props to a Component](/learn/passing-props-to-a-component)** to learn how to pass and read props.\n\n</LearnMore>\n\n## Conditional rendering {/*conditional-rendering*/}\n\nYour components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like `if` statements, `&&`, and `? :` operators.\n\nIn this example, the JavaScript `&&` operator is used to conditionally render a checkmark:\n\n<Sandpack>\n\n```js\n\nfunction Item({ name, isPacked }) {\n\nreturn (\n\n<li className=\"item\">\n\n{name} {isPacked && '✔'}\n\n</li>\n\n);\n\n}\n\nexport default function PackingList() {\n\nreturn (\n\n<section>\n\n<h1>Sally Ride's Packing List</h1>\n\n<ul>\n\n<Item\n\nisPacked={true}\n\nname=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/conditional-rendering\">","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2134":{"pageContent":"name=\"Space suit\"\n\n/>\n\n<Item\n\nisPacked={true}\n\nname=\"Helmet with a golden leaf\"\n\n/>\n\n<Item\n\nisPacked={false}\n\nname=\"Photo of Tam\"\n\n/>\n\n</ul>\n\n</section>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/conditional-rendering\">\n\nRead **[Conditional Rendering](/learn/conditional-rendering)** to learn the different ways to render content conditionally.\n\n</LearnMore>\n\n## Rendering lists {/*rendering-lists*/}\n\nYou will often want to display multiple similar components from a collection of data. You can use JavaScript's `filter()` and `map()` with React to filter and transform your array of data into an array of components.\n\nFor each array item, you will need to specify a `key`. Usually, you will want to use an ID from the database as a `key`. Keys let React keep track of each item's place in the list even if the list changes.\n\n<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n\nconst listItems = people.map(person =>\n\n<li key={person.id}>\n\n<img","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2135":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { people } from './data.js';\n\nimport { getImageUrl } from './utils.js';\n\nexport default function List() {\n\nconst listItems = people.map(person =>\n\n<li key={person.id}>\n\n<img\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\n/>\n\n<p>\n\n<b>{person.name}:</b>\n\n{' ' + person.profession + ' '}\n\nknown for {person.accomplishment}\n\n</p>\n\n</li>\n\n);\n\nreturn (\n\n<article>\n\n<h1>Scientists</h1>\n\n<ul>{listItems}</ul>\n\n</article>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const people = [{\n\nid: 0,\n\nname: 'Creola Katherine Johnson',\n\nprofession: 'mathematician',\n\naccomplishment: 'spaceflight calculations',\n\nimageId: 'MK3eW3A'\n\n}, {\n\nid: 1,\n\nname: 'Mario José Molina-Pasquel Henríquez',\n\nprofession: 'chemist',\n\naccomplishment: 'discovery of Arctic ozone hole',\n\nimageId: 'mynHUSa'\n\n}, {\n\nid: 2,\n\nname: 'Mohammad Abdus Salam',\n\nprofession: 'physicist',\n\naccomplishment: 'electromagnetism theory',\n\nimageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2136":{"pageContent":"imageId: 'bE7W1ji'\n\n}, {\n\nid: 3,\n\nname: 'Percy Lavon Julian',\n\nprofession: 'chemist',\n\naccomplishment: 'pioneering cortisone drugs, steroids and birth control pills',\n\nimageId: 'IOjWm71'\n\n}, {\n\nid: 4,\n\nname: 'Subrahmanyan Chandrasekhar',\n\nprofession: 'astrophysicist',\n\naccomplishment: 'white dwarf star mass calculations',\n\nimageId: 'lrWQx8l'\n\n}];\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\n's.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nul { list-style-type: none; padding: 0px 10px; }\n\nli {\n\nmargin-bottom: 10px;\n\ndisplay: grid;\n\ngrid-template-columns: 1fr 1fr;\n\nalign-items: center;\n\n}\n\nimg { width: 100px; height: 100px; border-radius: 50%; }\n\nh1 { font-size: 22px; }\n\nh2 { font-size: 20px; }\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/rendering-lists\">\n\nRead **[Rendering Lists](/learn/rendering-lists)** to learn how to render a list of components, and how to choose a key.\n\n</LearnMore>\n\n## Keeping components pure {/*keeping-components-pure*/}\n\nSome JavaScript functions are *pure.* A pure function:","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2137":{"pageContent":"</LearnMore>\n\n## Keeping components pure {/*keeping-components-pure*/}\n\nSome JavaScript functions are *pure.* A pure function:\n\n**Minds its own business.** It does not change any objects or variables that existed before it was called.\n\n**Same inputs, same output.** Given the same inputs, a pure function should always return the same result.\n\nBy strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:\n\n<Sandpack>\n\n```js\n\nlet guest = 0;\n\nfunction Cup() {\n\n// Bad: changing a preexisting variable!\n\nguest = guest + 1;\n\nreturn <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaSet() {\n\nreturn (\n\n<>\n\n<Cup />\n\n<Cup />\n\n<Cup />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nYou can make this component pure by passing a prop instead of modifying a preexisting variable:\n\n<Sandpack>\n\n```js\n\nfunction Cup({ guest }) {\n\nreturn <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaSet() {\n\nreturn (\n\n<>","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2138":{"pageContent":"<Sandpack>\n\n```js\n\nfunction Cup({ guest }) {\n\nreturn <h2>Tea cup for guest #{guest}</h2>;\n\n}\n\nexport default function TeaSet() {\n\nreturn (\n\n<>\n\n<Cup guest={1} />\n\n<Cup guest={2} />\n\n<Cup guest={3} />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<LearnMore path=\"/learn/keeping-components-pure\">\n\nRead **[Keeping Components Pure](/learn/keeping-components-pure)** to learn how to write components as pure, predictable functions.\n\n</LearnMore>\n\n## What's next? {/*whats-next*/}\n\nHead over to [Your First Component](/learn/your-first-component) to start reading this chapter page by page!\n\nOr, if you're already familiar with these topics, why not read about [Adding Interactivity](/learn/adding-interactivity)?","metadata":{"source":"reactjs.org/beta/src/content/learn/describing-the-ui.md"}},"2139":{"pageContent":"--\n\ntitle: render\n\n--\n\n<Deprecated>\n\nThis API will be removed in a future major version of React.\n\nIn React 18, `render` was replaced by [`createRoot`.](/reference/react-dom/client/createRoot) Using `render` in React 18 will warn that your app will behave as if it’s running React 17. Learn more [here.](/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis)\n\n</Deprecated>\n\n<Intro>\n\n`render` renders a piece of [JSX](/learn/writing-markup-with-jsx) (\"React node\") into a browser DOM node.\n\n```js\n\nrender(reactNode, domNode, callback?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `render(reactNode, domNode, callback?)` {/*render*/}\n\nCall `render` to display a React component inside a browser DOM element.\n\n```js\n\nimport { render } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n\n```\n\nReact will display `<App />` in the `domNode`, and take over managing the DOM inside it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2140":{"pageContent":"import { render } from 'react-dom';\n\nconst domNode = document.getElementById('root');\n\nrender(<App />, domNode);\n\n```\n\nReact will display `<App />` in the `domNode`, and take over managing the DOM inside it.\n\nAn app fully built with React will usually only have one `render` call with its root component.  A page that uses \"sprinkles\" of React for parts of the page may have as many `render` calls as needed.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`reactNode`: A *React node* that you want to display. This will usually be a piece of JSX like `<App />`, but you can also pass a React element constructed with [`createElement()`](/reference/react/createElement), a string, a number, `null`, or `undefined`.\n\n`domNode`: A [DOM element.](https://developer.mozilla.org/en-US/docs/Web/API/Element) React will display the `reactNode` you pass inside this DOM element. From this moment, React will manage the DOM inside the `domNode` and update it when your React tree changes.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2141":{"pageContent":"**optional** `callback`: A function. If passed, React will call it after your component is placed into the DOM.\n\n#### Returns {/*returns*/}\n\n`render` usually returns `null`. However, if the `reactNode` you pass is a *class component*, then it will return an instance of that component.\n\n#### Caveats {/*caveats*/}\n\nIn React 18, `render` was replaced by [`createRoot`.](/reference/react-dom/client/createRoot) Please use `createRoot` for React 18 and beyond.\n\nThe first time you call `render`, React will clear all the existing HTML content inside the `domNode` before rendering the React component into it. If your `domNode` contains HTML generated by React on the server or during the build, use [`hydrate()`](/reference/react-dom/hydrate) instead, which attaches the event handlers to the existing HTML.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2142":{"pageContent":"If you call `render` on the same `domNode` more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by [\"matching it up\"](/learn/preserving-and-resetting-state) with the previously rendered tree. Calling `render` on the same `domNode` again is similar to calling the [`set` function](/reference/react/useState#setstate) on the root component: React avoids unnecessary DOM updates.\n\nIf your app is fully built with React, you'll likely have only one `render` call in your app. (If you use a framework, it might do this call for you.) When you want to render a piece of JSX in a different part of the DOM tree that isn't a child of your component (for example, a modal or a tooltip), use [`createPortal`](/reference/react-dom/createPortal) instead of `render`.\n\n--\n\n## Usage {/*usage*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2143":{"pageContent":"--\n\n## Usage {/*usage*/}\n\nCall `render` to display a <CodeStep step={1}>React component</CodeStep> inside a <CodeStep step={2}>browser DOM node</CodeStep>.\n\n```js [[1, 4, \"<App />\"], [2, 4, \"document.getElementById('root')\"]]\n\nimport {render} from 'react-dom';\n\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n\n````\n\n### Rendering the root component {/*rendering-the-root-component*/}\n\nIn apps fully built with React, **you will usually only do this once at startup**--to render the \"root\" component.\n\n<Sandpack>\n\n```js index.js active\n\nimport './styles.css';\n\nimport {render} from 'react-dom';\n\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n\n```\n\n```js App.js\n\nexport default function App() {\n\nreturn <h1>Hello, world!</h1>;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2144":{"pageContent":"import {render} from 'react-dom';\n\nimport App from './App.js';\n\nrender(<App />, document.getElementById('root'));\n\n```\n\n```js App.js\n\nexport default function App() {\n\nreturn <h1>Hello, world!</h1>;\n\n}\n\n```\n\n</Sandpack>\n\nUsually you shouldn't need to call `render` again or to call it in more places. From this point on, React will be managing the DOM of your application. If you want to update the UI, your components can do this by [using state.](/reference/react/useState)\n\n--\n\n### Rendering multiple roots {/*rendering-multiple-roots*/}\n\nIf your page [isn't fully built with React](/learn/add-react-to-a-website), call `render` for each top-level piece of UI managed by React.\n\n<Sandpack>\n\n```html public/index.html\n\n<nav id=\"navigation\"></nav>\n\n<main>\n\n<p>This paragraph is not rendered by React (open index.html to verify).</p>\n\n<section id=\"comments\"></section>\n\n</main>\n\n```\n\n```js index.js active\n\nimport './styles.css';\n\nimport { render } from 'react-dom';\n\nimport { Comments, Navigation } from './Components.js';\n\nrender(\n\n<Navigation />,","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2145":{"pageContent":"<section id=\"comments\"></section>\n\n</main>\n\n```\n\n```js index.js active\n\nimport './styles.css';\n\nimport { render } from 'react-dom';\n\nimport { Comments, Navigation } from './Components.js';\n\nrender(\n\n<Navigation />,\n\ndocument.getElementById('navigation')\n\n);\n\nrender(\n\n<Comments />,\n\ndocument.getElementById('comments')\n\n);\n\n```\n\n```js Components.js\n\nexport function Navigation() {\n\nreturn (\n\n<ul>\n\n<NavLink href=\"/\">Home</NavLink>\n\n<NavLink href=\"/about\">About</NavLink>\n\n</ul>\n\n);\n\n}\n\nfunction NavLink({ href, children }) {\n\nreturn (\n\n<li>\n\n<a href={href}>{children}</a>\n\n</li>\n\n);\n\n}\n\nexport function Comments() {\n\nreturn (\n\n<>\n\n<h2>Comments</h2>\n\n<Comment text=\"Hello!\" author=\"Sophie\" />\n\n<Comment text=\"How are you?\" author=\"Sunil\" />\n\n</>\n\n);\n\n}\n\nfunction Comment({ text, author }) {\n\nreturn (\n\n<p>{text} — <i>{author}</i></p>\n\n);\n\n}\n\n```\n\n```css\n\nnav ul { padding: 0; margin: 0; }\n\nnav ul li { display: inline-block; margin-right: 20px; }\n\n```\n\n</Sandpack>\n\nYou can destroy the rendered trees with [`unmountComponentAtNode()`.](/reference/react-dom/unmountComponentAtNode)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2146":{"pageContent":"nav ul li { display: inline-block; margin-right: 20px; }\n\n```\n\n</Sandpack>\n\nYou can destroy the rendered trees with [`unmountComponentAtNode()`.](/reference/react-dom/unmountComponentAtNode)\n\n--\n\n### Updating the rendered tree {/*updating-the-rendered-tree*/}\n\nYou can call `render` more than once on the same DOM node. As long as the component tree structure matches up with what was previously rendered, React will [preserve the state.](/learn/preserving-and-resetting-state) Notice how you can type in the input, which means that the updates from repeated `render` calls every second in this example are not destructive:\n\n<Sandpack>\n\n```js index.js active\n\nimport {render} from 'react-dom';\n\nimport './styles.css';\n\nimport App from './App.js';\n\nlet i = 0;\n\nsetInterval(() => {\n\nrender(\n\n<App counter={i} />,\n\ndocument.getElementById('root')\n\n);\n\ni++;\n\n}, 1000);\n\n```\n\n```js App.js\n\nexport default function App({counter}) {\n\nreturn (\n\n<>\n\n<h1>Hello, world! {counter}</h1>\n\n<input placeholder=\"Type something here\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2147":{"pageContent":");\n\ni++;\n\n}, 1000);\n\n```\n\n```js App.js\n\nexport default function App({counter}) {\n\nreturn (\n\n<>\n\n<h1>Hello, world! {counter}</h1>\n\n<input placeholder=\"Type something here\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIt is uncommon to call `render` multiple times. Usually, you'll [update state](/reference/react/useState) inside one of the components instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/render.md"}},"2148":{"pageContent":"--\n\ntitle: React DOM APIs\n\n--\n\n<Intro>\n\nThe `react-dom` package contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native.\n\n</Intro>\n\n--\n\n## APIs {/*apis*/}\n\nThese APIs can be imported from your components. They are rarely used:\n\n[`createPortal`](/reference/react-dom/createPortal) lets you render child components in a different part of the DOM tree.\n\n[`flushSync`](/reference/react-dom/flushSync) lets you force React to flush a state update and update the DOM synchronously.\n\n--\n\n## Entry points {/*entry-points*/}\n\nThe `react-dom` package provides two additional entry points:\n\n[`react-dom/client`](/reference/react-dom/client) contains APIs to render React components on the client (in the browser).\n\n[`react-dom/server`](/reference/react-dom/server) contains APIs to render React components on the server.\n\n--\n\n## Deprecated APIs {/*deprecated-apis*/}\n\n<Deprecated>\n\nThese APIs will be removed in a future major version of React.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/index.md"}},"2149":{"pageContent":"--\n\n## Deprecated APIs {/*deprecated-apis*/}\n\n<Deprecated>\n\nThese APIs will be removed in a future major version of React.\n\n</Deprecated>\n\n[`findDOMNode`](/reference/react-dom/findDOMNode) finds the closest DOM node corresponding to a class component instance.\n\n[`hydrate`](/reference/react-dom/hydrate) mounts a tree into the DOM created from server HTML. Deprecated in favor of [`hydrateRoot`](/reference/react-dom/client/hydrateRoot).\n\n[`render`](/reference/react-dom/render) mounts a tree into the DOM. Deprecated in favor of [`createRoot`](/reference/react-dom/client/createRoot).\n\n[`unmountComponentAtNode`](/reference/react-dom/unmountComponentAtNode) unmounts a tree from the DOM. Deprecated in favor of [`root.unmount()`.](/reference/react-dom/client/createRoot#root-unmount)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/index.md"}},"2150":{"pageContent":"--\n\ntitle: findDOMNode\n\n--\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. [See the alternatives.](#alternatives)\n\n</Deprecated>\n\n<Intro>\n\n`findDOMNode` finds the browser DOM node for a React [class component](/reference/react/Component) instance.\n\n```js\n\nconst domNode = findDOMNode(componentInstance)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `findDOMNode(componentInstance)` {/*finddomnode*/}\n\nCall `findDOMNode` to find the browser DOM node for a given React [class component](/reference/react/Component) instance.\n\n```js\n\nimport { findDOMNode } from 'react-dom';\n\nconst domNode = findDOMNode(componentInstance);\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`componentInstance`: An instance of the [`Component`](/reference/react/Component) subclass. For example, `this` inside a class component.\n\n#### Returns {/*returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2151":{"pageContent":"#### Parameters {/*parameters*/}\n\n`componentInstance`: An instance of the [`Component`](/reference/react/Component) subclass. For example, `this` inside a class component.\n\n#### Returns {/*returns*/}\n\n`findDOMNode` returns the first closest browser DOM node within the given `componentInstance`. When a component renders to `null`, or renders `false`, `findDOMNode` returns `null`. When a component renders to a string, `findDOMNode` returns a text DOM node containing that value.\n\n#### Caveats {/*caveats*/}\n\nA component may return an array or a [Fragment](/reference/react/Fragment) with multiple children. In that case `findDOMNode`, will return the DOM node corresponding to the first non-empty child.\n\n`findDOMNode` only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling `findDOMNode()` in `render()` on a component that has yet to be created), an exception will be thrown.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2152":{"pageContent":"`findDOMNode` only returns the result at the time of your call. If a child component renders a different node later, there is no way for you to be notified of this change.\n\n`findDOMNode` accepts a class component instance, so it can't be used with function components.\n\n--\n\n## Usage {/*usage*/}\n\n### Finding the root DOM node of a class component {/*finding-the-root-dom-node-of-a-class-component*/}\n\nCall `findDOMNode` with a [class component](/reference/react/Component) instance (usually, `this`) to find the DOM node it has rendered.\n\n```js {3}\n\nclass AutoselectingInput extends Component {\n\ncomponentDidMount() {\n\nconst input = findDOMNode(this);\n\ninput.select()\n\n}\n\nrender() {\n\nreturn <input defaultValue=\"Hello\" />\n\n}\n\n}\n\n```\n\nHere, the `input` variable will be set to the `<input>` DOM element. This lets you do something with it. For example, when clicking \"Show example\" below mounts the input, [`input.select()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select) selects all text in the input:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2153":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { Component } from 'react';\n\nimport { findDOMNode } from 'react-dom';\n\nclass AutoselectingInput extends Component {\n\ncomponentDidMount() {\n\nconst input = findDOMNode(this);\n\ninput.select()\n\n}\n\nrender() {\n\nreturn <input defaultValue=\"Hello\" />\n\n}\n\n}\n\nexport default AutoselectingInput;\n\n```\n\n</Sandpack>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Reading component's own DOM node from a ref {/*reading-components-own-dom-node-from-a-ref*/}\n\nCode using `findDOMNode` is fragile because the connection between the JSX node and the code manipulating the corresponding DOM node is not explicit. For example, try wrapping `<input />` from this example into a `<div>`:\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2154":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { Component } from 'react';\n\nimport { findDOMNode } from 'react-dom';\n\nclass AutoselectingInput extends Component {\n\ncomponentDidMount() {\n\nconst input = findDOMNode(this);\n\ninput.select()\n\n}\n\nrender() {\n\nreturn <input defaultValue=\"Hello\" />\n\n}\n\n}\n\nexport default AutoselectingInput;\n\n```\n\n</Sandpack>\n\nThis will break the code because now, `findDOMNode(this)` finds the `<div>` DOM node, but the code expects an `<input>` DOM node. To avoid these kinds of problems, use [`createRef`](/reference/react/createRef) to manage a specific DOM node.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2155":{"pageContent":"In this example, `findDOMNode` is no longer used. Instead, `inputRef = createRef(null)` is defined as an instance field on the class. To read the DOM node from it, you can use `this.inputRef.current`. To attach it to the JSX, you render `<input ref={this.inputRef} />`. You have connected the code using the DOM node to its JSX:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { createRef, Component } from 'react';\n\nclass AutoselectingInput extends Component {\n\ninputRef = createRef(null);\n\ncomponentDidMount() {\n\nconst input = this.inputRef.current;\n\ninput.select()\n\n}\n\nrender() {\n\nreturn (\n\n<input ref={this.inputRef} defaultValue=\"Hello\" />\n\n);\n\n}\n\n}\n\nexport default AutoselectingInput;\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2156":{"pageContent":"componentDidMount() {\n\nconst input = this.inputRef.current;\n\ninput.select()\n\n}\n\nrender() {\n\nreturn (\n\n<input ref={this.inputRef} defaultValue=\"Hello\" />\n\n);\n\n}\n\n}\n\nexport default AutoselectingInput;\n\n```\n\n</Sandpack>\n\nIn modern React without class components, the equivalent code would call [`useRef`](/reference/react/useRef) instead:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { useRef, useEffect } from 'react';\n\nexport default function AutoselectingInput() {\n\nconst inputRef = useRef(null);\n\nuseEffect(() => {\n\nconst input = inputRef.current;\n\ninput.select();\n\n}, []);\n\nreturn <input ref={inputRef} defaultValue=\"Hello\" />\n\n}\n\n```\n\n</Sandpack>\n\n[Read more about manipulating the DOM with refs.](/learn/manipulating-the-dom-with-refs)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2157":{"pageContent":"input.select();\n\n}, []);\n\nreturn <input ref={inputRef} defaultValue=\"Hello\" />\n\n}\n\n```\n\n</Sandpack>\n\n[Read more about manipulating the DOM with refs.](/learn/manipulating-the-dom-with-refs)\n\n--\n\n### Reading a child component's DOM node from a forwarded ref {/*reading-a-child-components-dom-node-from-a-forwarded-ref*/}\n\nIn this example, `findDOMNode(this)` finds a DOM node that belongs to another component. The `AutoselectingInput` renders `MyInput`, which is your own component that renders a browser `<input>`.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { Component } from 'react';\n\nimport { findDOMNode } from 'react-dom';\n\nimport MyInput from './MyInput.js';\n\nclass AutoselectingInput extends Component {","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2158":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { Component } from 'react';\n\nimport { findDOMNode } from 'react-dom';\n\nimport MyInput from './MyInput.js';\n\nclass AutoselectingInput extends Component {\n\ncomponentDidMount() {\n\nconst input = findDOMNode(this);\n\ninput.select()\n\n}\n\nrender() {\n\nreturn <MyInput />;\n\n}\n\n}\n\nexport default AutoselectingInput;\n\n```\n\n```js MyInput.js\n\nexport default function MyInput() {\n\nreturn <input defaultValue=\"Hello\" />;\n\n}\n\n```\n\n</Sandpack>\n\nNotice that calling `findDOMNode(this)` inside `AutoselectingInput` still gives you the DOM `<input>`--even though the JSX for this `<input>` is hidden inside the `MyInput` component. This seems convenient for the above example, but it leads to fragile code. Imagine that you wanted to edit `MyInput` later and add a wrapper `<div>` around it. This would break the code of `AutoselectingInput` (which expects to find an `<input>` DOM node).\n\nTo replace `findDOMNode` in this example, the two components need to coordinate:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2159":{"pageContent":"To replace `findDOMNode` in this example, the two components need to coordinate:\n\n1. `AutoSelectingInput` should declare a ref, like [in the earlier example](#reading-components-own-dom-node-from-a-ref), and pass it to `<MyInput>`.\n\n2. `MyInput` should be declared with [`forwardRef`](/reference/react/forwardRef) to read the passed ref, and pass it down to the `<input>` node.\n\nThis version does that, so it no longer needs `findDOMNode`:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { createRef, Component } from 'react';\n\nimport MyInput from './MyInput.js';\n\nclass AutoselectingInput extends Component {\n\ninputRef = createRef(null);\n\ncomponentDidMount() {\n\nconst input = this.inputRef.current;\n\ninput.select()\n\n}\n\nrender() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2160":{"pageContent":"import MyInput from './MyInput.js';\n\nclass AutoselectingInput extends Component {\n\ninputRef = createRef(null);\n\ncomponentDidMount() {\n\nconst input = this.inputRef.current;\n\ninput.select()\n\n}\n\nrender() {\n\nreturn (\n\n<MyInput ref={this.inputRef} />\n\n);\n\n}\n\n}\n\nexport default AutoselectingInput;\n\n```\n\n```js MyInput.js\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nreturn <input ref={ref} defaultValue=\"Hello\" />;\n\n});\n\nexport default MyInput;\n\n```\n\n</Sandpack>\n\nHere is how this code would look like with function components instead of classes:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AutoselectingInput from './AutoselectingInput.js';\n\nexport default function App() {\n\nconst [show, setShow] = useState(false);\n\nreturn (\n\n<>\n\n<button onClick={() => setShow(true)}>\n\nShow example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { useRef, useEffect } from 'react';\n\nimport MyInput from './MyInput.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2161":{"pageContent":"Show example\n\n</button>\n\n<hr />\n\n{show && <AutoselectingInput />}\n\n</>\n\n);\n\n}\n\n```\n\n```js AutoselectingInput.js active\n\nimport { useRef, useEffect } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function AutoselectingInput() {\n\nconst inputRef = useRef(null);\n\nuseEffect(() => {\n\nconst input = inputRef.current;\n\ninput.select();\n\n}, []);\n\nreturn <MyInput ref={inputRef} defaultValue=\"Hello\" />\n\n}\n\n```\n\n```js MyInput.js\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nreturn <input ref={ref} defaultValue=\"Hello\" />;\n\n});\n\nexport default MyInput;\n\n```\n\n</Sandpack>\n\n--\n\n### Adding a wrapper `<div>` element {/*adding-a-wrapper-div-element*/}\n\nSometimes a component needs to know the position and size of its children. This makes it tempting to find the children with `findDOMNode(this)`, and then use DOM methods like [`getBoundingClientRect`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) for measurements.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2162":{"pageContent":"There is currently no direct equivalent for this use case, which is why `findDOMNode` is deprecated but is not yet removed completely from React. In the meantime, you can try rendering a wrapper `<div>` node around the content as a workaround, and getting a ref to that node. However, extra wrappers can sometimes break styling.\n\n```js\n\n<div ref={someRef}>\n\n{children}\n\n</div>\n\n```\n\nThis also applies to focusing and scrolling to arbitrary children.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/findDOMNode.md"}},"2163":{"pageContent":"--\n\ntitle: flushSync\n\n--\n\n<Pitfall>\n\nUsing `flushSync` is uncommon and can hurt the performance of your app.\n\n</Pitfall>\n\n<Intro>\n\n`flushSync` lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.\n\n```js\n\nflushSync(callback)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `flushSync(callback)` {/*flushsync*/}\n\nCall `flushSync` to force React to flush any pending work and update the DOM synchronously.\n\n```js\n\nimport { flushSync } from 'react-dom';\n\nflushSync(() => {\n\nsetSomething(123);\n\n});\n\n```\n\nMost of the time, `flushSync` can be avoided. Use `flushSync` as last resort.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`callback`: A function. React will immediately call this callback and flush any updates it contains synchronously. It may also flush any pending updates, or Effects, or updates inside of Effects. If an update suspends as a result of this `flushSync` call, the fallbacks may be re-shown.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/flushSync.md"}},"2164":{"pageContent":"#### Returns {/*returns*/}\n\n`flushSync` returns `undefined`.\n\n#### Caveats {/*caveats*/}\n\n`flushSync` can significantly hurt performance. Use sparingly.\n\n`flushSync` may force pending Suspense boundaries to show their `fallback` state.\n\n`flushSync` may run pending effects and synchronously apply any updates they contain before returning.\n\n`flushSync` may flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.\n\n--\n\n## Usage {/*usage*/}\n\n### Flushing updates for third-party integrations {/*flushing-updates-for-third-party-integrations*/}\n\nWhen integrating with third-party code such as browser APIs or UI libraries, it may be necessary to force React to flush updates. Use `flushSync` to force React to flush any <CodeStep step={1}>state updates</CodeStep> inside the callback synchronously:\n\n```js [[1, 2, \"setSomething(123)\"]]\n\nflushSync(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/flushSync.md"}},"2165":{"pageContent":"```js [[1, 2, \"setSomething(123)\"]]\n\nflushSync(() => {\n\nsetSomething(123);\n\n});\n\n// By this line, the DOM is updated.\n\n```\n\nThis ensures that, by the time the next line of code runs, React has already updated the DOM.\n\n*Using `flushSync` is uncommon, and using it often can significantly hurt the performance of your app.** If your app only uses React APIs, and does not integrate with third-party libraries, `flushSync` should be unnecessary.\n\nHowever, it can be helpful for integrating with third-party code like browser APIs.\n\nSome browser APIs expect results inside of callbacks to be written to the DOM synchronously, by the end of the callback, so the browser can do something with the rendered DOM. In most cases, React handles this for you automatically. But in some cases it may be necessary to break outside of React and force a synchronous update.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/flushSync.md"}},"2166":{"pageContent":"For example, the browser `onbeforeprint` API allows you to change the page immediately before the print dialog opens. This is useful for applying custom print styles that allow the document to display better for printing.\n\nIn the example below, you use `flushSync` inside of the `onbeforeprint` callback to immediately \"flush\" the React state to the DOM. By doing this, when the print dialog opens, the state has been updated in `isPrinting` is \"yes\":\n\n<Sandpack>\n\n```js App.js active\n\nimport { useState, useEffect } from 'react';\n\nimport { flushSync } from 'react-dom';\n\nexport default function PrintApp() {\n\nconst [isPrinting, setIsPrinting] = useState(false);\n\nuseEffect(() => {\n\nfunction handleBeforePrint() {\n\nflushSync(() => {\n\nsetIsPrinting(true);\n\n})\n\n}\n\nfunction handleAfterPrint() {\n\nsetIsPrinting(false);\n\n}\n\nwindow.addEventListener('beforeprint', handleBeforePrint);\n\nwindow.addEventListener('afterprint', handleAfterPrint);\n\nreturn () => {\n\nwindow.removeEventListener('beforeprint', handleBeforePrint);","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/flushSync.md"}},"2167":{"pageContent":"}\n\nwindow.addEventListener('beforeprint', handleBeforePrint);\n\nwindow.addEventListener('afterprint', handleAfterPrint);\n\nreturn () => {\n\nwindow.removeEventListener('beforeprint', handleBeforePrint);\n\nwindow.removeEventListener('afterprint', handleAfterPrint);\n\n}\n\n}, []);\n\nreturn (\n\n<>\n\n<h1>isPrinting: {isPrinting ? 'yes' : 'no'}</h1>\n\n<button onClick={() => window.print()}>\n\nPrint\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIf you remove the call to `flushSync`, then when the print dialog will display `isPrinting` as \"no\". This is because React batches the updates asynchronously and the print dialog is displayed before the state is updated.\n\n<Pitfall>\n\n`flushSync` can significantly hurt performance, and may unexpectedly force pending Suspense boundaries to show their fallback state.\n\nMost of the time, `flushSync` can be avoided, so use `flushSync` as a last resort.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/flushSync.md"}},"2168":{"pageContent":"--\n\ntitle: hydrate\n\n--\n\n<Deprecated>\n\nThis API will be removed in a future major version of React.\n\nIn React 18, `hydrate` was replaced by [`hydrateRoot`.](/reference/react-dom/client/hydrateRoot) Using `hydrate` in React 18 will warn that your app will behave as if it’s running React 17. Learn more [here.](/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis)\n\n</Deprecated>\n\n<Intro>\n\n`hydrate` lets you display React components inside a browser DOM node whose HTML content was previously generated by [`react-dom/server`](/reference/react-dom/server) in React 17 and below.\n\n```js\n\nhydrate(reactNode, domNode, callback?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `hydrate(reactNode, domNode, callback?)` {/*hydrate*/}\n\nCall `hydrate` in React 17 and below to “attach” React to existing HTML that was already rendered by React in a server environment.\n\n```js\n\nimport { hydrate } from 'react-dom';\n\nhydrate(reactNode, domNode);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2169":{"pageContent":"```js\n\nimport { hydrate } from 'react-dom';\n\nhydrate(reactNode, domNode);\n\n```\n\nReact will attach to the HTML that exists inside the `domNode`, and take over managing the DOM inside it. An app fully built with React will usually only have one `hydrate` call with its root component.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`reactNode`: The \"React node\" used to render the existing HTML. This will usually be a piece of JSX like `<App />` which was rendered with a `ReactDOM Server` method such as `renderToString(<App />)` in React 17.\n\n`domNode`: A [DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element) that was rendered as the root element on the server.\n\n**optional**: `callback`: A function. If passed, React will call it after your component is hydrated.\n\n#### Returns {/*returns*/}\n\n`hydrate` returns null.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2170":{"pageContent":"**optional**: `callback`: A function. If passed, React will call it after your component is hydrated.\n\n#### Returns {/*returns*/}\n\n`hydrate` returns null.\n\n#### Caveats {/*caveats*/}\n\n`hydrate` expects the rendered content to be identical with the server-rendered content. React can patch up differences in text content, but you should treat mismatches as bugs and fix them.\n\nIn development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n\nYou'll likely have only one `hydrate` call in your app. If you use a framework, it might do this call for you.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2171":{"pageContent":"You'll likely have only one `hydrate` call in your app. If you use a framework, it might do this call for you.\n\nIf your app is client-rendered with no HTML rendered already, using `hydrate()` is not supported. Use [render()](/reference/react-dom/render) (for React 17 and below) or [createRoot()](/reference/react-dom/client/createRoot) (for React 18+) instead.\n\n--\n\n## Usage {/*usage*/}\n\nCall `hydrate` to attach a <CodeStep step={1}>React component</CodeStep> into a server-rendered <CodeStep step={2}>browser DOM node</CodeStep>.\n\n```js [[1, 3, \"<App />\"], [2, 3, \"document.getElementById('root')\"]]\n\nimport {hydrate} from 'react-dom';\n\nhydrate(<App />, document.getElementById('root'));\n\n````\n\nUsing `hydrate()` to render a client-only app (an app without server-rendered HTML) is not supported. Use [`render()`](/reference/react-dom/render) (in React 17 and below) or [`createRoot()`](/reference/react-dom/client/createRoot) (in React 18+) instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2172":{"pageContent":"### Hydrating server-rendered HTML {/*hydrating-server-rendered-html*/}\n\nIn React, \"hydration\" is how React \"attaches\" to existing HTML that was already rendered by React in a server environment. During hydration, React will attempt to attach event listeners to the existing markup and take over rendering the app on the client.\n\nIn apps fully built with React, **you will usually only hydrate one \"root\", once at startup for your entire app**.\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Hello, world!</h1></div>\n\n```\n\n```js index.js active\n\nimport './styles.css';\n\nimport {hydrate} from 'react-dom';\n\nimport App from './App.js';\n\nhydrate(<App />, document.getElementById('root'));\n\n```\n\n```js App.js\n\nexport default function App() {\n\nreturn <h1>Hello, world!</h1>;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2173":{"pageContent":"import App from './App.js';\n\nhydrate(<App />, document.getElementById('root'));\n\n```\n\n```js App.js\n\nexport default function App() {\n\nreturn <h1>Hello, world!</h1>;\n\n}\n\n```\n\n</Sandpack>\n\nUsually you shouldn't need to call `hydrate` again or to call it in more places. From this point on, React will be managing the DOM of your application. If you want to update the UI, your components can do this by [using state.](/reference/react/useState)\n\nFor more information on hydration, see the docs for [`hydrateRoot`.](/reference/react-dom/client/hydrateRoot)\n\n--\n\n### Suppressing unavoidable hydration mismatch errors {/*suppressing-unavoidable-hydration-mismatch-errors*/}\n\nIf a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the hydration mismatch warning.\n\nTo silence hydration warnings on an element, add `suppressHydrationWarning={true}`:\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2174":{"pageContent":"To silence hydration warnings on an element, add `suppressHydrationWarning={true}`:\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Current Date: 01/01/2020</h1></div>\n\n```\n\n```js index.js\n\nimport './styles.css';\n\nimport {hydrate} from 'react-dom';\n\nimport App from './App.js';\n\nhydrate(<App />, document.getElementById('root'));\n\n```\n\n```js App.js active\n\nexport default function App() {\n\nreturn (\n\n<h1 suppressHydrationWarning={true}>\n\nCurrent Date: {new Date().toLocaleDateString()}\n\n</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates.\n\n--\n\n### Handling different client and server content {/*handling-different-client-and-server-content*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2175":{"pageContent":"--\n\n### Handling different client and server content {/*handling-different-client-and-server-content*/}\n\nIf you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a [state variable](/reference/react/useState) like `isClient`, which you can set to `true` in an [effect](/reference/react/useEffect):\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Is Server</h1></div>\n\n```\n\n```js index.js\n\nimport './styles.css';\n\nimport {hydrate} from 'react-dom';\n\nimport App from './App.js';\n\nhydrate(<App />, document.getElementById('root'));\n\n```\n\n```js App.js active\n\nimport { useState, useEffect } from \"react\";\n\nexport default function App() {\n\nconst [isClient, setIsClient] = useState(false);\n\nuseEffect(() => {\n\nsetIsClient(true);\n\n}, []);\n\nreturn (\n\n<h1>\n\n{isClient ? 'Is Client' : 'Is Server'}\n\n</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2176":{"pageContent":"export default function App() {\n\nconst [isClient, setIsClient] = useState(false);\n\nuseEffect(() => {\n\nsetIsClient(true);\n\n}, []);\n\nreturn (\n\n<h1>\n\n{isClient ? 'Is Client' : 'Is Server'}\n\n</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration.\n\n<Pitfall>\n\nThis approach makes hydration slower because your components have to render twice. Be mindful of the user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so rendering a different UI immediately after hydration may also feel jarring to the user.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/hydrate.md"}},"2177":{"pageContent":"--\n\ntitle: renderToStaticMarkup\n\n--\n\n<Intro>\n\n`renderToStaticMarkup` renders a non-interactive React tree to an HTML string.\n\n```js\n\nconst html = renderToStaticMarkup(reactNode)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `renderToStaticMarkup(reactNode)` {/*rendertostaticmarkup*/}\n\nOn the server, call `renderToStaticMarkup` to render your app to HTML.\n\n```js\n\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst html = renderToStaticMarkup(<Page />);\n\n```\n\nIt will produce non-interactive HTML output of your React components.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`reactNode`: A React node you want to render to HTML. For example, a JSX node like `<Page />`.\n\n#### Returns {/*returns*/}\n\nAn HTML string.\n\n#### Caveats {/*caveats*/}\n\n`renderToStaticMarkup` output cannot be hydrated.\n\n`renderToStaticMarkup` has limited Suspense support. If a component suspends, `renderToStaticMarkup` immediately sends its fallback as HTML.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticMarkup.md"}},"2178":{"pageContent":"`renderToStaticMarkup` output cannot be hydrated.\n\n`renderToStaticMarkup` has limited Suspense support. If a component suspends, `renderToStaticMarkup` immediately sends its fallback as HTML.\n\n`renderToStaticMarkup` works in the browser, but using it in the client code is not recommended. If you need to render a component to HTML in the browser, [get the HTML by rendering it into a DOM node.](/reference/react-dom/server/renderToString#removing-rendertostring-from-the-client-code)\n\n--\n\n## Usage {/*usage*/}\n\n### Rendering a non-interactive React tree as HTML to a string {/*rendering-a-non-interactive-react-tree-as-html-to-a-string*/}\n\nCall `renderToStaticMarkup` to render your app to an HTML string which you can send with your server response:\n\n```js {5-6}\n\nimport { renderToStaticMarkup } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst html = renderToStaticMarkup(<Page />);\n\nresponse.send(html);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticMarkup.md"}},"2179":{"pageContent":"// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst html = renderToStaticMarkup(<Page />);\n\nresponse.send(html);\n\n});\n\n```\n\nThis will produce the initial non-interactive HTML output of your React components.\n\n<Pitfall>\n\nThis method renders **non-interactive HTML that cannot be hydrated.**  This is useful if you want to use React as a simple static page generator, or if you're rendering completely static content like emails.\n\nInteractive apps should use [`renderToString`](/reference/react-dom/server/renderToString) on the server and [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) on the client.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticMarkup.md"}},"2180":{"pageContent":"--\n\ntitle: renderToStaticNodeStream\n\n--\n\n<Intro>\n\n`renderToStaticNodeStream` renders a non-interactive React tree to a [Node.js Readable Stream.](https://nodejs.org/api/stream.html#readable-streams)\n\n```js\n\nconst stream = renderToStaticNodeStream(reactNode)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `renderToStaticNodeStream(reactNode)` {/*rendertostaticnodestream*/}\n\nOn the server, call `renderToStaticNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams).\n\n```js\n\nimport { renderToStaticNodeStream } from 'react-dom/server';\n\nconst stream = renderToStaticNodeStream(<Page />);\n\nstream.pipe(response);\n\n```\n\n[See more examples below.](#usage)\n\nThe stream will produce non-interactive HTML output of your React components.\n\n#### Parameters {/*parameters*/}\n\n`reactNode`: A React node you want to render to HTML. For example, a JSX element like `<Page />`.\n\n#### Returns {/*returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticNodeStream.md"}},"2181":{"pageContent":"#### Parameters {/*parameters*/}\n\n`reactNode`: A React node you want to render to HTML. For example, a JSX element like `<Page />`.\n\n#### Returns {/*returns*/}\n\nA [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) that outputs an HTML string. The resulting HTML can't be hydrated on the client.\n\n#### Caveats {/*caveats*/}\n\n`renderToStaticNodeStream` output cannot be hydrated.\n\nThis method will wait for all [Suspense boundaries](/reference/react/Suspense) to complete before returning any output.\n\nAs of React 18, this method buffers all of its output, so it doesn't actually provide any streaming benefits.\n\nThe returned stream is a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.\n\n--\n\n## Usage {/*usage*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticNodeStream.md"}},"2182":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Rendering a React tree as static HTML to a Node.js Readable Stream {/*rendering-a-react-tree-as-static-html-to-a-nodejs-readable-stream*/}\n\nCall `renderToStaticNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe to your server response:\n\n```js {5-6}\n\nimport { renderToStaticNodeStream } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst stream = renderToStaticNodeStream(<Page />);\n\nstream.pipe(response);\n\n});\n\n```\n\nThe stream will produce the initial non-interactive HTML output of your React components.\n\n<Pitfall>\n\nThis method renders **non-interactive HTML that cannot be hydrated.** This is useful if you want to use React as a simple static page generator, or if you're rendering completely static content like emails.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticNodeStream.md"}},"2183":{"pageContent":"Interactive apps should use [`renderToPipeableStream`](/reference/react-dom/server/renderToPipeableStream) on the server and [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) on the client.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToStaticNodeStream.md"}},"2184":{"pageContent":"--\n\ntitle: Server React DOM APIs\n\n--\n\n<Intro>\n\nThe `react-dom/server` APIs let you render React components to HTML on the server. These APIs are only used on the server at the top level of your app to generate the initial HTML. A [framework](/learn/start-a-new-react-project#building-with-a-full-featured-framework) may call them for you. Most of your components don't need to import or use them.\n\n</Intro>\n\n--\n\n## Server APIs for Node.js Streams {/*server-apis-for-nodejs-streams*/}\n\nThese methods are only available in the environments with [Node.js Streams:](https://nodejs.org/api/stream.html)\n\n[`renderToPipeableStream`](/reference/react-dom/server/renderToPipeableStream) renders a React tree to a pipeable [Node.js Stream.](https://nodejs.org/api/stream.html)\n\n[`renderToStaticNodeStream`](/reference/react-dom/server/renderToStaticNodeStream) renders a non-interactive React tree to a [Node.js Readable Stream.](https://nodejs.org/api/stream.html#readable-streams)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/index.md"}},"2185":{"pageContent":"--\n\n## Server APIs for Web Streams {/*server-apis-for-web-streams*/}\n\nThese methods are only available in the environments with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API), which includes browsers, Deno, and some modern edge runtimes:\n\n[`renderToReadableStream`](/reference/react-dom/server/renderToReadableStream) renders a React tree to a [Readable Web Stream.](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream)\n\n--\n\n## Server APIs for non-streaming environments {/*server-apis-for-non-streaming-environments*/}\n\nThese methods can be used in the environments that don't support streams:\n\n[`renderToString`](/reference/react-dom/server/renderToString) renders a React tree to a string.\n\n[`renderToStaticMarkup`](/reference/react-dom/server/renderToStaticMarkup) renders a non-interactive React tree to a string.\n\nThey have limited functionality compared to the streaming APIs.\n\n--\n\n## Deprecated server APIs {/*deprecated-server-apis*/}\n\n<Deprecated>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/index.md"}},"2186":{"pageContent":"They have limited functionality compared to the streaming APIs.\n\n--\n\n## Deprecated server APIs {/*deprecated-server-apis*/}\n\n<Deprecated>\n\nThese APIs will be removed in a future major version of React.\n\n</Deprecated>\n\n[`renderToNodeStream`](/reference/react-dom/server/renderToNodeStream) renders a React tree to a [Node.js Readable stream.](https://nodejs.org/api/stream.html#readable-streams) (Deprecated.)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/index.md"}},"2187":{"pageContent":"--\n\ntitle: renderToNodeStream\n\n--\n\n<Deprecated>\n\nThis API will be removed in a future major version of React. Use [`renderToPipeableStream`](/reference/react-dom/server/renderToPipeableStream) instead.\n\n</Deprecated>\n\n<Intro>\n\n`renderToNodeStream` renders a React tree to a [Node.js Readable Stream.](https://nodejs.org/api/stream.html#readable-streams)\n\n```js\n\nconst stream = renderToNodeStream(reactNode)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `renderToNodeStream(reactNode)` {/*rendertonodestream*/}\n\nOn the server, call `renderToNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe into the response.\n\n```js\n\nimport { renderToNodeStream } from 'react-dom/server';\n\nconst stream = renderToNodeStream(<App />);\n\nstream.pipe(response);\n\n```\n\nOn the client, call [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) to make the server-generated HTML interactive.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToNodeStream.md"}},"2188":{"pageContent":"```\n\nOn the client, call [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) to make the server-generated HTML interactive.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`reactNode`: A React node you want to render to HTML. For example, a JSX element like `<App />`.\n\n#### Returns {/*returns*/}\n\nA [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) that outputs an HTML string.\n\n#### Caveats {/*caveats*/}\n\nThis method will wait for all [Suspense boundaries](/reference/react/Suspense) to complete before returning any output.\n\nAs of React 18, this method buffers all of its output, so it doesn't actually provide any streaming benefits. This is why it's recommended that you migrate to [`renderToPipeableStream`](/reference/react-dom/server/renderToPipeableStream) instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToNodeStream.md"}},"2189":{"pageContent":"The returned stream is a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.\n\n--\n\n## Usage {/*usage*/}\n\n### Rendering a React tree as HTML to a Node.js Readable Stream {/*rendering-a-react-tree-as-html-to-a-nodejs-readable-stream*/}\n\nCall `renderToNodeStream` to get a [Node.js Readable Stream](https://nodejs.org/api/stream.html#readable-streams) which you can pipe to your server response:\n\n```js {5-6}\n\nimport { renderToNodeStream } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst stream = renderToNodeStream(<App />);\n\nstream.pipe(response);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToNodeStream.md"}},"2190":{"pageContent":"// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst stream = renderToNodeStream(<App />);\n\nstream.pipe(response);\n\n});\n\n```\n\nThe stream will produce the initial non-interactive HTML output of your React components. On the client, you will need to call [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) to *hydrate* that server-generated HTML and make it interactive.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToNodeStream.md"}},"2191":{"pageContent":"--\n\ntitle: Passing Props to a Component\n\n--\n\n<Intro>\n\nReact components use *props* to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to pass props to a component\n\nHow to read props from a component\n\nHow to specify default values for props\n\nHow to pass some JSX to a component\n\nHow props change over time\n\n</YouWillLearn>\n\n## Familiar props {/*familiar-props*/}\n\nProps are the information that you pass to a JSX tag. For example, `className`, `src`, `alt`, `width`, and `height` are some of the props you can pass to an `<img>`:\n\n<Sandpack>\n\n```js\n\nfunction Avatar() {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/1bX5QH6.jpg\"\n\nalt=\"Lin Lanying\"\n\nwidth={100}\n\nheight={100}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<Avatar />\n\n);\n\n}\n\n```\n\n```css\n\nbody { min-height: 120px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2192":{"pageContent":"<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/1bX5QH6.jpg\"\n\nalt=\"Lin Lanying\"\n\nwidth={100}\n\nheight={100}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<Avatar />\n\n);\n\n}\n\n```\n\n```css\n\nbody { min-height: 120px; }\n\n.avatar { margin: 20px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\nThe props you can pass to an `<img>` tag are predefined (ReactDOM conforms to [the HTML standard](https://www.w3.org/TR/html52/semantics-embedded-content.html#the-img-element)). But you can pass any props to *your own* components, such as `<Avatar>`, to customize them. Here's how!\n\n## Passing props to a component {/*passing-props-to-a-component*/}\n\nIn this code, the `Profile` component isn't passing any props to its child component, `Avatar`:\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<Avatar />\n\n);\n\n}\n\n```\n\nYou can give `Avatar` some props in two steps.\n\n### Step 1: Pass props to the child component {/*step-1-pass-props-to-the-child-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2193":{"pageContent":"export default function Profile() {\n\nreturn (\n\n<Avatar />\n\n);\n\n}\n\n```\n\nYou can give `Avatar` some props in two steps.\n\n### Step 1: Pass props to the child component {/*step-1-pass-props-to-the-child-component*/}\n\nFirst, pass some props to `Avatar`. For example, let's pass two props: `person` (an object), and `size` (a number):\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<Avatar\n\nperson={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}\n\nsize={100}\n\n/>\n\n);\n\n}\n\n```\n\n> If double curly braces after `person=` confuse you, remember [they are merely an object](/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx) inside the JSX curlies.\n\nNow you can read these props inside the `Avatar` component.\n\n### Step 2: Read props inside the child component {/*step-2-read-props-inside-the-child-component*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2194":{"pageContent":"Now you can read these props inside the `Avatar` component.\n\n### Step 2: Read props inside the child component {/*step-2-read-props-inside-the-child-component*/}\n\nYou can read these props by listing their names `person, size` separated by the commas inside `({` and `})` directly after `function Avatar`. This lets you use them inside the `Avatar` code, like you would with a variable.\n\n```js\n\nfunction Avatar({ person, size }) {\n\n// person and size are available here\n\n}\n\n```\n\nAdd some logic to `Avatar` that uses the `person` and `size` props for rendering, and you're done.\n\nNow you can configure `Avatar` to render in many different ways with different props. Try tweaking the values!\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<div>\n\n<Avatar\n\nsize={100}\n\nperson={{\n\nname: 'Katsuko Saruhashi',\n\nimageId: 'YfeOqp2'\n\n}}\n\n/>\n\n<Avatar","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2195":{"pageContent":"alt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<div>\n\n<Avatar\n\nsize={100}\n\nperson={{\n\nname: 'Katsuko Saruhashi',\n\nimageId: 'YfeOqp2'\n\n}}\n\n/>\n\n<Avatar\n\nsize={80}\n\nperson={{\n\nname: 'Aklilu Lemma',\n\nimageId: 'OKS67lh'\n\n}}\n\n/>\n\n<Avatar\n\nsize={50}\n\nperson={{\n\nname: 'Lin Lanying',\n\nimageId: '1bX5QH6'\n\n}}\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\nbody { min-height: 120px; }\n\n.avatar { margin: 10px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\nProps let you think about parent and child components independently. For example, you can change the `person` or the `size` props inside `Profile` without having to think about how `Avatar` uses them. Similarly, you can change how the `Avatar` uses these props, without looking at the `Profile`.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2196":{"pageContent":"You can think of props like \"knobs\" that you can adjust. They serve the same role as arguments serve for functions—in fact, props _are_ the only argument to your component! React component functions accept a single argument, a `props` object:\n\n```js\n\nfunction Avatar(props) {\n\nlet person = props.person;\n\nlet size = props.size;\n\n// ...\n\n}\n\n```\n\nUsually you don't need the whole `props` object itself, so you destructure it into individual props.\n\n<Pitfall>\n\n*Don't miss the pair of `{` and `}` curlies** inside of `(` and `)` when declaring props:\n\n```js\n\nfunction Avatar({ person, size }) {\n\n// ...\n\n}\n\n```\n\nThis syntax is called [\"destructuring\"](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Unpacking_fields_from_objects_passed_as_a_function_parameter) and is equivalent to reading properties from a function parameter:\n\n```js\n\nfunction Avatar(props) {\n\nlet person = props.person;\n\nlet size = props.size;\n\n// ...\n\n}\n\n```\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2197":{"pageContent":"```js\n\nfunction Avatar(props) {\n\nlet person = props.person;\n\nlet size = props.size;\n\n// ...\n\n}\n\n```\n\n</Pitfall>\n\n## Specifying a default value for a prop {/*specifying-a-default-value-for-a-prop*/}\n\nIf you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting `=` and the default value right after the parameter:\n\n```js\n\nfunction Avatar({ person, size = 100 }) {\n\n// ...\n\n}\n\n```\n\nNow, if `<Avatar person={...} />` is rendered with no `size` prop, the `size` will be set to `100`.\n\nThe default value is only used if the `size` prop is missing or if you pass `size={undefined}`. But if you pass `size={null}` or `size={0}`, the default value will **not** be used.\n\n## Forwarding props with the JSX spread syntax {/*forwarding-props-with-the-jsx-spread-syntax*/}\n\nSometimes, passing props gets very repetitive:\n\n```js\n\nfunction Profile({ person, size, isSepia, thickBorder }) {\n\nreturn (\n\n<div className=\"card\">\n\n<Avatar\n\nperson={person}\n\nsize={size}\n\nisSepia={isSepia}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2198":{"pageContent":"Sometimes, passing props gets very repetitive:\n\n```js\n\nfunction Profile({ person, size, isSepia, thickBorder }) {\n\nreturn (\n\n<div className=\"card\">\n\n<Avatar\n\nperson={person}\n\nsize={size}\n\nisSepia={isSepia}\n\nthickBorder={thickBorder}\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\nThere's nothing wrong with repetitive code—it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this `Profile` does with `Avatar`. Because they don't use any of their props directly, it can make sense to use a more concise \"spread\" syntax:\n\n```js\n\nfunction Profile(props) {\n\nreturn (\n\n<div className=\"card\">\n\n<Avatar {...props} />\n\n</div>\n\n);\n\n}\n\n```\n\nThis forwards all of `Profile`'s props to the `Avatar` without listing each of their names.\n\n*Use spread syntax with restraint.** If you're using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!\n\n## Passing JSX as children {/*passing-jsx-as-children*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2199":{"pageContent":"## Passing JSX as children {/*passing-jsx-as-children*/}\n\nIt is common to nest built-in browser tags:\n\n```js\n\n<div>\n\n<img />\n\n</div>\n\n```\n\nSometimes you'll want to nest your own components the same way:\n\n```js\n\n<Card>\n\n<Avatar />\n\n</Card>\n\n```\n\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop called `children`. For example, the `Card` component below will receive a `children` prop set to `<Avatar />` and render it in a wrapper div:\n\n<Sandpack>\n\n```js App.js\n\nimport Avatar from './Avatar.js';\n\nfunction Card({ children }) {\n\nreturn (\n\n<div className=\"card\">\n\n{children}\n\n</div>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<Card>\n\n<Avatar\n\nsize={100}\n\nperson={{\n\nname: 'Katsuko Saruhashi',\n\nimageId: 'YfeOqp2'\n\n}}\n\n/>\n\n</Card>\n\n);\n\n}\n\n```\n\n```js Avatar.js\n\nimport { getImageUrl } from './utils.js';\n\nexport default function Avatar({ person, size }) {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\n```\n\n```js utils.js","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2200":{"pageContent":"export default function Avatar({ person, size }) {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person)}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.card {\n\nwidth: fit-content;\n\nmargin: 5px;\n\npadding: 5px;\n\nfont-size: 20px;\n\ntext-align: center;\n\nborder: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.avatar {\n\nmargin: 20px;\n\nborder-radius: 50%;\n\n}\n\n```\n\n</Sandpack>\n\nTry replacing the `<Avatar>` inside `<Card>` with some text to see how the `Card` component can wrap any nested content. It doesn't need to \"know\" what's being rendered inside of it. You will see this flexible pattern in many places.\n\nYou can think of a component with a `children` prop as having a \"hole\" that can be \"filled in\" by its parent components with arbitrary JSX. You will often use the `children` prop for visual wrappers: panels, grids, and so on.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2201":{"pageContent":"<Illustration src=\"/images/docs/illustrations/i_children-prop.png\" alt='A puzzle-like Card tile with a slot for \"children\" pieces like text and Avatar' />\n\n## How props change over time {/*how-props-change-over-time*/}\n\nThe `Clock` component below receives two props from its parent component: `color` and `time`. (The parent component's code is omitted because it uses [state](/learn/state-a-components-memory), which we won't dive into just yet.)\n\nTry changing the color in the select box below:\n\n<Sandpack>\n\n```js Clock.js active\n\nexport default function Clock({ color, time }) {\n\nreturn (\n\n<h1 style={{ color: color }}>\n\n{time}\n\n</h1>\n\n);\n\n}\n\n```\n\n```js App.js hidden\n\nimport { useState, useEffect } from 'react';\n\nimport Clock from './Clock.js';\n\nfunction useTime() {\n\nconst [time, setTime] = useState(() => new Date());\n\nuseEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2202":{"pageContent":"useEffect(() => {\n\nconst id = setInterval(() => {\n\nsetTime(new Date());\n\n}, 1000);\n\nreturn () => clearInterval(id);\n\n}, []);\n\nreturn time;\n\n}\n\nexport default function App() {\n\nconst time = useTime();\n\nconst [color, setColor] = useState('lightcoral');\n\nreturn (\n\n<div>\n\n<p>\n\nPick a color:{' '}\n\n<select value={color} onChange={e => setColor(e.target.value)}>\n\n<option value=\"lightcoral\">lightcoral</option>\n\n<option value=\"midnightblue\">midnightblue</option>\n\n<option value=\"rebeccapurple\">rebeccapurple</option>\n\n</select>\n\n</p>\n\n<Clock color={color} time={time.toLocaleTimeString()} />\n\n</div>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis example illustrates that **a component may receive different props over time.** Props are not always static! Here, the `time` prop changes every second, and the `color` prop changes when you select another color. Props reflect a component's data at any point in time, rather than only in the beginning.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2203":{"pageContent":"However, props are [immutable](https://en.wikipedia.org/wiki/Immutable_object)—a term from computer science meaning \"unchangeable\". When a component needs to change its props (for example, in response to a user interaction or new data), it will have to \"ask\" its parent component to pass it _different props_—a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.\n\n*Don't try to \"change props\".** When you need to respond to the user input (like changing the selected color), you will need to \"set state\", which you can learn about in [State: A Component's Memory.](/learn/state-a-components-memory)\n\n<Recap>\n\nTo pass props, add them to the JSX, just like you would with HTML attributes.\n\nTo read props, use the `function Avatar({ person, size })` destructuring syntax.\n\nYou can specify a default value like `size = 100`, which is used for missing and `undefined` props.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2204":{"pageContent":"To read props, use the `function Avatar({ person, size })` destructuring syntax.\n\nYou can specify a default value like `size = 100`, which is used for missing and `undefined` props.\n\nYou can forward all props with `<Avatar {...props} />` JSX spread syntax, but don't overuse it!\n\nNested JSX like `<Card><Avatar /></Card>` will appear as `Card` component's `children` prop.\n\nProps are read-only snapshots in time: every render receives a new version of props.\n\nYou can't change props. When you need interactivity, you'll need to set state.\n\n</Recap>\n\n<Challenges>\n\n#### Extract a component {/*extract-a-component*/}\n\nThis `Gallery` component contains some very similar markup for two profiles. Extract a `Profile` component out of it to reduce the duplication. You'll need to choose what props to pass to it.\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nexport default function Gallery() {\n\nreturn (\n\n<div>\n\n<h1>Notable Scientists</h1>\n\n<section className=\"profile\">\n\n<h2>Maria Skłodowska-Curie</h2>\n\n<img","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2205":{"pageContent":"```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nexport default function Gallery() {\n\nreturn (\n\n<div>\n\n<h1>Notable Scientists</h1>\n\n<section className=\"profile\">\n\n<h2>Maria Skłodowska-Curie</h2>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl('szV5sdG')}\n\nalt=\"Maria Skłodowska-Curie\"\n\nwidth={70}\n\nheight={70}\n\n/>\n\n<ul>\n\n<li>\n\n<b>Profession: </b>\n\nphysicist and chemist\n\n</li>\n\n<li>\n\n<b>Awards: 4 </b>\n\n(Nobel Prize in Physics, Nobel Prize in Chemistry, Davy Medal, Matteucci Medal)\n\n</li>\n\n<li>\n\n<b>Discovered: </b>\n\npolonium (element)\n\n</li>\n\n</ul>\n\n</section>\n\n<section className=\"profile\">\n\n<h2>Katsuko Saruhashi</h2>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl('YfeOqp2')}\n\nalt=\"Katsuko Saruhashi\"\n\nwidth={70}\n\nheight={70}\n\n/>\n\n<ul>\n\n<li>\n\n<b>Profession: </b>\n\ngeochemist\n\n</li>\n\n<li>\n\n<b>Awards: 2 </b>\n\n(Miyake Prize for geochemistry, Tanaka Prize)\n\n</li>\n\n<li>\n\n<b>Discovered: </b>\n\na method for measuring carbon dioxide in seawater\n\n</li>\n\n</ul>\n\n</section>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(imageId, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nimageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2206":{"pageContent":"</li>\n\n</ul>\n\n</section>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(imageId, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nimageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; min-height: 70px; }\n\n.profile {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\nh1, h2 { margin: 5px; }\n\nh1 { margin-bottom: 10px; }\n\nul { padding: 0px 10px 0px 20px; }\n\nli { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Hint>\n\nStart by extracting the markup for one of the scientists. Then find the pieces that don't match it in the second example, and make them configurable by props.\n\n</Hint>\n\n<Solution>\n\nIn this solution, the `Profile` component accepts multiple props: `imageId` (a string), `name` (a string), `profession` (a string), `awards` (an array of strings), `discovery` (a string), and `imageSize` (a number).\n\nNote that the `imageSize` prop has a default value, which is why we don't pass it to the component.\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2207":{"pageContent":"Note that the `imageSize` prop has a default value, which is why we don't pass it to the component.\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nfunction Profile({\n\nimageId,\n\nname,\n\nprofession,\n\nawards,\n\ndiscovery,\n\nimageSize = 70\n\n}) {\n\nreturn (\n\n<section className=\"profile\">\n\n<h2>{name}</h2>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(imageId)}\n\nalt={name}\n\nwidth={imageSize}\n\nheight={imageSize}\n\n/>\n\n<ul>\n\n<li><b>Profession:</b> {profession}</li>\n\n<li>\n\n<b>Awards: {awards.length} </b>\n\n({awards.join(', ')})\n\n</li>\n\n<li>\n\n<b>Discovered: </b>\n\n{discovery}\n\n</li>\n\n</ul>\n\n</section>\n\n);\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<div>\n\n<h1>Notable Scientists</h1>\n\n<Profile\n\nimageId=\"szV5sdG\"\n\nname=\"Maria Skłodowska-Curie\"\n\nprofession=\"physicist and chemist\"\n\ndiscovery=\"polonium (chemical element)\"\n\nawards={[\n\n'Nobel Prize in Physics',\n\n'Nobel Prize in Chemistry',\n\n'Davy Medal',\n\n'Matteucci Medal'\n\n]}\n\n/>\n\n<Profile\n\nimageId='YfeOqp2'\n\nname='Katsuko Saruhashi'\n\nprofession='geochemist'\n\ndiscovery=\"a method for measuring carbon dioxide in seawater\"\n\nawards={[","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2208":{"pageContent":"'Davy Medal',\n\n'Matteucci Medal'\n\n]}\n\n/>\n\n<Profile\n\nimageId='YfeOqp2'\n\nname='Katsuko Saruhashi'\n\nprofession='geochemist'\n\ndiscovery=\"a method for measuring carbon dioxide in seawater\"\n\nawards={[\n\n'Miyake Prize for geochemistry',\n\n'Tanaka Prize'\n\n]}\n\n/>\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(imageId, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nimageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; min-height: 70px; }\n\n.profile {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\nh1, h2 { margin: 5px; }\n\nh1 { margin-bottom: 10px; }\n\nul { padding: 0px 10px 0px 20px; }\n\nli { margin: 5px; }\n\n```\n\n</Sandpack>\n\nNote how you don't need a separate `awardCount` prop if `awards` is an array. Then you can use `awards.length` to count the number of awards. Remember that props can take any values, and that includes arrays too!","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2209":{"pageContent":"Another solution, which is more similar to the earlier examples on this page, is to group all information about a person in a single object, and pass that object as one prop:\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nfunction Profile({ person, imageSize = 70 }) {\n\nconst imageSrc = getImageUrl(person)\n\nreturn (\n\n<section className=\"profile\">\n\n<h2>{person.name}</h2>\n\n<img\n\nclassName=\"avatar\"\n\nsrc={imageSrc}\n\nalt={person.name}\n\nwidth={imageSize}\n\nheight={imageSize}\n\n/>\n\n<ul>\n\n<li>\n\n<b>Profession:</b> {person.profession}\n\n</li>\n\n<li>\n\n<b>Awards: {person.awards.length} </b>\n\n({person.awards.join(', ')})\n\n</li>\n\n<li>\n\n<b>Discovered: </b>\n\n{person.discovery}\n\n</li>\n\n</ul>\n\n</section>\n\n)\n\n}\n\nexport default function Gallery() {\n\nreturn (\n\n<div>\n\n<h1>Notable Scientists</h1>\n\n<Profile person={{\n\nimageId: 'szV5sdG',\n\nname: 'Maria Skłodowska-Curie',\n\nprofession: 'physicist and chemist',\n\ndiscovery: 'polonium (chemical element)',\n\nawards: [\n\n'Nobel Prize in Physics',\n\n'Nobel Prize in Chemistry',\n\n'Davy Medal',\n\n'Matteucci Medal'\n\n],\n\n}} />\n\n<Profile person={{","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2210":{"pageContent":"profession: 'physicist and chemist',\n\ndiscovery: 'polonium (chemical element)',\n\nawards: [\n\n'Nobel Prize in Physics',\n\n'Nobel Prize in Chemistry',\n\n'Davy Medal',\n\n'Matteucci Medal'\n\n],\n\n}} />\n\n<Profile person={{\n\nimageId: 'YfeOqp2',\n\nname: 'Katsuko Saruhashi',\n\nprofession: 'geochemist',\n\ndiscovery: 'a method for measuring carbon dioxide in seawater',\n\nawards: [\n\n'Miyake Prize for geochemistry',\n\n'Tanaka Prize'\n\n],\n\n}} />\n\n</div>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size = 's') {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 5px; border-radius: 50%; min-height: 70px; }\n\n.profile {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\nh1, h2 { margin: 5px; }\n\nh1 { margin-bottom: 10px; }\n\nul { padding: 0px 10px 0px 20px; }\n\nli { margin: 5px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2211":{"pageContent":"border: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\nh1, h2 { margin: 5px; }\n\nh1 { margin-bottom: 10px; }\n\nul { padding: 0px 10px 0px 20px; }\n\nli { margin: 5px; }\n\n```\n\n</Sandpack>\n\nAlthough the syntax looks slightly different because you're describing properties of a JavaScript object rather than a collection of JSX attributes, these examples are mostly equivalent, and you can pick either approach.\n\n</Solution>\n\n#### Adjust the image size based on a prop {/*adjust-the-image-size-based-on-a-prop*/}\n\nIn this example, `Avatar` receives a numeric `size` prop which determines the `<img>` width and height. The `size` prop is set to `40` in this example. However, if you open the image in a new tab, you'll notice that the image itself is larger (`160` pixels). The real image size is determined by which thumbnail size you're requesting.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2212":{"pageContent":"Change the `Avatar` component to request the closest image size based on the `size` prop. Specifically, if the `size` is less than `90`, pass `'s'` (\"small\") rather than `'b'` (\"big\") to the `getImageUrl` function. Verify that your changes work by rendering avatars with different values of the `size` prop and opening images in a new tab.\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person, 'b')}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<Avatar\n\nsize={40}\n\nperson={{\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP'\n\n}}\n\n/>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 20px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nHere is how you could go about it:\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2213":{"pageContent":"```\n\n</Sandpack>\n\n<Solution>\n\nHere is how you could go about it:\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nfunction Avatar({ person, size }) {\n\nlet thumbnailSize = 's';\n\nif (size > 90) {\n\nthumbnailSize = 'b';\n\n}\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person, thumbnailSize)}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<>\n\n<Avatar\n\nsize={40}\n\nperson={{\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP'\n\n}}\n\n/>\n\n<Avatar\n\nsize={120}\n\nperson={{\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP'\n\n}}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 20px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\nYou could also show a sharper image for high DPI screens by taking [`window.devicePixelRatio`](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) into account:\n\n<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2214":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { getImageUrl } from './utils.js';\n\nconst ratio = window.devicePixelRatio;\n\nfunction Avatar({ person, size }) {\n\nlet thumbnailSize = 's';\n\nif (size * ratio > 90) {\n\nthumbnailSize = 'b';\n\n}\n\nreturn (\n\n<img\n\nclassName=\"avatar\"\n\nsrc={getImageUrl(person, thumbnailSize)}\n\nalt={person.name}\n\nwidth={size}\n\nheight={size}\n\n/>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<>\n\n<Avatar\n\nsize={40}\n\nperson={{\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP'\n\n}}\n\n/>\n\n<Avatar\n\nsize={70}\n\nperson={{\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP'\n\n}}\n\n/>\n\n<Avatar\n\nsize={120}\n\nperson={{\n\nname: 'Gregorio Y. Zara',\n\nimageId: '7vQD0fP'\n\n}}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js utils.js\n\nexport function getImageUrl(person, size) {\n\nreturn (\n\n'https://i.imgur.com/' +\n\nperson.imageId +\n\nsize +\n\n'.jpg'\n\n);\n\n}\n\n```\n\n```css\n\n.avatar { margin: 20px; border-radius: 50%; }\n\n```\n\n</Sandpack>\n\nProps let you encapsulate logic like this inside the `Avatar` component (and change it later if needed) so that everyone can use the `<Avatar>` component without thinking about how the images are requested and resized.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2215":{"pageContent":"</Solution>\n\n#### Passing JSX in a `children` prop {/*passing-jsx-in-a-children-prop*/}\n\nExtract a `Card` component from the markup below, and use the `children` prop to pass different JSX to it:\n\n<Sandpack>\n\n```js\n\nexport default function Profile() {\n\nreturn (\n\n<div>\n\n<div className=\"card\">\n\n<div className=\"card-content\">\n\n<h1>Photo</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/OKS67lhm.jpg\"\n\nalt=\"Aklilu Lemma\"\n\nwidth={70}\n\nheight={70}\n\n/>\n\n</div>\n\n</div>\n\n<div className=\"card\">\n\n<div className=\"card-content\">\n\n<h1>About</h1>\n\n<p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>\n\n</div>\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.card {\n\nwidth: fit-content;\n\nmargin: 20px;\n\npadding: 20px;\n\nborder: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.card-content {\n\ntext-align: center;\n\n}\n\n.avatar {\n\nmargin: 10px;\n\nborder-radius: 50%;\n\n}\n\nh1 {\n\nmargin: 5px;\n\npadding: 0;\n\nfont-size: 24px;\n\n}\n\n```\n\n</Sandpack>\n\n<Hint>\n\nAny JSX you put inside of a component's tag will be passed as the `children` prop to that component.","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2216":{"pageContent":"margin: 10px;\n\nborder-radius: 50%;\n\n}\n\nh1 {\n\nmargin: 5px;\n\npadding: 0;\n\nfont-size: 24px;\n\n}\n\n```\n\n</Sandpack>\n\n<Hint>\n\nAny JSX you put inside of a component's tag will be passed as the `children` prop to that component.\n\n</Hint>\n\n<Solution>\n\nThis is how you can use the `Card` component in both places:\n\n<Sandpack>\n\n```js\n\nfunction Card({ children }) {\n\nreturn (\n\n<div className=\"card\">\n\n<div className=\"card-content\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<div>\n\n<Card>\n\n<h1>Photo</h1>\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/OKS67lhm.jpg\"\n\nalt=\"Aklilu Lemma\"\n\nwidth={100}\n\nheight={100}\n\n/>\n\n</Card>\n\n<Card>\n\n<h1>About</h1>\n\n<p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>\n\n</Card>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.card {\n\nwidth: fit-content;\n\nmargin: 20px;\n\npadding: 20px;\n\nborder: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.card-content {\n\ntext-align: center;\n\n}\n\n.avatar {\n\nmargin: 10px;\n\nborder-radius: 50%;\n\n}\n\nh1 {\n\nmargin: 5px;\n\npadding: 0;\n\nfont-size: 24px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2217":{"pageContent":"border: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.card-content {\n\ntext-align: center;\n\n}\n\n.avatar {\n\nmargin: 10px;\n\nborder-radius: 50%;\n\n}\n\nh1 {\n\nmargin: 5px;\n\npadding: 0;\n\nfont-size: 24px;\n\n}\n\n```\n\n</Sandpack>\n\nYou can also make `title` a separate prop if you want every `Card` to always have a title:\n\n<Sandpack>\n\n```js\n\nfunction Card({ children, title }) {\n\nreturn (\n\n<div className=\"card\">\n\n<div className=\"card-content\">\n\n<h1>{title}</h1>\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\nexport default function Profile() {\n\nreturn (\n\n<div>\n\n<Card title=\"Photo\">\n\n<img\n\nclassName=\"avatar\"\n\nsrc=\"https://i.imgur.com/OKS67lhm.jpg\"\n\nalt=\"Aklilu Lemma\"\n\nwidth={100}\n\nheight={100}\n\n/>\n\n</Card>\n\n<Card title=\"About\">\n\n<p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>\n\n</Card>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.card {\n\nwidth: fit-content;\n\nmargin: 20px;\n\npadding: 20px;\n\nborder: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.card-content {\n\ntext-align: center;\n\n}\n\n.avatar {\n\nmargin: 10px;\n\nborder-radius: 50%;\n\n}\n\nh1 {\n\nmargin: 5px;\n\npadding: 0;","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2218":{"pageContent":"margin: 20px;\n\npadding: 20px;\n\nborder: 1px solid #aaa;\n\nborder-radius: 20px;\n\nbackground: #fff;\n\n}\n\n.card-content {\n\ntext-align: center;\n\n}\n\n.avatar {\n\nmargin: 10px;\n\nborder-radius: 50%;\n\n}\n\nh1 {\n\nmargin: 5px;\n\npadding: 0;\n\nfont-size: 24px;\n\n}\n\n```\n\n</Sandpack>\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/passing-props-to-a-component.md"}},"2219":{"pageContent":"--\n\ntitle: renderToString\n\n--\n\n<Pitfall>\n\n`renderToString` does not support streaming or waiting for data. [See the alternatives.](#alternatives)\n\n</Pitfall>\n\n<Intro>\n\n`renderToString` renders a React tree to an HTML string.\n\n```js\n\nconst html = renderToString(reactNode)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `renderToString(reactNode)` {/*rendertostring*/}\n\nOn the server, call `renderToString` to render your app to HTML.\n\n```js\n\nimport { renderToString } from 'react-dom/server';\n\nconst html = renderToString(<App />);\n\n```\n\nOn the client, call [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) to make the server-generated HTML interactive.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`reactNode`: A React node you want to render to HTML. For example, a JSX node like `<App />`.\n\n#### Returns {/*returns*/}\n\nAn HTML string.\n\n#### Caveats {/*caveats*/}\n\n`renderToString` has limited Suspense support. If a component suspends, `renderToString` immediately sends its fallback as HTML.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToString.md"}},"2220":{"pageContent":"#### Returns {/*returns*/}\n\nAn HTML string.\n\n#### Caveats {/*caveats*/}\n\n`renderToString` has limited Suspense support. If a component suspends, `renderToString` immediately sends its fallback as HTML.\n\n`renderToString` works in the browser, but using it in the client code is [not recommended.](#removing-rendertostring-from-the-client-code)\n\n--\n\n## Usage {/*usage*/}\n\n### Rendering a React tree as HTML to a string {/*rendering-a-react-tree-as-html-to-a-string*/}\n\nCall `renderToString` to render your app to an HTML string which you can send with your server response:\n\n```js {5-6}\n\nimport { renderToString } from 'react-dom/server';\n\n// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst html = renderToString(<App />);\n\nresponse.send(html);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToString.md"}},"2221":{"pageContent":"// The route handler syntax depends on your backend framework\n\napp.use('/', (request, response) => {\n\nconst html = renderToString(<App />);\n\nresponse.send(html);\n\n});\n\n```\n\nThis will produce the initial non-interactive HTML output of your React components. On the client, you will need to call [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) to *hydrate* that server-generated HTML and make it interactive.\n\n<Pitfall>\n\n`renderToString` does not support streaming or waiting for data. [See the alternatives.](#alternatives)\n\n</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Migrating from `renderToString` to a streaming method on the server {/*migrating-from-rendertostring-to-a-streaming-method-on-the-server*/}\n\n`renderToString` returns a string immediately, so it does not support streaming or waiting for data.\n\nWhen possible, we recommend to use these fully-featured alternatives:\n\nIf you use Node.js, use [`renderToPipeableStream`.](/reference/react-dom/server/renderToPipeableStream)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToString.md"}},"2222":{"pageContent":"When possible, we recommend to use these fully-featured alternatives:\n\nIf you use Node.js, use [`renderToPipeableStream`.](/reference/react-dom/server/renderToPipeableStream)\n\nIf you use Deno or a modern edge runtime with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API), use [`renderToReadableStream`.](/reference/react-dom/server/renderToReadableStream)\n\nYou can continue using `renderToString` if your server environment does not support streams.\n\n--\n\n### Removing `renderToString` from the client code {/*removing-rendertostring-from-the-client-code*/}\n\nSometimes, `renderToString` is used on the client to convert some component to HTML.\n\n```js {1-2}\n\n// 🚩 Unnecessary: using renderToString on the client\n\nimport { renderToString } from 'react-dom/server';\n\nconst html = renderToString(<MyIcon />);\n\nconsole.log(html); // For example, \"<svg>...</svg>\"\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToString.md"}},"2223":{"pageContent":"// 🚩 Unnecessary: using renderToString on the client\n\nimport { renderToString } from 'react-dom/server';\n\nconst html = renderToString(<MyIcon />);\n\nconsole.log(html); // For example, \"<svg>...</svg>\"\n\n```\n\nImporting `react-dom/server` **on the client** unnecessarily increases your bundle size and should be avoided. If you need to render some component to HTML in the browser, use [`createRoot`](/reference/react-dom/client/createRoot) and read HTML from the DOM:\n\n```js\n\nimport { createRoot } from 'react-dom/client';\n\nimport { flushSync } from 'react-dom';\n\nconst div = document.createElement('div');\n\nconst root = createRoot(div);\n\nflushSync(() => {\n\nroot.render(<MyIcon />);\n\n});\n\nconsole.log(div.innerHTML); // For example, \"<svg>...</svg>\"\n\n```\n\nThe [`flushSync`](/reference/react-dom/flushSync) call is necessary so that the DOM is updated before reading its [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) property.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToString.md"}},"2224":{"pageContent":"--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### When a component suspends, the HTML always contains a fallback {/*when-a-component-suspends-the-html-always-contains-a-fallback*/}\n\n`renderToString` does not fully support Suspense.\n\nIf some component suspends (for example, because it's defined with [`lazy`](/reference/react/lazy) or fetches data), `renderToString` will not wait for its content to resolve. Instead, `renderToString` will find the closest [`<Suspense>`](/reference/react/Suspense) boundary above it and render its `fallback` prop in the HTML. The content will not appear until the client code loads.\n\nTo solve this, use one of the [recommended streaming solutions.](#migrating-from-rendertostring-to-a-streaming-method-on-the-server) They can stream content in chunks as it resolves on the server so that the user sees the page being progressively filled in even before the client code loads.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/server/renderToString.md"}},"2225":{"pageContent":"--\n\ntitle: \"<input>\"\n\n--\n\n<Intro>\n\nThe [built-in browser `<input>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) lets you render different kinds of form inputs.\n\n```js\n\n<input />\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<input>` {/*input*/}\n\nTo display an input, render the [built-in browser `<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) component.\n\n```js\n\n<input name=\"myInput\" />\n\n```\n\n[See more examples below.](#usage)\n\n#### Props {/*props*/}\n\n`<input>` supports all [common element props.](/reference/react-dom/components/common#props)\n\nYou can [make an input controlled](#controlling-an-input-with-a-state-variable) by passing one of these props:\n\n[`checked`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#checked): A boolean. For a checkbox input or a radio button, controls whether it is selected.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2226":{"pageContent":"[`checked`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#checked): A boolean. For a checkbox input or a radio button, controls whether it is selected.\n\n[`value`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#value): A string. For a text input, controls its text. (For a radio button, specifies its form data.)\n\nWhen you pass either of them, you must also pass an `onChange` handler that updates the passed value.\n\nThese `<input>` props are only relevant for uncontrolled inputs:\n\n[`defaultChecked`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#defaultChecked): A boolean. Specifies [the initial value](#providing-an-initial-value-for-an-input) for `type=\"checkbox\"` and `type=\"radio\"` inputs.\n\n[`defaultValue`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#defaultValue): A string. Specifies [the initial value](#providing-an-initial-value-for-an-input) for a text input.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2227":{"pageContent":"[`defaultValue`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#defaultValue): A string. Specifies [the initial value](#providing-an-initial-value-for-an-input) for a text input.\n\nThese `<input>` props are relevant both for uncontrolled and controlled inputs:\n\n[`accept`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#accept): A string. Specifies which filetypes are accepted by a `type=\"file\"` input.\n\n[`alt`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#alt): A string. Specifies the alternative image text for a `type=\"image\"` input.\n\n[`capture`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#capture): A string. Specifies the media (microphone, video, or camera) captured by a `type=\"file\"` input.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2228":{"pageContent":"[`capture`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#capture): A string. Specifies the media (microphone, video, or camera) captured by a `type=\"file\"` input.\n\n[`autoComplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocomplete): A string. Specifies one of the possible [autocomplete behaviors.](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values)\n\n[`autoFocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autofocus): A boolean. If `true`, React will focus the element on mount.\n\n[`dirname`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#dirname): A string. Specifies the form field name for the element's directionality.\n\n[`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#disabled): A boolean. If `true`, the input will not be interactive and will appear dimmed.\n\n`children`: `<input>` does not accept children.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2229":{"pageContent":"`children`: `<input>` does not accept children.\n\n[`form`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#form): A string. Specifies the `id` of the `<form>` this input belongs to. If omitted, it's the closest parent form.\n\n[`formAction`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formaction): A string. Overrides the parent `<form action>` for `type=\"submit\"` and `type=\"image\"`.\n\n[`formEnctype`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formenctype): A string. Overrides the parent `<form enctype>` for `type=\"submit\"` and `type=\"image\"`.\n\n[`formMethod`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formmethod): A string. Overrides the parent `<form method>` for `type=\"submit\"` and `type=\"image\"`.\n\n[`formNoValidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formnovalidate): A string. Overrides the parent `<form noValidate>` for `type=\"submit\"` and `type=\"image\"`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2230":{"pageContent":"[`formNoValidate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formnovalidate): A string. Overrides the parent `<form noValidate>` for `type=\"submit\"` and `type=\"image\"`.\n\n[`formTarget`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formtarget): A string. Overrides the parent `<form target>` for `type=\"submit\"` and `type=\"image\"`.\n\n[`height`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#height): A string. Specifies the image height for `type=\"image\"`.\n\n[`list`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#list): A string. Specifies the `id` of the `<datalist>` with the autocomplete options.\n\n[`max`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max): A number. Specifies the maximum value of numerical and datetime inputs.\n\n[`maxLength`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength): A number. Specifies the maximum length of text and other inputs.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2231":{"pageContent":"[`maxLength`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength): A number. Specifies the maximum length of text and other inputs.\n\n[`min`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min): A number. Specifies the minimum value of numerical and datetime inputs.\n\n[`minLength`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength): A number. Specifies the minimum length of text and other inputs.\n\n[`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#multiple): A boolean. Specifies whether multiple values are allowed for `<type=\"file\"` and `type=\"email\"`.\n\n[`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name): A string. Specifies the name for this input that's [submitted with the form.](#reading-the-input-values-when-submitting-a-form)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2232":{"pageContent":"`onChange`: An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Required for [controlled inputs.](#controlling-an-input-with-a-state-variable) Fires immediately when the input's value is changed by the user (for example, it fires on every keystroke). Behaves like the browser [`input` event.](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)\n\n`onChangeCapture`: A version of `onChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onInput`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use `onChange` instead which works similarly.\n\n`onInputCapture`: A version of `onInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2233":{"pageContent":"`onInputCapture`: A version of `onInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onInvalid`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires if an input fails validation on form submit. Unlike the built-in `invalid` event, the React `onInvalid` event bubbles.\n\n`onInvalidCapture`: A version of `onInvalid` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSelect`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires after the selection inside the `<input>` changes. React extends the `onSelect` event to also fire for empty selection and on edits (which may affect the selection).","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2234":{"pageContent":"`onSelectCapture`: A version of `onSelect` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`pattern`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#pattern): A string. Specifies the pattern that the `value` must match.\n\n[`placeholder`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder): A string. Displayed in a dimmed color when the input value is empty.\n\n[`readOnly`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#readonly): A boolean. If `true`, the input is not editable by the user.\n\n[`required`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#required): A boolean. If `true`, the value must be provided for the form to submit.\n\n[`size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#size): A number. Similar to setting width, but the unit depends on the control.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2235":{"pageContent":"[`size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#size): A number. Similar to setting width, but the unit depends on the control.\n\n[`src`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#src): A string. Specifies the image source for a `type=\"image\"` input.\n\n[`step`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#step): A positive number or an `'any'` string. Specifies the distance between valid values.\n\n[`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#type): A string. One of the [input types.](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types)\n\n[`width`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#width):  A string. Specifies the image width for a `type=\"image\"` input.\n\n#### Caveats {/*caveats*/}\n\nCheckboxes need `checked` (or `defaultChecked`), not `value` (or `defaultValue`).","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2236":{"pageContent":"#### Caveats {/*caveats*/}\n\nCheckboxes need `checked` (or `defaultChecked`), not `value` (or `defaultValue`).\n\nIf a text input receives a string `value` prop, it will be [treated as controlled.](#controlling-an-input-with-a-state-variable)\n\nIf a checkbox or a radio button receives a boolean `checked` prop, it will be [treated as controlled.](#controlling-an-input-with-a-state-variable)\n\nAn input can't be both controlled and uncontrolled at the same time.\n\nAn input cannot switch between being controlled or uncontrolled over its lifetime.\n\nEvery controlled input needs an `onChange` event handler that synchronously updates its backing value.\n\n--\n\n## Usage {/*usage*/}\n\n### Displaying inputs of different types {/*displaying-inputs-of-different-types*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2237":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Displaying inputs of different types {/*displaying-inputs-of-different-types*/}\n\nTo display an input, render an `<input>` component. By default, it will be a text input. You can pass `type=\"checkbox\"` for a checkbox, `type=\"radio\"` for a radio button, [or one of the other input types.](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types)\n\n<Sandpack>\n\n```js\n\nexport default function MyForm() {\n\nreturn (\n\n<>\n\n<label>\n\nText input: <input name=\"myInput\" />\n\n</label>\n\n<hr />\n\n<label>\n\nCheckbox: <input type=\"checkbox\" name=\"myCheckbox\" />\n\n</label>\n\n<hr />\n\n<p>\n\nRadio buttons:\n\n<label>\n\n<input type=\"radio\" name=\"myRadio\" value=\"option1\" />\n\nOption 1\n\n</label>\n\n<label>\n\n<input type=\"radio\" name=\"myRadio\" value=\"option2\" />\n\nOption 2\n\n</label>\n\n<label>\n\n<input type=\"radio\" name=\"myRadio\" value=\"option3\" />\n\nOption 3\n\n</label>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing a label for an input {/*providing-a-label-for-an-input*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2238":{"pageContent":"Option 3\n\n</label>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing a label for an input {/*providing-a-label-for-an-input*/}\n\nTypically, you will place every `<input>` inside a [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) tag. This tells the browser that this label is associated with that input. When the user clicks the label, the browser will automatically focus the input. It's also essential for accessibility: a screen reader will announce the label caption when the user focuses the associated input.\n\nIf you can't nest `<input>` into a `<label>`, associate them by passing the same ID to `<input id>` and [`<label htmlFor>`.](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) To avoid conflicts between multiple instances of one component, generate such an ID with [`useId`.](/reference/react/useId)\n\n<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2239":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nexport default function Form() {\n\nconst ageInputId = useId();\n\nreturn (\n\n<>\n\n<label>\n\nYour first name:\n\n<input name=\"firstName\" />\n\n</label>\n\n<hr />\n\n<label htmlFor={ageInputId}>Your age:</label>\n\n<input id={ageInputId} name=\"age\" type=\"number\" />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing an initial value for an input {/*providing-an-initial-value-for-an-input*/}\n\nYou can optionally specify the initial value for any input. Pass it as the `defaultValue` string for text inputs. Checkboxes and radio buttons should specify the initial value with the `defaultChecked` boolean instead.\n\n<Sandpack>\n\n```js\n\nexport default function MyForm() {\n\nreturn (\n\n<>\n\n<label>\n\nText input: <input name=\"myInput\" defaultValue=\"Some initial value\" />\n\n</label>\n\n<hr />\n\n<label>\n\nCheckbox: <input type=\"checkbox\" name=\"myCheckbox\" defaultChecked={true} />\n\n</label>\n\n<hr />\n\n<p>\n\nRadio buttons:\n\n<label>\n\n<input type=\"radio\" name=\"myRadio\" value=\"option1\" />\n\nOption 1\n\n</label>\n\n<label>\n\n<input\n\ntype=\"radio\"","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2240":{"pageContent":"</label>\n\n<hr />\n\n<p>\n\nRadio buttons:\n\n<label>\n\n<input type=\"radio\" name=\"myRadio\" value=\"option1\" />\n\nOption 1\n\n</label>\n\n<label>\n\n<input\n\ntype=\"radio\"\n\nname=\"myRadio\"\n\nvalue=\"option2\"\n\ndefaultChecked={true}\n\n/>\n\nOption 2\n\n</label>\n\n<label>\n\n<input type=\"radio\" name=\"myRadio\" value=\"option3\" />\n\nOption 3\n\n</label>\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Reading the input values when submitting a form {/*reading-the-input-values-when-submitting-a-form*/}\n\nAdd a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) around your inputs with a [`<button type=\"submit\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) inside. It will call your `<form onSubmit>` event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling `e.preventDefault()`. To read the form data, use [`new FormData(e.target)`](https://developer.mozilla.org/en-US/docs/Web/API/FormData).\n\n<Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2241":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function MyForm() {\n\nfunction handleSubmit(e) {\n\n// Prevent the browser from reloading the page\n\ne.preventDefault();\n\n// Read the form data\n\nconst form = e.target;\n\nconst formData = new FormData(form);\n\n// You can pass formData as a fetch body directly:\n\nfetch('/some-api', { method: form.method, body: formData });\n\n// Or you can work with it as a plain object:\n\nconst formJson = Object.fromEntries(formData.entries());\n\nconsole.log(formJson);\n\n}\n\nreturn (\n\n<form method=\"post\" onSubmit={handleSubmit}>\n\n<label>\n\nText input: <input name=\"myInput\" defaultValue=\"Some initial value\" />\n\n</label>\n\n<hr />\n\n<label>\n\nCheckbox: <input type=\"checkbox\" name=\"myCheckbox\" defaultChecked={true} />\n\n</label>\n\n<hr />\n\n<p>\n\nRadio buttons:\n\n<label><input type=\"radio\" name=\"myRadio\" value=\"option1\" /> Option 1</label>\n\n<label><input type=\"radio\" name=\"myRadio\" value=\"option2\" defaultChecked={true} /> Option 2</label>\n\n<label><input type=\"radio\" name=\"myRadio\" value=\"option3\" /> Option 3</label>\n\n</p>\n\n<hr />","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2242":{"pageContent":"<label><input type=\"radio\" name=\"myRadio\" value=\"option2\" defaultChecked={true} /> Option 2</label>\n\n<label><input type=\"radio\" name=\"myRadio\" value=\"option3\" /> Option 3</label>\n\n</p>\n\n<hr />\n\n<button type=\"reset\">Reset form</button>\n\n<button type=\"submit\">Submit form</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Note>\n\nGive a `name` to every `<input>`, for example `<input name=\"firstName\" defaultValue=\"Taylor\" />`. The `name` you specified will be used as a key in the form data, for example `{ firstName: \"Taylor\" }`.\n\n</Note>\n\n<Pitfall>\n\nBy default, *any* `<button>` inside a `<form>` will submit it. This can be surprising! If you have your own custom `Button` React component, consider returning [`<button type=\"button\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button) instead of `<button>`. Then, to be explicit, use `<button type=\"submit\">` for buttons that *are* supposed to submit the form.\n\n</Pitfall>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2243":{"pageContent":"</Pitfall>\n\n--\n\n### Controlling an input with a state variable {/*controlling-an-input-with-a-state-variable*/}\n\nAn input like `<input />` is *uncontrolled.* Even if you [pass an initial value](#providing-an-initial-value-for-an-input) like `<input defaultValue=\"Initial text\" />`, your JSX only specifies the initial value. It does not control what the value should be right now.\n\n*To render a _controlled_ input, pass the `value` prop to it (or `checked` for checkboxes and radios).** React will force the input to always have the `value` you passed. Typically, you will control an input by declaring a [state variable:](/reference/react/useState)\n\n```js {2,6,7}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState(''); // Declare a state variable...\n\n// ...\n\nreturn (\n\n<input\n\nvalue={firstName} // ...force the input's value to match the state variable...\n\nonChange={e => setFirstName(e.target.value)} // ... and update the state variable on any edits!\n\n/>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2244":{"pageContent":"return (\n\n<input\n\nvalue={firstName} // ...force the input's value to match the state variable...\n\nonChange={e => setFirstName(e.target.value)} // ... and update the state variable on any edits!\n\n/>\n\n);\n\n}\n\n```\n\nA controlled input makes sense if you needed state anyway--for example, to re-render your UI on every edit:\n\n```js {2,9}\n\nfunction Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input value={firstName} onChange={e => setFirstName(e.target.value)} />\n\n</label>\n\n{firstName !== '' && <p>Your name is {firstName}.</p>}\n\n...\n\n```\n\nIt's also useful if you want to offer multiple ways to adjust the input state (for example, by clicking a button):\n\n```js {3-4,10-11,14}\n\nfunction Form() {\n\n// ...\n\nconst [age, setAge] = useState('');\n\nconst ageAsNumber = Number(age);\n\nreturn (\n\n<>\n\n<label>\n\nAge:\n\n<input\n\nvalue={age}\n\nonChange={e => setAge(e.target.value)}\n\ntype=\"number\"\n\n/>\n\n<button onClick={() => setAge(ageAsNumber + 10)}>\n\nAdd 10 years\n\n</button>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2245":{"pageContent":"const ageAsNumber = Number(age);\n\nreturn (\n\n<>\n\n<label>\n\nAge:\n\n<input\n\nvalue={age}\n\nonChange={e => setAge(e.target.value)}\n\ntype=\"number\"\n\n/>\n\n<button onClick={() => setAge(ageAsNumber + 10)}>\n\nAdd 10 years\n\n</button>\n\n```\n\nThe `value` you pass to controlled components should not be `undefined` or `null`. If you need the initial value to be empty (such as with the `firstName` field below), initialize your state variable to an empty string (`''`).\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [firstName, setFirstName] = useState('');\n\nconst [age, setAge] = useState('20');\n\nconst ageAsNumber = Number(age);\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={firstName}\n\nonChange={e => setFirstName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nAge:\n\n<input\n\nvalue={age}\n\nonChange={e => setAge(e.target.value)}\n\ntype=\"number\"\n\n/>\n\n<button onClick={() => setAge(ageAsNumber + 10)}>\n\nAdd 10 years\n\n</button>\n\n</label>\n\n{firstName !== '' &&\n\n<p>Your name is {firstName}.</p>\n\n}\n\n{ageAsNumber > 0 &&\n\n<p>Your age is {ageAsNumber}.</p>\n\n}\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2246":{"pageContent":"/>\n\n<button onClick={() => setAge(ageAsNumber + 10)}>\n\nAdd 10 years\n\n</button>\n\n</label>\n\n{firstName !== '' &&\n\n<p>Your name is {firstName}.</p>\n\n}\n\n{ageAsNumber > 0 &&\n\n<p>Your age is {ageAsNumber}.</p>\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\np { font-weight: bold; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\n*If you pass `value` without `onChange`, it will be impossible to type into the input.** When you control an input by passing some `value` to it, you *force* it to always have the value you passed. So if you pass a state variable as a `value` but forget to update that state variable synchronously during the `onChange` event handler, React will revert the input after every keystroke back to the `value` that you specified.\n\n</Pitfall>\n\n--\n\n### Optimizing re-rendering on every keystroke {/*optimizing-re-rendering-on-every-keystroke*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2247":{"pageContent":"</Pitfall>\n\n--\n\n### Optimizing re-rendering on every keystroke {/*optimizing-re-rendering-on-every-keystroke*/}\n\nWhen you use a controlled input, you set the state on every keystroke. If the component containing your state re-renders a large tree, this can get slow. There's a few ways you can optimize re-rendering performance.\n\nFor example, suppose you start with a form that re-renders all page content on every keystroke:\n\n```js {5-8}\n\nfunction App() {\n\nconst [firstName, setFirstName] = useState('');\n\nreturn (\n\n<>\n\n<form>\n\n<input value={firstName} onChange={e => setFirstName(e.target.value)} />\n\n</form>\n\n<PageContent />\n\n</>\n\n);\n\n}\n\n```\n\nSince `<PageContent />` doesn't rely on the input state, you can move the input state into its own component:\n\n```js {4,10-17}\n\nfunction App() {\n\nreturn (\n\n<>\n\n<SignupForm />\n\n<PageContent />\n\n</>\n\n);\n\n}\n\nfunction SignupForm() {\n\nconst [firstName, setFirstName] = useState('');\n\nreturn (\n\n<form>\n\n<input value={firstName} onChange={e => setFirstName(e.target.value)} />\n\n</form>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2248":{"pageContent":"<PageContent />\n\n</>\n\n);\n\n}\n\nfunction SignupForm() {\n\nconst [firstName, setFirstName] = useState('');\n\nreturn (\n\n<form>\n\n<input value={firstName} onChange={e => setFirstName(e.target.value)} />\n\n</form>\n\n);\n\n}\n\n```\n\nThis significantly improves performance because now only `SignupForm` re-renders on every keystroke.\n\nIf there is no way to avoid re-rendering (for example, if `PageContent` depends on the search input's value), [`useDeferredValue`](/reference/react/useDeferredValue#deferring-re-rendering-for-a-part-of-the-ui) lets you keep the controlled input responsive even in the middle of a large re-render.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My text input doesn't update when I type into it {/*my-text-input-doesnt-update-when-i-type-into-it*/}\n\nIf you render an input with `value` but no `onChange`, you will see an error in the console:\n\n```js\n\n// 🔴 Bug: controlled text input with no onChange handler\n\n<input value={something} />\n\n```\n\n<ConsoleBlock level=\"error\">","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2249":{"pageContent":"```js\n\n// 🔴 Bug: controlled text input with no onChange handler\n\n<input value={something} />\n\n```\n\n<ConsoleBlock level=\"error\">\n\nYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.\n\n</ConsoleBlock>\n\nAs the error message suggests, if you only wanted to [specify the *initial* value,](#providing-an-initial-value-for-an-input) pass `defaultValue` instead:\n\n```js\n\n// ✅ Good: uncontrolled input with an initial value\n\n<input defaultValue={something} />\n\n```\n\nIf you want [to control this input with a state variable,](#controlling-an-input-with-a-state-variable) specify an `onChange` handler:\n\n```js\n\n// ✅ Good: controlled input with onChange\n\n<input value={something} onChange={e => setSomething(e.target.value)} />\n\n```\n\nIf the value is intentionally read-only, add a `readOnly` prop to suppress the error:\n\n```js\n\n// ✅ Good: readonly controlled input without on change","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2250":{"pageContent":"```\n\nIf the value is intentionally read-only, add a `readOnly` prop to suppress the error:\n\n```js\n\n// ✅ Good: readonly controlled input without on change\n\n<input value={something} readOnly={true} />\n\n```\n\n--\n\n### My checkbox doesn't update when I click on it {/*my-checkbox-doesnt-update-when-i-click-on-it*/}\n\nIf you render a checkbox with `checked` but no `onChange`, you will see an error in the console:\n\n```js\n\n// 🔴 Bug: controlled checkbox with no onChange handler\n\n<input type=\"checkbox\" checked={something} />\n\n```\n\n<ConsoleBlock level=\"error\">\n\nYou provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.\n\n</ConsoleBlock>\n\nAs the error message suggests, if you only wanted to [specify the *initial* value,](#providing-an-initial-value-for-an-input) pass `defaultChecked` instead:\n\n```js\n\n// ✅ Good: uncontrolled checkbox with an initial value","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2251":{"pageContent":"```js\n\n// ✅ Good: uncontrolled checkbox with an initial value\n\n<input type=\"checkbox\" defaultChecked={something} />\n\n```\n\nIf you want [to control this checkbox with a state variable,](#controlling-an-input-with-a-state-variable) specify an `onChange` handler:\n\n```js\n\n// ✅ Good: controlled checkbox with onChange\n\n<input type=\"checkbox\" checked={something} onChange={e => setSomething(e.target.checked)} />\n\n```\n\n<Pitfall>\n\nYou need to read `e.target.checked` rather than `e.target.value` for checkboxes.\n\n</Pitfall>\n\nIf the checkbox is intentionally read-only, add a `readOnly` prop to suppress the error:\n\n```js\n\n// ✅ Good: readonly controlled input without on change\n\n<input type=\"checkbox\" checked={something} readOnly={true} />\n\n```\n\n--\n\n### My input caret jumps to the beginning on every keystroke {/*my-input-caret-jumps-to-the-beginning-on-every-keystroke*/}\n\nIf you [control an input,](#controlling-an-input-with-a-state-variable) you must update its state variable to the input's value from the DOM during `onChange`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2252":{"pageContent":"If you [control an input,](#controlling-an-input-with-a-state-variable) you must update its state variable to the input's value from the DOM during `onChange`.\n\nYou can't update it to something other than `e.target.value` (or `e.target.checked` for checkboxes):\n\n```js\n\nfunction handleChange(e) {\n\n// 🔴 Bug: updating an input to something other than e.target.value\n\nsetFirstName(e.target.value.toUpperCase());\n\n}\n\n```\n\nYou also can't update it asynchronously:\n\n```js\n\nfunction handleChange(e) {\n\n// 🔴 Bug: updating an input asynchronously\n\nsetTimeout(() => {\n\nsetFirstName(e.target.value);\n\n}, 100);\n\n}\n\n```\n\nTo fix your code, update it synchronously to `e.target.value`:\n\n```js\n\nfunction handleChange(e) {\n\n// ✅ Updating a controlled input to e.target.value synchronously\n\nsetFirstName(e.target.value);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2253":{"pageContent":"}\n\n```\n\nTo fix your code, update it synchronously to `e.target.value`:\n\n```js\n\nfunction handleChange(e) {\n\n// ✅ Updating a controlled input to e.target.value synchronously\n\nsetFirstName(e.target.value);\n\n}\n\n```\n\nIf this doesn't fix the problem, it's possible that the input gets removed and re-added from the DOM on every keystroke. This can happen if you're accidentally [resetting state](/learn/preserving-and-resetting-state) on every re-render. For example, this can happen if the input or one of its parents always receives a different `key` attribute, or if you nest component definitions (which is not allowed in React and causes the \"inner\" component to always be considered a different tree).\n\n--\n\n### I'm getting an error: \"A component is changing an uncontrolled input to be controlled\" {/*im-getting-an-error-a-component-is-changing-an-uncontrolled-input-to-be-controlled*/}\n\nIf you provide a `value` to the component, it must remain a string throughout its lifetime.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2254":{"pageContent":"If you provide a `value` to the component, it must remain a string throughout its lifetime.\n\nYou cannot pass `value={undefined}` first and later pass `value=\"some string\"` because React won't know whether you want the component to be uncontrolled or controlled. A controlled component should always receive a string `value`, not `null` or `undefined`.\n\nIf your `value` is coming from an API or a state variable, it might be initialized to `null` or `undefined`. In that case, either set it to an empty string (`''`) initially, or pass `value={someValue ?? ''}` to ensure `value` is a string.\n\nSimilarly, if you pass `checked` to a checkbox, ensure it's always a boolean.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/input.md"}},"2255":{"pageContent":"--\n\ntitle: \"Common components (e.g. <div>)\"\n\n--\n\n<Intro>\n\nAll built-in browser components, such as [`<div>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div), support some common props and events.\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### Common components (e.g. `<div>`) {/*common*/}\n\n```js\n\n<div className=\"wrapper\">Some content</div>\n\n```\n\n[See more examples below.](#usage)\n\n#### Props {/*common-props*/}\n\nThese special React props are supported for all built-in components:\n\n`children`: A React node (an element, a string, a number, [a portal,](/reference/react-dom/createPortal) an empty node like `null`, `undefined` and booleans, or an array of other React nodes). Specifies the content inside the component. When you use JSX, you will usually specify the `children` prop implicitly by nesting tags like `<div><span /></div>`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2256":{"pageContent":"`dangerouslySetInnerHTML`: An object of the form `{ __html: '<p>some html</p>' }` with a raw HTML string inside. Overrides the [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) property of the DOM node and displays the passed HTML inside. This should be used with extreme caution! If the HTML inside isn't trusted (for example, if it's based on user data), you risk introducing an [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting) vulnerability. [Read more about using `dangerouslySetInnerHTML`.](#dangerously-setting-the-inner-html)\n\n`ref`: A ref object from [`useRef`](/reference/react/useRef) or [`createRef`](/reference/react/createRef), or a [`ref` callback function,](#ref-callback) or a string for [legacy refs.](https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs) Your ref will be filled with the DOM element for this node. [Read more about manipulating the DOM with refs.](#manipulating-a-dom-node-with-a-ref)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2257":{"pageContent":"`suppressContentEditableWarning`: A boolean. If `true`, suppresses the warning that React shows for elements that both have `children` and `contentEditable={true}` (which normally do not work together). Use this if you're building a text input library that manages the `contentEditable` content manually.\n\n`suppressHydrationWarning`: A boolean. If you use [server rendering,](/reference/react-dom/server) normally there is a warning when the server and the client render different content. In some rare cases (like timestamps), it is very hard or impossible to guarantee an exact match. If you set `suppressHydrationWarning` to `true`, React will not warn you about mismatches in the attributes and the content of that element. It only works one level deep, and is intended to be used as an escape hatch. Don't overuse it. [Read more about suppressing hydration errors.](/reference/react-dom/client/hydrateRoot#suppressing-unavoidable-hydration-mismatch-errors)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2258":{"pageContent":"`style`: An object with CSS styles, for example `{ fontWeight: 'bold', margin: 20 }`. Similarly to the DOM [`style`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) property, the CSS property names need to be written as `camelCase`, for example `fontWeight` instead of `font-weight`. You can pass strings or numbers as values. If you pass a number, like `width: 100`, React will automatically append `px` (\"pixels\") to the value unless it's a [unitless property.](https://github.com/facebook/react/blob/81d4ee9ca5c405dce62f64e61506b8e155f38d8d/packages/react-dom-bindings/src/shared/CSSProperty.js#L8-L57) We recommend using `style` only for dynamic styles where you don't know the style values ahead of time. In other cases, applying plain CSS classes with `className` is more efficient. [Read more about applying CSS with `className` and `styles`.](#applying-css-styles)\n\nThese standard DOM props are also supported for all built-in components:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2259":{"pageContent":"These standard DOM props are also supported for all built-in components:\n\n[`accessKey`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey): A string. Specifies a keyboard shortcut for the element. [Not generally recommended.](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey#accessibility_concerns)\n\n[`aria-*`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes): ARIA attributes let you specify the accessibility tree information for this element. See [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes) for a complete reference. In React, all ARIA attribute names are exactly the same as in HTML.\n\n[`autoCapitalize`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize): A string. Specifies whether and how the user input should be capitalized.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2260":{"pageContent":"[`autoCapitalize`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize): A string. Specifies whether and how the user input should be capitalized.\n\n[`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className): A string. Specifies the element's CSS class name. [Read more about applying CSS styles.](#applying-css-styles)\n\n[`contentEditable`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable): A boolean. If `true`, the browser lets the user edit the rendered element directly. This is used to implement rich text input libraries like [Lexical.](https://lexical.dev/) React warns if you try to pass React children to an element with `contentEditable={true}` because React will not be able to update its content after user edits.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2261":{"pageContent":"[`data-*`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*): Data attributes let you attach some string data to the element, for example `data-fruit=\"banana\"`. In React, they are not commonly used because you would usually read data from props or state instead.\n\n[`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir): Either `'ltr'` or `'rtl'`. Specifies the text direction of the element.\n\n[`draggable`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable): A boolean. Specifies whether the element is draggable. Part of [HTML Drag and Drop API.](https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API)\n\n[`enterKeyHint`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint): A string. Specifies which action to present for the enter key on virtual keyboards.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2262":{"pageContent":"[`enterKeyHint`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint): A string. Specifies which action to present for the enter key on virtual keyboards.\n\n[`htmlFor`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor): A string. For [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) and [`<output>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output), lets you [associate the label with some control.](/reference/react-dom/components/input#providing-a-label-for-an-input) Same as [`for` HTML attribute.](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/for) React uses the standard DOM property names (`htmlFor`) instead of HTML attribute names.\n\n[`hidden`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden): A boolean or a string. Specifies whether the element should be hidden.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2263":{"pageContent":"[`hidden`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden): A boolean or a string. Specifies whether the element should be hidden.\n\n[`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id): A string. Specifies a unique identifier for this element, which can be used to find it later or connect it with other elements. Generate it with [`useId`](/reference/react/useId) to avoid clashes between multiple instances of the same component.\n\n[`is`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is): A string. If specified, the component will behave like a [custom element.](/reference/react-dom/components#custom-html-elements)\n\n[`inputMode`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode): A string. Specifies what kind of keyboard to display (for example, text, number or telephone).","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2264":{"pageContent":"[`inputMode`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode): A string. Specifies what kind of keyboard to display (for example, text, number or telephone).\n\n[`itemProp`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop): A string. Specifies which property the element represents for structured data crawlers.\n\n[`lang`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang): A string. Specifies the language of the element.\n\n[`onAnimationEnd`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event): An [`AnimationEvent` handler](#animationevent-handler) function. Fires when a CSS animation completes.\n\n`onAnimationEndCapture`: A version of `onAnimationEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2265":{"pageContent":"`onAnimationEndCapture`: A version of `onAnimationEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onAnimationIteration`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event): An [`AnimationEvent` handler](#animationevent-handler) function. Fires when an iteration of a CSS animation ends, and another one begins.\n\n`onAnimationIterationCapture`: A version of `onAnimationIteration` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onAnimationStart`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event): An [`AnimationEvent` handler](#animationevent-handler) function. Fires when a CSS animation starts.\n\n`onAnimationStartCapture`: `onAnimationStart`, but fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2266":{"pageContent":"`onAnimationStartCapture`: `onAnimationStart`, but fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onAuxClick`](https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when a non-primary pointer button was clicked.\n\n`onAuxClickCapture`: A version of `onAuxClick` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n`onBeforeInput`: An [`InputEvent` handler](#inputevent-handler) function. Fires before the value of an editable element is modified. React does *not* yet use the native [`beforeinput`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event) event, and instead attempts to polyfill it using other events.\n\n`onBeforeInputCapture`: A version of `onBeforeInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2267":{"pageContent":"`onBeforeInputCapture`: A version of `onBeforeInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n`onBlur`: A [`FocusEvent` handler](#focusevent-handler) function. Fires when an element lost focus. Unlike the built-in browser [`blur`](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event) event, in React the `onBlur` event bubbles.\n\n`onBlurCapture`: A version of `onBlur` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onClick`](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the primary button was clicked on the pointing device.\n\n`onClickCapture`: A version of `onClick` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2268":{"pageContent":"`onClickCapture`: A version of `onClick` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCompositionStart`](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event): A [`CompositionEvent` handler](#compositionevent-handler) function. Fires when an [input method editor](https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor) starts a new composition session.\n\n`onCompositionStartCapture`: A version of `onCompositionStart` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCompositionEnd`](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event): A [`CompositionEvent` handler](#compositionevent-handler) function. Fires when an [input method editor](https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor) completes or cancels a composition session.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2269":{"pageContent":"`onCompositionEndCapture`: A version of `onCompositionEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCompositionUpdate`](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event): A [`CompositionEvent` handler](#compositionevent-handler) function. Fires when an [input method editor](https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor) receives a new character.\n\n`onCompositionUpdateCapture`: A version of `onCompositionUpdate` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onContextMenu`](https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the user tries to open a context menu.\n\n`onContextMenuCapture`: A version of `onContextMenu` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2270":{"pageContent":"`onContextMenuCapture`: A version of `onContextMenu` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCopy`](https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event): A [`ClipboardEvent` handler](#clipboardevent-handler) function. Fires when the user tries to copy something into the clipboard.\n\n`onCopyCapture`: A version of `onCopy` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCut`](https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event): A [`ClipboardEvent` handler](#clipboardevent-handler) function. Fires when the user tries to cut something into the clipboard.\n\n`onCutCapture`: A version of `onCut` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2271":{"pageContent":"`onCutCapture`: A version of `onCut` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n`onDoubleClick`: A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the user clicks twice. Corresponds to the browser [`dblclick` event.](https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event)\n\n`onDoubleClickCapture`: A version of `onDoubleClick` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDrag`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event): A [`DragEvent` handler](#dragevent-handler) function. Fires while the user is dragging something.\n\n`onDragCapture`: A version of `onDrag` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDragEnd`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event): A [`DragEvent` handler](#dragevent-handler) function. Fires when the user stops dragging something.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2272":{"pageContent":"[`onDragEnd`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event): A [`DragEvent` handler](#dragevent-handler) function. Fires when the user stops dragging something.\n\n`onDragEndCapture`: A version of `onDragEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDragEnter`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event): A [`DragEvent` handler](#dragevent-handler) function. Fires when the dragged content enters a valid drop target.\n\n`onDragEnterCapture`: A version of `onDragEnter` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDragOver`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event): A [`DragEvent` handler](#dragevent-handler) function. Fires on a valid drop target while the dragged content is dragged over it. You must call `e.preventDefault()` here to allow dropping.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2273":{"pageContent":"`onDragOverCapture`: A version of `onDragOver` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDragStart`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event): A [`DragEvent` handler](#dragevent-handler) function. Fires when the user starts dragging an element.\n\n`onDragStartCapture`: A version of `onDragStart` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDrop`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event): A [`DragEvent` handler](#dragevent-handler) function. Fires when something is dropped on a valid drop target.\n\n`onDropCapture`: A version of `onDrop` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2274":{"pageContent":"`onDropCapture`: A version of `onDrop` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n`onFocus`: A [`FocusEvent` handler](#focusevent-handler) function. Fires when an element lost focus. Unlike the built-in browser [`focus`](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event) event, in React the `onFocus` event bubbles.\n\n`onFocusCapture`: A version of `onFocus` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onGotPointerCapture`](https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when an element programmatically captures a pointer.\n\n`onGotPointerCaptureCapture`: A version of `onGotPointerCapture` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2275":{"pageContent":"`onGotPointerCaptureCapture`: A version of `onGotPointerCapture` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onKeyDown`](https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event): A [`KeyboardEvent` handler](#pointerevent-handler) function. Fires when a key is pressed.\n\n`onKeyDownCapture`: A version of `onKeyDown` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onKeyPress`](https://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event): A [`KeyboardEvent` handler](#pointerevent-handler) function. Deprecated. Use `onKeyDown` or `onBeforeInput` instead.\n\n`onKeyPressCapture`: A version of `onKeyPress` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onKeyUp`](https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event): A [`KeyboardEvent` handler](#pointerevent-handler) function. Fires when a key is released.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2276":{"pageContent":"[`onKeyUp`](https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event): A [`KeyboardEvent` handler](#pointerevent-handler) function. Fires when a key is released.\n\n`onKeyUpCapture`: A version of `onKeyUp` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onLostPointerCapture`](https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when an element stops capturing a pointer.\n\n`onLostPointerCaptureCapture`: A version of `onLostPointerCapture` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onMouseDown`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer is pressed down.\n\n`onMouseDownCapture`: A version of `onMouseDown` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2277":{"pageContent":"`onMouseDownCapture`: A version of `onMouseDown` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onMouseEnter`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer moves inside an element. Does not have a capture phase. Instead, `onMouseLeave` and `onMouseEnter` propagate from the element being left to the one being entered.\n\n[`onMouseLeave`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer moves outside an element. Does not have a capture phase. Instead, `onMouseLeave` and `onMouseEnter` propagate from the element being left to the one being entered.\n\n[`onMouseMove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer changes coordinates.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2278":{"pageContent":"[`onMouseMove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer changes coordinates.\n\n`onMouseMoveCapture`: A version of `onMouseMove` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onMouseOut`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer moves outside an element, or if it moves into a child element.\n\n`onMouseOutCapture`: A version of `onMouseOut` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onMouseUp`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event): A [`MouseEvent` handler](#mouseevent-handler) function. Fires when the pointer is released.\n\n`onMouseUpCapture`: A version of `onMouseUp` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2279":{"pageContent":"`onMouseUpCapture`: A version of `onMouseUp` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPointerCancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when the browser cancels a pointer interaction.\n\n`onPointerCancelCapture`: A version of `onPointerCancel` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPointerDown`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when a pointer becomes active.\n\n`onPointerDownCapture`: A version of `onPointerDown` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2280":{"pageContent":"`onPointerDownCapture`: A version of `onPointerDown` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPointerEnter`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when a pointer moves inside an element. Does not have a capture phase. Instead, `onPointerLeave` and `onPointerEnter` propagate from the element being left to the one being entered.\n\n[`onPointerLeave`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when a pointer moves outside an element. Does not have a capture phase. Instead, `onPointerLeave` and `onPointerEnter` propagate from the element being left to the one being entered.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2281":{"pageContent":"[`onPointerMove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when a pointer changes coordinates.\n\n`onPointerMoveCapture`: A version of `onPointerMove` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPointerOut`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when a pointer moves outside an element, if the pointer interaction is cancelled, and [a few other reasons.](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event)\n\n`onPointerOutCapture`: A version of `onPointerOut` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2282":{"pageContent":"`onPointerOutCapture`: A version of `onPointerOut` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPointerUp`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event): A [`PointerEvent` handler](#pointerevent-handler) function. Fires when a pointer is no longer active.\n\n`onPointerUpCapture`: A version of `onPointerUp` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPaste`](https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event): A [`ClipboardEvent` handler](#clipboardevent-handler) function. Fires when the user tries to paste something from the clipboard.\n\n`onPasteCapture`: A version of `onPaste` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onScroll`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event): An [`Event` handler](#event-handler) function. Fires when an element has been scrolled. This event does not bubble.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2283":{"pageContent":"[`onScroll`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event): An [`Event` handler](#event-handler) function. Fires when an element has been scrolled. This event does not bubble.\n\n`onScrollCapture`: A version of `onScroll` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSelect`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event): An [`Event` handler](#event-handler) function. Fires after the selection inside an editable element like an input changes. React extends the `onSelect` event to work for `contentEditable={true}` elements as well. In addition, React extends it to fire for empty selection and on edits (which may affect the selection).\n\n`onSelectCapture`: A version of `onSelect` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2284":{"pageContent":"`onSelectCapture`: A version of `onSelect` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onTouchCancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event): A [`TouchEvent` handler](#touchevent-handler) function. Fires when the browser cancels a touch interaction.\n\n`onTouchCancelCapture`: A version of `onTouchCancel` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onTouchEnd`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event): A [`TouchEvent` handler](#touchevent-handler) function. Fires when one or more touch points are removed.\n\n`onTouchEndCapture`: A version of `onTouchEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onTouchMove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event): A [`TouchEvent` handler](#touchevent-handler) function. Fires one or more touch points are moved.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2285":{"pageContent":"[`onTouchMove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event): A [`TouchEvent` handler](#touchevent-handler) function. Fires one or more touch points are moved.\n\n`onTouchMoveCapture`: A version of `onTouchMove` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onTouchStart`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event): A [`TouchEvent` handler](#touchevent-handler) function. Fires when one or more touch points are placed.\n\n`onTouchStartCapture`: A version of `onTouchStart` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onTransitionEnd`](https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event): A [`TransitionEvent` handler](#transitionevent-handler) function. Fires when a CSS transition completes.\n\n`onTransitionEndCapture`: A version of `onTransitionEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2286":{"pageContent":"`onTransitionEndCapture`: A version of `onTransitionEnd` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onWheel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event): A [`WheelEvent` handler](#wheelevent-handler) function. Fires when the user rotates a wheel button.\n\n`onWheelCapture`: A version of `onWheel` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`role`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles): A string. Specifies the element role explicitly for assistive technologies.\n\nnt.\n\n[`slot`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles): A string. Specifies the slot name when using shadow DOM. In React, an equivalent pattern is typically achieved by passing JSX as props, for example `<Layout left={<Sidebar />} right={<Content />} />`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2287":{"pageContent":"[`spellCheck`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck): A boolean or null. If explicitly set to `true` or `false`, enables or disables spellchecking.\n\n[`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex): A number. Overrides the default Tab button behavior. [Avoid using values other than `-1` and `0`.](https://www.tpgi.com/using-the-tabindex-attribute/)\n\n[`title`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title): A string. Specifies the tooltip text for the element.\n\n[`translate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate): Either `'yes'` or `'no'`. Passing `'no'` excludes the element content from being translated.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2288":{"pageContent":"[`translate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate): Either `'yes'` or `'no'`. Passing `'no'` excludes the element content from being translated.\n\nYou can also pass custom attributes as props, for example `mycustomprop=\"someValue\".` This can be useful when integrating with third-party libraries. The custom attribute name must be lowercase and must not start with `on`. The value will be converted to a string. If you pass `null` or `undefined`, the custom attribute will be removed.\n\nThese events fire only for the [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) elements:\n\n[`onReset`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset_event): An [`Event` handler](#event-handler) function. Fires when a form gets reset.\n\n`onResetCapture`: A version of `onReset` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2289":{"pageContent":"`onResetCapture`: A version of `onReset` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSubmit`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event): An [`Event` handler](#event-handler) function. Fires when a form gets submitted.\n\n`onSubmitCapture`: A version of `onSubmit` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\nThese events fire only for the [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) elements. Unlike browser events, they bubble in React:\n\n[`onCancel`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/cancel_event): An [`Event` handler](#event-handler) function. Fires when the user tries to dismiss the dialog.\n\n`onCancelCapture`: A version of `onCancel` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\ncapture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2290":{"pageContent":"`onCancelCapture`: A version of `onCancel` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\ncapture-phase-events)\n\n[`onClose`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event): An [`Event` handler](#event-handler) function. Fires when a dialog has been closed.\n\n`onCloseCapture`: A version of `onClose` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\nThese events fire only for the [`<details>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details) elements. Unlike browser events, they bubble in React:\n\n[`onToggle`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/toggle_event): An [`Event` handler](#event-handler) function. Fires when the user toggles the details.\n\n`onToggleCapture`: A version of `onToggle` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\ncapture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2291":{"pageContent":"`onToggleCapture`: A version of `onToggle` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\ncapture-phase-events)\n\nThese events fire for [`<img>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img), [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe), [`<object>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object), [`<embed>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed), [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link), and [SVG `<image>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Image_Tag) elements. Unlike browser events, they bubble in React:\n\n`onLoad`: An [`Event` handler](#event-handler) function. Fires when the resource has loaded.\n\n`onLoadCapture`: A version of `onLoad` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2292":{"pageContent":"`onLoadCapture`: A version of `onLoad` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onError`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event): An [`Event` handler](#event-handler) function. Fires when the resource could not be loaded.\n\n`onErrorCapture`: A version of `onError` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\nThese events fire for resources like [`<audio>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio) and [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video). Unlike browser events, they bubble in React:\n\n[`onAbort`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/abort_event): An [`Event` handler](#event-handler) function. Fires when the resource has not fully loaded, but not due to an error.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2293":{"pageContent":"`onAbortCapture`: A version of `onAbort` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCanPlay`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event): An [`Event` handler](#event-handler) function. Fires when there's enough data to start playing, but not enough to play to the end without buffering.\n\n`onCanPlayCapture`: A version of `onCanPlay` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onCanPlayThrough`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event): An [`Event` handler](#event-handler) function. Fires when there's enough data that it's likely possible to start playing without buffering until the end.\n\n`onCanPlayThroughCapture`: A version of `onCanPlayThrough` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2294":{"pageContent":"`onCanPlayThroughCapture`: A version of `onCanPlayThrough` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onDurationChange`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event): An [`Event` handler](#event-handler) function. Fires when the media duration has updated.\n\n`onDurationChangeCapture`: A version of `onDurationChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onEmptied`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event): An [`Event` handler](#event-handler) function. Fires when the media has become empty.\n\n`onEmptiedCapture`: A version of `onEmptied` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onEncrypted`](https://w3c.github.io/encrypted-media/#dom-evt-encrypted): An [`Event` handler](#event-handler) function. Fires when the browser encounters encrypted media.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2295":{"pageContent":"[`onEncrypted`](https://w3c.github.io/encrypted-media/#dom-evt-encrypted): An [`Event` handler](#event-handler) function. Fires when the browser encounters encrypted media.\n\n`onEncryptedCapture`: A version of `onEncrypted` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onEnded`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event): An [`Event` handler](#event-handler) function. Fires when the playback stops because there's nothing left to play.\n\n`onEndedCapture`: A version of `onEnded` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onError`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event): An [`Event` handler](#event-handler) function. Fires when the resource could not be loaded.\n\n`onErrorCapture`: A version of `onError` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2296":{"pageContent":"`onErrorCapture`: A version of `onError` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onLoadedData`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event): An [`Event` handler](#event-handler) function. Fires when the current playback frame has loaded.\n\n`onLoadedDataCapture`: A version of `onLoadedData` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onLoadedMetadata`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event): An [`Event` handler](#event-handler) function. Fires when metadata has loaded.\n\n`onLoadedMetadataCapture`: A version of `onLoadedMetadata` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onLoadStart`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event): An [`Event` handler](#event-handler) function. Fires when the browser started loading the resource.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2297":{"pageContent":"[`onLoadStart`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event): An [`Event` handler](#event-handler) function. Fires when the browser started loading the resource.\n\n`onLoadStartCapture`: A version of `onLoadStart` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPause`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event): An [`Event` handler](#event-handler) function. Fires when the media was paused.\n\n`onPauseCapture`: A version of `onPause` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPlay`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event): An [`Event` handler](#event-handler) function. Fires when the media is no longer paused.\n\n`onPlayCapture`: A version of `onPlay` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2298":{"pageContent":"`onPlayCapture`: A version of `onPlay` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onPlaying`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event): An [`Event` handler](#event-handler) function. Fires when the media starts or restarts playing.\n\n`onPlayingCapture`: A version of `onPlaying` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onProgress`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event): An [`Event` handler](#event-handler) function. Fires periodically while the resource is loading.\n\n`onProgressCapture`: A version of `onProgress` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onRateChange`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event): An [`Event` handler](#event-handler) function. Fires when playback rate changes.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2299":{"pageContent":"[`onRateChange`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event): An [`Event` handler](#event-handler) function. Fires when playback rate changes.\n\n`onRateChangeCapture`: A version of `onRateChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n`onResize`: An [`Event` handler](#event-handler) function. Fires when video changes size.\n\n`onResizeCapture`: A version of `onResize` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSeeked`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event): An [`Event` handler](#event-handler) function. Fires when a seek operation completes.\n\n`onSeekedCapture`: A version of `onSeeked` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2300":{"pageContent":"`onSeekedCapture`: A version of `onSeeked` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSeeking`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event): An [`Event` handler](#event-handler) function. Fires when a seek operation starts.\n\n`onSeekingCapture`: A version of `onSeeking` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onStalled`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event): An [`Event` handler](#event-handler) function. Fires when the browser is waiting for data but it keeps not loading.\n\n`onStalledCapture`: A version of `onStalled` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSuspend`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event): An [`Event` handler](#event-handler) function. Fires when loading the resource was suspended.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2301":{"pageContent":"[`onSuspend`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event): An [`Event` handler](#event-handler) function. Fires when loading the resource was suspended.\n\n`onSuspendCapture`: A version of `onSuspend` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onTimeUpdate`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event): An [`Event` handler](#event-handler) function. Fires when the current playback time updates.\n\n`onTimeUpdateCapture`: A version of `onTimeUpdate` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onVolumeChange`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event): An [`Event` handler](#event-handler) function. Fires when the volume has changed.\n\n`onVolumeChangeCapture`: A version of `onVolumeChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2302":{"pageContent":"`onVolumeChangeCapture`: A version of `onVolumeChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onWaiting`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event): An [`Event` handler](#event-handler) function. Fires when the playback stopped due to temporary lack of data.\n\n`onWaitingCapture`: A version of `onWaiting` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n#### Caveats {/*common-caveats*/}\n\nYou cannot pass both `children` and `dangerouslySetInnerHTML` at the same time.\n\nSome events (like `onAbort` and `onLoad`) don't bubble in the browser, but bubble in React.\n\n--\n\n### `ref` callback function {/*ref-callback*/}\n\nInstead of a ref object (like the one returned by [`useRef`](/reference/react/useRef#manipulating-the-dom-with-a-ref)), you may pass a function to the `ref` attribute.\n\n```js\n\n<div ref={(node) => console.log(node)} />\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2303":{"pageContent":"```js\n\n<div ref={(node) => console.log(node)} />\n\n```\n\n[See an example of using the `ref` callback.](/learn/manipulating-the-dom-with-refs#how-to-manage-a-list-of-refs-using-a-ref-callback)\n\nWhen the `<div>` DOM node is added to the screen, React will call your `ref` callback with the DOM `node` as the argument. When that `<div>` DOM node is removed, React will call your `ref` callback with `null`.\n\nReact will also call your `ref` callback whenever you pass a *different* `ref` callback. In the above example, `(node) => { ... }` is a different function on every render. This is why, when your component re-renders, the *previous* function will be called with `null` as the argument, and the *next* function will be called with the DOM node.\n\n#### Parameters {/*ref-callback-parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2304":{"pageContent":"#### Parameters {/*ref-callback-parameters*/}\n\n`node`: A DOM node or `null`. React will pass you the DOM node when the ref gets attached, and `null` when the ref gets detached. Unless you pass the same function reference for the `ref` callback on every render, the callback will get temporarily detached and re-attached during ever re-render of the component.\n\n#### Returns {/*returns*/}\n\nDo not return anything from the `ref` callback.\n\n--\n\n### React event object {/*react-event-object*/}\n\nYour event handlers will receive a *React event object.* It is also sometimes known as a \"synthetic event\".\n\n```js\n\n<button onClick={e => {\n\nconsole.log(e); // React event object\n\n}} />\n\n```\n\nIt conforms to the same standard as the underlying DOM events, but fixes some browser inconsistencies.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2305":{"pageContent":"```js\n\n<button onClick={e => {\n\nconsole.log(e); // React event object\n\n}} />\n\n```\n\nIt conforms to the same standard as the underlying DOM events, but fixes some browser inconsistencies.\n\nSome React events do not map directly to the browser's native events. For example in `onMouseLeave`, `e.nativeEvent` will point to a `mouseout` event. The specific mapping is not part of the public API and may change in the future. If you need the underlying browser event for some reason, read it from `e.nativeEvent`.\n\n#### Properties {/*react-event-object-properties*/}\n\nReact event objects implement some of the standard [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) properties:\n\n[`bubbles`](https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles): A boolean. Returns whether the event bubbles through the DOM.\n\n[`cancelable`](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable): A boolean. Returns whether the event can be canceled.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2306":{"pageContent":"[`cancelable`](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable): A boolean. Returns whether the event can be canceled.\n\n[`currentTarget`](https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget): A DOM node. Returns the node to which the current handler is attached in the React tree.\n\n[`defaultPrevented`](https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented): A boolean. Returns whether `preventDefault` was called.\n\n[`eventPhase`](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase): A number. Returns which phase the event is currently in.\n\n[`isTrusted`](https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted): A boolean. Returns whether the event was initiated by user.\n\n[`target`](https://developer.mozilla.org/en-US/docs/Web/API/Event/target): A DOM node. Returns the node on which the event has occurred (which could be a distant child).","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2307":{"pageContent":"[`target`](https://developer.mozilla.org/en-US/docs/Web/API/Event/target): A DOM node. Returns the node on which the event has occurred (which could be a distant child).\n\n[`timeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp): A number. Returns the time when the event occurred.\n\nAdditionally, React event objects provide these properties:\n\n`nativeEvent`: A DOM [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event). The original browser event object.\n\n#### Methods {/*react-event-object-methods*/}\n\nReact event objects implement some of the standard [`Event`](https://developer.mozilla.org/en-US/docs/Web/API/Event) methods:\n\n[`preventDefault()`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault): Prevents the default browser action for the event.\n\n[`stopPropagation()`](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation): Stops the event propagation through the React tree.\n\nAdditionally, React event objects provide these methods:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2308":{"pageContent":"Additionally, React event objects provide these methods:\n\n`isDefaultPrevented()`: Returns a boolean value indicating whether `preventDefault` was called.\n\n`isPropagationStopped()`: Returns a boolean value indicating whether `stopPropagation` was called.\n\n`persist()`: Not used with React DOM. With React Native, call this to read event's properties after the event.\n\n`isPersistent()`: Not used with React DOM. With React Native, returns whether `persist` has been called.\n\n#### Caveats {/*react-event-object-caveats*/}\n\nThe values of `currentTarget`, `eventPhase`, `target`, and `type` reflect the values your React code expects. Under the hood, React attaches event handlers at the root, but this is not reflected in React event objects. For example, `e.currentTarget` may not be the same as the underlying `e.nativeEvent.currentTarget`. For polyfilled events, `e.type` (React event type) may differ from `e.nativeEvent.type` (underlying type).\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2309":{"pageContent":"--\n\n### `AnimationEvent` handler function {/*animationevent-handler*/}\n\nAn event handler type for the [CSS animation](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations) events.\n\n```js\n\n<div\n\nonAnimationStart={e => console.log('onAnimationStart')}\n\nonAnimationIteration={e => console.log('onAnimationStart')}\n\nonAnimationEnd={e => console.log('onAnimationStart')}\n\n/>\n\n```\n\n#### Parameters {/*animationevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`AnimationEvent`](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent) properties:\n\n[`animationName`](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName)\n\n[`elapsedTime`](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime)\n\n[`pseudoElement`](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent)\n\n--\n\n### `ClipboardEvent` handler function {/*clipboadevent-handler*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2310":{"pageContent":"[`pseudoElement`](https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent)\n\n--\n\n### `ClipboardEvent` handler function {/*clipboadevent-handler*/}\n\nAn event handler type for the [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API) events.\n\n```js\n\n<input\n\nonCopy={e => console.log('onCopy')}\n\nonCut={e => console.log('onCut')}\n\nonPaste={e => console.log('onPaste')}\n\n/>\n\n```\n\n#### Parameters {/*clipboadevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`ClipboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent) properties:\n\n[`clipboardData`](https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData)\n\n--\n\n### `CompositionEvent` handler function {/*compositionevent-handler*/}\n\nAn event handler type for the [input method editor (IME)](https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor) events.\n\n```js\n\n<input\n\nonCompositionStart={e => console.log('onCompositionStart')}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2311":{"pageContent":"```js\n\n<input\n\nonCompositionStart={e => console.log('onCompositionStart')}\n\nonCompositionUpdate={e => console.log('onCompositionUpdate')}\n\nonCompositionEnd={e => console.log('onCompositionEnd')}\n\n/>\n\n```\n\n#### Parameters {/*compositionevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`CompositionEvent`](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent) properties:\n\n[`data`](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data)\n\n--\n\n### `DragEvent` handler function {/*dragevent-handler*/}\n\nAn event handler type for the [HTML Drag and Drop API](https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API) events.\n\n```js\n\n<>\n\n<div\n\ndraggable={true}\n\nonDragStart={e => console.log('onDragStart')}\n\nonDragEnd={e => console.log('onDragEnd')}\n\n>\n\nDrag source\n\n</div>\n\n<div\n\nonDragEnter={e => console.log('onDragEnter')}\n\nonDragLeave={e => console.log('onDragLeave')}\n\nonDragOver={e => { e.preventDefault(); console.log('onDragOver'); }}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2312":{"pageContent":">\n\nDrag source\n\n</div>\n\n<div\n\nonDragEnter={e => console.log('onDragEnter')}\n\nonDragLeave={e => console.log('onDragLeave')}\n\nonDragOver={e => { e.preventDefault(); console.log('onDragOver'); }}\n\nonDrop={e => console.log('onDrop')}\n\n>\n\nDrop target\n\n</div>\n\n</>\n\n```\n\n#### Parameters {/*dragevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`DragEvent`](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent) properties:\n\n[`dataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer)\n\nIt also includes the inherited [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) properties:\n\n[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)\n\n[`button`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2313":{"pageContent":"[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)\n\n[`clientX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX)\n\n[`clientY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)\n\n[`getModifierState(key)`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState)\n\n[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n[`movementX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)\n\n[`movementY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY)\n\n[`pageX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX)\n\n[`pageY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY)\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n[`screenX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2314":{"pageContent":"[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n[`screenX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)\n\n[`screenY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY)\n\n[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `FocusEvent` handler function {/*focusevent-handler*/}\n\nAn event handler type for the focus events.\n\n```js\n\n<input\n\nonFocus={e => console.log('onFocus')}\n\nonBlur={e => console.log('onBlur')}\n\n/>\n\n```\n\n[See an example.](#handling-focus-events)\n\n#### Parameters {/*focusevent-handler-parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2315":{"pageContent":"```js\n\n<input\n\nonFocus={e => console.log('onFocus')}\n\nonBlur={e => console.log('onBlur')}\n\n/>\n\n```\n\n[See an example.](#handling-focus-events)\n\n#### Parameters {/*focusevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`FocusEvent`](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent) properties:\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `Event` handler function {/*event-handler*/}\n\nAn event handler type for generic events.\n\n#### Parameters {/*event-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with no additional properties.\n\n--\n\n### `InputEvent` handler function {/*inputevent-handler*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2316":{"pageContent":"#### Parameters {/*event-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with no additional properties.\n\n--\n\n### `InputEvent` handler function {/*inputevent-handler*/}\n\nAn event handler type for the `onBeforeInput` event.\n\n```js\n\n<input onBeforeInput={e => console.log('onBeforeInput')} />\n\n```\n\n#### Parameters {/*inputevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`InputEvent`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) properties:\n\n[`data`](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/data)\n\n--\n\n### `KeyboardEvent` handler function {/*keyboardevent-handler*/}\n\nAn event handler type for keyboard events.\n\n```js\n\n<input\n\nonKeyDown={e => console.log('onKeyDown')}\n\nonKeyUp={e => console.log('onKeyUp')}\n\n/>\n\n```\n\n[See an example.](#handling-keyboard-events)\n\n#### Parameters {/*keyboardevent-handler-parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2317":{"pageContent":"```js\n\n<input\n\nonKeyDown={e => console.log('onKeyDown')}\n\nonKeyUp={e => console.log('onKeyUp')}\n\n/>\n\n```\n\n[See an example.](#handling-keyboard-events)\n\n#### Parameters {/*keyboardevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`KeyboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) properties:\n\n[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey)\n\n[`charCode`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode)\n\n[`code`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey)\n\n[`getModifierState(key)`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState)\n\n[`key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)\n\n[`keyCode`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2318":{"pageContent":"[`key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)\n\n[`keyCode`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode)\n\n[`locale`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/locale)\n\n[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey)\n\n[`location`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location)\n\n[`repeat`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat)\n\n[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey)\n\n[`which`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `MouseEvent` handler function {/*mouseevent-handler*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2319":{"pageContent":"[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `MouseEvent` handler function {/*mouseevent-handler*/}\n\nAn event handler type for mouse events.\n\n```js\n\n<div\n\nonClick={e => console.log('onClick')}\n\nonMouseEnter={e => console.log('onMouseEnter')}\n\nonMouseOver={e => console.log('onMouseOver')}\n\nonMouseDown={e => console.log('onMouseDown')}\n\nonMouseUp={e => console.log('onMouseUp')}\n\nonMouseLeave={e => console.log('onMouseLeave')}\n\n/>\n\n```\n\n[See an example.](#handling-mouse-events)\n\n#### Parameters {/*mouseevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) properties:\n\n[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)\n\n[`button`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2320":{"pageContent":"[`button`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)\n\n[`clientX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX)\n\n[`clientY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)\n\n[`getModifierState(key)`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState)\n\n[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n[`movementX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)\n\n[`movementY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY)\n\n[`pageX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX)\n\n[`pageY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY)\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2321":{"pageContent":"[`pageY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY)\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n[`screenX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)\n\n[`screenY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY)\n\n[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `PointerEvent` handler function {/*pointerevent-handler*/}\n\nAn event handler type for [pointer events.](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events)\n\n```js\n\n<div\n\nonPointerEnter={e => console.log('onPointerEnter')}\n\nonPointerMove={e => console.log('onPointerMove')}\n\nonPointerDown={e => console.log('onPointerDown')}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2322":{"pageContent":"```js\n\n<div\n\nonPointerEnter={e => console.log('onPointerEnter')}\n\nonPointerMove={e => console.log('onPointerMove')}\n\nonPointerDown={e => console.log('onPointerDown')}\n\nonPointerUp={e => console.log('onPointerUp')}\n\nonPointerLeave={e => console.log('onPointerLeave')}\n\n/>\n\n```\n\n[See an example.](#handling-pointer-events)\n\n#### Parameters {/*pointerevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`PointerEvent`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent) properties:\n\n[`height`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height)\n\n[`isPrimary`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary)\n\n[`pointerId`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId)\n\n[`pointerType`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType)\n\n[`pressure`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2323":{"pageContent":"[`pointerType`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType)\n\n[`pressure`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure)\n\n[`tangentialPressure`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure)\n\n[`tiltX`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX)\n\n[`tiltY`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY)\n\n[`twist`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist)\n\n[`width`](https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width)\n\nIt also includes the inherited [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) properties:\n\n[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)\n\n[`button`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2324":{"pageContent":"[`button`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)\n\n[`clientX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX)\n\n[`clientY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)\n\n[`getModifierState(key)`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState)\n\n[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n[`movementX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)\n\n[`movementY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY)\n\n[`pageX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX)\n\n[`pageY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY)\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2325":{"pageContent":"[`pageY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY)\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n[`screenX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)\n\n[`screenY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY)\n\n[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `TouchEvent` handler function {/*touchevent-handler*/}\n\nAn event handler type for [touch events.](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events)\n\n```js\n\n<div\n\nonTouchStart={e => console.log('onTouchStart')}\n\nonTouchMove={e => console.log('onTouchMove')}\n\nonTouchEnd={e => console.log('onTouchEnd')}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2326":{"pageContent":"```js\n\n<div\n\nonTouchStart={e => console.log('onTouchStart')}\n\nonTouchMove={e => console.log('onTouchMove')}\n\nonTouchEnd={e => console.log('onTouchEnd')}\n\nonTouchCancel={e => console.log('onTouchCancel')}\n\n/>\n\n```\n\n#### Parameters {/*touchevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`TouchEvent`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent) properties:\n\n[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey)\n\n[`changedTouches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches)\n\n[`getModifierState(key)`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/getModifierState)\n\n[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey)\n\n[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey)\n\n[`touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2327":{"pageContent":"[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey)\n\n[`touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches)\n\n[`targetTouches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `TransitionEvent` handler function {/*transitionevent-handler*/}\n\nAn event handler type for the CSS transition events.\n\n```js\n\n<div\n\nonTransitionEnd={e => console.log('onTransitionEnd')}\n\n/>\n\n```\n\n#### Parameters {/*transitionevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`TransitionEvent`](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent) properties:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2328":{"pageContent":"`e`: A [React event object](#react-event-object) with these extra [`TransitionEvent`](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent) properties:\n\n[`elapsedTime`](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime)\n\n[`propertyName`](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/propertyName)\n\n[`pseudoElement`](https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement)\n\n--\n\n### `UIEvent` handler function {/*uievent-handler*/}\n\nAn event handler type for generic UI events.\n\n```js\n\n<div\n\nonScroll={e => console.log('onScroll')}\n\n/>\n\n```\n\n#### Parameters {/*uievent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2329":{"pageContent":"[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n### `WheelEvent` handler function {/*wheelevent-handler*/}\n\nAn event handler type for the `onWheel` event.\n\n```js\n\n<div\n\nonScroll={e => console.log('onScroll')}\n\n/>\n\n```\n\n#### Parameters {/*wheelevent-handler-parameters*/}\n\n`e`: A [React event object](#react-event-object) with these extra [`WheelEvent`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent) properties:\n\n[`deltaMode`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode)\n\n[`deltaX`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX)\n\n[`deltaY`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY)\n\n[`deltaZ`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ)\n\nIt also includes the inherited [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) properties:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2330":{"pageContent":"[`deltaZ`](https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ)\n\nIt also includes the inherited [`MouseEvent`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent) properties:\n\n[`altKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)\n\n[`button`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n[`buttons`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n[`ctrlKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)\n\n[`clientX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX)\n\n[`clientY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)\n\n[`getModifierState(key)`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState)\n\n[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n[`movementX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2331":{"pageContent":"[`metaKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n[`movementX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)\n\n[`movementY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY)\n\n[`pageX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageX)\n\n[`pageY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/pageY)\n\n[`relatedTarget`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n[`screenX`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)\n\n[`screenY`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY)\n\n[`shiftKey`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey)\n\nIt also includes the inherited [`UIEvent`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent) properties:\n\n[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2332":{"pageContent":"[`detail`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail)\n\n[`view`](https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view)\n\n--\n\n## Usage {/*usage*/}\n\n### Applying CSS styles {/*applying-css-styles*/}\n\nIn React, you specify a CSS class with [`className`.](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) It works like the `class` attribute in HTML:\n\n```js\n\n<img className=\"avatar\" />\n\n```\n\nThen you write the CSS rules for it in a separate CSS file:\n\n```css\n\n/* In your CSS */\n\n.avatar {\n\nborder-radius: 50%;\n\n}\n\n```\n\nReact does not prescribe how you add CSS files. In the simplest case, you'll add a [`<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.\n\nSometimes, the style values depend on data. Use the `style` attribute to pass some styles dynamically:\n\n```js {3-6}\n\n<img\n\nclassName=\"avatar\"\n\nstyle={{\n\nwidth: user.imageSize,","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2333":{"pageContent":"Sometimes, the style values depend on data. Use the `style` attribute to pass some styles dynamically:\n\n```js {3-6}\n\n<img\n\nclassName=\"avatar\"\n\nstyle={{\n\nwidth: user.imageSize,\n\nheight: user.imageSize\n\n}}\n\n/>\n\n```\n\nIn the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` [JSX curly braces.](/learn/javascript-in-jsx-with-curly-braces) We recommend to only use the `style` attribute when your styles depend on JavaScript variables.\n\n<Sandpack>\n\n```js App.js\n\nimport Avatar from './Avatar.js';\n\nconst user = {\n\nname: 'Hedy Lamarr',\n\nimageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\n\nimageSize: 90,\n\n};\n\nexport default function App() {\n\nreturn <Avatar user={user} />;\n\n}\n\n```\n\n```js Avatar.js active\n\nexport default function Avatar({ user }) {\n\nreturn (\n\n<img\n\nsrc={user.imageUrl}\n\nalt={'Photo of ' + user.name}\n\nclassName=\"avatar\"\n\nstyle={{\n\nwidth: user.imageSize,\n\nheight: user.imageSize\n\n}}\n\n/>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n.avatar {\n\nborder-radius: 50%;\n\n}\n\n```\n\n</Sandpack>\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2334":{"pageContent":"src={user.imageUrl}\n\nalt={'Photo of ' + user.name}\n\nclassName=\"avatar\"\n\nstyle={{\n\nwidth: user.imageSize,\n\nheight: user.imageSize\n\n}}\n\n/>\n\n);\n\n}\n\n```\n\n```css styles.css\n\n.avatar {\n\nborder-radius: 50%;\n\n}\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### How to apply multiple CSS classes conditionally? {/*how-to-apply-multiple-css-classes-conditionally*/}\n\nTo apply CSS classes conditionally, you need to produce the `className` string yourself using JavaScript.\n\nFor example, `className={'row ' + (isSelected ? 'selected': '')}` will produce either `className=\"row\"` or `className=\"row selected\"` depending on whether `isSelected` is `true`.\n\nTo make this more readable, you can use a tiny helper library like [`classnames`:](https://github.com/JedWatson/classnames)\n\n```js\n\nimport cn from 'classnames';\n\nfunction Row({ isSelected }) {\n\nreturn (\n\n<div className={cn('row', isSelected && 'selected')}>\n\n...\n\n</div>\n\n);\n\n}\n\n```\n\nIt is especially convenient if you have multiple conditional classes:\n\n```js\n\nimport cn from 'classnames';\n\nfunction Row({ isSelected, size }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2335":{"pageContent":"...\n\n</div>\n\n);\n\n}\n\n```\n\nIt is especially convenient if you have multiple conditional classes:\n\n```js\n\nimport cn from 'classnames';\n\nfunction Row({ isSelected, size }) {\n\nreturn (\n\n<div className={cn('row', {\n\nselected: isSelected,\n\nlarge: size === 'large',\n\nsmall: size === 'small',\n\n})}>\n\n...\n\n</div>\n\n);\n\n}\n\n```\n\n</DeepDive>\n\n--\n\n### Manipulating a DOM node with a ref {/*manipulating-a-dom-node-with-a-ref*/}\n\nSometimes, you'll need to get the browser DOM node associated with a tag in JSX. For example, if you want to focus an `<input>` when a button is clicked, you need to call [`focus()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) on the browser `<input>` DOM node.\n\nTo obtain the browser DOM node for a tag, [declare a ref](/reference/react/useRef) and pass it as the `ref` attribute to that tag:\n\n```js {7}\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\n// ...\n\nreturn (\n\n<input ref={inputRef} />\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2336":{"pageContent":"```js {7}\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\n// ...\n\nreturn (\n\n<input ref={inputRef} />\n\n// ...\n\n```\n\nReact will put the DOM node into `inputRef.current` after it's been rendered to the screen.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nexport default function Form() {\n\nconst inputRef = useRef(null);\n\nfunction handleClick() {\n\ninputRef.current.focus();\n\n}\n\nreturn (\n\n<>\n\n<input ref={inputRef} />\n\n<button onClick={handleClick}>\n\nFocus the input\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nRead more about [manipulating DOM with refs](/learn/manipulating-the-dom-with-refs) and [check out more examples.](/reference/react/useRef#examples-dom)\n\nFor more advanced use cases, the `ref` attribute also accepts a [callback function.](#ref-callback)\n\n--\n\n### Dangerously setting the inner HTML {/*dangerously-setting-the-inner-html*/}\n\nYou can pass a raw HTML string to an element like so:\n\n```js\n\nconst markup = { __html: '<p>some raw html</p>' };\n\nreturn <div dangerouslySetInnerHTML={markup} />;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2337":{"pageContent":"You can pass a raw HTML string to an element like so:\n\n```js\n\nconst markup = { __html: '<p>some raw html</p>' };\n\nreturn <div dangerouslySetInnerHTML={markup} />;\n\n```\n\n*This is dangerous. As with the underlying DOM [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) property, you must exercise extreme caution! Unless the markup is coming from a completely trusted source, it is trivial to introduce an [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting) vulnerability this way.**\n\nFor example, if you use a Markdown library that converts Markdown to HTML, you trust that its parser doesn't contain bugs, and the user only sees their own input, you can display the resulting HTML like this:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport MarkdownPreview from './MarkdownPreview.js';\n\nexport default function MarkdownEditor() {\n\nconst [postContent, setPostContent] = useState('_Hello,_ **Markdown**!');\n\nreturn (\n\n<>\n\n<label>\n\nEnter some markdown:\n\n<textarea\n\nvalue={postContent}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2338":{"pageContent":"export default function MarkdownEditor() {\n\nconst [postContent, setPostContent] = useState('_Hello,_ **Markdown**!');\n\nreturn (\n\n<>\n\n<label>\n\nEnter some markdown:\n\n<textarea\n\nvalue={postContent}\n\nonChange={e => setPostContent(e.target.value)}\n\n/>\n\n</label>\n\n<hr />\n\n<MarkdownPreview markdown={postContent} />\n\n</>\n\n);\n\n}\n\n```\n\n```js MarkdownPreview.js active\n\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nfunction renderMarkdownToHTML(markdown) {\n\n// This is ONLY safe because the output HTML\n\n// is shown to the same user, and because you\n\n// trust this Markdown parser to not have bugs.\n\nconst renderedHTML = md.render(markdown);\n\nreturn {__html: renderedHTML};\n\n}\n\nexport default function MarkdownPreview({ markdown }) {\n\nconst markup = renderMarkdownToHTML(markdown);\n\nreturn <div dangerouslySetInnerHTML={markup} />;\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"remarkable\": \"2.0.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2339":{"pageContent":"{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"remarkable\": \"2.0.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\ntextarea { display: block; margin-top: 5px; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nTo see why rendering arbitrary HTML is dangerous, replace the code above with this:\n\n```js {1-4,7,8}\n\nconst post = {\n\n// Imagine this content is stored in the database.\n\ncontent: `<img src=\"\" onerror='alert(\"you were hacked\")'>`\n\n};\n\nexport default function MarkdownPreview() {\n\n// 🔴 SECURITY HOLE: passing untrusted input to dangerouslySetInnerHTML\n\nconst markup = { __html: post.content };\n\nreturn <div dangerouslySetInnerHTML={markup} />;\n\n}\n\n```\n\nThe code embedded in the HTML will run. A hacker could use this security hole to steal user information or to perform actions on their behalf. **Only use `dangerouslySetInnerHTML` with trusted and sanitized data.**\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2340":{"pageContent":"--\n\n### Handling mouse events {/*handling-mouse-events*/}\n\nThis example shows some common [mouse events](#mouseevent-handler) and when they fire.\n\n<Sandpack>\n\n```js\n\nexport default function MouseExample() {\n\nreturn (\n\n<div\n\nonMouseEnter={e => console.log('onMouseEnter (parent)')}\n\nonMouseLeave={e => console.log('onMouseLeave (parent)')}\n\n>\n\n<button\n\nonClick={e => console.log('onClick (first button)')}\n\nonMouseDown={e => console.log('onMouseDown (first button)')}\n\nonMouseEnter={e => console.log('onMouseEnter (first button)')}\n\nonMouseLeave={e => console.log('onMouseLeave (first button)')}\n\nonMouseOver={e => console.log('onMouseOver (first button)')}\n\nonMouseUp={e => console.log('onMouseUp (first button)')}\n\n>\n\nFirst button\n\n</button>\n\n<button\n\nonClick={e => console.log('onClick (second button)')}\n\nonMouseDown={e => console.log('onMouseDown (second button)')}\n\nonMouseEnter={e => console.log('onMouseEnter (second button)')}\n\nonMouseLeave={e => console.log('onMouseLeave (second button)')}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2341":{"pageContent":"onMouseDown={e => console.log('onMouseDown (second button)')}\n\nonMouseEnter={e => console.log('onMouseEnter (second button)')}\n\nonMouseLeave={e => console.log('onMouseLeave (second button)')}\n\nonMouseOver={e => console.log('onMouseOver (second button)')}\n\nonMouseUp={e => console.log('onMouseUp (second button)')}\n\n>\n\nSecond button\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Handling pointer events {/*handling-pointer-events*/}\n\nThis example shows some common [pointer events](#pointerevent-handler) and when they fire.\n\n<Sandpack>\n\n```js\n\nexport default function PointerExample() {\n\nreturn (\n\n<div\n\nonPointerEnter={e => console.log('onPointerEnter (parent)')}\n\nonPointerLeave={e => console.log('onPointerLeave (parent)')}\n\nstyle={{ padding: 20, backgroundColor: '#ddd' }}\n\n>\n\n<div\n\nonPointerDown={e => console.log('onPointerDown (first child)')}\n\nonPointerEnter={e => console.log('onPointerEnter (first child)')}\n\nonPointerLeave={e => console.log('onPointerLeave (first child)')}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2342":{"pageContent":">\n\n<div\n\nonPointerDown={e => console.log('onPointerDown (first child)')}\n\nonPointerEnter={e => console.log('onPointerEnter (first child)')}\n\nonPointerLeave={e => console.log('onPointerLeave (first child)')}\n\nonPointerMove={e => console.log('onPointerMove (first child)')}\n\nonPointerUp={e => console.log('onPointerUp (first child)')}\n\nstyle={{ padding: 20, backgroundColor: 'lightyellow' }}\n\n>\n\nFirst child\n\n</div>\n\n<div\n\nonPointerDown={e => console.log('onPointerDown (second child)')}\n\nonPointerEnter={e => console.log('onPointerEnter (second child)')}\n\nonPointerLeave={e => console.log('onPointerLeave (second child)')}\n\nonPointerMove={e => console.log('onPointerMove (second child)')}\n\nonPointerUp={e => console.log('onPointerUp (second child)')}\n\nstyle={{ padding: 20, backgroundColor: 'lightblue' }}\n\n>\n\nSecond child\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Handling focus events {/*handling-focus-events*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2343":{"pageContent":">\n\nSecond child\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Handling focus events {/*handling-focus-events*/}\n\nIn React, [focus events](#focusevent-handler) bubble. You can use the `currentTarget` and `relatedTarget` to differentiate if the focusing or blurring events originated from outside of the parent element. The example shows how to detect focusing a child, focusing the parent element, and how to detect focus entering or leaving the whole subtree.\n\n<Sandpack>\n\n```js\n\nexport default function FocusExample() {\n\nreturn (\n\n<div\n\ntabIndex={1}\n\nonFocus={(e) => {\n\nif (e.currentTarget === e.target) {\n\nconsole.log('focused parent');\n\n} else {\n\nconsole.log('focused child', e.target.name);\n\n}\n\nif (!e.currentTarget.contains(e.relatedTarget)) {\n\n// Not triggered when swapping focus between children\n\nconsole.log('focus entered parent');\n\n}\n\n}}\n\nonBlur={(e) => {\n\nif (e.currentTarget === e.target) {\n\nconsole.log('unfocused parent');\n\n} else {\n\nconsole.log('unfocused child', e.target.name);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2344":{"pageContent":"console.log('focus entered parent');\n\n}\n\n}}\n\nonBlur={(e) => {\n\nif (e.currentTarget === e.target) {\n\nconsole.log('unfocused parent');\n\n} else {\n\nconsole.log('unfocused child', e.target.name);\n\n}\n\nif (!e.currentTarget.contains(e.relatedTarget)) {\n\n// Not triggered when swapping focus between children\n\nconsole.log('focus left parent');\n\n}\n\n}}\n\n>\n\n<label>\n\nFirst name:\n\n<input name=\"firstName\" />\n\n</label>\n\n<label>\n\nLast name:\n\n<input name=\"lastName\" />\n\n</label>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Handling keyboard events {/*handling-keyboard-events*/}\n\nThis example shows some common [keyboard events](#keyboardevent-handler) and when they fire.\n\n<Sandpack>\n\n```js\n\nexport default function KeyboardExample() {\n\nreturn (\n\n<label>\n\nFirst name:\n\n<input\n\nname=\"firstName\"\n\nonKeyDown={e => console.log('onKeyDown:', e.key, e.code)}\n\nonKeyUp={e => console.log('onKeyUp:', e.key, e.code)}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/common.md"}},"2345":{"pageContent":"--\n\ntitle: \"<progress>\"\n\n--\n\n<Intro>\n\nThe [built-in browser `<progress>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress) lets you render a progress indicator.\n\n```js\n\n<progress value={0.5} />\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<progress>` {/*progress*/}\n\nTo display a progress indicator, render the [built-in browser `<progress>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress) component.\n\n```js\n\n<progress value={0.5} />\n\n```\n\n[See more examples below.](#usage)\n\n#### Props {/*props*/}\n\n`<progress>` supports all [common element props.](/reference/react-dom/components/common#props)\n\nAdditionally, `<progress>` supports these props:\n\n[`max`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-max): A number. Specifies the maximum `value`. Defaults to `1`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/progress.md"}},"2346":{"pageContent":"Additionally, `<progress>` supports these props:\n\n[`max`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-max): A number. Specifies the maximum `value`. Defaults to `1`.\n\n[`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress#attr-value): A number between `0` and `max`, or `null` for intermedinate progress. Specifies how much was done.\n\n--\n\n## Usage {/*usage*/}\n\n### Controlling a progress indicator {/*controlling-a-progress-indicator*/}\n\nTo display a progress indicator, render a `<progress>` component. You can pass a number `value` between `0` and the `max` value you specify. If you don't pass a `max` value, it will assumed to be `1` by default.\n\nIf the operation is not ongoing, pass `value={null}` to put the progress indicator into an indeterminate state.\n\n<Sandpack>\n\n```js\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<progress value={0} />\n\n<progress value={0.5} />\n\n<progress value={0.7} />\n\n<progress value={75} max={100} />\n\n<progress value={1} />","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/progress.md"}},"2347":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<progress value={0} />\n\n<progress value={0.5} />\n\n<progress value={0.7} />\n\n<progress value={75} max={100} />\n\n<progress value={1} />\n\n<progress value={null} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nprogress { display: block; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/progress.md"}},"2348":{"pageContent":"--\n\ntitle: \"<select>\"\n\n--\n\n<Intro>\n\nThe [built-in browser `<select>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) lets you render a select box with options.\n\n```js\n\n<select>\n\n<option value=\"someOption\">Some option</option>\n\n<option value=\"otherOption\">Other option</option>\n\n</select>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<select>` {/*select*/}\n\nTo display a select box, render the [built-in browser `<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) component.\n\n```js\n\n<select>\n\n<option value=\"someOption\">Some option</option>\n\n<option value=\"otherOption\">Other option</option>\n\n</select>\n\n```\n\n[See more examples below.](#usage)\n\n#### Props {/*props*/}\n\n`<select>` supports all [common element props.](/reference/react-dom/components/common#props)\n\nYou can [make a select box controlled](#controlling-a-select-box-with-a-state-variable) by passing a `value` prop:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2349":{"pageContent":"You can [make a select box controlled](#controlling-a-select-box-with-a-state-variable) by passing a `value` prop:\n\n`value`: A string (or an array of strings for [`multiple={true}`](#enabling-multiple-selection)). Controls which option is selected. Every value string match the `value` of some `<option>` nested inside the `<select>`.\n\nWhen you pass `value`, you must also pass an `onChange` handler that updates the passed value.\n\nIf your `<select>` is uncontrolled, you may pass the `defaultValue` prop instead:\n\n`defaultValue`: A string (or an array of strings for [`multiple={true}`](#enabling-multiple-selection)). Specifies [the initially selected option.](#providing-an-initially-selected-option)\n\nThese `<select>` props are relevant both for uncontrolled and controlled select boxs:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2350":{"pageContent":"These `<select>` props are relevant both for uncontrolled and controlled select boxs:\n\n[`autoComplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-autocomplete): A string. Specifies one of the possible [autocomplete behaviors.](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values)\n\n[`autoFocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-autofocus): A boolean. If `true`, React will focus the element on mount.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2351":{"pageContent":"[`autoFocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-autofocus): A boolean. If `true`, React will focus the element on mount.\n\n`children`: `<select>` accepts [`<option>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option), [`<optgroup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup), and [`<datalist>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup) components as children. You can also pass your own components as long as they eventually render one of the allowed components. If you pass your own components that eventually render `<option>` tags, each `<option>` you render must have a `value`.\n\n[`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-disabled): A boolean. If `true`, the select box will not be interactive and will appear dimmed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2352":{"pageContent":"[`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-disabled): A boolean. If `true`, the select box will not be interactive and will appear dimmed.\n\n[`form`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-form): A string. Specifies the `id` of the `<form>` this select box belongs to. If omitted, it's the closest parent form.\n\n[`multiple`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-multiple): A boolean. If `true`, the browser allows [multiple selection.](#enabling-multiple-selection)\n\n[`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-name): A string. Specifies the name for this select box that's [submitted with the form.](#reading-the-select-box-value-when-submitting-a-form)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2353":{"pageContent":"`onChange`: An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Required for [controlled select boxes.](#controlling-a-select-box-with-a-state-variable) Fires immediately when the user picks a different option. Behaves like the browser [`input` event.](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)\n\n`onChangeCapture`: A version of `onChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onInput`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use `onChange` instead which works similarly.\n\n`onInputCapture`: A version of `onInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2354":{"pageContent":"`onInputCapture`: A version of `onInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onInvalid`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires if an input fails validation on form submit. Unlike the built-in `invalid` event, the React `onInvalid` event bubbles.\n\n`onInvalidCapture`: A version of `onInvalid` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`required`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-required): A boolean. If `true`, the value must be provided for the form to submit.\n\n[`size`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attr-size): A number. For `multiple={true}` selects, specifies the preferred number of initially visible items.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2355":{"pageContent":"#### Caveats {/*caveats*/}\n\nUnlike in HTML, passing a `selected` attribute to `<option>` is not supported. Instead, use [`<select defaultValue>`](#providing-an-initially-selected-option) for uncontrolled select boxes and [`<select value>`](#controlling-a-select-box-with-a-state-variable) for controlled select boxes.\n\nIf a select box receives a `value` prop, it will be [treated as controlled.](#controlling-a-select-box-with-a-state-variable)\n\nA select box can't be both controlled and uncontrolled at the same time.\n\nA select box cannot switch between being controlled or uncontrolled over its lifetime.\n\nEvery controlled select box needs an `onChange` event handler that synchronously updates its backing value.\n\n--\n\n## Usage {/*usage*/}\n\n### Displaying a select box with options {/*displaying-a-select-box-with-options*/}\n\nRender a `<select>` with a list of `<option>` components inside to display a select box. Give each `<option>` a `value` representing the data to be submitted with the form.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2356":{"pageContent":"Render a `<select>` with a list of `<option>` components inside to display a select box. Give each `<option>` a `value` representing the data to be submitted with the form.\n\n<Sandpack>\n\n```js\n\nexport default function FruitPicker() {\n\nreturn (\n\n<label>\n\nPick a fruit:\n\n<select name=\"selectedFruit\">\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing a label for a select box {/*providing-a-label-for-a-select-box*/}\n\nTypically, you will place every `<select>` inside a [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) tag. This tells the browser that this label is associated with that select box. When the user clicks the label, the browser will automatically focus the select box. It's also essential for accessibility: a screen reader will announce the label caption when the user focuses the select box.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2357":{"pageContent":"If you can't nest `<select>` into a `<label>`, associate them by passing the same ID to `<select id>` and [`<label htmlFor>`.](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) To avoid conflicts between multiple instances of one component, generate such an ID with [`useId`.](/reference/react/useId)\n\n<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nexport default function Form() {\n\nconst vegetableSelectId = useId();\n\nreturn (\n\n<>\n\n<label>\n\nPick a fruit:\n\n<select name=\"selectedFruit\">\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<label htmlFor={vegetableSelectId}>\n\nPick a vegetable:\n\n</label>\n\n<select id={vegetableSelectId} name=\"selectedVegetable\">\n\n<option value=\"cucumber\">Cucumber</option>\n\n<option value=\"corn\">Corn</option>\n\n<option value=\"tomato\">Tomato</option>\n\n</select>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2358":{"pageContent":"<option value=\"cucumber\">Cucumber</option>\n\n<option value=\"corn\">Corn</option>\n\n<option value=\"tomato\">Tomato</option>\n\n</select>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing an initially selected option {/*providing-an-initially-selected-option*/}\n\nBy default, the browser will select the first `<option>` in the list. To select a different option by default, pass that `<option>`'s `value` as the `defaultValue` to the `<select>` element.\n\n<Sandpack>\n\n```js\n\nexport default function FruitPicker() {\n\nreturn (\n\n<label>\n\nPick a fruit:\n\n<select name=\"selectedFruit\" defaultValue=\"orange\">\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nUnlike in HTML, passing a `selected` attribute to an individual `<option>` is not supported.\n\n</Pitfall>\n\n--\n\n### Enabling multiple selection {/*enabling-multiple-selection*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2359":{"pageContent":"```\n\n</Sandpack>\n\n<Pitfall>\n\nUnlike in HTML, passing a `selected` attribute to an individual `<option>` is not supported.\n\n</Pitfall>\n\n--\n\n### Enabling multiple selection {/*enabling-multiple-selection*/}\n\nPass `multiple={true}` to the `<select>` to let the user select multiple options. In that case, if you also specify `defaultValue` to choose the initially selected options, it must be an array.\n\n<Sandpack>\n\n```js\n\nexport default function FruitPicker() {\n\nreturn (\n\n<label>\n\nPick some fruits:\n\n<select\n\nname=\"selectedFruit\"\n\ndefaultValue={['orange', 'banana']}\n\nmultiple={true}\n\n>\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nselect { display: block; margin-top: 10px; width: 200px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Reading the select box value when submitting a form {/*reading-the-select-box-value-when-submitting-a-form*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2360":{"pageContent":");\n\n}\n\n```\n\n```css\n\nselect { display: block; margin-top: 10px; width: 200px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Reading the select box value when submitting a form {/*reading-the-select-box-value-when-submitting-a-form*/}\n\nAdd a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) around your select box with a [`<button type=\"submit\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) inside. It will call your `<form onSubmit>` event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling `e.preventDefault()`. To read the form data, use [`new FormData(e.target)`](https://developer.mozilla.org/en-US/docs/Web/API/FormData).\n\n<Sandpack>\n\n```js\n\nexport default function EditPost() {\n\nfunction handleSubmit(e) {\n\n// Prevent the browser from reloading the page\n\ne.preventDefault();\n\n// Read the form data\n\nconst form = e.target;\n\nconst formData = new FormData(form);\n\n// You can pass formData as a fetch body directly:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2361":{"pageContent":"// Prevent the browser from reloading the page\n\ne.preventDefault();\n\n// Read the form data\n\nconst form = e.target;\n\nconst formData = new FormData(form);\n\n// You can pass formData as a fetch body directly:\n\nfetch('/some-api', { method: form.method, body: formData });\n\n// You can generate a URL out of it, as the browser does by default:\n\nconsole.log(new URLSearchParams(formData).toString());\n\n// You can work with it as a plain object.\n\nconst formJson = Object.fromEntries(formData.entries());\n\nconsole.log(formJson); // (!) This doesn't include multiple select values\n\n// Or you can get an array of name-value pairs.\n\nconsole.log([...formData.entries()]);\n\n}\n\nreturn (\n\n<form method=\"post\" onSubmit={handleSubmit}>\n\n<label>\n\nPick your favorite fruit:\n\n<select name=\"selectedFruit\" defaultValue=\"orange\">\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n<label>\n\nPick all your favorite vegetables:\n\n<select\n\nname=\"selectedVegetables\"\n\nmultiple={true}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2362":{"pageContent":"<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n<label>\n\nPick all your favorite vegetables:\n\n<select\n\nname=\"selectedVegetables\"\n\nmultiple={true}\n\ndefaultValue={['corn', 'tomato']}\n\n>\n\n<option value=\"cucumber\">Cucumber</option>\n\n<option value=\"corn\">Corn</option>\n\n<option value=\"tomato\">Tomato</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<button type=\"reset\">Reset</button>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel, select { display: block; }\n\nlabel { margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\n<Note>\n\nGive a `name` to your `<select>`, for example `<select name=\"selectedFruit\" />`. The `name` you specified will be used as a key in the form data, for example `{ selectedFruit: \"orange\" }`.\n\nIf you use `<select multiple={true}>`, the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) you'll read from the form will include each selected value as a separate name-value pair. Look closely at the console logs in the example above.\n\n</Note>\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2363":{"pageContent":"</Note>\n\n<Pitfall>\n\nBy default, *any* `<button>` inside a `<form>` will submit it. This can be surprising! If you have your own custom `Button` React component, consider returning [`<button type=\"button\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button) instead of `<button>`. Then, to be explicit, use `<button type=\"submit\">` for buttons that *are* supposed to submit the form.\n\n</Pitfall>\n\n--\n\n### Controlling a select box with a state variable {/*controlling-a-select-box-with-a-state-variable*/}\n\nA select box like `<select />` is *uncontrolled.* Even if you [pass an initially selected value](#providing-an-initially-selected-option) like `<select defaultValue=\"orange\" />`, your JSX only specifies the initial value, not the value right now.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2364":{"pageContent":"*To render a _controlled_ select box, pass the `value` prop to it.** React will force the select box to always have the `value` you passed. Typically, you will control a select box by declaring a [state variable:](/reference/react/useState)\n\n```js {2,6,7}\n\nfunction FruitPicker() {\n\nconst [selectedFruit, setSelectedFruit] = useState('orange'); // Declare a state variable...\n\n// ...\n\nreturn (\n\n<select\n\nvalue={selectedFruit} // ...force the select's value to match the state variable...\n\nonChange={e => setSelectedFruit(e.target.value)} // ... and update the state variable on any change!\n\n>\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n);\n\n}\n\n```\n\nThis is useful if you want to re-render some part of the UI in response to every selection.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FruitPicker() {\n\nconst [selectedFruit, setSelectedFruit] = useState('orange');","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2365":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function FruitPicker() {\n\nconst [selectedFruit, setSelectedFruit] = useState('orange');\n\nconst [selectedVegs, setSelectedVegs] = useState(['corn', 'tomato']);\n\nreturn (\n\n<>\n\n<label>\n\nPick a fruit:\n\n<select\n\nvalue={selectedFruit}\n\nonChange={e => setSelectedFruit(e.target.value)}\n\n>\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<label>\n\nPick all your favorite vegetables:\n\n<select\n\nmultiple={true}\n\nvalue={selectedVegs}\n\nonChange={e => {\n\nconst options = [...e.target.selectedOptions];\n\nconst values = options.map(option => option.value);\n\nsetSelectedVegs(values);\n\n}}\n\n>\n\n<option value=\"cucumber\">Cucumber</option>\n\n<option value=\"corn\">Corn</option>\n\n<option value=\"tomato\">Tomato</option>\n\n</select>\n\n</label>\n\n<hr />\n\n<p>Your favorite fruit: {selectedFruit}</p>\n\n<p>Your favorite vegetables: {selectedVegs.join(', ')}</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2366":{"pageContent":"</select>\n\n</label>\n\n<hr />\n\n<p>Your favorite fruit: {selectedFruit}</p>\n\n<p>Your favorite vegetables: {selectedVegs.join(', ')}</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin-bottom: 10px; display: block; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\n*If you pass `value` without `onChange`, it will be impossible to select an option.** When you control a select box by passing some `value` to it, you *force* it to always have the value you passed. So if you pass a state variable as a `value` but forget to update that state variable synchronously during the `onChange` event handler, React will revert the select box after every keystroke back to the `value` that you specified.\n\nUnlike in HTML, passing a `selected` attribute to an individual `<option>` is not supported.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/select.md"}},"2367":{"pageContent":"--\n\ntitle: \"<option>\"\n\n--\n\n<Intro>\n\nThe [built-in browser `<option>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option) lets you render an option inside a [`<select>`](/reference/react-dom/components/select) box.\n\n```js\n\n<select>\n\n<option value=\"someOption\">Some option</option>\n\n<option value=\"otherOption\">Other option</option>\n\n</select>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<option>` {/*option*/}\n\nThe [built-in browser `<option>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) lets you render an option inside a [`<select>`](/reference/react-dom/components/select) box.\n\n```js\n\n<select>\n\n<option value=\"someOption\">Some option</option>\n\n<option value=\"otherOption\">Other option</option>\n\n</select>\n\n```\n\n[See more examples below.](#usage)\n\n#### Props {/*props*/}\n\n`<option>` supports all [common element props.](/reference/react-dom/components/common#props)\n\nAdditionally, `<option>` supports these props:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/option.md"}},"2368":{"pageContent":"```\n\n[See more examples below.](#usage)\n\n#### Props {/*props*/}\n\n`<option>` supports all [common element props.](/reference/react-dom/components/common#props)\n\nAdditionally, `<option>` supports these props:\n\n[`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#disabled): A boolean. If `true`, the option will not be selectable and will appear dimmed.\n\n[`label`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#label): A string. Specifies the meaning of the option. If not specified, the text inside the option is used.\n\n[`value`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option#value): The value to be used [when submitting the parent `<select>` in a form](/reference/react-dom/components/select#reading-the-select-box-value-when-submitting-a-form) if this option is selected.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/option.md"}},"2369":{"pageContent":"#### Caveats {/*caveats*/}\n\nReact does not support the `selected` attribute on `<option>`. Instead, pass this option's `value` to the parent [`<select defaultValue>`](/reference/react-dom/components/select#providing-an-initially-selected-option) for an uncontrolled select box, or [`<select value>`](/reference/react-dom/components/select#controlling-a-select-box-with-a-state-variable) for a controlled select box.\n\n--\n\n## Usage {/*usage*/}\n\n### Displaying a select box with options {/*displaying-a-select-box-with-options*/}\n\nRender a `<select>` with a list of `<option>` components inside to display a select box. Give each `<option>` a `value` representing the data to be submitted with the form.\n\n[Read more about displaying a `<select>` with a list of `<option>` components.](/reference/react-dom/components/select)\n\n<Sandpack>\n\n```js\n\nexport default function FruitPicker() {\n\nreturn (\n\n<label>\n\nPick a fruit:\n\n<select name=\"selectedFruit\">\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/option.md"}},"2370":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function FruitPicker() {\n\nreturn (\n\n<label>\n\nPick a fruit:\n\n<select name=\"selectedFruit\">\n\n<option value=\"apple\">Apple</option>\n\n<option value=\"banana\">Banana</option>\n\n<option value=\"orange\">Orange</option>\n\n</select>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nselect { margin: 5px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/option.md"}},"2371":{"pageContent":"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre)\n* [``](/reference/react-dom/components/progress)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp)\n* [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script)\n* [`<section>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section)\n* [`<select>`](/reference/react-dom/components/select)\n* [`<slot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2372":{"pageContent":"* [`<select>`](/reference/react-dom/components/select)\n* [`<slot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)\n* [`<small>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small)\n* [`<source>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source)\n* [`<span>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)\n* [`<strong>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong)\n* [`<style>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style)\n* [`<sub>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub)\n* [`<summary>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary)\n* [`<sup>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup)\n* [`<table>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)\n* [`<tbody>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody)\n* [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2373":{"pageContent":"* [`<tbody>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody)\n* [`<td>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)\n* [`<template>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)\n* [`<textarea>`](/reference/react-dom/components/textarea)\n* [`<tfoot>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot)\n* [`<th>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th)\n* [`<thead>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead)\n* [`<time>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time)\n* [`<title>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title)\n* [`<tr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr)\n* [`<track>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)\n* [`<u>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)\n* [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2374":{"pageContent":"* [`<u>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)\n* [`<ul>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)\n* [`<var>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var)\n* [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)\n* [`<wbr>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2375":{"pageContent":"<Note>\n\nSimilar to the [DOM standard,](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) React uses a `camelCase` convention for prop names. For example, you'll write `tabIndex` instead of `tabindex`. You can convert existing HTML to JSX with an [online converter.](https://transform.tools/html-to-jsx)\n\n</Note>\n\n---\n\n### Custom HTML elements {/*custom-html-elements*/}\n\nIf you render a tag with a dash, like `<my-element>`, React will assume you want to render a [custom HTML element.](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) In React, rendering custom elements works differently from rendering built-in browser tags:\n\n- All custom element props are serialized to strings and are always set using attributes.\n- Custom elements accept `class` rather than `className`, and `for` rather than `htmlFor`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2376":{"pageContent":"- All custom element props are serialized to strings and are always set using attributes.\n- Custom elements accept `class` rather than `className`, and `for` rather than `htmlFor`.\n\nIf you render a built-in browser HTML element with an [`is`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is) attribute, it will also be treated as a custom element.\n\n<Note>\n\n[A future version of React will include more comprehensive support for custom elements.](https://github.com/facebook/react/issues/11347#issuecomment-1122275286)\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n- `react@experimental`\n- `react-dom@experimental`\n\nExperimental versions of React may contain bugs. Don't use them in production.\n\n</Note>\n---\n\n## All SVG components {/*all-svg-components*/}\n\nReact supports all built-in browser SVG components. This includes:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2377":{"pageContent":"* [`<a>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a)\n* [`<animate>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate)\n* [`<animateMotion>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion)\n* [`<animateTransform>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform)\n* [`<circle>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle)\n* [`<clipPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath)\n* [`<defs>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs)\n* [`<desc>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/desc)\n* [`<discard>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/discard)\n* [`<ellipse>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse)\n* [`<feBlend>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend)\n* [`<feColorMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2378":{"pageContent":"* [`<feBlend>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend)\n* [`<feColorMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix)\n* [`<feComponentTransfer>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComponentTransfer)\n* [`<feComposite>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComposite)\n* [`<feConvolveMatrix>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feConvolveMatrix)\n* [`<feDiffuseLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting)\n* [`<feDisplacementMap>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap)\n* [`<feDistantLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDistantLight)\n* [`<feDropShadow>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow)\n* [`<feFlood>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2379":{"pageContent":"* [`<feDropShadow>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow)\n* [`<feFlood>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood)\n* [`<feFuncA>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncA)\n* [`<feFuncB>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncB)\n* [`<feFuncG>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncG)\n* [`<feFuncR>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncR)\n* [`<feGaussianBlur>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur)\n* [`<feImage>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feImage)\n* [`<feMerge>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMerge)\n* [`<feMergeNode>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode)\n* [`<feMorphology>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2380":{"pageContent":"* [`<feMergeNode>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode)\n* [`<feMorphology>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology)\n* [`<feOffset>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feOffset)\n* [`<fePointLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/fePointLight)\n* [`<feSpecularLighting>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting)\n* [`<feSpotLight>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpotLight)\n* [`<feTile>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTile)\n* [`<feTurbulence>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTurbulence)\n* [`<filter>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter)\n* [`<foreignObject>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n* [`<g>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g)\n* `<hatch>`\n* `<hatchpath>`","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2381":{"pageContent":"* [`<foreignObject>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject)\n* [`<g>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g)\n* `<hatch>`\n* `<hatchpath>`\n* [`<image>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image)\n* [`<line>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line)\n* [`<linearGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient)\n* [`<marker>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker)\n* [`<mask>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask)\n* [`<metadata>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/metadata)\n* [`<mpath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mpath)\n* [`<path>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path)\n* [`<pattern>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern)\n* [`<polygon>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2382":{"pageContent":"* [`<pattern>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern)\n* [`<polygon>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon)\n* [`<polyline>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline)\n* [`<radialGradient>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient)\n* [`<rect>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect)\n* [`<script>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/script)\n* [`<set>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/set)\n* [`<stop>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop)\n* [`<style>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/style)\n* [`<svg>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg)\n* [`<switch>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch)\n* [`<symbol>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2383":{"pageContent":"* [`<switch>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch)\n* [`<symbol>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol)\n* [`<text>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text)\n* [`<textPath>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath)\n* [`<title>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title)\n* [`<tspan>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan)\n* [`<use>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use)\n* [`<view>`](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2384":{"pageContent":"<Note>\n\nSimilar to the [DOM standard,](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) React uses a `camelCase` convention for prop names. For example, you'll write `tabIndex` instead of `tabindex`. You can convert existing SVG to JSX with an [online converter.](https://transform.tools/)\n\nNamespaced attributes also have to be written without the colon:\n\n* `xlink:actuate` becomes `xlinkActuate`.\n* `xlink:arcrole` becomes `xlinkArcrole`.\n* `xlink:href` becomes `xlinkHref`.\n* `xlink:role` becomes `xlinkRole`.\n* `xlink:show` becomes `xlinkShow`.\n* `xlink:title` becomes `xlinkTitle`.\n* `xlink:type` becomes `xlinkType`.\n* `xml:base` becomes `xmlBase`.\n* `xml:lang` becomes `xmlLang`.\n* `xml:space` becomes `xmlSpace`.\n* `xmlns:xlink` becomes `xmlnsXlink`.\n\n</Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/index.md"}},"2385":{"pageContent":"--\n\ntitle: \"<textarea>\"\n\n--\n\n<Intro>\n\nThe [built-in browser `<textarea>` component](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) lets you render a multiline text input.\n\n```js\n\n<textarea />\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<textarea>` {/*textarea*/}\n\nTo display a text area, render the [built-in browser `<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) component.\n\n```js\n\n<textarea name=\"postContent\" />\n\n```\n\n[See more examples below.](#usage)\n\n#### Props {/*props*/}\n\n`<textarea>` supports all [common element props.](/reference/react-dom/components/common#props)\n\nYou can [make a text area controlled](#controlling-a-text-area-with-a-state-variable) by passing a `value` prop:\n\n`value`: A string. Controls the text inside the text area.\n\nWhen you pass `value`, you must also pass an `onChange` handler that updates the passed value.\n\nIf your `<textarea>` is uncontrolled, you may pass the `defaultValue` prop instead:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2386":{"pageContent":"When you pass `value`, you must also pass an `onChange` handler that updates the passed value.\n\nIf your `<textarea>` is uncontrolled, you may pass the `defaultValue` prop instead:\n\n`defaultValue`: A string. Specifies [the initial value](#providing-an-initial-value-for-a-text-area) for a text area.\n\nThese `<textarea>` props are relevant both for uncontrolled and controlled text areas:\n\n[`autoComplete`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocomplete): Either `'on'` or `'off'`. Specifies the autocomplete behavior.\n\n[`autoFocus`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autofocus): A boolean. If `true`, React will focus the element on mount.\n\n`children`: `<textarea>` does not accept children. To set the initial value, use `defaultValue`.\n\n[`cols`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols): A number. Specifies the default width in average character widths. Defaults to `20`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2387":{"pageContent":"[`cols`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols): A number. Specifies the default width in average character widths. Defaults to `20`.\n\n[`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-disabled): A boolean. If `true`, the input will not be interactive and will appear dimmed.\n\n[`form`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-form): A string. Specifies the `id` of the `<form>` this input belongs to. If omitted, it's the closest parent form.\n\n[`maxLength`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength): A number. Specifies the maximum length of text.\n\n[`minLength`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength): A number. Specifies the minimum length of text.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2388":{"pageContent":"[`minLength`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength): A number. Specifies the minimum length of text.\n\n[`name`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name): A string. Specifies the name for this input that's [submitted with the form.](#reading-the-textarea-value-when-submitting-a-form)\n\n`onChange`: An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Required for [controlled text areas.](#controlling-a-text-area-with-a-state-variable) Fires immediately when the input's value is changed by the user (for example, it fires on every keystroke). Behaves like the browser [`input` event.](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)\n\n`onChangeCapture`: A version of `onChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2389":{"pageContent":"`onChangeCapture`: A version of `onChange` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onInput`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use `onChange` instead which works similarly.\n\n`onInputCapture`: A version of `onInput` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onInvalid`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires if an input fails validation on form submit. Unlike the built-in `invalid` event, the React `onInvalid` event bubbles.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2390":{"pageContent":"`onInvalidCapture`: A version of `onInvalid` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`onSelect`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/select_event): An [`Event` handler](/reference/react-dom/components/common#event-handler) function. Fires after the selection inside the `<textarea>` changes. React extends the `onSelect` event to also fire for empty selection and on edits (which may affect the selection).\n\n`onSelectCapture`: A version of `onSelect` that fires in the [capture phase.](/learn/responding-to-events#capture-phase-events)\n\n[`placeholder`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder): A string. Displayed in a dimmed color when the text area value is empty.\n\n[`readOnly`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-readonly): A boolean. If `true`, the text area is not editable by the user.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2391":{"pageContent":"[`readOnly`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-readonly): A boolean. If `true`, the text area is not editable by the user.\n\n[`required`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-required): A boolean. If `true`, the value must be provided for the form to submit.\n\n[`rows`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows): A number. Specifies the default height in average character heights. Defaults to `2`.\n\n[`wrap`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap): Either `'hard'`, `'soft'`, or `'off'`. Specifies how the text should be wrapped when submitting a form.\n\n#### Caveats {/*caveats*/}\n\nPassing children like `<textarea>something</textarea>` is not allowed. [Use `defaultValue` for initial content.](#providing-an-initial-value-for-a-text-area)","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2392":{"pageContent":"#### Caveats {/*caveats*/}\n\nPassing children like `<textarea>something</textarea>` is not allowed. [Use `defaultValue` for initial content.](#providing-an-initial-value-for-a-text-area)\n\nIf a text area receives a string `value` prop, it will be [treated as controlled.](#controlling-a-text-area-with-a-state-variable)\n\nA text area can't be both controlled and uncontrolled at the same time.\n\nA text area cannot switch between being controlled or uncontrolled over its lifetime.\n\nEvery controlled text area needs an `onChange` event handler that synchronously updates its backing value.\n\n--\n\n## Usage {/*usage*/}\n\n### Displaying a text area {/*displaying-a-text-area*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2393":{"pageContent":"Every controlled text area needs an `onChange` event handler that synchronously updates its backing value.\n\n--\n\n## Usage {/*usage*/}\n\n### Displaying a text area {/*displaying-a-text-area*/}\n\nRender `<textarea>` to display a text area. You can specify its default size with the [`rows`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#rows) and [`cols`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#cols) attributes, but by default the user will be able to resize it. To disable resizing, you can specify `resize: none` in the CSS.\n\n<Sandpack>\n\n```js\n\nexport default function NewPost() {\n\nreturn (\n\n<label>\n\nWrite your post:\n\n<textarea name=\"postContent\" rows={4} cols={40} />\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin-left: 5px; }\n\ntextarea { margin-top: 10px; }\n\nlabel { margin: 10px; }\n\nlabel, textarea { display: block; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing a label for a text area {/*providing-a-label-for-a-text-area*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2394":{"pageContent":"textarea { margin-top: 10px; }\n\nlabel { margin: 10px; }\n\nlabel, textarea { display: block; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing a label for a text area {/*providing-a-label-for-a-text-area*/}\n\nTypically, you will place every `<textarea>` inside a [`<label>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label) tag. This tells the browser that this label is associated with that text area. When the user clicks the label, the browser will focus the text area. It's also essential for accessibility: a screen reader will announce the label caption when the user focuses the text area.\n\nIf you can't nest `<textarea>` into a `<label>`, associate them by passing the same ID to `<textarea id>` and [`<label htmlFor>`.](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) To avoid conflicts between instances of one component, generate such an ID with [`useId`.](/reference/react/useId)\n\n<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nexport default function Form() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2395":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nexport default function Form() {\n\nconst postTextAreaId = useId();\n\nreturn (\n\n<>\n\n<label htmlFor={postTextAreaId}>\n\nWrite your post:\n\n</label>\n\n<textarea\n\nid={postTextAreaId}\n\nname=\"postContent\"\n\nrows={4}\n\ncols={40}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Providing an initial value for a text area {/*providing-an-initial-value-for-a-text-area*/}\n\nYou can optionally specify the initial value for the text area. Pass it as the `defaultValue` string.\n\n<Sandpack>\n\n```js\n\nexport default function EditPost() {\n\nreturn (\n\n<label>\n\nEdit your post:\n\n<textarea\n\nname=\"postContent\"\n\ndefaultValue=\"I really enjoyed biking yesterday!\"\n\nrows={4}\n\ncols={40}\n\n/>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin-left: 5px; }\n\ntextarea { margin-top: 10px; }\n\nlabel { margin: 10px; }\n\nlabel, textarea { display: block; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nUnlike in HTML, passing initial text like `<textarea>Some content</textarea>` is not supported.\n\n</Pitfall>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2396":{"pageContent":"label { margin: 10px; }\n\nlabel, textarea { display: block; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nUnlike in HTML, passing initial text like `<textarea>Some content</textarea>` is not supported.\n\n</Pitfall>\n\n--\n\n### Reading the text area value when submitting a form {/*reading-the-text-area-value-when-submitting-a-form*/}\n\nAdd a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) around your textarea with a [`<button type=\"submit\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) inside. It will call your `<form onSubmit>` event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling `e.preventDefault()`. To read the form data, use [`new FormData(e.target)`](https://developer.mozilla.org/en-US/docs/Web/API/FormData).\n\n<Sandpack>\n\n```js\n\nexport default function EditPost() {\n\nfunction handleSubmit(e) {\n\n// Prevent the browser from reloading the page\n\ne.preventDefault();\n\n// Read the form data","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2397":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function EditPost() {\n\nfunction handleSubmit(e) {\n\n// Prevent the browser from reloading the page\n\ne.preventDefault();\n\n// Read the form data\n\nconst form = e.target;\n\nconst formData = new FormData(form);\n\n// You can pass formData as a fetch body directly:\n\nfetch('/some-api', { method: form.method, body: formData });\n\n// Or you can work with it as a plain object:\n\nconst formJson = Object.fromEntries(formData.entries());\n\nconsole.log(formJson);\n\n}\n\nreturn (\n\n<form method=\"post\" onSubmit={handleSubmit}>\n\n<label>\n\nPost title: <input name=\"postTitle\" defaultValue=\"Biking\" />\n\n</label>\n\n<label>\n\nEdit your post:\n\n<textarea\n\nname=\"postContent\"\n\ndefaultValue=\"I really enjoyed biking yesterday!\"\n\nrows={4}\n\ncols={40}\n\n/>\n\n</label>\n\n<hr />\n\n<button type=\"reset\">Reset edits</button>\n\n<button type=\"submit\">Save post</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2398":{"pageContent":"rows={4}\n\ncols={40}\n\n/>\n\n</label>\n\n<hr />\n\n<button type=\"reset\">Reset edits</button>\n\n<button type=\"submit\">Save post</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Note>\n\nGive a `name` to your `<textarea>`, for example `<textarea name=\"postContent\" />`. The `name` you specified will be used as a key in the form data, for example `{ postContent: \"Your post\" }`.\n\n</Note>\n\n<Pitfall>\n\nBy default, *any* `<button>` inside a `<form>` will submit it. This can be surprising! If you have your own custom `Button` React component, consider returning [`<button type=\"button\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button) instead of `<button>`. Then, to be explicit, use `<button type=\"submit\">` for buttons that *are* supposed to submit the form.\n\n</Pitfall>\n\n--\n\n### Controlling a text area with a state variable {/*controlling-a-text-area-with-a-state-variable*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2399":{"pageContent":"</Pitfall>\n\n--\n\n### Controlling a text area with a state variable {/*controlling-a-text-area-with-a-state-variable*/}\n\nA text area like `<textarea />` is *uncontrolled.* Even if you [pass an initial value](#providing-an-initial-value-for-a-text-area) like `<textarea defaultValue=\"Initial text\" />`, your JSX only specifies the initial value, not the value right now.\n\n*To render a _controlled_ text area, pass the `value` prop to it.** React will force the text area to always have the `value` you passed. Typically, you will control a text area by declaring a [state variable:](/reference/react/useState)\n\n```js {2,6,7}\n\nfunction NewPost() {\n\nconst [postContent, setPostContent] = useState(''); // Declare a state variable...\n\n// ...\n\nreturn (\n\n<textarea\n\nvalue={postContent} // ...force the input's value to match the state variable...\n\nonChange={e => setPostContent(e.target.value)} // ... and update the state variable on any edits!\n\n/>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2400":{"pageContent":"<textarea\n\nvalue={postContent} // ...force the input's value to match the state variable...\n\nonChange={e => setPostContent(e.target.value)} // ... and update the state variable on any edits!\n\n/>\n\n);\n\n}\n\n```\n\nThis is useful if you want to re-render some part of the UI in response to every keystroke.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport MarkdownPreview from './MarkdownPreview.js';\n\nexport default function MarkdownEditor() {\n\nconst [postContent, setPostContent] = useState('_Hello,_ **Markdown**!');\n\nreturn (\n\n<>\n\n<label>\n\nEnter some markdown:\n\n<textarea\n\nvalue={postContent}\n\nonChange={e => setPostContent(e.target.value)}\n\n/>\n\n</label>\n\n<hr />\n\n<MarkdownPreview markdown={postContent} />\n\n</>\n\n);\n\n}\n\n```\n\n```js MarkdownPreview.js\n\nimport { Remarkable } from 'remarkable';\n\nconst md = new Remarkable();\n\nexport default function MarkdownPreview({ markdown }) {\n\nconst renderedHTML = md.render(markdown);\n\nreturn <div dangerouslySetInnerHTML={{__html: renderedHTML}} />;\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2401":{"pageContent":"const renderedHTML = md.render(markdown);\n\nreturn <div dangerouslySetInnerHTML={{__html: renderedHTML}} />;\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"remarkable\": \"2.0.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```css\n\ntextarea { display: block; margin-top: 5px; margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\n*If you pass `value` without `onChange`, it will be impossible to type into the text area.** When you control an text area by passing some `value` to it, you *force* it to always have the value you passed. So if you pass a state variable as a `value` but forget to update that state variable synchronously during the `onChange` event handler, React will revert the text area after every keystroke back to the `value` that you specified.\n\n</Pitfall>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2402":{"pageContent":"</Pitfall>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My text area doesn't update when I type into it {/*my-text-area-doesnt-update-when-i-type-into-it*/}\n\nIf you render a text area with `value` but no `onChange`, you will see an error in the console:\n\n```js\n\n// 🔴 Bug: controlled text area with no onChange handler\n\n<textarea value={something} />\n\n```\n\n<ConsoleBlock level=\"error\">\n\nYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.\n\n</ConsoleBlock>\n\nAs the error message suggests, if you only wanted to [specify the *initial* value,](#providing-an-initial-value-for-a-text-area) pass `defaultValue` instead:\n\n```js\n\n// ✅ Good: uncontrolled text area with an initial value\n\n<textarea defaultValue={something} />\n\n```\n\nIf you want [to control this text area with a state variable,](#controlling-a-text-area-with-a-state-variable) specify an `onChange` handler:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2403":{"pageContent":"<textarea defaultValue={something} />\n\n```\n\nIf you want [to control this text area with a state variable,](#controlling-a-text-area-with-a-state-variable) specify an `onChange` handler:\n\n```js\n\n// ✅ Good: controlled text area with onChange\n\n<textarea value={something} onChange={e => setSomething(e.target.value)} />\n\n```\n\nIf the value is intentionally read-only, add a `readOnly` prop to suppress the error:\n\n```js\n\n// ✅ Good: readonly controlled text area without on change\n\n<textarea value={something} readOnly={true} />\n\n```\n\n--\n\n### My text area caret jumps to the beginning on every keystroke {/*my-text-area-caret-jumps-to-the-beginning-on-every-keystroke*/}\n\nIf you [control a text area,](#controlling-a-text-area-with-a-state-variable) you must update its state variable to the text area's value from the DOM during `onChange`.\n\nYou can't update it to something other than `e.target.value`:\n\n```js\n\nfunction handleChange(e) {\n\n// 🔴 Bug: updating an input to something other than e.target.value","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2404":{"pageContent":"You can't update it to something other than `e.target.value`:\n\n```js\n\nfunction handleChange(e) {\n\n// 🔴 Bug: updating an input to something other than e.target.value\n\nsetFirstName(e.target.value.toUpperCase());\n\n}\n\n```\n\nYou also can't update it asynchronously:\n\n```js\n\nfunction handleChange(e) {\n\n// 🔴 Bug: updating an input asynchronously\n\nsetTimeout(() => {\n\nsetFirstName(e.target.value);\n\n}, 100);\n\n}\n\n```\n\nTo fix your code, update it synchronously to `e.target.value`:\n\n```js\n\nfunction handleChange(e) {\n\n// ✅ Updating a controlled input to e.target.value synchronously\n\nsetFirstName(e.target.value);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2405":{"pageContent":"}\n\n```\n\nTo fix your code, update it synchronously to `e.target.value`:\n\n```js\n\nfunction handleChange(e) {\n\n// ✅ Updating a controlled input to e.target.value synchronously\n\nsetFirstName(e.target.value);\n\n}\n\n```\n\nIf this doesn't fix the problem, it's possible that the text area gets removed and re-added from the DOM on every keystroke. This can happen if you're accidentally [resetting state](/learn/preserving-and-resetting-state) on every re-render. For example, this can happen if the text area or one of its parents always receives a different `key` attribute, or if you nest component definitions (which is not allowed in React and causes the \"inner\" component to remount on every render).\n\n--\n\n### I'm getting an error: \"A component is changing an uncontrolled input to be controlled\" {/*im-getting-an-error-a-component-is-changing-an-uncontrolled-input-to-be-controlled*/}\n\nIf you provide a `value` to the component, it must remain a string throughout its lifetime.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2406":{"pageContent":"If you provide a `value` to the component, it must remain a string throughout its lifetime.\n\nYou cannot pass `value={undefined}` first and later pass `value=\"some string\"` because React won't know whether you want the component to be uncontrolled or controlled. A controlled component should always receive a string `value`, not `null` or `undefined`.\n\nIf your `value` is coming from an API or a state variable, it might be initialized to `null` or `undefined`. In that case, either set it to an empty string (`''`) initially, or pass `value={someValue ?? ''}` to ensure `value` is a string.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/components/textarea.md"}},"2407":{"pageContent":"--\n\ntitle: createRoot\n\n--\n\n<Intro>\n\n`createRoot` lets you create a root to display React components inside a browser DOM node.\n\n```js\n\nconst root = createRoot(domNode, options?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `createRoot(domNode, options?)` {/*createroot*/}\n\nCall `createRoot` to create a React root for displaying content inside a browser DOM element.\n\n```js\n\nimport { createRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\n\nconst root = createRoot(domNode);\n\n```\n\nReact will create a root for the `domNode`, and take over managing the DOM inside it. After you've created a root, you need to call [`root.render`](#root-render) to display a React component inside of it:\n\n```js\n\nroot.render(<App />);\n\n```\n\nAn app fully built with React will usually only have one `createRoot` call for its root component. A page that uses \"sprinkles\" of React for parts of the page may have as many separate roots as needed.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2408":{"pageContent":"[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`domNode`: A [DOM element.](https://developer.mozilla.org/en-US/docs/Web/API/Element) React will create a root for this DOM element and allow you to call functions on the root, such as `render` to display rendered React content.\n\n**optional** `options`: An object with options for this React root.\n\n**optional** `onRecoverableError`: Callback called when React automatically recovers from errors.\n\n**optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`.](/reference/react/useId) Useful to avoid conflicts when using multiple roots on the same page.\n\n#### Returns {/*returns*/}\n\n`createRoot` returns an object with two methods: [`render`](#root-render) and [`unmount`.](#root-unmount)\n\n#### Caveats {/*caveats*/}\n\nIf your app is server-rendered, using `createRoot()` is not supported. Use [`hydrateRoot()`](/reference/react-dom/client/hydrateRoot) instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2409":{"pageContent":"#### Caveats {/*caveats*/}\n\nIf your app is server-rendered, using `createRoot()` is not supported. Use [`hydrateRoot()`](/reference/react-dom/client/hydrateRoot) instead.\n\nYou'll likely have only one `createRoot` call in your app. If you use a framework, it might do this call for you.\n\nWhen you want to render a piece of JSX in a different part of the DOM tree that isn't a child of your component (for example, a modal or a tooltip), use [`createPortal`](/reference/react-dom/createPortal) instead of `createRoot`.\n\n--\n\n### `root.render(reactNode)` {/*root-render*/}\n\nCall `root.render` to display a piece of [JSX](/learn/writing-markup-with-jsx) (\"React node\") into the React root's browser DOM node.\n\n```js\n\nroot.render(<App />);\n\n```\n\nReact will display `<App />` in the `root`, and take over managing the DOM inside it.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*root-render-parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2410":{"pageContent":"```js\n\nroot.render(<App />);\n\n```\n\nReact will display `<App />` in the `root`, and take over managing the DOM inside it.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*root-render-parameters*/}\n\n`reactNode`: A *React node* that you want to display. This will usually be a piece of JSX like `<App />`, but you can also pass a React element constructed with [`createElement()`](/reference/react/createElement), a string, a number, `null`, or `undefined`.\n\n#### Returns {/*root-render-returns*/}\n\n`root.render` returns `undefined`.\n\n#### Caveats {/*root-render-caveats*/}\n\nThe first time you call `root.render`, React will clear all the existing HTML content inside the React root before rendering the React component into it.\n\nIf your root's DOM node contains HTML generated by React on the server or during the build, use [`hydrateRoot()`](/reference/react-dom/client/hydrateRoot) instead, which attaches the event handlers to the existing HTML.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2411":{"pageContent":"If you call `render` on the same root more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by [\"matching it up\"](/learn/preserving-and-resetting-state) with the previously rendered tree. Calling `render` on the same root again is similar to calling the [`set` function](/reference/react/useState#setstate) on the root component: React avoids unnecessary DOM updates.\n\n--\n\n### `root.unmount()` {/*root-unmount*/}\n\nCall `root.unmount` to destroy a rendered tree inside a React root.\n\n```js\n\nroot.unmount();\n\n```\n\nAn app fully built with React will usually not have any calls to `root.unmount`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2412":{"pageContent":"Call `root.unmount` to destroy a rendered tree inside a React root.\n\n```js\n\nroot.unmount();\n\n```\n\nAn app fully built with React will usually not have any calls to `root.unmount`.\n\nThis is mostly useful if your React root's DOM node (or any of its ancestors) may get removed from the DOM by some other code. For example, imagine a jQuery tab panel that removes inactive tabs from the DOM. If a tab gets removed, everything inside it (including the React roots inside) would get removed from the DOM as well. In that case, you need to tell React to \"stop\" managing the removed root's content by calling `root.unmount`. Otherwise, the components inside the removed root won't know to clean up and free up global resources like subscriptions.\n\nCalling `root.unmount` will unmount all the components in the root and \"detach\" React from the root DOM node, including removing any event handlers or state in the tree.\n\n#### Parameters {/*root-unmount-parameters*/}\n\n`root.unmount` does not accept any parameters.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2413":{"pageContent":"#### Parameters {/*root-unmount-parameters*/}\n\n`root.unmount` does not accept any parameters.\n\n#### Returns {/*root-unmount-returns*/}\n\n`root.unmount` returns `undefined`.\n\n#### Caveats {/*root-unmount-caveats*/}\n\nCalling `root.unmount` will unmount all the components in the tree and \"detach\" React from the root DOM node.\n\nOnce you call `root.unmount` you cannot call `root.render` again on the same root. Attempting to call `root.render` on an unmounted root will throw a \"Cannot update an unmounted root\" error. However, you can create a new root for the same DOM node after the previous root for that node has been unmounted.\n\n--\n\n## Usage {/*usage*/}\n\n### Rendering an app fully built with React {/*rendering-an-app-fully-built-with-react*/}\n\nIf your app is fully built with React, create a single root for your entire app.\n\n```js [[1, 3, \"document.getElementById('root')\"], [2, 4, \"<App />\"]]\n\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2414":{"pageContent":"```js [[1, 3, \"document.getElementById('root')\"], [2, 4, \"<App />\"]]\n\nimport { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(<App />);\n\n````\n\nUsually, you only need to run this code once at startup. It will:\n\n1. Find the <CodeStep step={1}>browser DOM node</CodeStep> defined in your HTML.\n\n2. Display the <CodeStep step={2}>React component</CodeStep> for your app inside.\n\n<Sandpack>\n\n```html index.html\n\n<!DOCTYPE html>\n\n<html>\n\n<head><title>My app</title></head>\n\n<body>\n\n<!-- This is the DOM node -->\n\n<div id=\"root\"></div>\n\n</body>\n\n</html>\n\n```\n\n```js index.js active\n\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nimport './styles.css';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(<App />);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<h1>Hello, world!</h1>\n\n<Counter />\n\n</>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2415":{"pageContent":"```\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<h1>Hello, world!</h1>\n\n<Counter />\n\n</>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nreturn (\n\n<button onClick={() => setCount(count + 1)}>\n\nYou clicked me {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n*If your app is fully built with React, you shouldn't need to create any more roots, or to call [`root.render`](#root-render) again.**\n\nFrom this point on, React will manage the DOM of your entire app. To add more components, [nest them inside the `App` component.](/learn/importing-and-exporting-components) When you need to update the UI, each of your components can do this by [using state.](/reference/react/useState) When you need to display extra content like a modal or a tooltip outside the DOM node, [render it with a portal.](/reference/react-dom/createPortal)\n\n<Note>\n\nWhen your HTML is empty, the user sees a blank page until the app's JavaScript code loads and runs:\n\n```html\n\n<div id=\"root\"></div>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2416":{"pageContent":"<Note>\n\nWhen your HTML is empty, the user sees a blank page until the app's JavaScript code loads and runs:\n\n```html\n\n<div id=\"root\"></div>\n\n```\n\nThis can feel very slow! To solve this, you can generate the initial HTML from your components [on the server or during the build.](/reference/react-dom/server) Then your visitors can read text, see images, and click links before any of the JavaScript code loads. We recommend to [use a framework](/learn/start-a-new-react-project#building-with-a-full-featured-framework) that does this optimization out of the box. Depending on when it runs, this is called *server-side rendering (SSR)* or *static site generation (SSG).*\n\n</Note>\n\n<Pitfall>\n\n*Apps using server rendering or static generation must call [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) instead of `createRoot`.** React will then *hydrate* (reuse) the DOM nodes from your HTML instead of destroying and re-creating them.\n\n</Pitfall>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2417":{"pageContent":"</Pitfall>\n\n--\n\n### Rendering a page partially built with React {/*rendering-a-page-partially-built-with-react*/}\n\nIf your page [isn't fully built with React](/learn/add-react-to-a-website), you can call `createRoot` multiple times to create a root for each top-level piece of UI managed by React. You can display different content in each root by calling [`root.render`.](#root-render)\n\nHere, two different React components are rendered into two DOM nodes defined in the `index.html` file:\n\n<Sandpack>\n\n```html public/index.html\n\n<nav id=\"navigation\"></nav>\n\n<main>\n\n<p>This paragraph is not rendered by React (open index.html to verify).</p>\n\n<section id=\"comments\"></section>\n\n</main>\n\n```\n\n```js index.js active\n\nimport './styles.css';\n\nimport { createRoot } from 'react-dom/client';\n\nimport { Comments, Navigation } from './Components.js';\n\nconst navDomNode = document.getElementById('navigation');\n\nconst navRoot = createRoot(navDomNode);\n\nnavRoot.render(<Navigation />);\n\nconst commentDomNode = document.getElementById('comments');","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2418":{"pageContent":"const navDomNode = document.getElementById('navigation');\n\nconst navRoot = createRoot(navDomNode);\n\nnavRoot.render(<Navigation />);\n\nconst commentDomNode = document.getElementById('comments');\n\nconst commentRoot = createRoot(commentDomNode);\n\ncommentRoot.render(<Comments />);\n\n```\n\n```js Components.js\n\nexport function Navigation() {\n\nreturn (\n\n<ul>\n\n<NavLink href=\"/\">Home</NavLink>\n\n<NavLink href=\"/about\">About</NavLink>\n\n</ul>\n\n);\n\n}\n\nfunction NavLink({ href, children }) {\n\nreturn (\n\n<li>\n\n<a href={href}>{children}</a>\n\n</li>\n\n);\n\n}\n\nexport function Comments() {\n\nreturn (\n\n<>\n\n<h2>Comments</h2>\n\n<Comment text=\"Hello!\" author=\"Sophie\" />\n\n<Comment text=\"How are you?\" author=\"Sunil\" />\n\n</>\n\n);\n\n}\n\nfunction Comment({ text, author }) {\n\nreturn (\n\n<p>{text} — <i>{author}</i></p>\n\n);\n\n}\n\n```\n\n```css\n\nnav ul { padding: 0; margin: 0; }\n\nnav ul li { display: inline-block; margin-right: 20px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2419":{"pageContent":"</>\n\n);\n\n}\n\nfunction Comment({ text, author }) {\n\nreturn (\n\n<p>{text} — <i>{author}</i></p>\n\n);\n\n}\n\n```\n\n```css\n\nnav ul { padding: 0; margin: 0; }\n\nnav ul li { display: inline-block; margin-right: 20px; }\n\n```\n\n</Sandpack>\n\nYou could also create a new DOM node with [`document.createElement()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement) and add it to the document manually.\n\n```js\n\nconst domNode = document.createElement('div');\n\nconst root = createRoot(domNode);\n\nroot.render(<Comment />);\n\ndocument.body.appendChild(domNode); // You can add it anywhere in the document\n\n```\n\nTo remove the React tree from the DOM node and clean up all the resources used by it, call [`root.unmount`.](#root-unmount)\n\n```js\n\nroot.unmount();\n\n```\n\nThis is mostly useful if your React components are inside an app written in a different framework.\n\n--\n\n### Updating a root component {/*updating-a-root-component*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2420":{"pageContent":"```js\n\nroot.unmount();\n\n```\n\nThis is mostly useful if your React components are inside an app written in a different framework.\n\n--\n\n### Updating a root component {/*updating-a-root-component*/}\n\nYou can call `render` more than once on the same root. As long as the component tree structure matches up with what was previously rendered, React will [preserve the state.](/learn/preserving-and-resetting-state) Notice how you can type in the input, which means that the updates from repeated `render` calls every second in this example are not destructive:\n\n<Sandpack>\n\n```js index.js active\n\nimport { createRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App.js';\n\nconst root = createRoot(document.getElementById('root'));\n\nlet i = 0;\n\nsetInterval(() => {\n\nroot.render(<App counter={i} />);\n\ni++;\n\n}, 1000);\n\n```\n\n```js App.js\n\nexport default function App({counter}) {\n\nreturn (\n\n<>\n\n<h1>Hello, world! {counter}</h1>\n\n<input placeholder=\"Type something here\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2421":{"pageContent":"i++;\n\n}, 1000);\n\n```\n\n```js App.js\n\nexport default function App({counter}) {\n\nreturn (\n\n<>\n\n<h1>Hello, world! {counter}</h1>\n\n<input placeholder=\"Type something here\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIt is uncommon to call `render` multiple times. Usually, you'll [update state](/reference/react/useState) inside one of the components instead.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I've created a root, but nothing is displayed {/*ive-created-a-root-but-nothing-is-displayed*/}\n\nMake sure you haven't forgotten to actually *render* your app into the root:\n\n```js {5}\n\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(<App />);\n\n```\n\nUntil you do that, nothing is displayed.\n\n--\n\n### I'm getting an error: \"Target container is not a DOM element\" {/*im-getting-an-error-target-container-is-not-a-dom-element*/}\n\nThis error means that whatever you're passing to `createRoot` is not a DOM node.\n\nIf you're not sure what's happening, try logging it:","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2422":{"pageContent":"This error means that whatever you're passing to `createRoot` is not a DOM node.\n\nIf you're not sure what's happening, try logging it:\n\n```js {2}\n\nconst domNode = document.getElementById('root');\n\nconsole.log(domNode); // ???\n\nconst root = createRoot(domNode);\n\nroot.render(<App />);\n\n```\n\nFor example, if `domNode` is `null`, it means that [`getElementById`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) returned `null`. This will happen if there is no node in the document with the given ID at the time of your call. There may be a few reasons for it:\n\n1. The ID you're looking for might differ from the ID you used in the HTML file. Check for typos!\n\n2. Your bundle's `<script>` tag cannot \"see\" any DOM nodes that appear *after* it in the HTML.\n\nIf you can't get it working, check out [Adding React to a Website](/learn/add-react-to-a-website) for a working example.\n\nAnother common way to get this error is to write `createRoot(<App />)` instead of `createRoot(domNode)`.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2423":{"pageContent":"Another common way to get this error is to write `createRoot(<App />)` instead of `createRoot(domNode)`.\n\n--\n\n### I'm getting an error: \"Functions are not valid as a React child.\" {/*im-getting-an-error-functions-are-not-valid-as-a-react-child*/}\n\nThis error means that whatever you're passing to `root.render` is not a React component.\n\nThis may happen if you call `root.render` with `Component` instead of `<Component />`:\n\n```js {2,5}\n\n// 🚩 Wrong: App is a function, not a Component.\n\nroot.render(App);\n\n// ✅ Correct: <App /> is a component.\n\nroot.render(<App />);\n\n````\n\nOr if you pass a function to `root.render`, instead of the result of calling it:\n\n```js {2,5}\n\n// 🚩 Wrong: createApp is a function, not a component.\n\nroot.render(createApp);\n\n// ✅ Correct: call createApp to return a component.\n\nroot.render(createApp());\n\n```\n\nIf you can't get it working, check out [Adding React to a Website](/learn/add-react-to-a-website) for a working example.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2424":{"pageContent":"root.render(createApp());\n\n```\n\nIf you can't get it working, check out [Adding React to a Website](/learn/add-react-to-a-website) for a working example.\n\n--\n\n### My server-rendered HTML gets re-created from scratch {/*my-server-rendered-html-gets-re-created-from-scratch*/}\n\nIf your app is server-rendered and includes the initial HTML generated by React, you might notice that creating a root and calling `root.render` deletes all that HTML, and then re-creates all the DOM nodes from scratch. This can be slower, resets focus and scroll positions, and may lose other user input.\n\nServer-rendered apps must use [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) instead of `createRoot`:\n\n```js {1,4-7}\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nhydrateRoot(\n\ndocument.getElementById('root'),\n\n<App />\n\n);\n\n```\n\nNote that its API is different. In particular, usually there will be no further `root.render` call.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/createRoot.md"}},"2425":{"pageContent":"--\n\ntitle: Updating Arrays in State\n\n--\n\n<Intro>\n\nArrays are mutable in JavaScript, but you should treat them as immutable when you store them in state. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.\n\n</Intro>\n\n<YouWillLearn>\n\nHow to add, remove, or change items in an array in React state\n\nHow to update an object inside of an array\n\nHow to make array copying less repetitive with Immer\n\n</YouWillLearn>\n\n## Updating arrays without mutation {/*updating-arrays-without-mutation*/}\n\nIn JavaScript, arrays are just another kind of object. [Like with objects](/learn/updating-objects-in-state), **you should treat arrays in React state as read-only.** This means that you shouldn't reassign items inside an array like `arr[0] = 'bird'`, and you also shouldn't use methods that mutate the array, such as `push()` and `pop()`.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2426":{"pageContent":"Instead, every time you want to update an array, you'll want to pass a *new* array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like `filter()` and `map()`. Then you can set your state to the resulting new array.\n\nHere is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:\n\n|           | avoid (mutates the array)           | prefer (returns a new array)                                        |\n\n| --------- | ----------------------------------- | ------------------------------------------------------------------- |\n\n| adding    | `push`, `unshift`                   | `concat`, `[...arr]` spread syntax ([example](#adding-to-an-array)) |","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2427":{"pageContent":"| adding    | `push`, `unshift`                   | `concat`, `[...arr]` spread syntax ([example](#adding-to-an-array)) |\n\n| removing  | `pop`, `shift`, `splice`            | `filter`, `slice` ([example](#removing-from-an-array))              |\n\n| replacing | `splice`, `arr[i] = ...` assignment | `map` ([example](#replacing-items-in-an-array))                     |\n\n| sorting   | `reverse`, `sort`                   | copy the array first ([example](#making-other-changes-to-an-array)) |\n\nAlternatively, you can [use Immer](#write-concise-update-logic-with-immer) which lets you use methods from both columns.\n\n<Pitfall>\n\nUnfortunately, [`slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) and [`splice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) are named similarly but are very different:\n\n`slice` lets you copy an array or a part of it.\n\n`splice` **mutates** the array (to insert or delete items).","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2428":{"pageContent":"`slice` lets you copy an array or a part of it.\n\n`splice` **mutates** the array (to insert or delete items).\n\nIn React, you will be using `slice` (no `p`!) a lot more often because you don't want to mutate objects or arrays in state. [Updating Objects](/learn/updating-objects-in-state) explains what mutation is and why it's not recommended for state.\n\n</Pitfall>\n\n### Adding to an array {/*adding-to-an-array*/}\n\n`push()` will mutate an array, which you don't want:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n\nconst [name, setName] = useState('');\n\nconst [artists, setArtists] = useState([]);\n\nreturn (\n\n<>\n\n<h1>Inspiring sculptors:</h1>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetName('');\n\nartists.push({\n\nid: nextId++,\n\nname: name,\n\n});\n\n}}>Add</button>\n\n<ul>\n\n{artists.map(artist => (\n\n<li key={artist.id}>{artist.name}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2429":{"pageContent":"setName('');\n\nartists.push({\n\nid: nextId++,\n\nname: name,\n\n});\n\n}}>Add</button>\n\n<ul>\n\n{artists.map(artist => (\n\n<li key={artist.id}>{artist.name}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\nInstead, create a *new* array which contains the existing items *and* a new item at the end. There are multiple ways to do this, but the easiest one is to use the `...` [array spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_array_literals) syntax:\n\n```js\n\nsetArtists( // Replace the state\n\n[ // with a new array\n\n...artists, // that contains all the old items\n\n{ id: nextId++, name: name } // and one new item at the end\n\n]\n\n);\n\n```\n\nNow it works correctly:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 0;\n\nexport default function List() {\n\nconst [name, setName] = useState('');\n\nconst [artists, setArtists] = useState([]);\n\nreturn (\n\n<>\n\n<h1>Inspiring sculptors:</h1>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<button onClick={() => {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2430":{"pageContent":"const [artists, setArtists] = useState([]);\n\nreturn (\n\n<>\n\n<h1>Inspiring sculptors:</h1>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetName('');\n\nsetArtists([\n\n...artists,\n\n{ id: nextId++, name: name }\n\n]);\n\n}}>Add</button>\n\n<ul>\n\n{artists.map(artist => (\n\n<li key={artist.id}>{artist.name}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\nThe array spread syntax also lets you prepend an item by placing it *before* the original `...artists`:\n\n```js\n\nsetArtists([\n\n{ id: nextId++, name: name },\n\n...artists // Put old items at the end\n\n]);\n\n```\n\nIn this way, spread can do the job of both `push()` by adding to the end of an array and `unshift()` by adding to the beginning of an array. Try it in the sandbox above!\n\n### Removing from an array {/*removing-from-an-array*/}\n\nThe easiest way to remove an item from an array is to *filter it out*. In other words, you will produce a new array that will not contain that item. To do this, use the `filter` method, for example:","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2431":{"pageContent":"The easiest way to remove an item from an array is to *filter it out*. In other words, you will produce a new array that will not contain that item. To do this, use the `filter` method, for example:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet initialArtists = [\n\n{ id: 0, name: 'Marta Colvin Andrade' },\n\n{ id: 1, name: 'Lamidi Olonade Fakeye'},\n\n{ id: 2, name: 'Louise Nevelson'},\n\n];\n\nexport default function List() {\n\nconst [artists, setArtists] = useState(\n\ninitialArtists\n\n);\n\nreturn (\n\n<>\n\n<h1>Inspiring sculptors:</h1>\n\n<ul>\n\n{artists.map(artist => (\n\n<li key={artist.id}>\n\n{artist.name}{' '}\n\n<button onClick={() => {\n\nsetArtists(\n\nartists.filter(a =>\n\na.id !== artist.id\n\n)\n\n);\n\n}}>\n\nDelete\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nClick the \"Delete\" button a few times, and look at its click handler.\n\n```js\n\nsetArtists(\n\nartists.filter(a => a.id !== artist.id)\n\n);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2432":{"pageContent":")\n\n);\n\n}}>\n\nDelete\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nClick the \"Delete\" button a few times, and look at its click handler.\n\n```js\n\nsetArtists(\n\nartists.filter(a => a.id !== artist.id)\n\n);\n\n```\n\nHere, `artists.filter(a => a.id !== artist.id)` means \"create an array that consists of those `artists` whose IDs are different from `artist.id`\". In other words, each artist's \"Delete\" button will filter _that_ artist out of the array, and then request a re-render with the resulting array. Note that `filter` does not modify the original array.\n\n### Transforming an array {/*transforming-an-array*/}\n\nIf you want to change some or all items of the array, you can use `map()` to create a **new** array. The function you will pass to `map` can decide what to do with each item, based on its data or its index (or both).","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2433":{"pageContent":"In this example, an array holds coordinates of two circles and a square. When you press the button, it moves only the circles down by 50 pixels. It does this by producing a new array of data using `map()`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet initialShapes = [\n\n{ id: 0, type: 'circle', x: 50, y: 100 },\n\n{ id: 1, type: 'square', x: 150, y: 100 },\n\n{ id: 2, type: 'circle', x: 250, y: 100 },\n\n];\n\nexport default function ShapeEditor() {\n\nconst [shapes, setShapes] = useState(\n\ninitialShapes\n\n);\n\nfunction handleClick() {\n\nconst nextShapes = shapes.map(shape => {\n\nif (shape.type === 'square') {\n\n// No change\n\nreturn shape;\n\n} else {\n\n// Return a new circle 50px below\n\nreturn {\n\n...shape,\n\ny: shape.y + 50,\n\n};\n\n}\n\n});\n\n// Re-render with the new array\n\nsetShapes(nextShapes);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nMove circles down!\n\n</button>\n\n{shapes.map(shape => (\n\n<div\n\nkey={shape.id}\n\nstyle={{\n\nbackground: 'purple',\n\nposition: 'absolute',\n\nleft: shape.x,\n\ntop: shape.y,\n\nborderRadius:\n\nshape.type === 'circle'\n\n? '50%' : '',\n\nwidth: 20,\n\nheight: 20,","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2434":{"pageContent":"</button>\n\n{shapes.map(shape => (\n\n<div\n\nkey={shape.id}\n\nstyle={{\n\nbackground: 'purple',\n\nposition: 'absolute',\n\nleft: shape.x,\n\ntop: shape.y,\n\nborderRadius:\n\nshape.type === 'circle'\n\n? '50%' : '',\n\nwidth: 20,\n\nheight: 20,\n\n}} />\n\n))}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbody { height: 300px; }\n\n```\n\n</Sandpack>\n\n### Replacing items in an array {/*replacing-items-in-an-array*/}\n\nIt is particularly common to want to replace one or more items in an array. Assignments like `arr[0] = 'bird'` are mutating the original array, so instead you'll want to use `map` for this as well.\n\nTo replace an item, create a new array with `map`. Inside your `map` call, you will receive the item index as the second argument. Use it to decide whether to return the original item (the first argument) or something else:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet initialCounters = [\n\n0, 0, 0\n\n];\n\nexport default function CounterList() {\n\nconst [counters, setCounters] = useState(\n\ninitialCounters\n\n);\n\nfunction handleIncrementClick(index) {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2435":{"pageContent":"import { useState } from 'react';\n\nlet initialCounters = [\n\n0, 0, 0\n\n];\n\nexport default function CounterList() {\n\nconst [counters, setCounters] = useState(\n\ninitialCounters\n\n);\n\nfunction handleIncrementClick(index) {\n\nconst nextCounters = counters.map((c, i) => {\n\nif (i === index) {\n\n// Increment the clicked counter\n\nreturn c + 1;\n\n} else {\n\n// The rest haven't changed\n\nreturn c;\n\n}\n\n});\n\nsetCounters(nextCounters);\n\n}\n\nreturn (\n\n<ul>\n\n{counters.map((counter, i) => (\n\n<li key={i}>\n\n{counter}\n\n<button onClick={() => {\n\nhandleIncrementClick(i);\n\n}}>+1</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\n### Inserting into an array {/*inserting-into-an-array*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2436":{"pageContent":"{counter}\n\n<button onClick={() => {\n\nhandleIncrementClick(i);\n\n}}>+1</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\n### Inserting into an array {/*inserting-into-an-array*/}\n\nSometimes, you may want to insert an item at a particular position that's neither at the beginning nor at the end. To do this, you can use the `...` array spread syntax together with the `slice()` method. The `slice()` method lets you cut a \"slice\" of the array. To insert an item, you will create an array that spreads the slice _before_ the insertion point, then the new item, and then the rest of the original array.\n\nIn this example, the Insert button always inserts at the index `1`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 3;\n\nconst initialArtists = [\n\n{ id: 0, name: 'Marta Colvin Andrade' },\n\n{ id: 1, name: 'Lamidi Olonade Fakeye'},\n\n{ id: 2, name: 'Louise Nevelson'},\n\n];\n\nexport default function List() {\n\nconst [name, setName] = useState('');\n\nconst [artists, setArtists] = useState(","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2437":{"pageContent":"{ id: 1, name: 'Lamidi Olonade Fakeye'},\n\n{ id: 2, name: 'Louise Nevelson'},\n\n];\n\nexport default function List() {\n\nconst [name, setName] = useState('');\n\nconst [artists, setArtists] = useState(\n\ninitialArtists\n\n);\n\nfunction handleClick() {\n\nconst insertAt = 1; // Could be any index\n\nconst nextArtists = [\n\n// Items before the insertion point:\n\n...artists.slice(0, insertAt),\n\n// New item:\n\n{ id: nextId++, name: name },\n\n// Items after the insertion point:\n\n...artists.slice(insertAt)\n\n];\n\nsetArtists(nextArtists);\n\nsetName('');\n\n}\n\nreturn (\n\n<>\n\n<h1>Inspiring sculptors:</h1>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<button onClick={handleClick}>\n\nInsert\n\n</button>\n\n<ul>\n\n{artists.map(artist => (\n\n<li key={artist.id}>{artist.name}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\n### Making other changes to an array {/*making-other-changes-to-an-array*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2438":{"pageContent":"<li key={artist.id}>{artist.name}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\n### Making other changes to an array {/*making-other-changes-to-an-array*/}\n\nThere are some things you can't do with the spread syntax and non-mutating methods like `map()` and `filter()` alone. For example, you may want to reverse or sort an array. The JavaScript `reverse()` and `sort()` methods are mutating the original array, so you can't use them directly.\n\n*However, you can copy the array first, and then make changes to it.**\n\nFor example:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies' },\n\n{ id: 1, title: 'Lunar Landscape' },\n\n{ id: 2, title: 'Terracotta Army' },\n\n];\n\nexport default function List() {\n\nconst [list, setList] = useState(initialList);\n\nfunction handleClick() {\n\nconst nextList = [...list];\n\nnextList.reverse();\n\nsetList(nextList);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nReverse\n\n</button>\n\n<ul>\n\n{list.map(artwork => (","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2439":{"pageContent":"function handleClick() {\n\nconst nextList = [...list];\n\nnextList.reverse();\n\nsetList(nextList);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nReverse\n\n</button>\n\n<ul>\n\n{list.map(artwork => (\n\n<li key={artwork.id}>{artwork.title}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nHere, you use the `[...list]` spread syntax to create a copy of the original array first. Now that you have a copy, you can use mutating methods like `nextList.reverse()` or `nextList.sort()`, or even assign individual items with `nextList[0] = \"something\"`.\n\nHowever, **even if you copy an array, you can't mutate existing items _inside_ of it directly.** This is because copying is shallow--the new array will contain the same items as the original one. So if you modify an object inside the copied array, you are mutating the existing state. For example, code like this is a problem.\n\n```js\n\nconst nextList = [...list];\n\nnextList[0].seen = true; // Problem: mutates list[0]\n\nsetList(nextList);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2440":{"pageContent":"```js\n\nconst nextList = [...list];\n\nnextList[0].seen = true; // Problem: mutates list[0]\n\nsetList(nextList);\n\n```\n\nAlthough `nextList` and `list` are two different arrays, **`nextList[0]` and `list[0]` point to the same object.** So by changing `nextList[0].seen`, you are also changing `list[0].seen`. This is a state mutation, which you should avoid! You can solve this issue in a similar way to [updating nested JavaScript objects](/learn/updating-objects-in-state#updating-a-nested-object)--by copying individual items you want to change instead of mutating them. Here's how.\n\n## Updating objects inside arrays {/*updating-objects-inside-arrays*/}\n\nObjects are not _really_ located \"inside\" arrays. They might appear to be \"inside\" in code, but each object in an array is a separate value, to which the array \"points\". This is why you need to be careful when changing nested fields like `list[0]`. Another person's artwork list may point to the same element of the array!","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2441":{"pageContent":"*When updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level.** Let's see how this works.\n\nIn this example, two separate artwork lists have the same initial state. They are supposed to be isolated, but because of a mutation, their state is accidentally shared, and checking a box in one list affects the other list:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {\n\nconst [myList, setMyList] = useState(initialList);\n\nconst [yourList, setYourList] = useState(\n\ninitialList\n\n);\n\nfunction handleToggleMyList(artworkId, nextSeen) {\n\nconst myNextList = [...myList];\n\nconst artwork = myNextList.find(\n\na => a.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\nsetMyList(myNextList);\n\n}\n\nfunction handleToggleYourList(artworkId, nextSeen) {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2442":{"pageContent":"const myNextList = [...myList];\n\nconst artwork = myNextList.find(\n\na => a.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\nsetMyList(myNextList);\n\n}\n\nfunction handleToggleYourList(artworkId, nextSeen) {\n\nconst yourNextList = [...yourList];\n\nconst artwork = yourNextList.find(\n\na => a.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\nsetYourList(yourNextList);\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>\n\n<h2>My list of art to see:</h2>\n\n<ItemList\n\nartworks={myList}\n\nonToggle={handleToggleMyList} />\n\n<h2>Your list of art to see:</h2>\n\n<ItemList\n\nartworks={yourList}\n\nonToggle={handleToggleYourList} />\n\n</>\n\n);\n\n}\n\nfunction ItemList({ artworks, onToggle }) {\n\nreturn (\n\n<ul>\n\n{artworks.map(artwork => (\n\n<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThe problem is in code like this:\n\n```js\n\nconst myNextList = [...myList];\n\nconst artwork = myNextList.find(a => a.id === artworkId);","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2443":{"pageContent":");\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThe problem is in code like this:\n\n```js\n\nconst myNextList = [...myList];\n\nconst artwork = myNextList.find(a => a.id === artworkId);\n\nartwork.seen = nextSeen; // Problem: mutates an existing item\n\nsetMyList(myNextList);\n\n```\n\nAlthough the `myNextList` array itself is new, the *items themselves* are the same as in the original `myList` array. So changing `artwork.seen` changes the *original* artwork item. That artwork item is also in `yourArtworks`, which causes the bug. Bugs like this can be difficult to think about, but thankfully they disappear if you avoid mutating state.\n\n*You can use `map` to substitute an old item with its updated version without mutation.**\n\n```js\n\nsetMyList(myList.map(artwork => {\n\nif (artwork.id === artworkId) {\n\n// Create a *new* object with changes\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {\n\n// No changes\n\nreturn artwork;\n\n}\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2444":{"pageContent":"```js\n\nsetMyList(myList.map(artwork => {\n\nif (artwork.id === artworkId) {\n\n// Create a *new* object with changes\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {\n\n// No changes\n\nreturn artwork;\n\n}\n\n});\n\n```\n\nHere, `...` is the object spread syntax used to [create a copy of an object.](/learn/updating-objects-in-state#copying-objects-with-the-spread-syntax)\n\nWith this approach, none of the existing state items are being mutated, and the bug is fixed:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {\n\nconst [myList, setMyList] = useState(initialList);\n\nconst [yourList, setYourList] = useState(\n\ninitialList\n\n);\n\nfunction handleToggleMyList(artworkId, nextSeen) {\n\nsetMyList(myList.map(artwork => {\n\nif (artwork.id === artworkId) {\n\n// Create a *new* object with changes\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2445":{"pageContent":");\n\nfunction handleToggleMyList(artworkId, nextSeen) {\n\nsetMyList(myList.map(artwork => {\n\nif (artwork.id === artworkId) {\n\n// Create a *new* object with changes\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {\n\n// No changes\n\nreturn artwork;\n\n}\n\n}));\n\n}\n\nfunction handleToggleYourList(artworkId, nextSeen) {\n\nsetYourList(yourList.map(artwork => {\n\nif (artwork.id === artworkId) {\n\n// Create a *new* object with changes\n\nreturn { ...artwork, seen: nextSeen };\n\n} else {\n\n// No changes\n\nreturn artwork;\n\n}\n\n}));\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>\n\n<h2>My list of art to see:</h2>\n\n<ItemList\n\nartworks={myList}\n\nonToggle={handleToggleMyList} />\n\n<h2>Your list of art to see:</h2>\n\n<ItemList\n\nartworks={yourList}\n\nonToggle={handleToggleYourList} />\n\n</>\n\n);\n\n}\n\nfunction ItemList({ artworks, onToggle }) {\n\nreturn (\n\n<ul>\n\n{artworks.map(artwork => (\n\n<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2446":{"pageContent":"<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIn general, **you should only mutate objects that you have just created.** If you were inserting a *new* artwork, you could mutate it, but if you're dealing with something that's already in state, you need to make a copy.\n\n### Write concise update logic with Immer {/*write-concise-update-logic-with-immer*/}\n\nUpdating nested arrays without mutation can get a little bit repetitive. [Just as with objects](/learn/updating-objects-in-state#write-concise-update-logic-with-immer):\n\nGenerally, you shouldn't need to update state more than a couple of levels deep. If your state objects are very deep, you might want to [restructure them differently](/learn/choosing-the-state-structure#avoid-deeply-nested-state) so that they are flat.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2447":{"pageContent":"If you don't want to change your state structure, you might prefer to use [Immer](https://github.com/immerjs/use-immer), which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.\n\nHere is the Art Bucket List example rewritten with Immer:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {\n\nconst [myList, updateMyList] = useImmer(\n\ninitialList\n\n);\n\nconst [yourArtworks, updateYourList] = useImmer(\n\ninitialList\n\n);\n\nfunction handleToggleMyList(id, nextSeen) {\n\nupdateMyList(draft => {\n\nconst artwork = draft.find(a =>\n\na.id === id\n\n);\n\nartwork.seen = nextSeen;\n\n});\n\n}\n\nfunction handleToggleYourList(artworkId, nextSeen) {\n\nupdateYourList(draft => {\n\nconst artwork = draft.find(a =>\n\na.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\n});\n\n}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2448":{"pageContent":"a.id === id\n\n);\n\nartwork.seen = nextSeen;\n\n});\n\n}\n\nfunction handleToggleYourList(artworkId, nextSeen) {\n\nupdateYourList(draft => {\n\nconst artwork = draft.find(a =>\n\na.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>\n\n<h2>My list of art to see:</h2>\n\n<ItemList\n\nartworks={myList}\n\nonToggle={handleToggleMyList} />\n\n<h2>Your list of art to see:</h2>\n\n<ItemList\n\nartworks={yourArtworks}\n\nonToggle={handleToggleYourList} />\n\n</>\n\n);\n\n}\n\nfunction ItemList({ artworks, onToggle }) {\n\nreturn (\n\n<ul>\n\n{artworks.map(artwork => (\n\n<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2449":{"pageContent":"\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nNote how with Immer, **mutation like `artwork.seen = nextSeen` is now okay:**\n\n```js\n\nupdateMyTodos(draft => {\n\nconst artwork = draft.find(a => a.id === artworkId);\n\nartwork.seen = nextSeen;\n\n});\n\n```\n\nThis is because you're not mutating the _original_ state, but you're mutating a special `draft` object provided by Immer. Similarly, you can apply mutating methods like `push()` and `pop()` to the content of the `draft`.\n\nBehind the scenes, Immer always constructs the next state from scratch according to the changes that you've done to the `draft`. This keeps your event handlers very concise without ever mutating state.\n\n<Recap>\n\nYou can put arrays into state, but you can't change them.\n\nInstead of mutating an array, create a *new* version of it, and update the state to it.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2450":{"pageContent":"<Recap>\n\nYou can put arrays into state, but you can't change them.\n\nInstead of mutating an array, create a *new* version of it, and update the state to it.\n\nYou can use the `[...arr, newItem]` array spread syntax to create arrays with new items.\n\nYou can use `filter()` and `map()` to create new arrays with filtered or transformed items.\n\nYou can use Immer to keep your code concise.\n\n</Recap>\n\n<Challenges>\n\n#### Update an item in the shopping cart {/*update-an-item-in-the-shopping-cart*/}\n\nFill in the `handleIncreaseClick` logic so that pressing \"+\" increases the corresponding number:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialProducts = [{\n\nid: 0,\n\nname: 'Baklava',\n\ncount: 1,\n\n}, {\n\nid: 1,\n\nname: 'Cheese',\n\ncount: 5,\n\n}, {\n\nid: 2,\n\nname: 'Spaghetti',\n\ncount: 2,\n\n}];\n\nexport default function ShoppingCart() {\n\nconst [\n\nproducts,\n\nsetProducts\n\n] = useState(initialProducts)\n\nfunction handleIncreaseClick(productId) {\n\n}\n\nreturn (\n\n<ul>\n\n{products.map(product => (\n\n<li key={product.id}>\n\n{product.name}\n\n{' '}\n\n(<b>{product.count}</b>)","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2451":{"pageContent":"const [\n\nproducts,\n\nsetProducts\n\n] = useState(initialProducts)\n\nfunction handleIncreaseClick(productId) {\n\n}\n\nreturn (\n\n<ul>\n\n{products.map(product => (\n\n<li key={product.id}>\n\n{product.name}\n\n{' '}\n\n(<b>{product.count}</b>)\n\n<button onClick={() => {\n\nhandleIncreaseClick(product.id);\n\n}}>\n\n+\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can use the `map` function to create a new array, and then use the `...` object spread syntax to create a copy of the changed object for the new array:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialProducts = [{\n\nid: 0,\n\nname: 'Baklava',\n\ncount: 1,\n\n}, {\n\nid: 1,\n\nname: 'Cheese',\n\ncount: 5,\n\n}, {\n\nid: 2,\n\nname: 'Spaghetti',\n\ncount: 2,\n\n}];\n\nexport default function ShoppingCart() {\n\nconst [\n\nproducts,\n\nsetProducts\n\n] = useState(initialProducts)\n\nfunction handleIncreaseClick(productId) {\n\nsetProducts(products.map(product => {\n\nif (product.id === productId) {\n\nreturn {\n\n...product,\n\ncount: product.count + 1\n\n};\n\n} else {\n\nreturn product;\n\n}\n\n}))\n\n}\n\nreturn (\n\n<ul>\n\n{products.map(product => (","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2452":{"pageContent":"setProducts(products.map(product => {\n\nif (product.id === productId) {\n\nreturn {\n\n...product,\n\ncount: product.count + 1\n\n};\n\n} else {\n\nreturn product;\n\n}\n\n}))\n\n}\n\nreturn (\n\n<ul>\n\n{products.map(product => (\n\n<li key={product.id}>\n\n{product.name}\n\n{' '}\n\n(<b>{product.count}</b>)\n\n<button onClick={() => {\n\nhandleIncreaseClick(product.id);\n\n}}>\n\n+\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Remove an item from the shopping cart {/*remove-an-item-from-the-shopping-cart*/}\n\nThis shopping cart has a working \"+\" button, but the \"–\" button doesn't do anything. You need to add an event handler to it so that pressing it decreases the `count` of the corresponding product. If you press \"–\" when the count is 1, the product should automatically get removed from the cart. Make sure it never shows 0.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialProducts = [{\n\nid: 0,\n\nname: 'Baklava',\n\ncount: 1,\n\n}, {\n\nid: 1,\n\nname: 'Cheese',\n\ncount: 5,\n\n}, {\n\nid: 2,\n\nname: 'Spaghetti',\n\ncount: 2,\n\n}];","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2453":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialProducts = [{\n\nid: 0,\n\nname: 'Baklava',\n\ncount: 1,\n\n}, {\n\nid: 1,\n\nname: 'Cheese',\n\ncount: 5,\n\n}, {\n\nid: 2,\n\nname: 'Spaghetti',\n\ncount: 2,\n\n}];\n\nexport default function ShoppingCart() {\n\nconst [\n\nproducts,\n\nsetProducts\n\n] = useState(initialProducts)\n\nfunction handleIncreaseClick(productId) {\n\nsetProducts(products.map(product => {\n\nif (product.id === productId) {\n\nreturn {\n\n...product,\n\ncount: product.count + 1\n\n};\n\n} else {\n\nreturn product;\n\n}\n\n}))\n\n}\n\nreturn (\n\n<ul>\n\n{products.map(product => (\n\n<li key={product.id}>\n\n{product.name}\n\n{' '}\n\n(<b>{product.count}</b>)\n\n<button onClick={() => {\n\nhandleIncreaseClick(product.id);\n\n}}>\n\n+\n\n</button>\n\n<button>\n\n–\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nYou can first use `map` to produce a new array, and then `filter` to remove products with a `count` set to `0`:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialProducts = [{\n\nid: 0,\n\nname: 'Baklava',\n\ncount: 1,\n\n}, {\n\nid: 1,\n\nname: 'Cheese',\n\ncount: 5,\n\n}, {\n\nid: 2,\n\nname: 'Spaghetti',","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2454":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nconst initialProducts = [{\n\nid: 0,\n\nname: 'Baklava',\n\ncount: 1,\n\n}, {\n\nid: 1,\n\nname: 'Cheese',\n\ncount: 5,\n\n}, {\n\nid: 2,\n\nname: 'Spaghetti',\n\ncount: 2,\n\n}];\n\nexport default function ShoppingCart() {\n\nconst [\n\nproducts,\n\nsetProducts\n\n] = useState(initialProducts)\n\nfunction handleIncreaseClick(productId) {\n\nsetProducts(products.map(product => {\n\nif (product.id === productId) {\n\nreturn {\n\n...product,\n\ncount: product.count + 1\n\n};\n\n} else {\n\nreturn product;\n\n}\n\n}))\n\n}\n\nfunction handleDecreaseClick(productId) {\n\nlet nextProducts = products.map(product => {\n\nif (product.id === productId) {\n\nreturn {\n\n...product,\n\ncount: product.count - 1\n\n};\n\n} else {\n\nreturn product;\n\n}\n\n});\n\nnextProducts = nextProducts.filter(p =>\n\np.count > 0\n\n);\n\nsetProducts(nextProducts)\n\n}\n\nreturn (\n\n<ul>\n\n{products.map(product => (\n\n<li key={product.id}>\n\n{product.name}\n\n{' '}\n\n(<b>{product.count}</b>)\n\n<button onClick={() => {\n\nhandleIncreaseClick(product.id);\n\n}}>\n\n+\n\n</button>\n\n<button onClick={() => {\n\nhandleDecreaseClick(product.id);\n\n}}>\n\n–\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2455":{"pageContent":"{' '}\n\n(<b>{product.count}</b>)\n\n<button onClick={() => {\n\nhandleIncreaseClick(product.id);\n\n}}>\n\n+\n\n</button>\n\n<button onClick={() => {\n\nhandleDecreaseClick(product.id);\n\n}}>\n\n–\n\n</button>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix the mutations using non-mutative methods {/*fix-the-mutations-using-non-mutative-methods*/}\n\nIn this example, all of the event handlers in `App.js` use mutation. As a result, editing and deleting todos doesn't work. Rewrite `handleAddTodo`, `handleChangeTodo`, and `handleDeleteTodo` to use the non-mutative methods:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AddTodo from './AddTodo.js';\n\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, setTodos] = useState(\n\ninitialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\ntodos.push({\n\nid: nextId++,","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2456":{"pageContent":"{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, setTodos] = useState(\n\ninitialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\ntodos.push({\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n});\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nconst todo = todos.find(t =>\n\nt.id === nextTodo.id\n\n);\n\ntodo.title = nextTodo.title;\n\ntodo.done = nextTodo.done;\n\n}\n\nfunction handleDeleteTodo(todoId) {\n\nconst index = todos.findIndex(t =>\n\nt.id === todoId\n\n);\n\ntodos.splice(index, 1);\n\n}\n\nreturn (\n\n<>\n\n<AddTodo\n\nonAddTodo={handleAddTodo}\n\n/>\n\n<TaskList\n\ntodos={todos}\n\nonChangeTodo={handleChangeTodo}\n\nonDeleteTodo={handleDeleteTodo}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2457":{"pageContent":"/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet todoContent;\n\nif (isEditing) {\n\ntodoContent = (\n\n<>\n\n<input\n\nvalue={todo.title}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ntitle: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2458":{"pageContent":"onChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution>\n\nIn `handleAddTodo`, you can use the array spread syntax. In `handleChangeTodo`, you can create a new array with `map`. In `handleDeleteTodo`, you can create a new array with `filter`. Now the list works correctly:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AddTodo from './AddTodo.js';\n\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, setTodos] = useState(\n\ninitialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\nsetTodos([\n\n...todos,\n\n{\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n}\n\n]);\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nsetTodos(todos.map(t => {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2459":{"pageContent":"initialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\nsetTodos([\n\n...todos,\n\n{\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n}\n\n]);\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nsetTodos(todos.map(t => {\n\nif (t.id === nextTodo.id) {\n\nreturn nextTodo;\n\n} else {\n\nreturn t;\n\n}\n\n}));\n\n}\n\nfunction handleDeleteTodo(todoId) {\n\nsetTodos(\n\ntodos.filter(t => t.id !== todoId)\n\n);\n\n}\n\nreturn (\n\n<>\n\n<AddTodo\n\nonAddTodo={handleAddTodo}\n\n/>\n\n<TaskList\n\ntodos={todos}\n\nonChangeTodo={handleChangeTodo}\n\nonDeleteTodo={handleDeleteTodo}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2460":{"pageContent":"export default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet todoContent;\n\nif (isEditing) {\n\ntodoContent = (\n\n<>\n\n<input\n\nvalue={todo.title}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ntitle: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix the mutations using Immer {/*fix-the-mutations-using-immer*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2461":{"pageContent":"</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n</Solution>\n\n#### Fix the mutations using Immer {/*fix-the-mutations-using-immer*/}\n\nThis is the same example as in the previous challenge. This time, fix the mutations by using Immer. For your convenience, `useImmer` is already imported, so you need to change the `todos` state variable to use it.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nimport AddTodo from './AddTodo.js';\n\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, setTodos] = useState(\n\ninitialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\ntodos.push({\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n});\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nconst todo = todos.find(t =>\n\nt.id === nextTodo.id\n\n);","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2462":{"pageContent":"initialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\ntodos.push({\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n});\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nconst todo = todos.find(t =>\n\nt.id === nextTodo.id\n\n);\n\ntodo.title = nextTodo.title;\n\ntodo.done = nextTodo.done;\n\n}\n\nfunction handleDeleteTodo(todoId) {\n\nconst index = todos.findIndex(t =>\n\nt.id === todoId\n\n);\n\ntodos.splice(index, 1);\n\n}\n\nreturn (\n\n<>\n\n<AddTodo\n\nonAddTodo={handleAddTodo}\n\n/>\n\n<TaskList\n\ntodos={todos}\n\nonChangeTodo={handleChangeTodo}\n\nonDeleteTodo={handleDeleteTodo}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2463":{"pageContent":"</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet todoContent;\n\nif (isEditing) {\n\ntodoContent = (\n\n<>\n\n<input\n\nvalue={todo.title}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ntitle: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2464":{"pageContent":"Delete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nWith Immer, you can write code in the mutative fashion, as long as you're only mutating parts of the `draft` that Immer gives you. Here, all mutations are performed on the `draft` so the code works:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nimport AddTodo from './AddTodo.js';\n\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2465":{"pageContent":"let nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, updateTodos] = useImmer(\n\ninitialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\nupdateTodos(draft => {\n\ndraft.push({\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n});\n\n});\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nupdateTodos(draft => {\n\nconst todo = draft.find(t =>\n\nt.id === nextTodo.id\n\n);\n\ntodo.title = nextTodo.title;\n\ntodo.done = nextTodo.done;\n\n});\n\n}\n\nfunction handleDeleteTodo(todoId) {\n\nupdateTodos(draft => {\n\nconst index = draft.findIndex(t =>\n\nt.id === todoId\n\n);\n\ndraft.splice(index, 1);\n\n});\n\n}\n\nreturn (\n\n<>\n\n<AddTodo\n\nonAddTodo={handleAddTodo}\n\n/>\n\n<TaskList\n\ntodos={todos}\n\nonChangeTodo={handleChangeTodo}\n\nonDeleteTodo={handleDeleteTodo}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2466":{"pageContent":"/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet todoContent;\n\nif (isEditing) {\n\ntodoContent = (\n\n<>\n\n<input\n\nvalue={todo.title}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ntitle: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2467":{"pageContent":"<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nYou can also mix and match the mutative and non-mutative approaches with Immer.","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2468":{"pageContent":"\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nYou can also mix and match the mutative and non-mutative approaches with Immer.\n\nFor example, in this version `handleAddTodo` is implemented by mutating the Immer `draft`, while `handleChangeTodo` and `handleDeleteTodo` use the non-mutative `map` and `filter` methods:\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nimport AddTodo from './AddTodo.js';\n\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, updateTodos] = useImmer(\n\ninitialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\nupdateTodos(draft => {\n\ndraft.push({\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n});\n\n});\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nupdateTodos(todos.map(todo => {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2469":{"pageContent":"initialTodos\n\n);\n\nfunction handleAddTodo(title) {\n\nupdateTodos(draft => {\n\ndraft.push({\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n});\n\n});\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nupdateTodos(todos.map(todo => {\n\nif (todo.id === nextTodo.id) {\n\nreturn nextTodo;\n\n} else {\n\nreturn todo;\n\n}\n\n}));\n\n}\n\nfunction handleDeleteTodo(todoId) {\n\nupdateTodos(\n\ntodos.filter(t => t.id !== todoId)\n\n);\n\n}\n\nreturn (\n\n<>\n\n<AddTodo\n\nonAddTodo={handleAddTodo}\n\n/>\n\n<TaskList\n\ntodos={todos}\n\nonChangeTodo={handleChangeTodo}\n\nonDeleteTodo={handleDeleteTodo}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2470":{"pageContent":"</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet todoContent;\n\nif (isEditing) {\n\ntodoContent = (\n\n<>\n\n<input\n\nvalue={todo.title}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ntitle: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2471":{"pageContent":"Delete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\nWith Immer, you can pick the style that feels the most natural for each separate case.\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/updating-arrays-in-state.md"}},"2472":{"pageContent":"--\n\ntitle: Client React DOM APIs\n\n--\n\n<Intro>\n\nThe `react-dom/client` APIs let you render React components on the client (in the browser). These APIs are typically used at the top level of your app to initialize your React tree. A [framework](/learn/start-a-new-react-project#building-with-a-full-featured-framework) may call them for you. Most of your components don't need to import or use them.\n\n</Intro>\n\n--\n\n## Client APIs {/*client-apis*/}\n\n[`createRoot`](/reference/react-dom/client/createRoot) lets you create a root to display React components inside a browser DOM node.\n\n[`hydrateRoot`](/reference/react-dom/client/hydrateRoot) lets you display React components inside a browser DOM node whose HTML content was previously generated by [`react-dom/server`.](/reference/react-dom/server)\n\n--\n\n## Browser support {/*browser-support*/}\n\nReact supports all popular browsers, including Internet Explorer 9 and above. Some polyfills are required for older browsers such as IE 9 and IE 10.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/index.md"}},"2473":{"pageContent":"--\n\ntitle: hydrateRoot\n\n--\n\n<Intro>\n\n`hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by [`react-dom/server`.](/reference/react-dom/server)\n\n```js\n\nconst root = hydrateRoot(domNode, reactNode, options?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `hydrateRoot(domNode, options?)` {/*hydrateroot*/}\n\nCall `hydrateRoot` to “attach” React to existing HTML that was already rendered by React in a server environment.\n\n```js\n\nimport { hydrateRoot } from 'react-dom/client';\n\nconst domNode = document.getElementById('root');\n\nconst root = hydrateRoot(domNode, reactNode);\n\n```\n\nReact will attach to the HTML that exists inside the `domNode`, and take over managing the DOM inside it. An app fully built with React will usually only have one `hydrateRoot` call with its root component.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2474":{"pageContent":"[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`domNode`: A [DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element) that was rendered as the root element on the server.\n\n`reactNode`: The \"React node\" used to render the existing HTML. This will usually be a piece of JSX like `<App />` which was rendered with a `ReactDOM Server` method such as `renderToPipeableStream(<App />)`.\n\n**optional** `options`: An object with options for this React root.\n\n**optional** `onRecoverableError`: Callback called when React automatically recovers from errors.\n\n**optional** `identifierPrefix`: A string prefix React uses for IDs generated by [`useId`.](/reference/react/useId) Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as used on the server.\n\n**optional** `nonce`:\n\n#### Returns {/*returns*/}\n\n`hydrateRoot` returns an object with two methods: [`render`](#root-render) and [`unmount`.](#root-unmount)\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2475":{"pageContent":"**optional** `nonce`:\n\n#### Returns {/*returns*/}\n\n`hydrateRoot` returns an object with two methods: [`render`](#root-render) and [`unmount`.](#root-unmount)\n\n#### Caveats {/*caveats*/}\n\n`hydrateRoot()` expects the rendered content to be identical with the server-rendered content. You should treat mismatches as bugs and fix them.\n\nIn development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n\nYou'll likely have only one `hydrateRoot` call in your app. If you use a framework, it might do this call for you.\n\nIf your app is client-rendered with no HTML rendered already, using `hydrateRoot()` is not supported. Use [`createRoot()`](/reference/react-dom/client/createRoot) instead.\n\n--\n\n### `root.render(reactNode)` {/*root-render*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2476":{"pageContent":"--\n\n### `root.render(reactNode)` {/*root-render*/}\n\nCall `root.render` to update a React component inside a hydrated React root for a browser DOM element.\n\n```js\n\nroot.render(<App />);\n\n```\n\nReact will update `<App />` in the hydrated `root`.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*root-render-parameters*/}\n\n`reactNode`: A \"React node\" that you want to update. This will usually be a piece of JSX like `<App />`, but you can also pass a React element constructed with [`createElement()`](/reference/react/createElement), a string, a number, `null`, or `undefined`.\n\n#### Returns {/*root-render-returns*/}\n\n`root.render` returns `undefined`.\n\n#### Caveats {/*root-render-caveats*/}\n\nIf you call `root.render` before the root has finished hydrating, React will clear the existing server-rendered HTML content and switch the entire root to client rendering.\n\n--\n\n### `root.unmount()` {/*root-unmount*/}\n\nCall `root.unmount` to destroy a rendered tree inside a React root.\n\n```js\n\nroot.unmount();\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2477":{"pageContent":"--\n\n### `root.unmount()` {/*root-unmount*/}\n\nCall `root.unmount` to destroy a rendered tree inside a React root.\n\n```js\n\nroot.unmount();\n\n```\n\nAn app fully built with React will usually not have any calls to `root.unmount`.\n\nThis is mostly useful if your React root's DOM node (or any of its ancestors) may get removed from the DOM by some other code. For example, imagine a jQuery tab panel that removes inactive tabs from the DOM. If a tab gets removed, everything inside it (including the React roots inside) would get removed from the DOM as well. In that case, you need to tell React to \"stop\" managing the removed root's content by calling `root.unmount`. Otherwise, the components inside the removed root won't know to clean up and free up global resources like subscriptions.\n\nCalling `root.unmount` will unmount all the components in the root and \"detach\" React from the root DOM node, including removing any event handlers or state in the tree.\n\n#### Parameters {/*root-unmount-parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2478":{"pageContent":"#### Parameters {/*root-unmount-parameters*/}\n\n`root.unmount` does not accept any parameters.\n\n#### Returns {/*root-unmount-returns*/}\n\n`render` returns `null`.\n\n#### Caveats {/*root-unmount-caveats*/}\n\nCalling `root.unmount` will unmount all the components in the tree and \"detach\" React from the root DOM node.\n\nOnce you call `root.unmount` you cannot call `root.render` again on the root. Attempting to call `root.render` on an unmounted root will throw a \"Cannot update an unmounted root\" error.\n\n--\n\n## Usage {/*usage*/}\n\n### Hydrating server-rendered HTML {/*hydrating-server-rendered-html*/}\n\nIf your app's HTML was generated by [`react-dom/server`](/reference/react-dom/client/createRoot), you need to *hydrate* it on the client.\n\n```js [[1, 3, \"document.getElementById('root')\"], [2, 3, \"<App />\"]]\n\nimport { hydrateRoot } from 'react-dom/client';\n\nhydrateRoot(document.getElementById('root'), <App />);\n\n````","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2479":{"pageContent":"```js [[1, 3, \"document.getElementById('root')\"], [2, 3, \"<App />\"]]\n\nimport { hydrateRoot } from 'react-dom/client';\n\nhydrateRoot(document.getElementById('root'), <App />);\n\n````\n\nThis will hydrate the server HTML inside the <CodeStep step={1}>browser DOM node</CodeStep> with the <CodeStep step={2}>React component</CodeStep> for your app. Usually, you will do it once at startup. If you use a framework, it might do this behind the scenes for you.\n\nTo hydrate your app, React will \"attach\" your components' logic to the initial generated HTML from the server. Hydration turns the initial HTML snapshot from the server into a fully interactive app that runs in the browser.\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Hello, world!</h1><button>You clicked me <!-- -->0<!-- --> times</button></div>\n\n```\n\n```js index.js active\n\nimport './styles.css';\n\nimport { hydrateRoot } from 'react-dom/client';","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2480":{"pageContent":"->\n\n<div id=\"root\"><h1>Hello, world!</h1><button>You clicked me <!-- -->0<!-- --> times</button></div>\n\n```\n\n```js index.js active\n\nimport './styles.css';\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nhydrateRoot(\n\ndocument.getElementById('root'),\n\n<App />\n\n);\n\n```\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<h1>Hello, world!</h1>\n\n<Counter />\n\n</>\n\n);\n\n}\n\nfunction Counter() {\n\nconst [count, setCount] = useState(0);\n\nreturn (\n\n<button onClick={() => setCount(count + 1)}>\n\nYou clicked me {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nYou shouldn't need to call `hydrateRoot` again or to call it in more places. From this point on, React will be managing the DOM of your application. If you want to update the UI, your components can do this by [using state.](/reference/react/useState)\n\n<Pitfall>\n\nThe React tree you pass to `hydrateRoot` needs to produce **the same output** as it did on the server.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2481":{"pageContent":"<Pitfall>\n\nThe React tree you pass to `hydrateRoot` needs to produce **the same output** as it did on the server.\n\nThis is important for the user experience. The user will spend some time looking at the server-generated HTML before your JavaScript code loads. Server rendering creates an illusion that the app loads faster by showing the HTML snapshot of its output. Suddenly showing different content breaks that illusion. This is why the server render output must match the initial render output on the client during hydration.\n\nThe most common causes leading to hydration errors include:\n\nExtra whitespace (like newlines) around the React-generated HTML inside the root node.\n\nUsing checks like `typeof window !== 'undefined'` in your rendering logic.\n\nUsing browser-only APIs like [`window.matchMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your rendering logic.\n\nRendering different data on the server and the client.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2482":{"pageContent":"Using browser-only APIs like [`window.matchMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) in your rendering logic.\n\nRendering different data on the server and the client.\n\nReact can recover from some hydration errors, but **you must fix them like other bugs.** In the best case, they'll lead to a slower app; in the worst case, event handlers would get attached to the wrong elements.\n\n</Pitfall>\n\n--\n\n### Hydrating an entire document {/*hydrating-an-entire-document*/}\n\nApps fully built with React can render the entire document from the root component, including the [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html) tag:\n\n```js {3,13}\n\nfunction App() {\n\nreturn (\n\n<html>\n\n<head>\n\n<meta charSet=\"utf-8\" />\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n<link rel=\"stylesheet\" href=\"/styles.css\"></link>\n\n<title>My app</title>\n\n</head>\n\n<body>\n\n<Router />\n\n</body>\n\n</html>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2483":{"pageContent":"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n<link rel=\"stylesheet\" href=\"/styles.css\"></link>\n\n<title>My app</title>\n\n</head>\n\n<body>\n\n<Router />\n\n</body>\n\n</html>\n\n);\n\n}\n\n```\n\nTo hydrate the entire document, pass the [`document`](https://developer.mozilla.org/en-US/docs/Web/API/Window/document) global as the first argument to `hydrateRoot`:\n\n```js {4}\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nhydrateRoot(document, <App />);\n\n```\n\n--\n\n### Suppressing unavoidable hydration mismatch errors {/*suppressing-unavoidable-hydration-mismatch-errors*/}\n\nIf a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the hydration mismatch warning.\n\nTo silence hydration warnings on an element, add `suppressHydrationWarning={true}`:\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2484":{"pageContent":"<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Current Date: <!-- -->01/01/2020</h1></div>\n\n```\n\n```js index.js\n\nimport './styles.css';\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nhydrateRoot(document.getElementById('root'), <App />);\n\n```\n\n```js App.js active\n\nexport default function App() {\n\nreturn (\n\n<h1 suppressHydrationWarning={true}>\n\nCurrent Date: {new Date().toLocaleDateString()}\n\n</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates.\n\n--\n\n### Handling different client and server content {/*handling-different-client-and-server-content*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2485":{"pageContent":"--\n\n### Handling different client and server content {/*handling-different-client-and-server-content*/}\n\nIf you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a [state variable](/reference/react/useState) like `isClient`, which you can set to `true` in an [Effect](/reference/react/useEffect):\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nHTML content inside <div id=\"root\">...</div>\n\nwas generated from App by react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Is Server</h1></div>\n\n```\n\n```js index.js\n\nimport './styles.css';\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nhydrateRoot(document.getElementById('root'), <App />);\n\n```\n\n```js App.js active\n\nimport { useState, useEffect } from \"react\";\n\nexport default function App() {\n\nconst [isClient, setIsClient] = useState(false);\n\nuseEffect(() => {\n\nsetIsClient(true);\n\n}, []);\n\nreturn (\n\n<h1>\n\n{isClient ? 'Is Client' : 'Is Server'}\n\n</h1>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2486":{"pageContent":"export default function App() {\n\nconst [isClient, setIsClient] = useState(false);\n\nuseEffect(() => {\n\nsetIsClient(true);\n\n}, []);\n\nreturn (\n\n<h1>\n\n{isClient ? 'Is Client' : 'Is Server'}\n\n</h1>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nThis way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration.\n\n<Pitfall>\n\nThis approach makes hydration slower because your components have to render twice. Be mindful of the user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so rendering a different UI immediately after hydration may also feel jarring to the user.\n\n</Pitfall>\n\n--\n\n### Updating a hydrated root component {/*updating-a-hydrated-root-component*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2487":{"pageContent":"</Pitfall>\n\n--\n\n### Updating a hydrated root component {/*updating-a-hydrated-root-component*/}\n\nAfter the root has finished hydrating, you can call [`root.render`](#root-render) to update the root React component. **Unlike with [`createRoot`](/reference/react-dom/client/createRoot), you don't usually need to do this because the initial content was already rendered as HTML.**\n\nIf you call `root.render` at some point after hydration, and the component tree structure matches up with what was previously rendered, React will [preserve the state.](/learn/preserving-and-resetting-state) Notice how you can type in the input, which means that the updates from repeated `render` calls every second in this example are not destructive:\n\n<Sandpack>\n\n```html public/index.html\n\n<!--\n\nAll HTML content inside <div id=\"root\">...</div> was\n\ngenerated by rendering <App /> with react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Hello, world! <!-- -->0</h1><input placeholder=\"Type something here\"/></div>\n\n```\n\n```js index.js active","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2488":{"pageContent":"generated by rendering <App /> with react-dom/server.\n\n->\n\n<div id=\"root\"><h1>Hello, world! <!-- -->0</h1><input placeholder=\"Type something here\"/></div>\n\n```\n\n```js index.js active\n\nimport { hydrateRoot } from 'react-dom/client';\n\nimport './styles.css';\n\nimport App from './App.js';\n\nconst root = hydrateRoot(\n\ndocument.getElementById('root'),\n\n<App counter={0} />\n\n);\n\nlet i = 0;\n\nsetInterval(() => {\n\nroot.render(<App counter={i} />);\n\ni++;\n\n}, 1000);\n\n```\n\n```js App.js\n\nexport default function App({counter}) {\n\nreturn (\n\n<>\n\n<h1>Hello, world! {counter}</h1>\n\n<input placeholder=\"Type something here\" />\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nIt is uncommon to call [`root.render`](#root-render) on a hydrated root. Usually, you'll [update state](/reference/react/useState) inside one of the components instead.","metadata":{"source":"reactjs.org/beta/src/content/reference/react-dom/client/hydrateRoot.md"}},"2489":{"pageContent":"--\n\ntitle: useState\n\n--\n\n<Intro>\n\n`useState` is a React Hook that lets you add a [state variable](/learn/state-a-components-memory) to your component.\n\n```js\n\nconst [state, setState] = useState(initialState)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useState(initialState)` {/*usestate*/}\n\nCall `useState` at the top level of your component to declare a [state variable.](/learn/state-a-components-memory)\n\n```js\n\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\nconst [age, setAge] = useState(28);\n\nconst [name, setName] = useState('Taylor');\n\nconst [todos, setTodos] = useState(() => createTodos());\n\n// ...\n\n```\n\nThe convention is to name state variables like `[something, setSomething]` using [array destructuring.](https://javascript.info/destructuring-assignment)\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2490":{"pageContent":"[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`initialState`: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.\n\nIf you pass a function as `initialState`, it will be treated as an _initializer function_. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state. [See an example below.](#avoiding-recreating-the-initial-state)\n\n#### Returns {/*returns*/}\n\n`useState` returns an array with exactly two values:\n\n1. The current state. During the first render, it will match the `initialState` you have passed.\n\n2. The [`set` function](#setstate) that lets you update the state to a different value and trigger a re-render.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2491":{"pageContent":"2. The [`set` function](#setstate) that lets you update the state to a different value and trigger a re-render.\n\n#### Caveats {/*caveats*/}\n\n`useState` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\nIn Strict Mode, React will **call your initializer function twice** in order to [help you find accidental impurities.](#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. If your initializer function is pure (as it should be), this should not affect the logic of your component. The result from one of the calls will be ignored.\n\n--\n\n### `set` functions, like `setSomething(nextState)` {/*setstate*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2492":{"pageContent":"--\n\n### `set` functions, like `setSomething(nextState)` {/*setstate*/}\n\nThe `set` function returned by `useState` lets you update the state to a different value and trigger a re-render. You can pass the next state directly, or a function that calculates it from the previous state:\n\n```js\n\nconst [name, setName] = useState('Edward');\n\nfunction handleClick() {\n\nsetName('Taylor');\n\nsetAge(a => a + 1);\n\n// ...\n\n```\n\n#### Parameters {/*setstate-parameters*/}\n\n`nextState`: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2493":{"pageContent":"setAge(a => a + 1);\n\n// ...\n\n```\n\n#### Parameters {/*setstate-parameters*/}\n\n`nextState`: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.\n\nIf you pass a function as `nextState`, it will be treated as an _updater function_. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state. [See an example below.](#updating-state-based-on-the-previous-state)\n\n#### Returns {/*setstate-returns*/}\n\n`set` functions do not have a return value.\n\n#### Caveats {/*setstate-caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2494":{"pageContent":"#### Returns {/*setstate-returns*/}\n\n`set` functions do not have a return value.\n\n#### Caveats {/*setstate-caveats*/}\n\nThe `set` function **only updates the state variable for the *next* render**. If you read the state variable after calling the `set` function, [you will still get the old value](#ive-updated-the-state-but-logging-gives-me-the-old-value) that was on the screen before your call.\n\nIf the new value you provide is identical to the current `state`, as determined by an [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison, React will **skip re-rendering the component and its children.** This is an optimization. Although in some cases React may still need to call your component before skipping the children, it shouldn't affect your code.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2495":{"pageContent":"React [batches state updates.](/learn/queueing-a-series-of-state-updates) It updates the screen **after all the event handlers have run** and have called their `set` functions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can use [`flushSync`.](/reference/react-dom/flushSync)\n\nCalling the `set` function *during rendering* is only allowed from within the currently rendering component. React will discard its output and immediately attempt to render it again with the new state. This pattern is rarely needed, but you can use it to **store information from the previous renders**. [See an example below.](#storing-information-from-previous-renders)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2496":{"pageContent":"In Strict Mode, React will **call your updater function twice** in order to [help you find accidental impurities.](#my-initializer-or-updater-function-runs-twice) This is development-only behavior and does not affect production. If your updater function is pure (as it should be), this should not affect the logic of your component. The result from one of the calls will be ignored.\n\n--\n\n## Usage {/*usage*/}\n\n### Adding state to a component {/*adding-state-to-a-component*/}\n\nCall `useState` at the top level of your component to declare one or more [state variables.](/learn/state-a-components-memory)\n\n```js [[1, 4, \"age\"], [2, 4, \"setAge\"], [3, 4, \"42\"], [1, 5, \"name\"], [2, 5, \"setName\"], [3, 5, \"'Taylor'\"]]\n\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\nconst [age, setAge] = useState(42);\n\nconst [name, setName] = useState('Taylor');\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2497":{"pageContent":"import { useState } from 'react';\n\nfunction MyComponent() {\n\nconst [age, setAge] = useState(42);\n\nconst [name, setName] = useState('Taylor');\n\n// ...\n\n```\n\nThe convention is to name state variables like `[something, setSomething]` using [array destructuring.](https://javascript.info/destructuring-assignment)\n\n`useState` returns an array with exactly two items:\n\n1. The <CodeStep step={1}>current state</CodeStep> of this state variable, initially set to the <CodeStep step={3}>initial state</CodeStep> you provided.\n\n2. The <CodeStep step={2}>`set` function</CodeStep> that lets you change it to any other value in response to interaction.\n\nTo update what’s on the screen, call the `set` function with some next state:\n\n```js [[2, 2, \"setName\"]]\n\nfunction handleClick() {\n\nsetName('Robin');\n\n}\n\n```\n\nReact will store the next state, render your component again with the new values, and update the UI.\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2498":{"pageContent":"```js [[2, 2, \"setName\"]]\n\nfunction handleClick() {\n\nsetName('Robin');\n\n}\n\n```\n\nReact will store the next state, render your component again with the new values, and update the UI.\n\n<Pitfall>\n\nCalling the `set` function [**does not** change the current state in the already executing code](#ive-updated-the-state-but-logging-gives-me-the-old-value):\n\n```js {3}\n\nfunction handleClick() {\n\nsetName('Robin');\n\nconsole.log(name); // Still \"Taylor\"!\n\n}\n\n```\n\nIt only affects what `useState` will return starting from the *next* render.\n\n</Pitfall>\n\n<Recipes titleText=\"Basic useState examples\" titleId=\"examples-basic\">\n\n#### Counter (number) {/*counter-number*/}\n\nIn this example, the `count` state variable holds a number. Clicking the button increments it.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nYou pressed me {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2499":{"pageContent":"const [count, setCount] = useState(0);\n\nfunction handleClick() {\n\nsetCount(count + 1);\n\n}\n\nreturn (\n\n<button onClick={handleClick}>\n\nYou pressed me {count} times\n\n</button>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Text field (string) {/*text-field-string*/}\n\nIn this example, the `text` state variable holds a string. When you type, `handleChange` reads the latest input value from the browser input DOM element, and calls `setText` to update the state. This allows you to display the current `text` below.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MyInput() {\n\nconst [text, setText] = useState('hello');\n\nfunction handleChange(e) {\n\nsetText(e.target.value);\n\n}\n\nreturn (\n\n<>\n\n<input value={text} onChange={handleChange} />\n\n<p>You typed: {text}</p>\n\n<button onClick={() => setText('hello')}>\n\nReset\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Checkbox (boolean) {/*checkbox-boolean*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2500":{"pageContent":"<p>You typed: {text}</p>\n\n<button onClick={() => setText('hello')}>\n\nReset\n\n</button>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Checkbox (boolean) {/*checkbox-boolean*/}\n\nIn this example, the `liked` state variable holds a boolean. When you click the input, `setLiked` updates the `liked` state variable with whether the browser checkbox input is checked. The `liked` variable is used to render the text below the checkbox.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function MyCheckbox() {\n\nconst [liked, setLiked] = useState(true);\n\nfunction handleChange(e) {\n\nsetLiked(e.target.checked);\n\n}\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={liked}\n\nonChange={handleChange}\n\n/>\n\nI liked this\n\n</label>\n\n<p>You {liked ? 'liked' : 'did not like'} this.</p>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Form (two variables) {/*form-two-variables*/}\n\nYou can declare more than one state variable in the same component. Each state variable is completely independent.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2501":{"pageContent":"You can declare more than one state variable in the same component. Each state variable is completely independent.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [name, setName] = useState('Taylor');\n\nconst [age, setAge] = useState(42);\n\nreturn (\n\n<>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<button onClick={() => setAge(age + 1)}>\n\nIncrement age\n\n</button>\n\n<p>Hello, {name}. You are {age}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-top: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Updating state based on the previous state {/*updating-state-based-on-the-previous-state*/}\n\nSuppose the `age` is `42`. This handler calls `setAge(age + 1)` three times:\n\n```js\n\nfunction handleClick() {\n\nsetAge(age + 1); // setAge(42 + 1)\n\nsetAge(age + 1); // setAge(42 + 1)\n\nsetAge(age + 1); // setAge(42 + 1)\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2502":{"pageContent":"```js\n\nfunction handleClick() {\n\nsetAge(age + 1); // setAge(42 + 1)\n\nsetAge(age + 1); // setAge(42 + 1)\n\nsetAge(age + 1); // setAge(42 + 1)\n\n}\n\n```\n\nHowever, after one click, `age` will only be `43` rather than `45`! This is because calling the `set` function [does not update](/learn/state-as-a-snapshot) the `age` state variable in the already running code. So each `setAge(age + 1)` call becomes `setAge(43)`.\n\nTo solve this problem, **you may pass an *updater function*** to `setAge` instead of the next state:\n\n```js [[1, 2, \"a\", 0], [2, 2, \"a + 1\"], [1, 3, \"a\", 0], [2, 3, \"a + 1\"], [1, 4, \"a\", 0], [2, 4, \"a + 1\"]]\n\nfunction handleClick() {\n\nsetAge(a => a + 1); // setAge(42 => 43)\n\nsetAge(a => a + 1); // setAge(43 => 44)\n\nsetAge(a => a + 1); // setAge(44 => 45)\n\n}\n\n```\n\nHere, `a => a + 1` is your updater function. It takes the <CodeStep step={1}>pending state</CodeStep> and calculates the <CodeStep step={2}>next state</CodeStep> from it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2503":{"pageContent":"}\n\n```\n\nHere, `a => a + 1` is your updater function. It takes the <CodeStep step={1}>pending state</CodeStep> and calculates the <CodeStep step={2}>next state</CodeStep> from it.\n\nReact puts your updater functions in a [queue.](/learn/queueing-a-series-of-state-updates) Then, during the next render, it will call them in the same order:\n\n1. `a => a + 1` will receive `42` as the pending state and return `43` as the next state.\n\n1. `a => a + 1` will receive `43` as the pending state and return `44` as the next state.\n\n1. `a => a + 1` will receive `44` as the pending state and return `45` as the next state.\n\nThere are no other queued updates, so React will store `45` as the current state in the end.\n\nBy convention, it's common to name the pending state argument for the first letter of the state variable name, like `a` for `age`. However, you may also call it like `prevAge` or something else that you find clearer.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2504":{"pageContent":"React may [call your updaters twice](#my-initializer-or-updater-function-runs-twice) in development to verify that they are [pure.](/learn/keeping-components-pure)\n\n<DeepDive>\n\n#### Is using an updater always preferred? {/*is-using-an-updater-always-preferred*/}\n\nYou might hear a recommendation to always write code like `setAge(a => a + 1)` if the state you're setting is calculated from the previous state. There is no harm in it, but it is also not always necessary.\n\nIn most cases, there is no difference between these two approaches. React always makes sure that for intentional user actions, like clicks, the `age` state variable would be updated before the next click. This means there is no risk of a click handler seeing a \"stale\" `age` at the beginning of the event handler.\n\nHowever, if you do multiple updates within the same event, updaters can be helpful. They're also helpful if accessing the state variable itself is inconvenient (you might run into this when optimizing re-renders).","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2505":{"pageContent":"If you prefer consistency over slightly more verbose syntax, it's reasonable to always write an updater if the state you're setting is calculated from the previous state. If it's calculated from the previous state of some *other* state variable, you might want to combine them into one object and [use a reducer.](/learn/extracting-state-logic-into-a-reducer)\n\n</DeepDive>\n\n<Recipes titleText=\"The difference between passing an updater and passing the next state directly\" titleId=\"examples-updater\">\n\n#### Passing the updater function {/*passing-the-updater-function*/}\n\nThis example passes the updater function, so the \"+3\" button works.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [age, setAge] = useState(42);\n\nfunction increment() {\n\nsetAge(a => a + 1);\n\n}\n\nreturn (\n\n<>\n\n<h1>Your age: {age}</h1>\n\n<button onClick={() => {\n\nincrement();\n\nincrement();\n\nincrement();\n\n}}>+3</button>\n\n<button onClick={() => {\n\nincrement();\n\n}}>+1</button>\n\n</>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2506":{"pageContent":"setAge(a => a + 1);\n\n}\n\nreturn (\n\n<>\n\n<h1>Your age: {age}</h1>\n\n<button onClick={() => {\n\nincrement();\n\nincrement();\n\nincrement();\n\n}}>+3</button>\n\n<button onClick={() => {\n\nincrement();\n\n}}>+1</button>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin: 10px; font-size: 20px; }\n\nh1 { display: block; margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Passing the next state directly {/*passing-the-next-state-directly*/}\n\nThis example **does not** pass the updater function, so the \"+3\" button **doesn't work as intended**.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [age, setAge] = useState(42);\n\nfunction increment() {\n\nsetAge(age + 1);\n\n}\n\nreturn (\n\n<>\n\n<h1>Your age: {age}</h1>\n\n<button onClick={() => {\n\nincrement();\n\nincrement();\n\nincrement();\n\n}}>+3</button>\n\n<button onClick={() => {\n\nincrement();\n\n}}>+1</button>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin: 10px; font-size: 20px; }\n\nh1 { display: block; margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2507":{"pageContent":"<button onClick={() => {\n\nincrement();\n\n}}>+1</button>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin: 10px; font-size: 20px; }\n\nh1 { display: block; margin: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Updating objects and arrays in state {/*updating-objects-and-arrays-in-state*/}\n\nYou can put objects and arrays into state. In React, state is considered read-only, so **you should *replace* it rather than *mutate* your existing objects**. For example, if you have a `form` object in state, don't update it like this:\n\n```js\n\n// 🚩 Don't mutate an object in state like this:\n\nform.firstName = 'Taylor';\n\n```\n\nInstead, replace the whole object by creating a new one:\n\n```js\n\n// ✅ Replace state with a new object\n\nsetForm({\n\n...form,\n\nfirstName: 'Taylor'\n\n});\n\n```\n\nRead [updating objects in state](/learn/updating-objects-in-state) and [updating arrays in state](/learn/updating-arrays-in-state) to learn more.\n\n<Recipes titleText=\"Examples of objects and arrays in state\" titleId=\"examples-objects\">","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2508":{"pageContent":"<Recipes titleText=\"Examples of objects and arrays in state\" titleId=\"examples-objects\">\n\n#### Form (object) {/*form-object*/}\n\nIn this example, the `form` state variable holds an object. Each input has a change handler that calls `setForm` with the next state of the entire form. The `{ ...form }` spread syntax ensures that the state object is replaced rather than mutated.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [form, setForm] = useState({\n\nfirstName: 'Barbara',\n\nlastName: 'Hepworth',\n\nemail: 'bhepworth@sculpture.com',\n\n});\n\nreturn (\n\n<>\n\n<label>\n\nFirst name:\n\n<input\n\nvalue={form.firstName}\n\nonChange={e => {\n\nsetForm({\n\n...form,\n\nfirstName: e.target.value\n\n});\n\n}}\n\n/>\n\n</label>\n\n<label>\n\nLast name:\n\n<input\n\nvalue={form.lastName}\n\nonChange={e => {\n\nsetForm({\n\n...form,\n\nlastName: e.target.value\n\n});\n\n}}\n\n/>\n\n</label>\n\n<label>\n\nEmail:\n\n<input\n\nvalue={form.email}\n\nonChange={e => {\n\nsetForm({\n\n...form,\n\nemail: e.target.value\n\n});\n\n}}\n\n/>\n\n</label>\n\n<p>\n\n{form.firstName}{' '}\n\n{form.lastName}{' '}\n\n({form.email})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2509":{"pageContent":"});\n\n}}\n\n/>\n\n</label>\n\n<label>\n\nEmail:\n\n<input\n\nvalue={form.email}\n\nonChange={e => {\n\nsetForm({\n\n...form,\n\nemail: e.target.value\n\n});\n\n}}\n\n/>\n\n</label>\n\n<p>\n\n{form.firstName}{' '}\n\n{form.lastName}{' '}\n\n({form.email})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Form (nested object) {/*form-nested-object*/}\n\nIn this example, the state is more nested. When you update nested state, you need to create a copy of the object you're updating, as well as any objects \"containing\" it on the way upwards. Read [updating a nested object](/learn/updating-objects-in-state#updating-a-nested-object) to learn more.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Form() {\n\nconst [person, setPerson] = useState({\n\nname: 'Niki de Saint Phalle',\n\nartwork: {\n\ntitle: 'Blue Nana',\n\ncity: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nsetPerson({\n\n...person,\n\nname: e.target.value\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2510":{"pageContent":"city: 'Hamburg',\n\nimage: 'https://i.imgur.com/Sd1AgUOm.jpg',\n\n}\n\n});\n\nfunction handleNameChange(e) {\n\nsetPerson({\n\n...person,\n\nname: e.target.value\n\n});\n\n}\n\nfunction handleTitleChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\ntitle: e.target.value\n\n}\n\n});\n\n}\n\nfunction handleCityChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\ncity: e.target.value\n\n}\n\n});\n\n}\n\nfunction handleImageChange(e) {\n\nsetPerson({\n\n...person,\n\nartwork: {\n\n...person.artwork,\n\nimage: e.target.value\n\n}\n\n});\n\n}\n\nreturn (\n\n<>\n\n<label>\n\nName:\n\n<input\n\nvalue={person.name}\n\nonChange={handleNameChange}\n\n/>\n\n</label>\n\n<label>\n\nTitle:\n\n<input\n\nvalue={person.artwork.title}\n\nonChange={handleTitleChange}\n\n/>\n\n</label>\n\n<label>\n\nCity:\n\n<input\n\nvalue={person.artwork.city}\n\nonChange={handleCityChange}\n\n/>\n\n</label>\n\n<label>\n\nImage:\n\n<input\n\nvalue={person.artwork.image}\n\nonChange={handleImageChange}\n\n/>\n\n</label>\n\n<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}\n\n{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2511":{"pageContent":"<p>\n\n<i>{person.artwork.title}</i>\n\n{' by '}\n\n{person.name}\n\n<br />\n\n(located in {person.artwork.city})\n\n</p>\n\n<img\n\nsrc={person.artwork.image}\n\nalt={person.artwork.title}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel { display: block; }\n\ninput { margin-left: 5px; margin-bottom: 5px; }\n\nimg { width: 200px; height: 200px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### List (array) {/*list-array*/}\n\nIn this example, the `todos` state variable holds an array. Each button handler calls `setTodos` with the next version of that array. The `[...todos]` spread syntax, `todos.map()` and `todos.filter()` ensure the state array is replaced rather than mutated.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport AddTodo from './AddTodo.js';\n\nimport TaskList from './TaskList.js';\n\nlet nextId = 3;\n\nconst initialTodos = [\n\n{ id: 0, title: 'Buy milk', done: true },\n\n{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, setTodos] = useState(initialTodos);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2512":{"pageContent":"{ id: 1, title: 'Eat tacos', done: false },\n\n{ id: 2, title: 'Brew tea', done: false },\n\n];\n\nexport default function TaskApp() {\n\nconst [todos, setTodos] = useState(initialTodos);\n\nfunction handleAddTodo(title) {\n\nsetTodos([\n\n...todos,\n\n{\n\nid: nextId++,\n\ntitle: title,\n\ndone: false\n\n}\n\n]);\n\n}\n\nfunction handleChangeTodo(nextTodo) {\n\nsetTodos(todos.map(t => {\n\nif (t.id === nextTodo.id) {\n\nreturn nextTodo;\n\n} else {\n\nreturn t;\n\n}\n\n}));\n\n}\n\nfunction handleDeleteTodo(todoId) {\n\nsetTodos(\n\ntodos.filter(t => t.id !== todoId)\n\n);\n\n}\n\nreturn (\n\n<>\n\n<AddTodo\n\nonAddTodo={handleAddTodo}\n\n/>\n\n<TaskList\n\ntodos={todos}\n\nonChangeTodo={handleChangeTodo}\n\nonDeleteTodo={handleDeleteTodo}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js AddTodo.js\n\nimport { useState } from 'react';\n\nexport default function AddTodo({ onAddTodo }) {\n\nconst [title, setTitle] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add todo\"\n\nvalue={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2513":{"pageContent":"value={title}\n\nonChange={e => setTitle(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetTitle('');\n\nonAddTodo(title);\n\n}}>Add</button>\n\n</>\n\n)\n\n}\n\n```\n\n```js TaskList.js\n\nimport { useState } from 'react';\n\nexport default function TaskList({\n\ntodos,\n\nonChangeTodo,\n\nonDeleteTodo\n\n}) {\n\nreturn (\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>\n\n<Task\n\ntodo={todo}\n\nonChange={onChangeTodo}\n\nonDelete={onDeleteTodo}\n\n/>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ todo, onChange, onDelete }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nlet todoContent;\n\nif (isEditing) {\n\ntodoContent = (\n\n<>\n\n<input\n\nvalue={todo.title}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ntitle: e.target.value\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntodoContent = (\n\n<>\n\n{todo.title}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2514":{"pageContent":"<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={todo.done}\n\nonChange={e => {\n\nonChange({\n\n...todo,\n\ndone: e.target.checked\n\n});\n\n}}\n\n/>\n\n{todoContent}\n\n<button onClick={() => onDelete(todo.id)}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Writing concise update logic with Immer {/*writing-concise-update-logic-with-immer*/}\n\nIf updating arrays and objects without mutation feels tedious, you can use a library like [Immer](https://github.com/immerjs/use-immer) to reduce repetitive code. Immer lets you write concise code as if you were mutating objects, but under the hood it performs immutable updates:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport { useImmer } from 'use-immer';\n\nlet nextId = 3;\n\nconst initialList = [\n\n{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2515":{"pageContent":"{ id: 0, title: 'Big Bellies', seen: false },\n\n{ id: 1, title: 'Lunar Landscape', seen: false },\n\n{ id: 2, title: 'Terracotta Army', seen: true },\n\n];\n\nexport default function BucketList() {\n\nconst [list, updateList] = useImmer(initialList);\n\nfunction handleToggle(artworkId, nextSeen) {\n\nupdateList(draft => {\n\nconst artwork = draft.find(a =>\n\na.id === artworkId\n\n);\n\nartwork.seen = nextSeen;\n\n});\n\n}\n\nreturn (\n\n<>\n\n<h1>Art Bucket List</h1>\n\n<h2>My list of art to see:</h2>\n\n<ItemList\n\nartworks={list}\n\nonToggle={handleToggle} />\n\n</>\n\n);\n\n}\n\nfunction ItemList({ artworks, onToggle }) {\n\nreturn (\n\n<ul>\n\n{artworks.map(artwork => (\n\n<li key={artwork.id}>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={artwork.seen}\n\nonChange={e => {\n\nonToggle(\n\nartwork.id,\n\ne.target.checked\n\n);\n\n}}\n\n/>\n\n{artwork.title}\n\n</label>\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n```\n\n```json package.json\n\n{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2516":{"pageContent":"{\n\n\"dependencies\": {\n\n\"immer\": \"1.7.3\",\n\n\"react\": \"latest\",\n\n\"react-dom\": \"latest\",\n\n\"react-scripts\": \"latest\",\n\n\"use-immer\": \"0.5.1\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Avoiding recreating the initial state {/*avoiding-recreating-the-initial-state*/}\n\nReact saves the initial state once and ignores it on the next renders.\n\n```js\n\nfunction TodoList() {\n\nconst [todos, setTodos] = useState(createInitialTodos());\n\n// ...\n\n```\n\nAlthough the result of `createInitialTodos()` is only used for the initial render, you're still calling this function on every render. This can be wasteful if it's creating large arrays or performing expensive calculations.\n\nTo solve this, you may **pass it as an _initializer_ function** to `useState` instead:\n\n```js\n\nfunction TodoList() {\n\nconst [todos, setTodos] = useState(createInitialTodos);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2517":{"pageContent":"To solve this, you may **pass it as an _initializer_ function** to `useState` instead:\n\n```js\n\nfunction TodoList() {\n\nconst [todos, setTodos] = useState(createInitialTodos);\n\n// ...\n\n```\n\nNotice that you’re passing `createInitialTodos`, which is the *function itself*, and not `createInitialTodos()`, which is the result of calling it. If you pass a function to `useState`, React will only call it during initialization.\n\nReact may [call your initializers twice](#my-initializer-or-updater-function-runs-twice) in development to verify that they are [pure.](/learn/keeping-components-pure)\n\n<Recipes titleText=\"The difference between passing an initializer and passing the initial state directly\" titleId=\"examples-initializer\">\n\n#### Passing the initializer function {/*passing-the-initializer-function*/}\n\nThis example passes the initializer function, so the `createInitialTodos` function only runs during initialization. It does not run when component re-renders, such as when you type into the input.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2518":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nfunction createInitialTodos() {\n\nconst initialTodos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ninitialTodos.push({\n\nid: i,\n\ntext: 'Item ' + (i + 1)\n\n});\n\n}\n\nreturn initialTodos;\n\n}\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(createInitialTodos);\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nsetTodos([{\n\nid: todos.length,\n\ntext: text\n\n}, ...todos]);\n\n}}>Add</button>\n\n<ul>\n\n{todos.map(item => (\n\n<li key={item.id}>\n\n{item.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Passing the initial state directly {/*passing-the-initial-state-directly*/}\n\nThis example **does not** pass the initializer function, so the `createInitialTodos` function runs on every render, such as when you type into the input. There is no observable difference in behavior, but this code is less efficient.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nfunction createInitialTodos() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2519":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nfunction createInitialTodos() {\n\nconst initialTodos = [];\n\nfor (let i = 0; i < 50; i++) {\n\ninitialTodos.push({\n\nid: i,\n\ntext: 'Item ' + (i + 1)\n\n});\n\n}\n\nreturn initialTodos;\n\n}\n\nexport default function TodoList() {\n\nconst [todos, setTodos] = useState(createInitialTodos());\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\nsetTodos([{\n\nid: todos.length,\n\ntext: text\n\n}, ...todos]);\n\n}}>Add</button>\n\n<ul>\n\n{todos.map(item => (\n\n<li key={item.id}>\n\n{item.text}\n\n</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Resetting state with a key {/*resetting-state-with-a-key*/}\n\nTypically, you might encounter the `key` attribute when [rendering lists.](/learn/rendering-lists) However, it also serves another purpose.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2520":{"pageContent":"Typically, you might encounter the `key` attribute when [rendering lists.](/learn/rendering-lists) However, it also serves another purpose.\n\nYou can **reset a component's state by passing a different `key` to a component.** In this example, the Reset button changes the `version` state variable, which we pass as a `key` to the `Form`. When the `key` changes, React re-creates the `Form` component (and all of its children) from scratch, so its state gets reset.\n\nRead [preserving and resetting state](/learn/preserving-and-resetting-state) to learn more.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nexport default function App() {\n\nconst [version, setVersion] = useState(0);\n\nfunction handleReset() {\n\nsetVersion(version + 1);\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleReset}>Reset</button>\n\n<Form key={version} />\n\n</>\n\n);\n\n}\n\nfunction Form() {\n\nconst [name, setName] = useState('Taylor');\n\nreturn (\n\n<>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<p>Hello, {name}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2521":{"pageContent":"<Form key={version} />\n\n</>\n\n);\n\n}\n\nfunction Form() {\n\nconst [name, setName] = useState('Taylor');\n\nreturn (\n\n<>\n\n<input\n\nvalue={name}\n\nonChange={e => setName(e.target.value)}\n\n/>\n\n<p>Hello, {name}.</p>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { display: block; margin-bottom: 20px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Storing information from previous renders {/*storing-information-from-previous-renders*/}\n\nUsually, you will update state in event handlers. However, in rare cases you might want to adjust state in response to rendering -- for example, you might want to change a state variable when a prop changes.\n\nIn most cases, you don't need this:\n\n**If the value you need can be computed entirely from the current props or other state, [remove that redundant state altogether.](/learn/choosing-the-state-structure#avoid-redundant-state)** If you're worried about recomputing too often, the [`useMemo` Hook](/reference/react/useMemo) can help.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2522":{"pageContent":"If you want to reset the entire component tree's state, [pass a different `key` to your component.](#resetting-state-with-a-key)\n\nIf you can, update all the relevant state in the event handlers.\n\nIn the rare case that none of these apply, there is a pattern you can use to update state based on the values that have been rendered so far, by calling a `set` function while your component is rendering.\n\nHere's an example. This `CountLabel` component displays the `count` prop passed to it:\n\n```js CountLabel.js\n\nexport default function CountLabel({ count }) {\n\nreturn <h1>{count}</h1>\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2523":{"pageContent":"Here's an example. This `CountLabel` component displays the `count` prop passed to it:\n\n```js CountLabel.js\n\nexport default function CountLabel({ count }) {\n\nreturn <h1>{count}</h1>\n\n}\n\n```\n\nSay you want to show whether the counter has *increased or decreased* since the last change. The `count` prop doesn't tell you this -- you need to keep track of its previous value. Add the `prevCount` state variable to track it. Add another state variable called `trend` to hold whether the count has increased or decreased. Compare `prevCount` with `count`, and if they're not equal, update both `prevCount` and `trend`. Now you can show both the current count prop and *how it has changed since the last render*.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport CountLabel from './CountLabel.js';\n\nexport default function App() {\n\nconst [count, setCount] = useState(0);\n\nreturn (\n\n<>\n\n<button onClick={() => setCount(count + 1)}>\n\nIncrement\n\n</button>\n\n<button onClick={() => setCount(count - 1)}>\n\nDecrement\n\n</button>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2524":{"pageContent":"const [count, setCount] = useState(0);\n\nreturn (\n\n<>\n\n<button onClick={() => setCount(count + 1)}>\n\nIncrement\n\n</button>\n\n<button onClick={() => setCount(count - 1)}>\n\nDecrement\n\n</button>\n\n<CountLabel count={count} />\n\n</>\n\n);\n\n}\n\n```\n\n```js CountLabel.js active\n\nimport { useState } from 'react';\n\nexport default function CountLabel({ count }) {\n\nconst [prevCount, setPrevCount] = useState(count);\n\nconst [trend, setTrend] = useState(null);\n\nif (prevCount !== count) {\n\nsetPrevCount(count);\n\nsetTrend(count > prevCount ? 'increasing' : 'decreasing');\n\n}\n\nreturn (\n\n<>\n\n<h1>{count}</h1>\n\n{trend && <p>The count is {trend}</p>}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-bottom: 10px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2525":{"pageContent":"setTrend(count > prevCount ? 'increasing' : 'decreasing');\n\n}\n\nreturn (\n\n<>\n\n<h1>{count}</h1>\n\n{trend && <p>The count is {trend}</p>}\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-bottom: 10px; }\n\n```\n\n</Sandpack>\n\nNote that if you call a `set` function while rendering, it must be inside a condition like `prevCount !== count`, and there must be a call like `setPrevCount(count)` inside of the condition. Otherwise, your component would re-render in a loop until it crashes. Also, you can only update the state of the *currently rendering* component like this. Calling the `set` function of *another* component during rendering is an error. Finally, your `set` call should still [update state without mutation](#updating-objects-and-arrays-in-state) -- this special case doesn't mean you can break other rules of [pure functions.](/learn/keeping-components-pure)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2526":{"pageContent":"This pattern can be hard to understand and is usually best avoided. However, it's better than updating state in an effect. When you call the `set` function during render, React will re-render that component immediately after your component exits with a `return` statement, and before rendering the children. This way, children don't need to render twice. The rest of your component function will still execute (and the result will be thrown away), but if your condition is below all the calls to Hooks, you may add an early `return;` inside it to restart rendering earlier.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I've updated the state, but logging gives me the old value {/*ive-updated-the-state-but-logging-gives-me-the-old-value*/}\n\nCalling the `set` function **does not change state in the running code**:\n\n```js {4,5,8}\n\nfunction handleClick() {\n\nconsole.log(count);  // 0\n\nsetCount(count + 1); // Request a re-render with 1\n\nconsole.log(count);  // Still 0!\n\nsetTimeout(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2527":{"pageContent":"```js {4,5,8}\n\nfunction handleClick() {\n\nconsole.log(count);  // 0\n\nsetCount(count + 1); // Request a re-render with 1\n\nconsole.log(count);  // Still 0!\n\nsetTimeout(() => {\n\nconsole.log(count); // Also 0!\n\n}, 5000);\n\n}\n\n```\n\nThis is because [states behaves like a snapshot.](/learn/state-as-a-snapshot) Updating state requests another render with the new state value, but does not affect the `count` JavaScript variable in your already-running event handler.\n\nIf you need to use the next state, you can save it in a variable before passing it to the `set` function:\n\n```js\n\nconst nextCount = count + 1;\n\nsetCount(nextCount);\n\nconsole.log(count);     // 0\n\nconsole.log(nextCount); // 1\n\n```\n\n--\n\n### I've updated the state, but the screen doesn't update {/*ive-updated-the-state-but-the-screen-doesnt-update*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2528":{"pageContent":"setCount(nextCount);\n\nconsole.log(count);     // 0\n\nconsole.log(nextCount); // 1\n\n```\n\n--\n\n### I've updated the state, but the screen doesn't update {/*ive-updated-the-state-but-the-screen-doesnt-update*/}\n\nReact will **ignore your update if the next state is equal to the previous state,** as determined by an [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. This usually happens when you change an object or an array in state directly:\n\n```js\n\nobj.x = 10;  // 🚩 Wrong: mutating existing object\n\nsetObj(obj); // 🚩 Doesn't do anything\n\n```\n\nYou mutated an existing `obj` object and passed it back to `setObj`, so React ignored the update. To fix this, you need to ensure that you're always [_replacing_ objects and arrays in state instead of _mutating_ them](#updating-objects-and-arrays-in-state):\n\n```js\n\n// ✅ Correct: creating a new object\n\nsetObj({\n\n...obj,\n\nx: 10\n\n});\n\n```\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2529":{"pageContent":"```js\n\n// ✅ Correct: creating a new object\n\nsetObj({\n\n...obj,\n\nx: 10\n\n});\n\n```\n\n--\n\n### I'm getting an error: \"Too many re-renders\" {/*im-getting-an-error-too-many-re-renders*/}\n\nYou might get an error that says: `Too many re-renders. React limits the number of renders to prevent an infinite loop.` Typically, this means that you're unconditionally setting state *during render*, so your component enters a loop: render, set state (which causes a render), render, set state (which causes a render), and so on. Very often, this is caused by a mistake in specifying an event handler:\n\n```js {1-2}\n\n// 🚩 Wrong: calls the handler during render\n\nreturn <button onClick={handleClick()}>Click me</button>\n\n// ✅ Correct: passes down the event handler\n\nreturn <button onClick={handleClick}>Click me</button>\n\n// ✅ Correct: passes down an inline function\n\nreturn <button onClick={(e) => handleClick(e)}>Click me</button>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2530":{"pageContent":"return <button onClick={handleClick}>Click me</button>\n\n// ✅ Correct: passes down an inline function\n\nreturn <button onClick={(e) => handleClick(e)}>Click me</button>\n\n```\n\nIf you can't find the cause of this error, click on the arrow next to the error in the console and look through the JavaScript stack to find the specific `set` function call responsible for the error.\n\n--\n\n### My initializer or updater function runs twice {/*my-initializer-or-updater-function-runs-twice*/}\n\nIn [Strict Mode](/reference/react/StrictMode), React will call some of your functions twice instead of once:\n\n```js {2,5-6,11-12}\n\nfunction TodoList() {\n\n// This component function will run twice for every render.\n\nconst [todos, setTodos] = useState(() => {\n\n// This initializer function will run twice during initialization.\n\nreturn createTodos();\n\n});\n\nfunction handleClick() {\n\nsetTodos(prevTodos => {\n\n// This updater function will run twice for every click.\n\nreturn [...prevTodos, createTodo()];\n\n});\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2531":{"pageContent":"return createTodos();\n\n});\n\nfunction handleClick() {\n\nsetTodos(prevTodos => {\n\n// This updater function will run twice for every click.\n\nreturn [...prevTodos, createTodo()];\n\n});\n\n}\n\n// ...\n\n```\n\nThis is expected and shouldn't break your code.\n\nThis **development-only** behavior helps you [keep components pure.](/learn/keeping-components-pure) React uses the result of one of the calls, and ignores the result of the other call. As long as your component, initializer, and updater functions are pure, this shouldn't affect your logic. However, if they are accidentally impure, this helps you notice the mistakes and fix it.\n\nFor example, this impure updater function mutates an array in state:\n\n```js {2,3}\n\nsetTodos(prevTodos => {\n\n// 🚩 Mistake: mutating state\n\nprevTodos.push(createTodo());\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2532":{"pageContent":"For example, this impure updater function mutates an array in state:\n\n```js {2,3}\n\nsetTodos(prevTodos => {\n\n// 🚩 Mistake: mutating state\n\nprevTodos.push(createTodo());\n\n});\n\n```\n\nBecause React calls your updater function twice, you'll see the todo was added twice, so you'll know that there is a mistake. In this example, you can fix the mistake by [replacing the array instead of mutating it](#updating-objects-and-arrays-in-state):\n\n```js {2,3}\n\nsetTodos(prevTodos => {\n\n// ✅ Correct: replacing with new state\n\nreturn [...prevTodos, createTodo()];\n\n});\n\n```\n\nNow that this updater function is pure, calling it an extra time doesn't make a difference in behavior. This is why React calling it twice helps you find mistakes. **Only component, initializer, and updater functions need to be pure.** Event handlers don't need to be pure, so React will never call your event handlers twice.\n\nRead [keeping components pure](/learn/keeping-components-pure) to learn more.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2533":{"pageContent":"Read [keeping components pure](/learn/keeping-components-pure) to learn more.\n\n--\n\n### I'm trying to set state to a function, but it gets called instead {/*im-trying-to-set-state-to-a-function-but-it-gets-called-instead*/}\n\nYou can't put a function into state like this:\n\n```js\n\nconst [fn, setFn] = useState(someFunction);\n\nfunction handleClick() {\n\nsetFn(someOtherFunction);\n\n}\n\n```\n\nBecause you're passing a function, React assumes that `someFunction` is an [initializer function](#avoiding-recreating-the-initial-state), and that `someOtherFunction` is an [updater function](#updating-state-based-on-the-previous-state), so it tries to call them and store the result. To actually *store* a function, you have to put `() =>` before them in both cases. Then React will store the functions you pass.\n\n```js {1,4}\n\nconst [fn, setFn] = useState(() => someFunction);\n\nfunction handleClick() {\n\nsetFn(() => someOtherFunction);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useState.md"}},"2534":{"pageContent":"--\n\ntitle: useImperativeHandle\n\n--\n\n<Intro>\n\n`useImperativeHandle` is a React Hook that lets you customize the handle exposed as a [ref.](/learn/manipulating-the-dom-with-refs)\n\n```js\n\nuseImperativeHandle(ref, createHandle, dependencies?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useImperativeHandle(ref, createHandle, dependencies?)` {/*useimperativehandle*/}\n\nCall `useImperativeHandle` at the top level of your component to customize the ref handle it exposes:\n\n```js\n\nimport { forwardRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\n// ... your methods ...\n\n};\n\n}, []);\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`ref`: The `ref` you received as the second argument from the [`forwardRef` render function.](/reference/react/forwardRef#render-function)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2535":{"pageContent":"#### Parameters {/*parameters*/}\n\n`ref`: The `ref` you received as the second argument from the [`forwardRef` render function.](/reference/react/forwardRef#render-function)\n\n`createHandle`: A function that takes no arguments and returns the ref handle you want to expose. The ref handle you return can have any type. Usually, you will return an object with the methods you want to expose.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2536":{"pageContent":"**optional** `dependencies`: The list of all reactive values referenced inside of the `createHandle` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm. If a re-render resulted in a change to some dependency, or if you did not specify the dependencies at all, your `createHandle` function will re-execute, and the newly created handle will be assigned to the ref.\n\n#### Returns {/*returns*/}\n\n`useImperativeHandle` returns `undefined`.\n\n--\n\n## Usage {/*usage*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2537":{"pageContent":"#### Returns {/*returns*/}\n\n`useImperativeHandle` returns `undefined`.\n\n--\n\n## Usage {/*usage*/}\n\n### Exposing a custom ref handle to the parent component {/*exposing-a-custom-ref-handle-to-the-parent-component*/}\n\nBy default, components don't expose their DOM nodes to parent components. For example, if you want the parent component of `MyInput` to [have access](/learn/manipulating-the-dom-with-refs) to the `<input>` DOM node, you have to opt in with [`forwardRef`:](/reference/react/forwardRef)\n\n```js {4}\n\nimport { forwardRef } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nreturn <input {...props} ref={ref} />;\n\n});\n\n```\n\nWith the code above, [a ref to `MyInput` will receive the `<input>` DOM node.](/reference/react/forwardRef#exposing-a-dom-node-to-the-parent-component) However, you can expose a custom value instead. To customize the exposed handle, call `useImperativeHandle` at the top level of your component:\n\n```js {4-8}\n\nimport { forwardRef, useImperativeHandle } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2538":{"pageContent":"```js {4-8}\n\nimport { forwardRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\n// ... your methods ...\n\n};\n\n}, []);\n\nreturn <input {...props} />;\n\n});\n\n```\n\nNote that in the code above, the `ref` is no longer forwarded to the `<input>`.\n\nFor example, suppose you don't want to expose the entire `<input>` DOM node, but you want to expose two of its methods: `focus` and `scrollIntoView`. To do this, keep the real browser DOM in a separate ref. Then use `useImperativeHandle` to expose a handle with only the methods that you want the parent component to call:\n\n```js {7-14}\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\nfocus() {\n\ninputRef.current.focus();\n\n},\n\nscrollIntoView() {\n\ninputRef.current.scrollIntoView();\n\n},\n\n};\n\n}, []);\n\nreturn <input {...props} ref={inputRef} />;\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2539":{"pageContent":"useImperativeHandle(ref, () => {\n\nreturn {\n\nfocus() {\n\ninputRef.current.focus();\n\n},\n\nscrollIntoView() {\n\ninputRef.current.scrollIntoView();\n\n},\n\n};\n\n}, []);\n\nreturn <input {...props} ref={inputRef} />;\n\n});\n\n```\n\nNow, if the parent component gets a ref to `MyInput`, it will be able to call the `focus` and `scrollIntoView` methods on it. However, it will not have full access to the underlying `<input>` DOM node.\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport MyInput from './MyInput.js';\n\nexport default function Form() {\n\nconst ref = useRef(null);\n\nfunction handleClick() {\n\nref.current.focus();\n\n// This won't work because the DOM node isn't exposed:\n\n// ref.current.style.opacity = 0.5;\n\n}\n\nreturn (\n\n<form>\n\n<MyInput label=\"Enter your name:\" ref={ref} />\n\n<button type=\"button\" onClick={handleClick}>\n\nEdit\n\n</button>\n\n</form>\n\n);\n\n}\n\n```\n\n```js MyInput.js\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2540":{"pageContent":"import { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst MyInput = forwardRef(function MyInput(props, ref) {\n\nconst inputRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\nfocus() {\n\ninputRef.current.focus();\n\n},\n\nscrollIntoView() {\n\ninputRef.current.scrollIntoView();\n\n},\n\n};\n\n}, []);\n\nreturn <input {...props} ref={inputRef} />;\n\n});\n\nexport default MyInput;\n\n```\n\n```css\n\ninput {\n\nmargin: 5px;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Exposing your own imperative methods {/*exposing-your-own-imperative-methods*/}\n\nThe methods you expose via an imperative handle don't have to match the DOM methods exactly. For example, the `Post` component in the example below exposes a `scrollAndFocusAddComment` method via an imperative handle. This lets the parent `Page` scroll the list of comments *and* focus the input field when you click the button:\n\n<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport Post from './Post.js';\n\nexport default function Page() {\n\nconst postRef = useRef(null);\n\nfunction handleClick() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2541":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useRef } from 'react';\n\nimport Post from './Post.js';\n\nexport default function Page() {\n\nconst postRef = useRef(null);\n\nfunction handleClick() {\n\npostRef.current.scrollAndFocusAddComment();\n\n}\n\nreturn (\n\n<>\n\n<button onClick={handleClick}>\n\nWrite a comment\n\n</button>\n\n<Post ref={postRef} />\n\n</>\n\n);\n\n}\n\n```\n\n```js Post.js\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nimport CommentList from './CommentList.js';\n\nimport AddComment from './AddComment.js';\n\nconst Post = forwardRef((props, ref) => {\n\nconst commentsRef = useRef(null);\n\nconst addCommentRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\nscrollAndFocusAddComment() {\n\ncommentsRef.current.scrollToBottom();\n\naddCommentRef.current.focus();\n\n}\n\n};\n\n}, []);\n\nreturn (\n\n<>\n\n<article>\n\n<p>Welcome to my blog!</p>\n\n</article>\n\n<CommentList ref={commentsRef} />\n\n<AddComment ref={addCommentRef} />\n\n</>\n\n);\n\n});\n\nexport default Post;\n\n```\n\n```js CommentList.js\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2542":{"pageContent":"</article>\n\n<CommentList ref={commentsRef} />\n\n<AddComment ref={addCommentRef} />\n\n</>\n\n);\n\n});\n\nexport default Post;\n\n```\n\n```js CommentList.js\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst CommentList = forwardRef(function CommentList(props, ref) {\n\nconst divRef = useRef(null);\n\nuseImperativeHandle(ref, () => {\n\nreturn {\n\nscrollToBottom() {\n\nconst node = divRef.current;\n\nnode.scrollTop = node.scrollHeight;\n\n}\n\n};\n\n}, []);\n\nlet comments = [];\n\nfor (let i = 0; i < 50; i++) {\n\ncomments.push(<p key={i}>Comment #{i}</p>);\n\n}\n\nreturn (\n\n<div className=\"CommentList\" ref={divRef}>\n\n{comments}\n\n</div>\n\n);\n\n});\n\nexport default CommentList;\n\n```\n\n```js AddComment.js\n\nimport { forwardRef, useRef, useImperativeHandle } from 'react';\n\nconst AddComment = forwardRef(function AddComment(props, ref) {\n\nreturn <input placeholder=\"Add comment...\" ref={ref} />;\n\n});\n\nexport default AddComment;\n\n```\n\n```css\n\n.CommentList {\n\nheight: 100px;\n\noverflow: scroll;\n\nborder: 1px solid black;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2543":{"pageContent":"});\n\nexport default AddComment;\n\n```\n\n```css\n\n.CommentList {\n\nheight: 100px;\n\noverflow: scroll;\n\nborder: 1px solid black;\n\nmargin-top: 20px;\n\nmargin-bottom: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\n*Do not overuse refs.** You should only use refs for *imperative* behaviors that you can't express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on.\n\n*If you can express something as a prop, you should not use a ref.** For example, instead of exposing an imperative handle like `{ open, close }` from a `Modal` component, it is better to take `isOpen` as a prop like `<Modal isOpen={isOpen} />`. [Effects](/learn/synchronizing-with-effects) can help you expose imperative behaviors via props.\n\n</Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useImperativeHandle.md"}},"2544":{"pageContent":"--\n\ntitle: useId\n\n--\n\n<Intro>\n\n`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.\n\n```js\n\nconst id = useId()\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useId()` {/*useid*/}\n\nCall `useId` at the top level of your component to generate a unique ID:\n\n```js\n\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\nconst passwordHintId = useId();\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`useId` does not take any parameters.\n\n#### Returns {/*returns*/}\n\n`useId` returns a unique ID string associated with this particular `useId` call in this particular component.\n\n#### Caveats {/*caveats*/}\n\n`useId` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2545":{"pageContent":"`useId` **should not be used to generate keys** in a list. [Keys should be generated from your data.](/learn/rendering-lists#where-to-get-your-key)\n\n--\n\n## Usage {/*usage*/}\n\n<Pitfall>\n\n*Do not call `useId` to generate keys in a list.** [Keys should be generated from your data.](/learn/rendering-lists#where-to-get-your-key)\n\n</Pitfall>\n\n### Generating unique IDs for accessibility attributes {/*generating-unique-ids-for-accessibility-attributes*/}\n\nCall `useId` at the top level of your component to generate a unique ID:\n\n```js [[1, 4, \"passwordHintId\"]]\n\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\nconst passwordHintId = useId();\n\n// ...\n\n```\n\nYou can then pass the <CodeStep step={1}>generated ID</CodeStep> to different attributes:\n\n```js [[1, 2, \"passwordHintId\"], [1, 3, \"passwordHintId\"]]\n\n<>\n\n<input type=\"password\" aria-describedby={passwordHintId} />\n\n<p id={passwordHintId}>\n\n</>\n\n```\n\n*Let's walk through an example to see when this is useful.**","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2546":{"pageContent":"<>\n\n<input type=\"password\" aria-describedby={passwordHintId} />\n\n<p id={passwordHintId}>\n\n</>\n\n```\n\n*Let's walk through an example to see when this is useful.**\n\n[HTML accessibility attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) like [`aria-describedby`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby) let you specify that two tags are related to each other. For example, you can specify that a certain element (like an input) is described by another element (like a paragraph).\n\nIn regular HTML, you would write it like this:\n\n```html {5,8}\n\n<label>\n\nPassword:\n\n<input\n\ntype=\"password\"\n\naria-describedby=\"password-hint\"\n\n/>\n\n</label>\n\n<p id=\"password-hint\">\n\nThe password should contain at least 18 characters\n\n</p>\n\n```\n\nHowever, hardcoding IDs like this is not a good practice in React. A component may be rendered more than once on the page--but IDs have to be unique! Instead of hardcoding an ID, you can generate a unique ID with `useId`:\n\n```js {4,11,14}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2547":{"pageContent":"```js {4,11,14}\n\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\nconst passwordHintId = useId();\n\nreturn (\n\n<>\n\n<label>\n\nPassword:\n\n<input\n\ntype=\"password\"\n\naria-describedby={passwordHintId}\n\n/>\n\n</label>\n\n<p id={passwordHintId}>\n\nThe password should contain at least 18 characters\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\nNow, even if `PasswordField` appears multiple times on the screen, the generated IDs won't clash.\n\n<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\nconst passwordHintId = useId();\n\nreturn (\n\n<>\n\n<label>\n\nPassword:\n\n<input\n\ntype=\"password\"\n\naria-describedby={passwordHintId}\n\n/>\n\n</label>\n\n<p id={passwordHintId}>\n\nThe password should contain at least 18 characters\n\n</p>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<h2>Choose password</h2>\n\n<PasswordField />\n\n<h2>Confirm password</h2>\n\n<PasswordField />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n[Watch this video](https://www.youtube.com/watch?v=0dNzNcuEuOo) to see the difference in the user experience with assistive technologies.\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2548":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\n[Watch this video](https://www.youtube.com/watch?v=0dNzNcuEuOo) to see the difference in the user experience with assistive technologies.\n\n<Pitfall>\n\n*`useId` requires an identical component tree on the server and the client** when you use [server rendering](/reference/react-dom/server). If the trees you render on the server and the client don't match exactly, the generated IDs won't match.\n\n</Pitfall>\n\n<DeepDive>\n\n#### Why is useId better than an incrementing counter? {/*why-is-useid-better-than-an-incrementing-counter*/}\n\nYou might be wondering why `useId` is better than incrementing a global variable like `nextId++`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2549":{"pageContent":"You might be wondering why `useId` is better than incrementing a global variable like `nextId++`.\n\nThe primary benefit of `useId` is that React ensures that it works with [server rendering.](/reference/react-dom/server) During server rendering, your components generate HTML output. Later, on the client, [hydration](/reference/react-dom/client/hydrateRoot) attaches your event handlers to the generated HTML. For hydration to work, the client output must match the server HTML.\n\nThis is very difficult to guarantee with an incrementing counter because the order in which the client components are hydrated may not match the order in which the server HTML was emitted. By calling `useId`, you ensure that hydration will work, and the output will match between the server and the client.\n\nInside React, `useId` is generated from the \"parent path\" of the calling component. This is why, if the client and the server tree are the same, the \"parent path\" will match up regardless of rendering order.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2550":{"pageContent":"</DeepDive>\n\n--\n\n### Generating IDs for several related elements {/*generating-ids-for-several-related-elements*/}\n\nIf you need to give IDs to multiple related elements, you can call `useId` to generate a shared prefix for them:\n\n<Sandpack>\n\n```js\n\nimport { useId } from 'react';\n\nexport default function Form() {\n\nconst id = useId();\n\nreturn (\n\n<form>\n\n<label htmlFor={id + '-firstName'}>First Name:</label>\n\n<input id={id + '-firstName'} type=\"text\" />\n\n<hr />\n\n<label htmlFor={id + '-lastName'}>Last Name:</label>\n\n<input id={id + '-lastName'} type=\"text\" />\n\n</form>\n\n);\n\n}\n\n```\n\n```css\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>\n\nThis lets you avoid calling `useId` for every single element that needs a unique ID.\n\n--\n\n### Specifying a shared prefix for all generated IDs {/*specifying-a-shared-prefix-for-all-generated-ids*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2551":{"pageContent":"This lets you avoid calling `useId` for every single element that needs a unique ID.\n\n--\n\n### Specifying a shared prefix for all generated IDs {/*specifying-a-shared-prefix-for-all-generated-ids*/}\n\nIf you render multiple independent React applications on a single page, you may pass `identifierPrefix` as an option to your [`createRoot`](/reference/react-dom/client/createRoot#parameters) or [`hydrateRoot`](/reference/react-dom/client/hydrateRoot) calls. This ensures that the IDs generated by the two different apps never clash because every identifier generated with `useId` will start with the distinct prefix you've specified.\n\n<Sandpack>\n\n```html index.html\n\n<!DOCTYPE html>\n\n<html>\n\n<head><title>My app</title></head>\n\n<body>\n\n<div id=\"root1\"></div>\n\n<div id=\"root2\"></div>\n\n</body>\n\n</html>\n\n```\n\n```js\n\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\nconst passwordHintId = useId();\n\nconsole.log('Generated identifier:', passwordHintId)\n\nreturn (\n\n<>\n\n<label>\n\nPassword:\n\n<input\n\ntype=\"password\"","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2552":{"pageContent":"```\n\n```js\n\nimport { useId } from 'react';\n\nfunction PasswordField() {\n\nconst passwordHintId = useId();\n\nconsole.log('Generated identifier:', passwordHintId)\n\nreturn (\n\n<>\n\n<label>\n\nPassword:\n\n<input\n\ntype=\"password\"\n\naria-describedby={passwordHintId}\n\n/>\n\n</label>\n\n<p id={passwordHintId}>\n\nThe password should contain at least 18 characters\n\n</p>\n\n</>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<h2>Choose password</h2>\n\n<PasswordField />\n\n</>\n\n);\n\n}\n\n```\n\n```js index.js active\n\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App.js';\n\nimport './styles.css';\n\nconst root1 = createRoot(document.getElementById('root1'), {\n\nidentifierPrefix: 'my-first-app-'\n\n});\n\nroot1.render(<App />);\n\nconst root2 = createRoot(document.getElementById('root2'), {\n\nidentifierPrefix: 'my-second-app-'\n\n});\n\nroot2.render(<App />);\n\n```\n\n```css\n\n#root1 {\n\nborder: 5px solid blue;\n\npadding: 10px;\n\nmargin: 5px;\n\n}\n\n#root2 {\n\nborder: 5px solid green;\n\npadding: 10px;\n\nmargin: 5px;\n\n}\n\ninput { margin: 5px; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useId.md"}},"2553":{"pageContent":"--\n\ntitle: createContext\n\n--\n\n<Intro>\n\n`createContext` lets you create a [context](/learn/passing-data-deeply-with-context) that components can provide or read.\n\n```js\n\nconst SomeContext = createContext(defaultValue)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `createContext(defaultValue)` {/*createcontext*/}\n\nCall `createContext` outside of any components to create a context.\n\n```js\n\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`defaultValue`: The value that you want the context to have when there is no matching context provider in the tree above the component that reads context. If you don't have any meaningful default value, specify `null`. The default value is meant as a \"last resort\" fallback. It is static and never changes over time.\n\n#### Returns {/*returns*/}\n\n`createContext` returns a context object.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2554":{"pageContent":"#### Returns {/*returns*/}\n\n`createContext` returns a context object.\n\n*The context object itself does not hold any information.** It represents _which_ context other components can read or provide. Typically, you will use [`SomeContext.Provider`](#provider) in components above to specify the context value, and call [`useContext(SomeContext)`](/reference/react/useContext) in components below to read it. The context object has a few properties:\n\n`SomeContext.Provider` lets you provide the context value to components.\n\n`SomeContext.Consumer` is an alternative and rarely used way to read the context value.\n\n--\n\n### `SomeContext.Provider` {/*provider*/}\n\nWrap your components into a context provider to specify the value of this context for all components inside:\n\n```js\n\nfunction App() {\n\nconst [theme, setTheme] = useState('light');\n\n// ...\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<Page />\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n```\n\n#### Props {/*provider-props*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2555":{"pageContent":"```js\n\nfunction App() {\n\nconst [theme, setTheme] = useState('light');\n\n// ...\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<Page />\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n```\n\n#### Props {/*provider-props*/}\n\n`value`: The value that you want to pass to all the components reading this context inside this provider, no matter how deep. The context value can be of any type. A component calling [`useContext(SomeContext)`](/reference/react/useContext) inside of the provider receives the `value` of the innermost corresponding context provider above it.\n\n--\n\n### `SomeContext.Consumer` {/*consumer*/}\n\nBefore `useContext` existed, there was an older way to read context:\n\n```js\n\nfunction Button() {\n\n// 🟡 Legacy way (not recommended)\n\nreturn (\n\n<ThemeContext.Consumer>\n\n{theme => (\n\n<button className={theme} />\n\n)}\n\n</ThemeContext.Consumer>\n\n);\n\n}\n\n```\n\nAlthough this older way still works, but **newly written code should read context with [`useContext()`](/reference/react/useContext) instead:**\n\n```js\n\nfunction Button() {\n\n// ✅ Recommended way","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2556":{"pageContent":");\n\n}\n\n```\n\nAlthough this older way still works, but **newly written code should read context with [`useContext()`](/reference/react/useContext) instead:**\n\n```js\n\nfunction Button() {\n\n// ✅ Recommended way\n\nconst theme = useContext(ThemeContext);\n\nreturn <button className={theme} />;\n\n}\n\n```\n\n#### Props {/*consumer-props*/}\n\n`children`: A function. React will call the function you pass with the current context value determined by the same algorithm as [`useContext()`](/reference/react/useContext) does, and render the result you return from this function. React will also re-run this function and update the UI whenever the context passed from the parent components have changed.\n\n--\n\n## Usage {/*usage*/}\n\n### Creating context {/*creating-context*/}\n\nContext lets components [pass information deep down](/learn/passing-data-deeply-with-context) without explicitly passing props.\n\nCall `createContext` outside any components to create one or more contexts.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2557":{"pageContent":"Call `createContext` outside any components to create one or more contexts.\n\n```js [[1, 3, \"ThemeContext\"], [1, 4, \"AuthContext\"], [3, 3, \"'light'\"], [3, 4, \"null\"]]\n\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n\nconst AuthContext = createContext(null);\n\n```\n\n`createContext` returns a <CodeStep step={1}>context object</CodeStep>. Components can read context by passing it to [`useContext()`](/reference/react/useContext):\n\n```js [[1, 2, \"ThemeContext\"], [1, 7, \"AuthContext\"]]\n\nfunction Button() {\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n}\n\nfunction Profile() {\n\nconst currentUser = useContext(AuthContext);\n\n// ...\n\n}\n\n```\n\nBy default, the values they receive will be the <CodeStep step={3}>default values</CodeStep> you have specified when creating the contexts. However, by itself this isn't useful because the default values never change.\n\nContext is useful because you can **provide other, dynamic values from your components:**\n\n```js {8-9,11-12}\n\nfunction App() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2558":{"pageContent":"Context is useful because you can **provide other, dynamic values from your components:**\n\n```js {8-9,11-12}\n\nfunction App() {\n\nconst [theme, setTheme] = useState('dark');\n\nconst [currentUser, setCurrentUser] = useState({ name: 'Taylor' });\n\n// ...\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<AuthContext.Provider value={currentUser}>\n\n<Page />\n\n</AuthContext.Provider>\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n```\n\nNow the `Page` component and any components inside it, no matter how deep, will \"see\" the passed context values. If the passed context values change, React will re-render the components reading the context as well.\n\n[Read more about reading and providing context and see examples.](/reference/react/useContext)\n\n--\n\n### Importing and exporting context from a file {/*importing-and-exporting-context-from-a-file*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2559":{"pageContent":"[Read more about reading and providing context and see examples.](/reference/react/useContext)\n\n--\n\n### Importing and exporting context from a file {/*importing-and-exporting-context-from-a-file*/}\n\nOften, components in different files will need access to the same context. This is why it's common to declare contexts in a separate file. Then you can use the [`export` statement](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) to make context available for other files:\n\n```js {4-5}\n\n// Contexts.js\n\nimport { createContext } from 'react';\n\nexport const ThemeContext = createContext('light');\n\nexport const AuthContext = createContext(null);\n\n````\n\nComponents declared in other files can then use the [`import`](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/import) statement to read or provide this context:\n\n```js {2}\n\n// Button.js\n\nimport { ThemeContext } from './Contexts.js';\n\nfunction Button() {\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n}\n\n```\n\n```js {2}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2560":{"pageContent":"```js {2}\n\n// Button.js\n\nimport { ThemeContext } from './Contexts.js';\n\nfunction Button() {\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n}\n\n```\n\n```js {2}\n\n// App.js\n\nimport { ThemeContext, AuthContext } from './Contexts.js';\n\nfunction App() {\n\n// ...\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<AuthContext.Provider value={currentUser}>\n\n<Page />\n\n</AuthContext.Provider>\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n```\n\nThis works similar to [importing and exporting components.](/learn/importing-and-exporting-components)\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I can't find a way to change the context value {/*i-cant-find-a-way-to-change-the-context-value*/}\n\nCode like this specifies the *default* context value:\n\n```js\n\nconst ThemeContext = createContext('light');\n\n```\n\nThis value never changes. React only uses this value as a fallback if it can't find a matching provider above.\n\nTo make context change over time, [add state and wrap components in a context provider.](/reference/react/useContext#updating-data-passed-via-context)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/createContext.md"}},"2561":{"pageContent":"--\n\ntitle: useLayoutEffect\n\n--\n\n<Pitfall>\n\n`useLayoutEffect` can hurt performance. Prefer [`useEffect`](/reference/react/useEffect) when possible.\n\n</Pitfall>\n\n<Intro>\n\n`useLayoutEffect` is a version of [`useEffect`](/reference/react/useEffect) that fires before the browser repaints the screen.\n\n```js\n\nuseLayoutEffect(setup, dependencies?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useLayoutEffect(setup, dependencies?)` {/*useinsertioneffect*/}\n\nCall `useLayoutEffect` perform the layout measurements before the browser repaints the screen:\n\n```js\n\nimport { useState, useRef, useLayoutEffect } from 'react';\n\nfunction Tooltip() {\n\nconst ref = useRef(null);\n\nconst [tooltipHeight, setTooltipHeight] = useState(0);\n\nuseLayoutEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\n}, []);\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2562":{"pageContent":"useLayoutEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\n}, []);\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`setup`: The function with your Effect's logic. Your setup function may also optionally return a *cleanup* function. Before your component is first added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. Before your component is removed from the DOM, React will run your cleanup function one last time.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2563":{"pageContent":"**optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm. If you don't specify the dependencies at all, your Effect will re-run after every re-render of the component.\n\n#### Returns {/*returns*/}\n\n`useLayoutEffect` returns `undefined`.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2564":{"pageContent":"#### Returns {/*returns*/}\n\n`useLayoutEffect` returns `undefined`.\n\n#### Caveats {/*caveats*/}\n\n`useLayoutEffect` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.\n\nWhen Strict Mode is on, React will **run one extra development-only setup+cleanup cycle** before the first real setup. This is a stress-test that ensures that your cleanup logic \"mirrors\" your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem, [you need to implement the cleanup function.](/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2565":{"pageContent":"If some of your dependencies are objects or functions defined inside the component, there is a risk that they will **cause the Effect to re-run more often than needed.** To fix this, remove unnecessary [object](/reference/react/useEffect#removing-unnecessary-object-dependencies) and [function](/reference/react/useEffect#removing-unnecessary-function-dependencies) dependencies. You can also [extract state updates](/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect) and [non-reactive logic](/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect) outside of your Effect.\n\nEffects **only run on the client.** They don't run during server rendering.\n\nThe code inside `useLayoutEffect` and all state updates scheduled from it **block the browser from repainting the screen.** When used excessively, this can make your app very slow. When possible, prefer [`useEffect`.](/reference/reac/useEffect)\n\n--\n\n## Usage {/*usage*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2566":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Measuring layout before the browser repaints the screen {/*measuring-layout-before-the-browser-repaints-the-screen*/}\n\nMost components don't need to know their position and size on the screen to decide what to render. They only return some JSX with CSS. Then the browser calculates their *layout* (position and size) and repaints the screen.\n\nSometimes, that's not enough. Imagine a tooltip that appears next to some element on hover. If there's enough space, the tooltip should appear above the element, but if it doesn't fit, it should appear below. This means that in order to render the tooltip at the right final position, you need to know its height (i.e. whether it fits at the top).\n\nTo do this, you need to render in two passes:\n\n1. Render the tooltip anywhere (even with a wrong position).\n\n2. Measure its height and decide where to place the tooltip.\n\n3. Render the tooltip *again* in the correct place.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2567":{"pageContent":"1. Render the tooltip anywhere (even with a wrong position).\n\n2. Measure its height and decide where to place the tooltip.\n\n3. Render the tooltip *again* in the correct place.\n\n*All of this needs to happen before the browser repaints the screen.** You don't want the user to see the tooltip moving. Call `useLayoutEffect` to perform the layout measurements before the browser repaints the screen:\n\n```js {5-8}\n\nfunction Tooltip() {\n\nconst ref = useRef(null);\n\nconst [tooltipHeight, setTooltipHeight] = useState(0); // You don't know real height yet\n\nuseLayoutEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height); // Re-render now that you know the real height\n\n}, []);\n\n// ...use tooltipHeight in the rendering logic below...\n\n}\n\n```\n\nHere's how this works step by step:\n\n1. `Tooltip` renders with the initial `tooltipHeight = 0`  (so the tooltip may be wrongly positioned).\n\n2. React places it in the DOM and runs the code in `useLayoutEffect`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2568":{"pageContent":"1. `Tooltip` renders with the initial `tooltipHeight = 0`  (so the tooltip may be wrongly positioned).\n\n2. React places it in the DOM and runs the code in `useLayoutEffect`.\n\n3. Your `useLayoutEffect` [measures the height](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) of the tooltip content and triggers an immediate re-render.\n\n4. `Tooltip` renders again with the real `tooltipHeight` (so the tooltip is correctly positioned).\n\n5. React updates it in the DOM, and the browser finally displays the tooltip.\n\nHover over the buttons below and see how the tooltip adjusts its position depending on whether it fits:\n\n<Sandpack>\n\n```js\n\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>\n\nThis tooltip does not fit above the button.\n\n<br />\n\nThis is why it's displayed below instead!\n\n</div>\n\n}\n\n>\n\nHover over me (tooltip above)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2569":{"pageContent":"<div>\n\nThis tooltip does not fit above the button.\n\n<br />\n\nThis is why it's displayed below instead!\n\n</div>\n\n}\n\n>\n\nHover over me (tooltip above)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n</div>\n\n);\n\n}\n\n```\n\n```js ButtonWithTooltip.js\n\nimport { useState, useRef } from 'react';\n\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n\nconst [targetRect, setTargetRect] = useState(null);\n\nconst buttonRef = useRef(null);\n\nreturn (\n\n<>\n\n<button\n\n{...rest}\n\nref={buttonRef}\n\nonPointerEnter={() => {\n\nconst rect = buttonRef.current.getBoundingClientRect();\n\nsetTargetRect({\n\nleft: rect.left,\n\ntop: rect.top,\n\nright: rect.right,\n\nbottom: rect.bottom,\n\n});\n\n}}\n\nonPointerLeave={() => {\n\nsetTargetRect(null);\n\n}}\n\n/>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2570":{"pageContent":"const rect = buttonRef.current.getBoundingClientRect();\n\nsetTargetRect({\n\nleft: rect.left,\n\ntop: rect.top,\n\nright: rect.right,\n\nbottom: rect.bottom,\n\n});\n\n}}\n\nonPointerLeave={() => {\n\nsetTargetRect(null);\n\n}}\n\n/>\n\n{targetRect !== null && (\n\n<Tooltip targetRect={targetRect}>\n\n{tooltipContent}\n\n</Tooltip>\n\n)\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n```js Tooltip.js active\n\nimport { useRef, useLayoutEffect, useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n\nconst ref = useRef(null);\n\nconst [tooltipHeight, setTooltipHeight] = useState(0);\n\nuseLayoutEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\nconsole.log('Measured tooltip height: ' + height);\n\n}, []);\n\nlet tooltipX = 0;\n\nlet tooltipY = 0;\n\nif (targetRect !== null) {\n\ntooltipX = targetRect.left;\n\ntooltipY = targetRect.top - tooltipHeight;\n\nif (tooltipY < 0) {\n\n// It doesn't fit above, so place below.\n\ntooltipY = targetRect.bottom;\n\n}\n\n}\n\nreturn createPortal(","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2571":{"pageContent":"tooltipX = targetRect.left;\n\ntooltipY = targetRect.top - tooltipHeight;\n\nif (tooltipY < 0) {\n\n// It doesn't fit above, so place below.\n\ntooltipY = targetRect.bottom;\n\n}\n\n}\n\nreturn createPortal(\n\n<TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n\n{children}\n\n</TooltipContainer>,\n\ndocument.body\n\n);\n\n}\n\n```\n\n```js TooltipContainer.js\n\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n\nreturn (\n\n<div\n\nstyle={{\n\nposition: 'absolute',\n\npointerEvents: 'none',\n\nleft: 0,\n\ntop: 0,\n\ntransform: `translate3d(${x}px, ${y}px, 0)`\n\n}}\n\n>\n\n<div ref={contentRef} className=\"tooltip\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.tooltip {\n\ncolor: white;\n\nbackground: #222;\n\nborder-radius: 4px;\n\npadding: 4px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2572":{"pageContent":"}}\n\n>\n\n<div ref={contentRef} className=\"tooltip\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.tooltip {\n\ncolor: white;\n\nbackground: #222;\n\nborder-radius: 4px;\n\npadding: 4px;\n\n}\n\n```\n\n</Sandpack>\n\nNotice that even though the `Tooltip` component has to render in two passes (first, with `tooltipHeight` initialized to `0` and then with the real measured height), you only see the final result. This is why you need `useLayoutEffect` instead of [`useEffect`](/reference/react/useEffect) for this example. Let's look at the difference in detail below.\n\n<Recipes titleText=\"useLayoutEffect vs useEffect\" titleId=\"examples\">\n\n#### `useLayoutEffect` blocks the browser from repainting {/*uselayouteffect-blocks-the-browser-from-repainting*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2573":{"pageContent":"<Recipes titleText=\"useLayoutEffect vs useEffect\" titleId=\"examples\">\n\n#### `useLayoutEffect` blocks the browser from repainting {/*uselayouteffect-blocks-the-browser-from-repainting*/}\n\nReact guarantees that the code inside `useLayoutEffect` and any state updates scheduled inside it will be processed **before the browser repaints the screen.** This lets you render the tooltip, measure it, and re-render the tooltip again without the user noticing the first extra render. In other words, `useLayoutEffect` blocks the browser from painting.\n\n<Sandpack>\n\n```js\n\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>\n\nThis tooltip does not fit above the button.\n\n<br />\n\nThis is why it's displayed below instead!\n\n</div>\n\n}\n\n>\n\nHover over me (tooltip above)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2574":{"pageContent":"</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n</div>\n\n);\n\n}\n\n```\n\n```js ButtonWithTooltip.js\n\nimport { useState, useRef } from 'react';\n\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n\nconst [targetRect, setTargetRect] = useState(null);\n\nconst buttonRef = useRef(null);\n\nreturn (\n\n<>\n\n<button\n\n{...rest}\n\nref={buttonRef}\n\nonPointerEnter={() => {\n\nconst rect = buttonRef.current.getBoundingClientRect();\n\nsetTargetRect({\n\nleft: rect.left,\n\ntop: rect.top,\n\nright: rect.right,\n\nbottom: rect.bottom,\n\n});\n\n}}\n\nonPointerLeave={() => {\n\nsetTargetRect(null);\n\n}}\n\n/>\n\n{targetRect !== null && (\n\n<Tooltip targetRect={targetRect}>\n\n{tooltipContent}\n\n</Tooltip>\n\n)\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n```js Tooltip.js active","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2575":{"pageContent":"bottom: rect.bottom,\n\n});\n\n}}\n\nonPointerLeave={() => {\n\nsetTargetRect(null);\n\n}}\n\n/>\n\n{targetRect !== null && (\n\n<Tooltip targetRect={targetRect}>\n\n{tooltipContent}\n\n</Tooltip>\n\n)\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n```js Tooltip.js active\n\nimport { useRef, useLayoutEffect, useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n\nconst ref = useRef(null);\n\nconst [tooltipHeight, setTooltipHeight] = useState(0);\n\nuseLayoutEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\n}, []);\n\nlet tooltipX = 0;\n\nlet tooltipY = 0;\n\nif (targetRect !== null) {\n\ntooltipX = targetRect.left;\n\ntooltipY = targetRect.top - tooltipHeight;\n\nif (tooltipY < 0) {\n\n// It doesn't fit above, so place below.\n\ntooltipY = targetRect.bottom;\n\n}\n\n}\n\nreturn createPortal(\n\n<TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n\n{children}\n\n</TooltipContainer>,\n\ndocument.body\n\n);\n\n}\n\n```\n\n```js TooltipContainer.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2576":{"pageContent":"tooltipY = targetRect.bottom;\n\n}\n\n}\n\nreturn createPortal(\n\n<TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n\n{children}\n\n</TooltipContainer>,\n\ndocument.body\n\n);\n\n}\n\n```\n\n```js TooltipContainer.js\n\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n\nreturn (\n\n<div\n\nstyle={{\n\nposition: 'absolute',\n\npointerEvents: 'none',\n\nleft: 0,\n\ntop: 0,\n\ntransform: `translate3d(${x}px, ${y}px, 0)`\n\n}}\n\n>\n\n<div ref={contentRef} className=\"tooltip\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.tooltip {\n\ncolor: white;\n\nbackground: #222;\n\nborder-radius: 4px;\n\npadding: 4px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### `useEffect` does not block the browser {/*useeffect-does-not-block-the-browser*/}\n\nHere is the same example, but with [`useEffect`](/reference/react/useEffect) instead of `useLayoutEffect`. If you're on a slower device, you might notice that sometimes the tooltip \"flickers\" and you briefly see its initial position before the corrected position.\n\n<Sandpack>\n\n```js\n\nimport ButtonWithTooltip from './ButtonWithTooltip.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2577":{"pageContent":"<Sandpack>\n\n```js\n\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>\n\nThis tooltip does not fit above the button.\n\n<br />\n\nThis is why it's displayed below instead!\n\n</div>\n\n}\n\n>\n\nHover over me (tooltip above)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n</div>\n\n);\n\n}\n\n```\n\n```js ButtonWithTooltip.js\n\nimport { useState, useRef } from 'react';\n\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n\nconst [targetRect, setTargetRect] = useState(null);\n\nconst buttonRef = useRef(null);\n\nreturn (\n\n<>\n\n<button\n\n{...rest}\n\nref={buttonRef}\n\nonPointerEnter={() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2578":{"pageContent":"const [targetRect, setTargetRect] = useState(null);\n\nconst buttonRef = useRef(null);\n\nreturn (\n\n<>\n\n<button\n\n{...rest}\n\nref={buttonRef}\n\nonPointerEnter={() => {\n\nconst rect = buttonRef.current.getBoundingClientRect();\n\nsetTargetRect({\n\nleft: rect.left,\n\ntop: rect.top,\n\nright: rect.right,\n\nbottom: rect.bottom,\n\n});\n\n}}\n\nonPointerLeave={() => {\n\nsetTargetRect(null);\n\n}}\n\n/>\n\n{targetRect !== null && (\n\n<Tooltip targetRect={targetRect}>\n\n{tooltipContent}\n\n</Tooltip>\n\n)\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n```js Tooltip.js active\n\nimport { useRef, useEffect, useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n\nconst ref = useRef(null);\n\nconst [tooltipHeight, setTooltipHeight] = useState(0);\n\nuseEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\n}, []);\n\nlet tooltipX = 0;\n\nlet tooltipY = 0;\n\nif (targetRect !== null) {\n\ntooltipX = targetRect.left;\n\ntooltipY = targetRect.top - tooltipHeight;\n\nif (tooltipY < 0) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2579":{"pageContent":"setTooltipHeight(height);\n\n}, []);\n\nlet tooltipX = 0;\n\nlet tooltipY = 0;\n\nif (targetRect !== null) {\n\ntooltipX = targetRect.left;\n\ntooltipY = targetRect.top - tooltipHeight;\n\nif (tooltipY < 0) {\n\n// It doesn't fit above, so place below.\n\ntooltipY = targetRect.bottom;\n\n}\n\n}\n\nreturn createPortal(\n\n<TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n\n{children}\n\n</TooltipContainer>,\n\ndocument.body\n\n);\n\n}\n\n```\n\n```js TooltipContainer.js\n\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n\nreturn (\n\n<div\n\nstyle={{\n\nposition: 'absolute',\n\npointerEvents: 'none',\n\nleft: 0,\n\ntop: 0,\n\ntransform: `translate3d(${x}px, ${y}px, 0)`\n\n}}\n\n>\n\n<div ref={contentRef} className=\"tooltip\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.tooltip {\n\ncolor: white;\n\nbackground: #222;\n\nborder-radius: 4px;\n\npadding: 4px;\n\n}\n\n```\n\n</Sandpack>\n\nTo make the bug easier to reproduce, this version adds an artificial delay during rendering. React will let the browser paint the screen before it processes the state update inside `useEffect`. As a result, the tooltip flickers:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2580":{"pageContent":"<Sandpack>\n\n```js\n\nimport ButtonWithTooltip from './ButtonWithTooltip.js';\n\nexport default function App() {\n\nreturn (\n\n<div>\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>\n\nThis tooltip does not fit above the button.\n\n<br />\n\nThis is why it's displayed below instead!\n\n</div>\n\n}\n\n>\n\nHover over me (tooltip above)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n<div style={{ height: 50 }} />\n\n<ButtonWithTooltip\n\ntooltipContent={\n\n<div>This tooltip fits above the button</div>\n\n}\n\n>\n\nHover over me (tooltip below)\n\n</ButtonWithTooltip>\n\n</div>\n\n);\n\n}\n\n```\n\n```js ButtonWithTooltip.js\n\nimport { useState, useRef } from 'react';\n\nimport Tooltip from './Tooltip.js';\n\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\n\nconst [targetRect, setTargetRect] = useState(null);\n\nconst buttonRef = useRef(null);\n\nreturn (\n\n<>\n\n<button\n\n{...rest}\n\nref={buttonRef}\n\nonPointerEnter={() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2581":{"pageContent":"const [targetRect, setTargetRect] = useState(null);\n\nconst buttonRef = useRef(null);\n\nreturn (\n\n<>\n\n<button\n\n{...rest}\n\nref={buttonRef}\n\nonPointerEnter={() => {\n\nconst rect = buttonRef.current.getBoundingClientRect();\n\nsetTargetRect({\n\nleft: rect.left,\n\ntop: rect.top,\n\nright: rect.right,\n\nbottom: rect.bottom,\n\n});\n\n}}\n\nonPointerLeave={() => {\n\nsetTargetRect(null);\n\n}}\n\n/>\n\n{targetRect !== null && (\n\n<Tooltip targetRect={targetRect}>\n\n{tooltipContent}\n\n</Tooltip>\n\n)\n\n}\n\n</>\n\n);\n\n}\n\n```\n\n```js Tooltip.js active\n\nimport { useRef, useEffect, useState } from 'react';\n\nimport { createPortal } from 'react-dom';\n\nimport TooltipContainer from './TooltipContainer.js';\n\nexport default function Tooltip({ children, targetRect }) {\n\nconst ref = useRef(null);\n\nconst [tooltipHeight, setTooltipHeight] = useState(0);\n\n// This artificially slows down rendering\n\nlet now = performance.now();\n\nwhile (performance.now() - now < 100) {\n\n// Do nothing for a bit...\n\n}\n\nuseEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\n}, []);\n\nlet tooltipX = 0;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2582":{"pageContent":"while (performance.now() - now < 100) {\n\n// Do nothing for a bit...\n\n}\n\nuseEffect(() => {\n\nconst { height } = ref.current.getBoundingClientRect();\n\nsetTooltipHeight(height);\n\n}, []);\n\nlet tooltipX = 0;\n\nlet tooltipY = 0;\n\nif (targetRect !== null) {\n\ntooltipX = targetRect.left;\n\ntooltipY = targetRect.top - tooltipHeight;\n\nif (tooltipY < 0) {\n\n// It doesn't fit above, so place below.\n\ntooltipY = targetRect.bottom;\n\n}\n\n}\n\nreturn createPortal(\n\n<TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\n\n{children}\n\n</TooltipContainer>,\n\ndocument.body\n\n);\n\n}\n\n```\n\n```js TooltipContainer.js\n\nexport default function TooltipContainer({ children, x, y, contentRef }) {\n\nreturn (\n\n<div\n\nstyle={{\n\nposition: 'absolute',\n\npointerEvents: 'none',\n\nleft: 0,\n\ntop: 0,\n\ntransform: `translate3d(${x}px, ${y}px, 0)`\n\n}}\n\n>\n\n<div ref={contentRef} className=\"tooltip\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.tooltip {\n\ncolor: white;\n\nbackground: #222;\n\nborder-radius: 4px;\n\npadding: 4px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2583":{"pageContent":"}}\n\n>\n\n<div ref={contentRef} className=\"tooltip\">\n\n{children}\n\n</div>\n\n</div>\n\n);\n\n}\n\n```\n\n```css\n\n.tooltip {\n\ncolor: white;\n\nbackground: #222;\n\nborder-radius: 4px;\n\npadding: 4px;\n\n}\n\n```\n\n</Sandpack>\n\nEdit this example to `useLayoutEffect` and observe that it blocks the paint even if rendering is slowed down.\n\n<Solution />\n\n</Recipes>\n\n<Note>\n\nRendering in two passes and blocking the browser hurts performance. Try to avoid this when you can.\n\n</Note>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I'm getting an error: \"`useLayoutEffect` does nothing on the server\" {/*im-getting-an-error-uselayouteffect-does-nothing-on-the-server*/}\n\nThe purpose of `useLayoutEffect` is to let your component [use layout information for rendering:](#measuring-layout-before-the-browser-repaints-the-screen)\n\n1. Render the initial content.\n\n2. Measure the layout *before the browser repaints the screen.*\n\n3. Render the final content using the layout information you've read.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2584":{"pageContent":"1. Render the initial content.\n\n2. Measure the layout *before the browser repaints the screen.*\n\n3. Render the final content using the layout information you've read.\n\nWhen you or your framework uses [server rendering](/reference/react-dom/server), your React app renders to HTML on the server for the initial render. This lets you show the initial HTML before the JavaScript code loads.\n\nThe problem is that on the server, there is no layout information.\n\nIn the [earlier example](#measuring-layout-before-the-browser-repaints-the-screen), the `useLayoutEffect` call in the `Tooltip` component lets it position itself correctly (either above or below content) depending on the content height. If you tried to render `Tooltip` as a part of the initial server HTML, this would be impossible to determine. On the server, there is no browser and no layout! So, even if you rendered it on the server, its position would \"jump\" on the client after the JavaScript loads and runs.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2585":{"pageContent":"Usually, components that rely on layout information don't need to render on the server anyway. For example, it probably doesn't make sense to show a `Tooltip` during the initial render. It is triggered by a client interaction.\n\nHowever, if you're running into this problem, you have a few options:\n\n1. You can replace `useLayoutEffect` with [`useEffect`.](/reference/react/useEffect) This tells React that it's okay to display the initial render result without blocking the paint (because the original HTML will become visible before your Effect runs).\n\n2. You can [mark your component as client-only.](/reference/react/Suspense#providing-a-fallback-for-server-errors-and-server-only-content) This tells React to replace its content up to the closest [`<Suspense>`](/reference/react/Suspense) boundary with a loading fallback (for example, a spinner or a glimmer) during server rendering.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2586":{"pageContent":"3. You can display different components on the server and on the client. One way to do this is to keep a boolean `isMounted` state that's initialized to `false`, and set it to `true` inside a `useEffect` call. Your rendering logic can then be like `return isMounted ? <RealContent /> : <FallbackContent />`. On the server and during the hydration, the user will see `FallbackContent` which should not call `useLayoutEffect`. Then React will replace it with `RealContent` which runs on the client only and can include `useLayoutEffect` calls.\n\n4. If you synchronize your component with an external data store and rely on `useLayoutEffect` for different reasons than measuring layout, consider [`useSyncExternalStore`](/reference/react/useSyncExternalStore) instead which [supports server rendering.](/reference/react/useSyncExternalStore#adding-support-for-server-rendering)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useLayoutEffect.md"}},"2587":{"pageContent":"--\n\ntitle: useTransition\n\n--\n\n<Intro>\n\n`useTransition` is a React Hook that lets you update the state without blocking the UI.\n\n```js\n\nconst [isPending, startTransition] = useTransition()\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useTransition()` {/*usetransition*/}\n\nCall `useTransition` at the top level of your component to mark some state updates as transitions.\n\n```js\n\nimport { useTransition } from 'react';\n\nfunction TabContainer() {\n\nconst [isPending, startTransition] = useTransition();\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`useTransition` does not take any parameters.\n\n#### Returns {/*returns*/}\n\n`useTransition` returns an array with exactly two items:\n\n1. The `isPending` flag that tells you whether there is a pending transition.\n\n2. The [`startTransition` function](#starttransition) that lets you mark a state update as a transition.\n\n--\n\n### `startTransition` function {/*starttransition*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2588":{"pageContent":"2. The [`startTransition` function](#starttransition) that lets you mark a state update as a transition.\n\n--\n\n### `startTransition` function {/*starttransition*/}\n\nThe `startTransition` function returned by `useTransition` lets you mark a state update as a transition.\n\n```js {6,8}\n\nfunction TabContainer() {\n\nconst [isPending, startTransition] = useTransition();\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```\n\n#### Parameters {/*starttransition-parameters*/}\n\n`scope`: A function that updates some state by calling one or more [`set` functions.](/reference/react/useState#setstate) React immediately calls `scope` with no parameters and marks all state updates scheduled synchronously during the `scope` function call as transitions. They will be [non-blocking](#marking-a-state-update-as-a-non-blocking-transition) and [will not display unwanted loading indicators.](#preventing-unwanted-loading-indicators)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2589":{"pageContent":"#### Returns {/*starttransition-returns*/}\n\n`startTransition` does not return anything.\n\n#### Caveats {/*starttransition-caveats*/}\n\n`useTransition` is a Hook, so it can only be called inside components or custom Hooks. If you need to start a transition somewhere else (for example, from a data library), call the standalone [`startTransition`](/reference/react/startTransition) instead.\n\nYou can wrap an update into a transition only if you have access to the `set` function of that state. If you want to start a transition in response to some prop or a custom Hook return value, try [`useDeferredValue`](/reference/react/useDeferredValue) instead.\n\nThe function you pass to `startTransition` must be synchronous. React immediately executes this function, marking all state updates that happen while it executes as transitions. If you try to perform more state updates later (for example, in a timeout), they won't be marked as transitions.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2590":{"pageContent":"A state update marked as a transition will be interrupted by other state updates. For example, if you update a chart component inside a transition, but then start typing into an input while the chart is in the middle of a re-render, React will restart the rendering work on the chart component after handling the input state update.\n\nTransition updates can't be used to control text inputs.\n\nIf there are multiple ongoing transitions, React currently batches them together. This is a limitation that will likely be removed in a future release.\n\n--\n\n## Usage {/*usage*/}\n\n### Marking a state update as a non-blocking transition {/*marking-a-state-update-as-a-non-blocking-transition*/}\n\nCall `useTransition` at the top level of your component to mark some state updates as non-blocking *transitions*.\n\n```js [[1, 4, \"isPending\"], [2, 4, \"startTransition\"]]\n\nimport { useState, useTransition } from 'react';\n\nfunction TabContainer() {\n\nconst [isPending, startTransition] = useTransition();\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2591":{"pageContent":"```js [[1, 4, \"isPending\"], [2, 4, \"startTransition\"]]\n\nimport { useState, useTransition } from 'react';\n\nfunction TabContainer() {\n\nconst [isPending, startTransition] = useTransition();\n\n// ...\n\n}\n\n```\n\n`useTransition` returns an array with exactly two items:\n\n1. The <CodeStep step={1}>`isPending` flag</CodeStep> that tells you whether there is a pending transition.\n\n2. The <CodeStep step={2}>`startTransition` function</CodeStep> that lets you mark a state update as a transition.\n\nYou can then mark a state update as a transition like this:\n\n```js {6,8}\n\nfunction TabContainer() {\n\nconst [isPending, startTransition] = useTransition();\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```\n\nTransitions let you keep the user interface updates responsive even on slow devices.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2592":{"pageContent":"function selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\n// ...\n\n}\n\n```\n\nTransitions let you keep the user interface updates responsive even on slow devices.\n\nWith a transition, your UI stays responsive in the middle of a re-render. For example, if the user clicks a tab but then change their mind and click another tab, they can do that without waiting for the first re-render to finish.\n\n<Recipes titleText=\"The difference between useTransition and regular state updates\" titleId=\"examples\">\n\n#### Updating the current tab in a transition {/*updating-the-current-tab-in-a-transition*/}\n\nIn this example, the \"Posts\" tab is **artificially slowed down** so that it takes at least a second to render.\n\nClick \"Posts\" and then immediately click \"Contact\". Notice that this interrupts the slow render of \"Posts\". The \"Contact\" tab shows immediately. Because this state update is marked as a transition, a slow re-render did not freeze the user interface.\n\n<Sandpack>\n\n```js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2593":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState, useTransition } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [isPending, startTransition] = useTransition();\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nstartTransition(() => {\n\nsetTab(nextTab);\n\n});\n\n}\n\nreturn (\n\n<>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => selectTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => selectTab('posts')}\n\n>\n\nPosts (slow)\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'contact'}\n\nonClick={() => selectTab('contact')}\n\n>\n\nContact\n\n</TabButton>\n\n<hr />\n\n{tab === 'about' && <AboutTab />}\n\n{tab === 'posts' && <PostsTab />}\n\n{tab === 'contact' && <ContactTab />}\n\n</>\n\n);\n\n}\n\n```\n\n```js TabButton.js\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2594":{"pageContent":"</>\n\n);\n\n}\n\n```\n\n```js TabButton.js\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n)\n\n}\n\n```\n\n```js AboutTab.js\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js\n\nimport { memo } from 'react';\n\nconst PostsTab = memo(function PostsTab() {\n\n// Log once. The actual slowdown is inside SlowPost.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\n\nlet items = [];\n\nfor (let i = 0; i < 500; i++) {\n\nitems.push(<SlowPost key={i} index={i} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowPost({ index }) {\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 1) {\n\n// Do nothing for 1 ms per item to emulate extremely slow code\n\n}\n\nreturn (\n\n<li className=\"item\">\n\nPost #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2595":{"pageContent":"}\n\nreturn (\n\n<li className=\"item\">\n\nPost #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Updating the current tab without a transition {/*updating-the-current-tab-without-a-transition*/}\n\nIn this example, the \"Posts\" tab is also **artificially slowed down** so that it takes at least a second to render. Unlike in the previous example, this state update is **not a transition.**\n\nClick \"Posts\" and then immediately click \"Contact\". Notice that the app freezes while rendering the slowed down tab, and the UI becomes unresponsive. This state update is not a transition, so a slow re-render freezed the user interface.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport TabButton from './TabButton.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2596":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nfunction selectTab(nextTab) {\n\nsetTab(nextTab);\n\n}\n\nreturn (\n\n<>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => selectTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => selectTab('posts')}\n\n>\n\nPosts (slow)\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'contact'}\n\nonClick={() => selectTab('contact')}\n\n>\n\nContact\n\n</TabButton>\n\n<hr />\n\n{tab === 'about' && <AboutTab />}\n\n{tab === 'posts' && <PostsTab />}\n\n{tab === 'contact' && <ContactTab />}\n\n</>\n\n);\n\n}\n\n```\n\n```js TabButton.js\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n)\n\n}\n\n```\n\n```js AboutTab.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2597":{"pageContent":"export default function TabButton({ children, isActive, onClick }) {\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n)\n\n}\n\n```\n\n```js AboutTab.js\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js\n\nimport { memo } from 'react';\n\nconst PostsTab = memo(function PostsTab() {\n\n// Log once. The actual slowdown is inside SlowPost.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\n\nlet items = [];\n\nfor (let i = 0; i < 500; i++) {\n\nitems.push(<SlowPost key={i} index={i} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowPost({ index }) {\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 1) {\n\n// Do nothing for 1 ms per item to emulate extremely slow code\n\n}\n\nreturn (\n\n<li className=\"item\">\n\nPost #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2598":{"pageContent":"Post #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Updating the parent component in a transition {/*updating-the-parent-component-in-a-transition*/}\n\nThe `useTransition` call does not have to be in the same component whose state you're updating. You can also move it into a child component. For example, this `TabButton` component wraps its `onClick` logic in a transition:\n\n```js {8-10}\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nconst [isPending, startTransition] = useTransition();\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nstartTransition(() => {\n\nonClick();\n\n});\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2599":{"pageContent":"const [isPending, startTransition] = useTransition();\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nstartTransition(() => {\n\nonClick();\n\n});\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\nBecause the parent component updates its state inside the `onClick` event handler, that state update gets marked as a transition. This is why, like in the earlier example, you can click on \"Posts\" and then immediately click \"Contact\". Updating the selected tab is marked as a transition, so it does not block further user interactions.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nreturn (\n\n<>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => setTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => setTab('posts')}\n\n>\n\nPosts (slow)\n\n</TabButton>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2600":{"pageContent":"return (\n\n<>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => setTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => setTab('posts')}\n\n>\n\nPosts (slow)\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'contact'}\n\nonClick={() => setTab('contact')}\n\n>\n\nContact\n\n</TabButton>\n\n<hr />\n\n{tab === 'about' && <AboutTab />}\n\n{tab === 'posts' && <PostsTab />}\n\n{tab === 'contact' && <ContactTab />}\n\n</>\n\n);\n\n}\n\n```\n\n```js TabButton.js active\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nconst [isPending, startTransition] = useTransition();\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nstartTransition(() => {\n\nonClick();\n\n});\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```js AboutTab.js\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js\n\nimport { memo } from 'react';\n\nconst PostsTab = memo(function PostsTab() {\n\n// Log once. The actual slowdown is inside SlowPost.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2601":{"pageContent":"return (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js\n\nimport { memo } from 'react';\n\nconst PostsTab = memo(function PostsTab() {\n\n// Log once. The actual slowdown is inside SlowPost.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\n\nlet items = [];\n\nfor (let i = 0; i < 500; i++) {\n\nitems.push(<SlowPost key={i} index={i} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowPost({ index }) {\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 1) {\n\n// Do nothing for 1 ms per item to emulate extremely slow code\n\n}\n\nreturn (\n\n<li className=\"item\">\n\nPost #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n```\n\n</Sandpack>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2602":{"pageContent":"<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Displaying a pending visual state during the transition {/*displaying-a-pending-visual-state-during-the-transition*/}\n\nYou can use the `isPending` boolean value returned by `useTransition` to indicate to the user that a transition is in progress. For example, the tab button can have a special \"pending\" visual state:\n\n```js {4-6}\n\nfunction TabButton({ children, isActive, onClick }) {\n\nconst [isPending, startTransition] = useTransition();\n\n// ...\n\nif (isPending) {\n\nreturn <b className=\"pending\">{children}</b>;\n\n}\n\n// ...\n\n```\n\nNotice how clicking \"Posts\" now feels more responsive because the tab button itself updates right away:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2603":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nreturn (\n\n<>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => setTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => setTab('posts')}\n\n>\n\nPosts (slow)\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'contact'}\n\nonClick={() => setTab('contact')}\n\n>\n\nContact\n\n</TabButton>\n\n<hr />\n\n{tab === 'about' && <AboutTab />}\n\n{tab === 'posts' && <PostsTab />}\n\n{tab === 'contact' && <ContactTab />}\n\n</>\n\n);\n\n}\n\n```\n\n```js TabButton.js active\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nconst [isPending, startTransition] = useTransition();\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nif (isPending) {\n\nreturn <b className=\"pending\">{children}</b>;\n\n}\n\nreturn (\n\n<button onClick={() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2604":{"pageContent":"const [isPending, startTransition] = useTransition();\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nif (isPending) {\n\nreturn <b className=\"pending\">{children}</b>;\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nstartTransition(() => {\n\nonClick();\n\n});\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```js AboutTab.js\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js\n\nimport { memo } from 'react';\n\nconst PostsTab = memo(function PostsTab() {\n\n// Log once. The actual slowdown is inside SlowPost.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 500 <SlowPost />');\n\nlet items = [];\n\nfor (let i = 0; i < 500; i++) {\n\nitems.push(<SlowPost key={i} index={i} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowPost({ index }) {\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 1) {\n\n// Do nothing for 1 ms per item to emulate extremely slow code\n\n}\n\nreturn (\n\n<li className=\"item\">\n\nPost #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2605":{"pageContent":"}\n\nreturn (\n\n<li className=\"item\">\n\nPost #{index + 1}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n```\n\n```js ContactTab.js\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n.pending { color: #777; }\n\n```\n\n</Sandpack>\n\n--\n\n### Preventing unwanted loading indicators {/*preventing-unwanted-loading-indicators*/}\n\nIn this example, the `PostsTab` component fetches some data using a [Suspense-enabled](/reference/react/Suspense) data source. When you click the \"Posts\" tab, the `PostsTab` component *suspends*, causing the closest loading fallback to be displayed:\n\n<Sandpack>\n\n```js\n\nimport { Suspense, useState } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [tab, setTab] = useState('about');","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2606":{"pageContent":"import AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nreturn (\n\n<Suspense fallback={<h1>🌀 Loading...</h1>}>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => setTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => setTab('posts')}\n\n>\n\nPosts\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'contact'}\n\nonClick={() => setTab('contact')}\n\n>\n\nContact\n\n</TabButton>\n\n<hr />\n\n{tab === 'about' && <AboutTab />}\n\n{tab === 'posts' && <PostsTab />}\n\n{tab === 'contact' && <ContactTab />}\n\n</Suspense>\n\n);\n\n}\n\n```\n\n```js TabButton.js\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nonClick();\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```js AboutTab.js hidden\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js hidden\n\nimport { fetchData } from './data.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2607":{"pageContent":"}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```js AboutTab.js hidden\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nfunction PostsTab() {\n\nconst posts = use(fetchData('/posts'));\n\nreturn (\n\n<ul className=\"items\">\n\n{posts.map(post =>\n\n<Post key={post.id} title={post.title} />\n\n)}\n\n</ul>\n\n);\n\n}\n\nfunction Post({ title }) {\n\nreturn (\n\n<li className=\"item\">\n\n{title}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2608":{"pageContent":"function use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js ContactTab.js hidden\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/posts')) {\n\nreturn await getPosts();\n\n} else {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2609":{"pageContent":"export function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/posts')) {\n\nreturn await getPosts();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getPosts() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 1000);\n\n});\n\nlet posts = [];\n\nfor (let i = 0; i < 500; i++) {\n\nposts.push({\n\nid: i,\n\ntitle: 'Post #' + (i + 1)\n\n});\n\n}\n\nreturn posts;\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n.pending { color: #777; }\n\n```\n\n</Sandpack>\n\nHiding the entire tab container to show a loading indicator leads to a jarring user experience. If you add `useTransition` to `TabButton`, you can instead indicate display the pending state in the tab button instead.\n\nNotice that clicking \"Posts\" no longer replaces the entire tab container with a spinner:\n\n<Sandpack>\n\n```js\n\nimport { Suspense, useState } from 'react';\n\nimport TabButton from './TabButton.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2610":{"pageContent":"Notice that clicking \"Posts\" no longer replaces the entire tab container with a spinner:\n\n<Sandpack>\n\n```js\n\nimport { Suspense, useState } from 'react';\n\nimport TabButton from './TabButton.js';\n\nimport AboutTab from './AboutTab.js';\n\nimport PostsTab from './PostsTab.js';\n\nimport ContactTab from './ContactTab.js';\n\nexport default function TabContainer() {\n\nconst [tab, setTab] = useState('about');\n\nreturn (\n\n<Suspense fallback={<h1>🌀 Loading...</h1>}>\n\n<TabButton\n\nisActive={tab === 'about'}\n\nonClick={() => setTab('about')}\n\n>\n\nAbout\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'posts'}\n\nonClick={() => setTab('posts')}\n\n>\n\nPosts\n\n</TabButton>\n\n<TabButton\n\nisActive={tab === 'contact'}\n\nonClick={() => setTab('contact')}\n\n>\n\nContact\n\n</TabButton>\n\n<hr />\n\n{tab === 'about' && <AboutTab />}\n\n{tab === 'posts' && <PostsTab />}\n\n{tab === 'contact' && <ContactTab />}\n\n</Suspense>\n\n);\n\n}\n\n```\n\n```js TabButton.js active\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2611":{"pageContent":"{tab === 'contact' && <ContactTab />}\n\n</Suspense>\n\n);\n\n}\n\n```\n\n```js TabButton.js active\n\nimport { useTransition } from 'react';\n\nexport default function TabButton({ children, isActive, onClick }) {\n\nconst [isPending, startTransition] = useTransition();\n\nif (isActive) {\n\nreturn <b>{children}</b>\n\n}\n\nif (isPending) {\n\nreturn <b className=\"pending\">{children}</b>;\n\n}\n\nreturn (\n\n<button onClick={() => {\n\nstartTransition(() => {\n\nonClick();\n\n});\n\n}}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```js AboutTab.js hidden\n\nexport default function AboutTab() {\n\nreturn (\n\n<p>Welcome to my profile!</p>\n\n);\n\n}\n\n```\n\n```js PostsTab.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nfunction PostsTab() {\n\nconst posts = use(fetchData('/posts'));\n\nreturn (\n\n<ul className=\"items\">\n\n{posts.map(post =>\n\n<Post key={post.id} title={post.title} />\n\n)}\n\n</ul>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2612":{"pageContent":"function PostsTab() {\n\nconst posts = use(fetchData('/posts'));\n\nreturn (\n\n<ul className=\"items\">\n\n{posts.map(post =>\n\n<Post key={post.id} title={post.title} />\n\n)}\n\n</ul>\n\n);\n\n}\n\nfunction Post({ title }) {\n\nreturn (\n\n<li className=\"item\">\n\n{title}\n\n</li>\n\n);\n\n}\n\nexport default PostsTab;\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js ContactTab.js hidden\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js hidden","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2613":{"pageContent":"}\n\n}\n\n```\n\n```js ContactTab.js hidden\n\nexport default function ContactTab() {\n\nreturn (\n\n<>\n\n<p>\n\nYou can find me online here:\n\n</p>\n\n<ul>\n\n<li>admin@mysite.com</li>\n\n<li>+123456789</li>\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/posts')) {\n\nreturn await getPosts();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getPosts() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 1000);\n\n});\n\nlet posts = [];\n\nfor (let i = 0; i < 500; i++) {\n\nposts.push({\n\nid: i,\n\ntitle: 'Post #' + (i + 1)\n\n});\n\n}\n\nreturn posts;\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n.pending { color: #777; }\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2614":{"pageContent":"posts.push({\n\nid: i,\n\ntitle: 'Post #' + (i + 1)\n\n});\n\n}\n\nreturn posts;\n\n}\n\n```\n\n```css\n\nbutton { margin-right: 10px }\n\nb { display: inline-block; margin-right: 10px; }\n\n.pending { color: #777; }\n\n```\n\n</Sandpack>\n\n[Read more about using transitions with Suspense.](/reference/react/Suspense#preventing-already-revealed-content-from-hiding)\n\n<Note>\n\nTransitions will only \"wait\" long enough to avoid hiding *already revealed* content (like the tab container). For example, if the Posts tab had a [nested `<Suspense>` boundary,](/reference/react/Suspense#revealing-nested-content-as-it-loads) the transition would not \"wait\" for it.\n\n</Note>\n\n--\n\n### Building a Suspense-enabled router {/*building-a-suspense-enabled-router*/}\n\nIf you're building your own React framework or a router, we recommend to mark page navigations as transitions.\n\n```js {3,6,8}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nconst [isPending, startTransition] = useTransition();\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2615":{"pageContent":"```js {3,6,8}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nconst [isPending, startTransition] = useTransition();\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\n// ...\n\n```\n\nThis is recommended for two reasons:\n\n[Transitions are interruptible,](#marking-a-state-update-as-a-non-blocking-transition) which lets the user click away without waiting for the re-render to complete.\n\n[Transitions prevent unwanted loading indicators,](#preventing-unwanted-loading-indicators) which lets the user avoid jarring jumps on navigation.\n\nHere is a tiny simplified router example using transitions for navigations.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useTransition } from 'react';\n\nimport IndexPage from './IndexPage.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2616":{"pageContent":"\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useTransition } from 'react';\n\nimport IndexPage from './IndexPage.js';\n\nimport ArtistPage from './ArtistPage.js';\n\nimport Layout from './Layout.js';\n\nexport default function App() {\n\nreturn (\n\n<Suspense fallback={<BigSpinner />}>\n\n<Router />\n\n</Suspense>\n\n);\n\n}\n\nfunction Router() {\n\nconst [page, setPage] = useState('/');\n\nconst [isPending, startTransition] = useTransition();\n\nfunction navigate(url) {\n\nstartTransition(() => {\n\nsetPage(url);\n\n});\n\n}\n\nlet content;\n\nif (page === '/') {\n\ncontent = (\n\n<IndexPage navigate={navigate} />\n\n);\n\n} else if (page === '/the-beatles') {\n\ncontent = (\n\n<ArtistPage\n\nartist={{\n\nid: 'the-beatles',\n\nname: 'The Beatles',\n\n}}\n\n/>\n\n);\n\n}\n\nreturn (\n\n<Layout isPending={isPending}>\n\n{content}\n\n</Layout>\n\n);\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Layout.js\n\nexport default function Layout({ children, isPending }) {\n\nreturn (\n\n<div className=\"layout\">\n\n<section className=\"header\" style={{","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2617":{"pageContent":");\n\n}\n\nfunction BigSpinner() {\n\nreturn <h2>🌀 Loading...</h2>;\n\n}\n\n```\n\n```js Layout.js\n\nexport default function Layout({ children, isPending }) {\n\nreturn (\n\n<div className=\"layout\">\n\n<section className=\"header\" style={{\n\nopacity: isPending ? 0.7 : 1\n\n}}>\n\nMusic Browser\n\n</section>\n\n<main>\n\n{children}\n\n</main>\n\n</div>\n\n);\n\n}\n\n```\n\n```js IndexPage.js\n\nexport default function IndexPage({ navigate }) {\n\nreturn (\n\n<button onClick={() => navigate('/the-beatles')}>\n\nOpen The Beatles artist page\n\n</button>\n\n);\n\n}\n\n```\n\n```js ArtistPage.js\n\nimport { Suspense } from 'react';\n\nimport Albums from './Albums.js';\n\nimport Biography from './Biography.js';\n\nimport Panel from './Panel.js';\n\nexport default function ArtistPage({ artist }) {\n\nreturn (\n\n<>\n\n<h1>{artist.name}</h1>\n\n<Biography artistId={artist.id} />\n\n<Suspense fallback={<AlbumsGlimmer />}>\n\n<Panel>\n\n<Albums artistId={artist.id} />\n\n</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2618":{"pageContent":"</Panel>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\nfunction AlbumsGlimmer() {\n\nreturn (\n\n<div className=\"glimmer-panel\">\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n<div className=\"glimmer-line\" />\n\n</div>\n\n);\n\n}\n\n```\n\n```js Albums.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Albums({ artistId }) {\n\nconst albums = use(fetchData(`/${artistId}/albums`));\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2619":{"pageContent":"function use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Biography.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function Biography({ artistId }) {\n\nconst bio = use(fetchData(`/${artistId}/bio`));\n\nreturn (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2620":{"pageContent":"return (\n\n<section>\n\n<p className=\"bio\">{bio}</p>\n\n</section>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js Panel.js hidden\n\nexport default function Panel({ children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n{children}\n\n</section>\n\n);\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2621":{"pageContent":"// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url === '/the-beatles/albums') {\n\nreturn await getAlbums();\n\n} else if (url === '/the-beatles/bio') {\n\nreturn await getBio();\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getBio() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nreturn `The Beatles were an English rock band,\n\nformed in Liverpool in 1960, that comprised\n\nJohn Lennon, Paul McCartney, George Harrison\n\nand Ringo Starr.`;\n\n}\n\nasync function getAlbums() {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 3000);\n\n});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2622":{"pageContent":"});\n\nreturn [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\n}\n\n```\n\n```css\n\nmain {\n\nmin-height: 200px;\n\npadding: 10px;\n\n}\n\n.layout {\n\nborder: 1px solid black;\n\n}\n\n.header {\n\nbackground: #222;\n\npadding: 10px;\n\ntext-align: center;\n\ncolor: white;\n\n}\n\n.bio { font-style: italic; }\n\n.panel {\n\nborder: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2623":{"pageContent":"border: 1px solid #aaa;\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-panel {\n\nborder: 1px dashed #aaa;\n\nbackground: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\n\nborder-radius: 6px;\n\nmargin-top: 20px;\n\npadding: 10px;\n\n}\n\n.glimmer-line {\n\ndisplay: block;\n\nwidth: 60%;\n\nheight: 20px;\n\nmargin: 10px;\n\nborder-radius: 4px;\n\nbackground: #f0f0f0;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\n[Suspense-enabled](/reference/react/Suspense) routers are expected to wrap the navigation updates into transitions by default.\n\n</Note>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### Updating an input in a transition doesn't work {/*updating-an-input-in-a-transition-doesnt-work*/}\n\nYou can't use a transition for a state variable that controls an input:\n\n```js {4,10}\n\nconst [text, setText] = useState('');\n\n// ...\n\nfunction handleChange(e) {\n\n// ❌ Can't use transitions for controlled input state\n\nstartTransition(() => {\n\nsetText(e.target.value);\n\n});\n\n}\n\n// ...\n\nreturn <input value={text} onChange={handleChange} />;\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2624":{"pageContent":"// ...\n\nfunction handleChange(e) {\n\n// ❌ Can't use transitions for controlled input state\n\nstartTransition(() => {\n\nsetText(e.target.value);\n\n});\n\n}\n\n// ...\n\nreturn <input value={text} onChange={handleChange} />;\n\n```\n\nThis is because transitions are non-blocking, but updating an input in response to the change event should happen synchronously. If you want to run a transition in response to typing, you have two options:\n\n1. You can declare two separate state variables: one for the input state (which always updates synchronously), and one that you will update in a transition. This lets you control the input using the synchronous state, and pass the transition state variable (which will \"lag behind\" the input) to the rest of your rendering logic.\n\n2. Alternatively, you can have one state variable, and add [`useDeferredValue`](/reference/react/useDeferredValue) which will \"lag behind\" the real value. It will trigger non-blocking re-renders to \"catch up\" with the new value automatically.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2625":{"pageContent":"--\n\n### React doesn't treat my state update as a transition {/*react-doesnt-treat-my-state-update-as-a-transition*/}\n\nWhen you wrap a state update in a transition, make sure that it happens *during* the `startTransition` call:\n\n```js\n\nstartTransition(() => {\n\n// ✅ Setting state *during* startTransition call\n\nsetPage('/about');\n\n});\n\n```\n\nThe function you pass to `startTransition` must be synchronous.\n\nYou can't mark an update as a transition like this:\n\n```js\n\nstartTransition(() => {\n\n// ❌ Setting state *after* startTransition call\n\nsetTimeout(() => {\n\nsetPage('/about');\n\n}, 1000);\n\n});\n\n```\n\nInstead, you could do this:\n\n```js\n\nsetTimeout(() => {\n\nstartTransition(() => {\n\n// ✅ Setting state *during* startTransition call\n\nsetPage('/about');\n\n});\n\n}, 1000);\n\n```\n\nSimilarly, you can't mark an update as a transition like this:\n\n```js\n\nstartTransition(async () => {\n\nawait someAsyncFunction();\n\n// ❌ Setting state *after* startTransition call\n\nsetPage('/about');\n\n});\n\n```\n\nHowever, this works instead:\n\n```js\n\nawait someAsyncFunction();\n\nstartTransition(() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2626":{"pageContent":"await someAsyncFunction();\n\n// ❌ Setting state *after* startTransition call\n\nsetPage('/about');\n\n});\n\n```\n\nHowever, this works instead:\n\n```js\n\nawait someAsyncFunction();\n\nstartTransition(() => {\n\n// ✅ Setting state *during* startTransition call\n\nsetPage('/about');\n\n});\n\n```\n\n--\n\n### I want to call `useTransition` from outside a component {/*i-want-to-call-usetransition-from-outside-a-component*/}\n\nYou can't call `useTransition` outside a component because it's a Hook. In this case, use the standalone [`startTransition`](/reference/react/startTransition) method instead. It works the same way, but it doesn't provide the `isPending` indicator.\n\n--\n\n### The function I pass to `startTransition` executes immediately {/*the-function-i-pass-to-starttransition-executes-immediately*/}\n\nIf you run this code, it will print 1, 2, 3:\n\n```js {1,3,6}\n\nconsole.log(1);\n\nstartTransition(() => {\n\nconsole.log(2);\n\nsetPage('/about');\n\n});\n\nconsole.log(3);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2627":{"pageContent":"If you run this code, it will print 1, 2, 3:\n\n```js {1,3,6}\n\nconsole.log(1);\n\nstartTransition(() => {\n\nconsole.log(2);\n\nsetPage('/about');\n\n});\n\nconsole.log(3);\n\n```\n\n*It is expected to print 1, 2, 3.** The function you pass to `startTransition` does not get delayed. Unlike with the browser `setTimeout`, it does not run the callback later. React executes your function immediately, but any state updates scheduled *while it is running* will get marked as transitions. You can imagine that it works like this:\n\n```js\n\n// A simplified version of how React works\n\nlet isInsideTransition = false;\n\nfunction startTransition(scope) {\n\nisInsideTransition = true;\n\nscope();\n\nisInsideTransition = false;\n\n}\n\nfunction setState() {\n\nif (isInsideTransition) {\n\n// ... schedule a transition state update ...\n\n} else {\n\n// ... schedule an urgent state update ...\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useTransition.md"}},"2628":{"pageContent":"--\n\ntitle: useEffectEvent\n\n--\n\n<Wip>\n\n*This API is experimental and is not available in a stable version of React yet.**\n\nYou can try it by upgrading React packages to the most recent experimental version:\n\n`react@experimental`\n\n`react-dom@experimental`\n\n`eslint-plugin-react-hooks@experimental`\n\nExperimental versions of React may contain bugs. Don't use them in production.\n\n</Wip>\n\n<Intro>\n\n`useEffectEvent` is a React Hook that lets you extract non-reactive logic into an [Effect Event.](/learn/separating-events-from-effects#declaring-an-effect-event)\n\n```js\n\nconst onSomething = useEffectEvent(callback)\n\n```\n\n</Intro>\n\n<InlineToc />","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useEffectEvent.md"}},"2629":{"pageContent":"--\n\ntitle: useContext\n\n--\n\n<Intro>\n\n`useContext` is a React Hook that lets you read and subscribe to [context](/learn/passing-data-deeply-with-context) from your component.\n\n```js\n\nconst value = useContext(SomeContext)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useContext(SomeContext)` {/*usecontext*/}\n\nCall `useContext` at the top level of your component to read and subscribe to [context.](/learn/passing-data-deeply-with-context)\n\n```js\n\nimport { useContext } from 'react';\n\nfunction MyComponent() {\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`SomeContext`: The context that you've previously created with [`createContext`](/reference/react/createContext). The context itself does not hold the information, it only represents the kind of information you can provide or read from components.\n\n#### Returns {/*returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2630":{"pageContent":"#### Returns {/*returns*/}\n\n`useContext` returns the context value for the calling component. It is determined as the `value` passed to the closest `SomeContext.Provider` above the calling component in the tree. If there is no such provider, then the returned value will be the `defaultValue` you have passed to [`createContext`](/reference/react/createContext) for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.\n\n#### Caveats {/*caveats*/}\n\n`useContext()` call in a component is not affected by providers returned from the *same* component. The corresponding `<Context.Provider>` **needs to be *above*** the component doing the `useContext()` call.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2631":{"pageContent":"React **automatically re-renders** all the children that use a particular context starting from the provider that receives a different `value`. The previous and the next values are compared with the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison. Skipping re-renders with [`memo`](/reference/react/memo) does not prevent the children receiving fresh context values from above.\n\nIf your build system produces duplicates modules in the output (which can happen if you use symlinks), this can break context. Passing something via context only works if `SomeContext` that you use to provide context and `SomeContext` that you use to read it are ***exactly* the same object**, as determined by a `===` comparison.\n\n--\n\n## Usage {/*usage*/}\n\n### Passing data deeply into the tree {/*passing-data-deeply-into-the-tree*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2632":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Passing data deeply into the tree {/*passing-data-deeply-into-the-tree*/}\n\nCall `useContext` at the top level of your component to read and subscribe to [context.](/learn/passing-data-deeply-with-context)\n\n```js [[2, 4, \"theme\"], [1, 4, \"ThemeContext\"]]\n\nimport { useContext } from 'react';\n\nfunction Button() {\n\nconst theme = useContext(ThemeContext);\n\n// ...\n\n```\n\n`useContext` returns the <CodeStep step={2}>context value</CodeStep> for the <CodeStep step={1}>context</CodeStep> you passed. To determine the context value, React searches the component tree and finds **the closest context provider above** for that particular context.\n\nTo pass context to a `Button`, wrap it or one of its parent components into the corresponding context provider:\n\n```js [[1, 3, \"ThemeContext\"], [2, 3, \"\\\\\"dark\\\\\"\"], [1, 5, \"ThemeContext\"]]\n\nfunction MyPage() {\n\nreturn (\n\n<ThemeContext.Provider value=\"dark\">\n\n<Form />\n\n</ThemeContext.Provider>\n\n);\n\n}\n\nfunction Form() {\n\n// ... renders buttons inside ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2633":{"pageContent":"function MyPage() {\n\nreturn (\n\n<ThemeContext.Provider value=\"dark\">\n\n<Form />\n\n</ThemeContext.Provider>\n\n);\n\n}\n\nfunction Form() {\n\n// ... renders buttons inside ...\n\n}\n\n```\n\nIt doesn't matter how many layers of components there are between the provider and the `Button`. When a `Button` *anywhere* inside of `Form` calls `useContext(ThemeContext)`, it will receive `\"dark\"` as the value.\n\n<Pitfall>\n\n`useContext()` always looks for the closest provider *above* the component that calls it. It searches upwards and **does not** consider providers in the component from which you're calling `useContext()`.\n\n</Pitfall>\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n\nreturn (\n\n<ThemeContext.Provider value=\"dark\">\n\n<Form />\n\n</ThemeContext.Provider>\n\n)\n\n}\n\nfunction Form() {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2634":{"pageContent":")\n\n}\n\nfunction Form() {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Updating data passed via context {/*updating-data-passed-via-context*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2635":{"pageContent":"margin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Updating data passed via context {/*updating-data-passed-via-context*/}\n\nOften, you'll want the context to change over time. To update context, you need to combine it with [state.](/reference/react/useState) Declare a state variable in the parent component, and pass the current state down as the <CodeStep step={2}>context value</CodeStep> to the provider.\n\n```js {2} [[1, 4, \"ThemeContext\"], [2, 4, \"theme\"], [1, 11, \"ThemeContext\"]]\n\nfunction MyPage() {\n\nconst [theme, setTheme] = useState('dark');\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<Form />\n\n<Button onClick={() => {\n\nsetTheme('light');\n\n}}>\n\nSwitch to light theme\n\n</Button>\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2636":{"pageContent":"return (\n\n<ThemeContext.Provider value={theme}>\n\n<Form />\n\n<Button onClick={() => {\n\nsetTheme('light');\n\n}}>\n\nSwitch to light theme\n\n</Button>\n\n</ThemeContext.Provider>\n\n);\n\n}\n\n```\n\nNow any `Button` inside of the provider will receive the current `theme` value. If you call `setTheme` to update the `theme` value that you pass to the provider, all `Button` components will re-render with the new `'light'` value.\n\n<Recipes titleText=\"Examples of updating context\" titleId=\"examples-basic\">\n\n#### Updating a value via context {/*updating-a-value-via-context*/}\n\nIn this example, the `MyApp` component holds a state variable which is then passed to the `ThemeContext` provider. Checking the \"Dark mode\" checkbox updates the state. Changing the provided value re-renders all the components using that context.\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('light');\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2637":{"pageContent":"```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('light');\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<Form />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={theme === 'dark'}\n\nonChange={(e) => {\n\nsetTheme(e.target.checked ? 'dark' : 'light')\n\n}}\n\n/>\n\nUse dark mode\n\n</label>\n\n</ThemeContext.Provider>\n\n)\n\n}\n\nfunction Form({ children }) {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2638":{"pageContent":"return (\n\n<button className={className}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\nNote that `value=\"dark\"` passes the `\"dark\"` string, but `value={theme}` passes the value of the JavaScript `theme` variable with [JSX curly braces.](/learn/javascript-in-jsx-with-curly-braces) Curly braces also let you pass context values that aren't strings.\n\n<Solution />\n\n#### Updating an object via context {/*updating-an-object-via-context*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2639":{"pageContent":"<Solution />\n\n#### Updating an object via context {/*updating-an-object-via-context*/}\n\nIn this example, there is a `currentUser` state variable which holds an object. You combine `{ currentUser, setCurrentUser }` into a single object and pass it down through the context inside the `value={}`. This lets any component below, such as `LoginButton`, read both `currentUser` and `setCurrentUser`, and then call `setCurrentUser` when needed.\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [currentUser, setCurrentUser] = useState(null);\n\nreturn (\n\n<CurrentUserContext.Provider\n\nvalue={{\n\ncurrentUser,\n\nsetCurrentUser\n\n}}\n\n>\n\n<Form />\n\n</CurrentUserContext.Provider>\n\n);\n\n}\n\nfunction Form({ children }) {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<LoginButton />\n\n</Panel>\n\n);\n\n}\n\nfunction LoginButton() {\n\nconst {\n\ncurrentUser,\n\nsetCurrentUser\n\n} = useContext(CurrentUserContext);\n\nif (currentUser !== null) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2640":{"pageContent":"return (\n\n<Panel title=\"Welcome\">\n\n<LoginButton />\n\n</Panel>\n\n);\n\n}\n\nfunction LoginButton() {\n\nconst {\n\ncurrentUser,\n\nsetCurrentUser\n\n} = useContext(CurrentUserContext);\n\nif (currentUser !== null) {\n\nreturn <p>You logged in as {currentUser.name}.</p>;\n\n}\n\nreturn (\n\n<Button onClick={() => {\n\nsetCurrentUser({ name: 'Advika' })\n\n}}>Log in as Advika</Button>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nreturn (\n\n<section className=\"panel\">\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children, onClick }) {\n\nreturn (\n\n<button className=\"button\" onClick={onClick}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\n}\n\n.panel {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.button {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Multiple contexts {/*multiple-contexts*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2641":{"pageContent":"padding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.button {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Multiple contexts {/*multiple-contexts*/}\n\nIn this example, there are two independent contexts. `ThemeContext` provides the current theme, which is a string, while `CurrentUserContext` holds the object representing the current user.\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('light');\n\nconst [currentUser, setCurrentUser] = useState(null);\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<CurrentUserContext.Provider\n\nvalue={{\n\ncurrentUser,\n\nsetCurrentUser\n\n}}\n\n>\n\n<WelcomePanel />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={theme === 'dark'}\n\nonChange={(e) => {\n\nsetTheme(e.target.checked ? 'dark' : 'light')\n\n}}\n\n/>\n\nUse dark mode\n\n</label>\n\n</CurrentUserContext.Provider>\n\n</ThemeContext.Provider>\n\n)\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2642":{"pageContent":"<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={theme === 'dark'}\n\nonChange={(e) => {\n\nsetTheme(e.target.checked ? 'dark' : 'light')\n\n}}\n\n/>\n\nUse dark mode\n\n</label>\n\n</CurrentUserContext.Provider>\n\n</ThemeContext.Provider>\n\n)\n\n}\n\nfunction WelcomePanel({ children }) {\n\nconst {currentUser} = useContext(CurrentUserContext);\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n{currentUser !== null ?\n\n<Greeting /> :\n\n<LoginForm />\n\n}\n\n</Panel>\n\n);\n\n}\n\nfunction Greeting() {\n\nconst {currentUser} = useContext(CurrentUserContext);\n\nreturn (\n\n<p>You logged in as {currentUser.name}.</p>\n\n)\n\n}\n\nfunction LoginForm() {\n\nconst {setCurrentUser} = useContext(CurrentUserContext);\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nconst canLogin = firstName !== '' && lastName !== '';\n\nreturn (\n\n<>\n\n<label>\n\nFirst name{': '}\n\n<input\n\nrequired\n\nvalue={firstName}\n\nonChange={e => setFirstName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nLast name{': '}\n\n<input\n\nrequired\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}\n\n/>\n\n</label>\n\n<Button\n\ndisabled={!canLogin}\n\nonClick={() => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2643":{"pageContent":"/>\n\n</label>\n\n<label>\n\nLast name{': '}\n\n<input\n\nrequired\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}\n\n/>\n\n</label>\n\n<Button\n\ndisabled={!canLogin}\n\nonClick={() => {\n\nsetCurrentUser({\n\nname: firstName + ' ' + lastName\n\n});\n\n}}\n\n>\n\nLog in\n\n</Button>\n\n{!canLogin && <i>Fill in both fields.</i>}\n\n</>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children, disabled, onClick }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button\n\nclassName={className}\n\ndisabled={disabled}\n\nonClick={onClick}\n\n>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\n}\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2644":{"pageContent":"padding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Extracting providers to a component {/*extracting-providers-to-a-component*/}\n\nAs your app grows, it is expected that you'll have a \"pyramid\" of contexts closer to the root of your app. There is nothing wrong with that. However, if you dislike the nesting aesthetically, you can extract the providers into a single component. In this example, `MyProviders` hides the \"plumbing\" and renders the children passed to it inside the necessary providers. Note that the `theme` and `setTheme` state is needed in `MyApp` itself, so `MyApp` still owns that piece of the state.\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2645":{"pageContent":"<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext(null);\n\nconst CurrentUserContext = createContext(null);\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('light');\n\nreturn (\n\n<MyProviders theme={theme} setTheme={setTheme}>\n\n<WelcomePanel />\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={theme === 'dark'}\n\nonChange={(e) => {\n\nsetTheme(e.target.checked ? 'dark' : 'light')\n\n}}\n\n/>\n\nUse dark mode\n\n</label>\n\n</MyProviders>\n\n);\n\n}\n\nfunction MyProviders({ children, theme, setTheme }) {\n\nconst [currentUser, setCurrentUser] = useState(null);\n\nreturn (\n\n<ThemeContext.Provider value={theme}>\n\n<CurrentUserContext.Provider\n\nvalue={{\n\ncurrentUser,\n\nsetCurrentUser\n\n}}\n\n>\n\n{children}\n\n</CurrentUserContext.Provider>\n\n</ThemeContext.Provider>\n\n);\n\n}\n\nfunction WelcomePanel({ children }) {\n\nconst {currentUser} = useContext(CurrentUserContext);\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n{currentUser !== null ?\n\n<Greeting /> :\n\n<LoginForm />\n\n}\n\n</Panel>\n\n);\n\n}\n\nfunction Greeting() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2646":{"pageContent":"const {currentUser} = useContext(CurrentUserContext);\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n{currentUser !== null ?\n\n<Greeting /> :\n\n<LoginForm />\n\n}\n\n</Panel>\n\n);\n\n}\n\nfunction Greeting() {\n\nconst {currentUser} = useContext(CurrentUserContext);\n\nreturn (\n\n<p>You logged in as {currentUser.name}.</p>\n\n)\n\n}\n\nfunction LoginForm() {\n\nconst {setCurrentUser} = useContext(CurrentUserContext);\n\nconst [firstName, setFirstName] = useState('');\n\nconst [lastName, setLastName] = useState('');\n\nconst canLogin = firstName !== '' && lastName !== '';\n\nreturn (\n\n<>\n\n<label>\n\nFirst name{': '}\n\n<input\n\nrequired\n\nvalue={firstName}\n\nonChange={e => setFirstName(e.target.value)}\n\n/>\n\n</label>\n\n<label>\n\nLast name{': '}\n\n<input\n\nrequired\n\nvalue={lastName}\n\nonChange={e => setLastName(e.target.value)}\n\n/>\n\n</label>\n\n<Button\n\ndisabled={!canLogin}\n\nonClick={() => {\n\nsetCurrentUser({\n\nname: firstName + ' ' + lastName\n\n});\n\n}}\n\n>\n\nLog in\n\n</Button>\n\n{!canLogin && <i>Fill in both fields.</i>}\n\n</>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2647":{"pageContent":"});\n\n}}\n\n>\n\nLog in\n\n</Button>\n\n{!canLogin && <i>Fill in both fields.</i>}\n\n</>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children, disabled, onClick }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button\n\nclassName={className}\n\ndisabled={disabled}\n\nonClick={onClick}\n\n>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\n}\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2648":{"pageContent":"border: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Scaling up with context and a reducer {/*scaling-up-with-context-and-a-reducer*/}\n\nIn larger apps, it is common to combine context with a [reducer](/reference/react/useReducer) to extract the logic related to some state out of components. In this example, all the \"wiring\" is hidden in the `TasksContext.js`, which contains a reducer and two separate contexts.\n\nRead a [full walkthrough](/learn/scaling-up-with-reducer-and-context) of this example.\n\n<Sandpack>\n\n```js App.js\n\nimport AddTask from './AddTask.js';\n\nimport TaskList from './TaskList.js';\n\nimport { TasksProvider } from './TasksContext.js';\n\nexport default function TaskApp() {\n\nreturn (\n\n<TasksProvider>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksProvider>\n\n);\n\n}\n\n```\n\n```js TasksContext.js\n\nimport { createContext, useContext, useReducer } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2649":{"pageContent":"return (\n\n<TasksProvider>\n\n<h1>Day off in Kyoto</h1>\n\n<AddTask />\n\n<TaskList />\n\n</TasksProvider>\n\n);\n\n}\n\n```\n\n```js TasksContext.js\n\nimport { createContext, useContext, useReducer } from 'react';\n\nconst TasksContext = createContext(null);\n\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n\nconst [tasks, dispatch] = useReducer(\n\ntasksReducer,\n\ninitialTasks\n\n);\n\nreturn (\n\n<TasksContext.Provider value={tasks}>\n\n<TasksDispatchContext.Provider value={dispatch}>\n\n{children}\n\n</TasksDispatchContext.Provider>\n\n</TasksContext.Provider>\n\n);\n\n}\n\nexport function useTasks() {\n\nreturn useContext(TasksContext);\n\n}\n\nexport function useTasksDispatch() {\n\nreturn useContext(TasksDispatchContext);\n\n}\n\nfunction tasksReducer(tasks, action) {\n\nswitch (action.type) {\n\ncase 'added': {\n\nreturn [...tasks, {\n\nid: action.id,\n\ntext: action.text,\n\ndone: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2650":{"pageContent":"done: false\n\n}];\n\n}\n\ncase 'changed': {\n\nreturn tasks.map(t => {\n\nif (t.id === action.task.id) {\n\nreturn action.task;\n\n} else {\n\nreturn t;\n\n}\n\n});\n\n}\n\ncase 'deleted': {\n\nreturn tasks.filter(t => t.id !== action.id);\n\n}\n\ndefault: {\n\nthrow Error('Unknown action: ' + action.type);\n\n}\n\n}\n\n}\n\nconst initialTasks = [\n\n{ id: 0, text: 'Philosopher’s Path', done: true },\n\n{ id: 1, text: 'Visit the temple', done: false },\n\n{ id: 2, text: 'Drink matcha', done: false }\n\n];\n\n```\n\n```js AddTask.js\n\nimport { useState, useContext } from 'react';\n\nimport { useTasksDispatch } from './TasksContext.js';\n\nexport default function AddTask() {\n\nconst [text, setText] = useState('');\n\nconst dispatch = useTasksDispatch();\n\nreturn (\n\n<>\n\n<input\n\nplaceholder=\"Add task\"\n\nvalue={text}\n\nonChange={e => setText(e.target.value)}\n\n/>\n\n<button onClick={() => {\n\nsetText('');\n\ndispatch({\n\ntype: 'added',\n\nid: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js\n\nimport { useState, useContext } from 'react';\n\nimport { useTasks, useTasksDispatch } from './TasksContext.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2651":{"pageContent":"id: nextId++,\n\ntext: text,\n\n});\n\n}}>Add</button>\n\n</>\n\n);\n\n}\n\nlet nextId = 3;\n\n```\n\n```js TaskList.js\n\nimport { useState, useContext } from 'react';\n\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\n\nexport default function TaskList() {\n\nconst tasks = useTasks();\n\nreturn (\n\n<ul>\n\n{tasks.map(task => (\n\n<li key={task.id}>\n\n<Task task={task} />\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\nfunction Task({ task }) {\n\nconst [isEditing, setIsEditing] = useState(false);\n\nconst dispatch = useTasksDispatch();\n\nlet taskContent;\n\nif (isEditing) {\n\ntaskContent = (\n\n<>\n\n<input\n\nvalue={task.text}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ntext: e.target.value\n\n}\n\n});\n\n}} />\n\n<button onClick={() => setIsEditing(false)}>\n\nSave\n\n</button>\n\n</>\n\n);\n\n} else {\n\ntaskContent = (\n\n<>\n\n{task.text}\n\n<button onClick={() => setIsEditing(true)}>\n\nEdit\n\n</button>\n\n</>\n\n);\n\n}\n\nreturn (\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2652":{"pageContent":"checked={task.done}\n\nonChange={e => {\n\ndispatch({\n\ntype: 'changed',\n\ntask: {\n\n...task,\n\ndone: e.target.checked\n\n}\n\n});\n\n}}\n\n/>\n\n{taskContent}\n\n<button onClick={() => {\n\ndispatch({\n\ntype: 'deleted',\n\nid: task.id\n\n});\n\n}}>\n\nDelete\n\n</button>\n\n</label>\n\n);\n\n}\n\n```\n\n```css\n\nbutton { margin: 5px; }\n\nli { list-style-type: none; }\n\nul, li { margin: 0; padding: 0; }\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Specifying a fallback default value {/*specifying-a-fallback-default-value*/}\n\nIf React can't find any providers of that particular <CodeStep step={1}>context</CodeStep> in the parent tree, the context value returned by `useContext()` will be equal to the <CodeStep step={3}>default value</CodeStep> that you specified when you [created that context](/reference/react/createContext):\n\n```js [[1, 1, \"ThemeContext\"], [3, 1, \"null\"]]\n\nconst ThemeContext = createContext(null);\n\n```\n\nThe default value **never changes**. If you want to update context, use it with state as [described above.](#updating-data-passed-via-context)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2653":{"pageContent":"const ThemeContext = createContext(null);\n\n```\n\nThe default value **never changes**. If you want to update context, use it with state as [described above.](#updating-data-passed-via-context)\n\nOften, instead of `null`, there is some more meaningful value you can use as a default, for example:\n\n```js [[1, 1, \"ThemeContext\"], [3, 1, \"light\"]]\n\nconst ThemeContext = createContext('light');\n\n```\n\nThis way, if you accidentally render some component without a corresponding provider, it won't break. This also helps your components work well in a test environment without setting up a lot of providers in the tests.\n\nIn the example below, the \"Toggle theme\" button is always light because it's **outside any theme context provider** and the default context theme value is `'light'`. Try editing the default theme to be `'dark'`.\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext('light');\n\nexport default function MyApp() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2654":{"pageContent":"<Sandpack>\n\n```js\n\nimport { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext('light');\n\nexport default function MyApp() {\n\nconst [theme, setTheme] = useState('light');\n\nreturn (\n\n<>\n\n<ThemeContext.Provider value={theme}>\n\n<Form />\n\n</ThemeContext.Provider>\n\n<Button onClick={() => {\n\nsetTheme(theme === 'dark' ? 'light' : 'dark');\n\n}}>\n\nToggle theme\n\n</Button>\n\n</>\n\n)\n\n}\n\nfunction Form({ children }) {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n</Panel>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n<h1>{title}</h1>\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children, onClick }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className} onClick={onClick}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2655":{"pageContent":"return (\n\n<button className={className} onClick={onClick}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\nmargin-bottom: 10px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Overriding context for a part of the tree {/*overriding-context-for-a-part-of-the-tree*/}\n\nYou can override the context for a part of the tree by wrapping that part in a provider with a different value.\n\n```js {3,5}\n\n<ThemeContext.Provider value=\"dark\">\n\n...\n\n<ThemeContext.Provider value=\"light\">\n\n<Footer />\n\n</ThemeContext.Provider>\n\n...\n\n</ThemeContext.Provider>\n\n```\n\nYou can nest and override providers as many times as you need.\n\n<Recipes title=\"Examples of overriding context\">","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2656":{"pageContent":"<Footer />\n\n</ThemeContext.Provider>\n\n...\n\n</ThemeContext.Provider>\n\n```\n\nYou can nest and override providers as many times as you need.\n\n<Recipes title=\"Examples of overriding context\">\n\n#### Overriding a theme {/*overriding-a-theme*/}\n\nHere, the button *inside* the `Footer` receives a different context value (`\"light\"`) than the buttons outside (`\"dark\"`).\n\n<Sandpack>\n\n```js\n\nimport { createContext, useContext } from 'react';\n\nconst ThemeContext = createContext(null);\n\nexport default function MyApp() {\n\nreturn (\n\n<ThemeContext.Provider value=\"dark\">\n\n<Form />\n\n</ThemeContext.Provider>\n\n)\n\n}\n\nfunction Form() {\n\nreturn (\n\n<Panel title=\"Welcome\">\n\n<Button>Sign up</Button>\n\n<Button>Log in</Button>\n\n<ThemeContext.Provider value=\"light\">\n\n<Footer />\n\n</ThemeContext.Provider>\n\n</Panel>\n\n);\n\n}\n\nfunction Footer() {\n\nreturn (\n\n<footer>\n\n<Button>Settings</Button>\n\n</footer>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n{title && <h1>{title}</h1>}\n\n{children}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2657":{"pageContent":"</footer>\n\n);\n\n}\n\nfunction Panel({ title, children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'panel-' + theme;\n\nreturn (\n\n<section className={className}>\n\n{title && <h1>{title}</h1>}\n\n{children}\n\n</section>\n\n)\n\n}\n\nfunction Button({ children }) {\n\nconst theme = useContext(ThemeContext);\n\nconst className = 'button-' + theme;\n\nreturn (\n\n<button className={className}>\n\n{children}\n\n</button>\n\n);\n\n}\n\n```\n\n```css\n\nfooter {\n\nmargin-top: 20px;\n\nborder-top: 1px solid #aaa;\n\n}\n\n.panel-light,\n\n.panel-dark {\n\nborder: 1px solid black;\n\nborder-radius: 4px;\n\npadding: 20px;\n\n}\n\n.panel-light {\n\ncolor: #222;\n\nbackground: #fff;\n\n}\n\n.panel-dark {\n\ncolor: #fff;\n\nbackground: rgb(23, 32, 42);\n\n}\n\n.button-light,\n\n.button-dark {\n\nborder: 1px solid #777;\n\npadding: 5px;\n\nmargin-right: 10px;\n\nmargin-top: 10px;\n\n}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Automatically nested headings {/*automatically-nested-headings*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2658":{"pageContent":"}\n\n.button-dark {\n\nbackground: #222;\n\ncolor: #fff;\n\n}\n\n.button-light {\n\nbackground: #fff;\n\ncolor: #222;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Automatically nested headings {/*automatically-nested-headings*/}\n\nYou can \"accumulate\" information when you nest context providers. In this example, the `Section` component keeps track of the `LevelContext` which specifies the depth of the section nesting. It reads the `LevelContext` from the parent section, and provides the `LevelContext` number increased by one to its children. As a result, the `Heading` component can automatically decide which of the `<h1>`, `<h2>`, `<h3>`, ..., tags to use based on how many `Section` components it is nested inside of.\n\nRead a [detailed walkthrough](/learn/passing-data-deeply-with-context) of this example.\n\n<Sandpack>\n\n```js\n\nimport Heading from './Heading.js';\n\nimport Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading>Title</Heading>\n\n<Section>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2659":{"pageContent":"import Section from './Section.js';\n\nexport default function Page() {\n\nreturn (\n\n<Section>\n\n<Heading>Title</Heading>\n\n<Section>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Heading>Heading</Heading>\n\n<Section>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Heading>Sub-heading</Heading>\n\n<Section>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n<Heading>Sub-sub-heading</Heading>\n\n</Section>\n\n</Section>\n\n</Section>\n\n</Section>\n\n);\n\n}\n\n```\n\n```js Section.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Section({ children }) {\n\nconst level = useContext(LevelContext);\n\nreturn (\n\n<section className=\"section\">\n\n<LevelContext.Provider value={level + 1}>\n\n{children}\n\n</LevelContext.Provider>\n\n</section>\n\n);\n\n}\n\n```\n\n```js Heading.js\n\nimport { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 0:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2660":{"pageContent":"import { useContext } from 'react';\n\nimport { LevelContext } from './LevelContext.js';\n\nexport default function Heading({ children }) {\n\nconst level = useContext(LevelContext);\n\nswitch (level) {\n\ncase 0:\n\nthrow Error('Heading must be inside a Section!');\n\ncase 1:\n\nreturn <h1>{children}</h1>;\n\ncase 2:\n\nreturn <h2>{children}</h2>;\n\ncase 3:\n\nreturn <h3>{children}</h3>;\n\ncase 4:\n\nreturn <h4>{children}</h4>;\n\ncase 5:\n\nreturn <h5>{children}</h5>;\n\ncase 6:\n\nreturn <h6>{children}</h6>;\n\ndefault:\n\nthrow Error('Unknown level: ' + level);\n\n}\n\n}\n\n```\n\n```js LevelContext.js\n\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n\n```\n\n```css\n\n.section {\n\npadding: 10px;\n\nmargin: 5px;\n\nborder-radius: 5px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Optimizing re-renders when passing objects and functions {/*optimizing-re-renders-when-passing-objects-and-functions*/}\n\nYou can pass any values via context, including objects and functions.\n\n```js [[2, 10, \"{ currentUser, login }\"]]\n\nfunction MyApp() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2661":{"pageContent":"You can pass any values via context, including objects and functions.\n\n```js [[2, 10, \"{ currentUser, login }\"]]\n\nfunction MyApp() {\n\nconst [currentUser, setCurrentUser] = useState(null);\n\nfunction login(response) {\n\nstoreCredentials(response.credentials);\n\nsetCurrentUser(response.user);\n\n}\n\nreturn (\n\n<AuthContext.Provider value={{ currentUser, login }}>\n\n<Page />\n\n</AuthContext.Provider>\n\n);\n\n}\n\n```\n\nHere, the <CodeStep step={2}>context value</CodeStep> is a JavaScript object with two properties, one of which is a function. Whenever `MyApp` re-renders (for example, on a route update), this will be a *different* object pointing at a *different* function, so React will also have to re-render all components deep in the tree that call `useContext(AuthContext)`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2662":{"pageContent":"In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like `currentUser`, has not changed. To help React take advantage of that fact, you may wrap the `login` function with [`useCallback`](/reference/react/useCallback) and wrap the object creation into [`useMemo`](/reference/react/useMemo). This is a performance optimization:\n\n```js {6,9,11,14,17}\n\nimport { useCallback, useMemo } from 'react';\n\nfunction MyApp() {\n\nconst [currentUser, setCurrentUser] = useState(null);\n\nconst login = useCallback((response) => {\n\nstoreCredentials(response.credentials);\n\nsetCurrentUser(response.user);\n\n}, []);\n\nconst contextValue = useMemo(() => ({\n\ncurrentUser,\n\nlogin\n\n}), [currentUser, login]);\n\nreturn (\n\n<AuthContext.Provider value={contextValue}>\n\n<Page />\n\n</AuthContext.Provider>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2663":{"pageContent":"}, []);\n\nconst contextValue = useMemo(() => ({\n\ncurrentUser,\n\nlogin\n\n}), [currentUser, login]);\n\nreturn (\n\n<AuthContext.Provider value={contextValue}>\n\n<Page />\n\n</AuthContext.Provider>\n\n);\n\n}\n\n```\n\nAs a result of this change, even if `MyApp` needs to re-render, the components calling `useContext(AuthProvider)` won't need to re-render unless `currentUser` has changed. Read more about [`useMemo`](/reference/react/useMemo#skipping-re-rendering-of-components) and [`useCallback`.](/reference/react/useCallback#skipping-re-rendering-of-components)\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### My component doesn't see the value from my provider {/*my-component-doesnt-see-the-value-from-my-provider*/}\n\nThere are a few common ways that this can happen:\n\n1. You're rendering `<SomeContext.Provider>` in the same component (or below) as where you're calling `useContext()`. Move `<SomeContext.Provider>` *above and outside* the component calling `useContext()`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2664":{"pageContent":"2. You may have forgotten to wrap your component with `<SomeContext.Provider>`, or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right using [React DevTools.](/learn/react-developer-tools)\n\n3. You might be running into some build issue with your tooling that causes `SomeContext` as seen from the providing component and `SomeContext` as seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals like `window.SomeContext1` and `window.SomeContext2` and then checking whether `window.SomeContext1 === window.SomeContext2` in the console. If they're not the same, you need to fix that issue on the build tool level.\n\n### I am always getting `undefined` from my context although the default value is different {/*i-am-always-getting-undefined-from-my-context-although-the-default-value-is-different*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2665":{"pageContent":"### I am always getting `undefined` from my context although the default value is different {/*i-am-always-getting-undefined-from-my-context-although-the-default-value-is-different*/}\n\nYou might have a provider without a `value` in the tree:\n\n```js {1,2}\n\n// 🚩 Doesn't work: no value prop\n\n<ThemeContext.Provider>\n\n<Button />\n\n</ThemeContext.Provider>\n\n```\n\nIf you forget to specify `value`, it's like passing `value={undefined}`.\n\nYou may have also mistakingly used a different prop name by mistake:\n\n```js {1,2}\n\n// 🚩 Doesn't work: prop should be called \"value\"\n\n<ThemeContext.Provider theme={theme}>\n\n<Button />\n\n</ThemeContext.Provider>\n\n```\n\nIn both of these cases you should see a warning from React in the console. To fix them, call the prop `value`:\n\n```js {1,2}\n\n// ✅ Passing the value prop\n\n<ThemeContext.Provider value={theme}>\n\n<Button />\n\n</ThemeContext.Provider>\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2666":{"pageContent":"```js {1,2}\n\n// ✅ Passing the value prop\n\n<ThemeContext.Provider value={theme}>\n\n<Button />\n\n</ThemeContext.Provider>\n\n```\n\nNote that the [default value from your `createContext(defaultValue)` call](#specifying-a-fallback-default-value) is only used **if there is no matching provider above at all.** If there is a `<SomeContext.Provider value={undefined}>` component somewhere in the parent tree, the component calling `useContext(SomeContext)` *will* receive `undefined` as the context value.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useContext.md"}},"2667":{"pageContent":"--\n\ntitle: Queueing a Series of State Updates\n\n--\n\n<Intro>\n\nSetting a state variable will queue another render. But sometimes you might want to perform multiple operations on the value before queueing the next render. To do this, it helps to understand how React batches state updates.\n\n</Intro>\n\n<YouWillLearn>\n\nWhat \"batching\" is and how React uses it to process multiple state updates\n\nHow to apply several updates to the same state variable in a row\n\n</YouWillLearn>\n\n## React batches state updates {/*react-batches-state-updates*/}\n\nYou might expect that clicking the \"+3\" button will increment the counter three times because it calls `setNumber(number + 1)` three times:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\n}}>+3</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2668":{"pageContent":"<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\nsetNumber(number + 1);\n\n}}>+3</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nHowever, as you might recall from the previous section, [each render's state values are fixed](/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time), so the value of `number` inside the first render's event handler is always `0`, no matter how many times you call `setNumber(1)`:\n\n```js\n\nsetNumber(0 + 1);\n\nsetNumber(0 + 1);\n\nsetNumber(0 + 1);\n\n```\n\nBut there is one other factor at work here to discuss. **React waits until *all* code in the event handlers has run before processing your state updates.** This is why the re-render only happens *after* all these `setNumber()` calls.","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2669":{"pageContent":"This might remind you of a waiter taking an order at the restaurant. A waiter doesn't run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.\n\n<Illustration src=\"/images/docs/illustrations/i_react-batching.png\"  alt=\"An elegant cursor at a restaurant places and order multiple times with React, playing the part of the waiter. After she calls setState() multiple times, the waiter writes down the last one she requested as her final order.\" />","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2670":{"pageContent":"This lets you update multiple state variables--even from multiple components--without triggering too many [re-renders.](/learn/render-and-commit#re-renders-when-state-updates) But this also means that the UI won't be updated until _after_ your event handler, and any code in it, completes. This behavior, also known as **batching,** makes your React app run much faster. It also avoids dealing with confusing \"half-finished\" renders where only some of the variables have been updated.\n\n*React does not batch across *multiple* intentional events like clicks**--each click is handled separately. Rest assured that React only does batching when it's generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again.\n\n## Updating the same state variable multiple times before the next render {/*updating-the-same-state-variable-multiple-times-before-the-next-render*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2671":{"pageContent":"## Updating the same state variable multiple times before the next render {/*updating-the-same-state-variable-multiple-times-before-the-next-render*/}\n\nIt is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the *next state value* like `setNumber(number + 1)`, you can pass a *function* that calculates the next state based on the previous one in the queue, like `setNumber(n => n + 1)`. It is a way to tell React to \"do something with the state value\" instead of just replacing it.\n\nTry incrementing the counter now:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(n => n + 1);\n\nsetNumber(n => n + 1);\n\nsetNumber(n => n + 1);\n\n}}>+3</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2672":{"pageContent":"<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(n => n + 1);\n\nsetNumber(n => n + 1);\n\nsetNumber(n => n + 1);\n\n}}>+3</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nHere, `n => n + 1` is called an **updater function.** When you pass it to a state setter:\n\n1. React queues this function to be processed after all the other code in the event handler has run.\n\n2. During the next render, React goes through the queue and gives you the final updated state.\n\n```js\n\nsetNumber(n => n + 1);\n\nsetNumber(n => n + 1);\n\nsetNumber(n => n + 1);\n\n```\n\nHere's how React works through these lines of code while executing the event handler:\n\n1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n\n1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n\n1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2673":{"pageContent":"1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n\n1. `setNumber(n => n + 1)`: `n => n + 1` is a function. React adds it to a queue.\n\nWhen you call `useState` during the next render, React goes through the queue. The previous `number` state was `0`, so that's what React passes to the first updater function as the `n` argument. Then React takes the return value of your previous updater function and passes it to the next updater as `n`, and so on:\n\n|  queued update | `n` | returns |\n\n|--------------|---------|-----|\n\n| `n => n + 1` | `0` | `0 + 1 = 1` |\n\n| `n => n + 1` | `1` | `1 + 1 = 2` |\n\n| `n => n + 1` | `2` | `2 + 1 = 3` |\n\nReact stores `3` as the final result and returns it from `useState`.\n\nThis is why clicking \"+3\" in the above example correctly increments the value by 3.\n\n### What happens if you update state after replacing it {/*what-happens-if-you-update-state-after-replacing-it*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2674":{"pageContent":"This is why clicking \"+3\" in the above example correctly increments the value by 3.\n\n### What happens if you update state after replacing it {/*what-happens-if-you-update-state-after-replacing-it*/}\n\nWhat about this event handler? What do you think `number` will be in the next render?\n\n```js\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nsetNumber(n => n + 1);\n\n}}>\n\n```\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nsetNumber(n => n + 1);\n\n}}>Increase the number</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nHere's what this event handler tells React to do:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds *\"replace with `5`\"* to its queue.","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2675":{"pageContent":"```\n\n</Sandpack>\n\nHere's what this event handler tells React to do:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds *\"replace with `5`\"* to its queue.\n\n2. `setNumber(n => n + 1)`: `n => n + 1` is an updater function. React adds *that function* to its queue.\n\nDuring the next render, React goes through the state queue:\n\n|   queued update       | `n` | returns |\n\n|--------------|---------|-----|\n\n| \"replace with `5`\" | `0` (unused) | `5` |\n\n| `n => n + 1` | `5` | `5 + 1 = 6` |\n\nReact stores `6` as the final result and returns it from `useState`.\n\n> You may have noticed that `setState(x)` actually works like `setState(n => x)`, but `n` is unused!\n\n### What happens if you replace state after updating it {/*what-happens-if-you-replace-state-after-updating-it*/}\n\nLet's try one more example. What do you think `number` will be in the next render?\n\n```js\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nsetNumber(n => n + 1);\n\nsetNumber(42);\n\n}}>\n\n```\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2676":{"pageContent":"```js\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nsetNumber(n => n + 1);\n\nsetNumber(42);\n\n}}>\n\n```\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function Counter() {\n\nconst [number, setNumber] = useState(0);\n\nreturn (\n\n<>\n\n<h1>{number}</h1>\n\n<button onClick={() => {\n\nsetNumber(number + 5);\n\nsetNumber(n => n + 1);\n\nsetNumber(42);\n\n}}>Increase the number</button>\n\n</>\n\n)\n\n}\n\n```\n\n```css\n\nbutton { display: inline-block; margin: 10px; font-size: 20px; }\n\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\n\n```\n\n</Sandpack>\n\nHere's how React works through these lines of code while executing this event handler:\n\n1. `setNumber(number + 5)`: `number` is `0`, so `setNumber(0 + 5)`. React adds *\"replace with `5`\"* to its queue.\n\n2. `setNumber(n => n + 1)`: `n => n + 1` is an updater function. React adds *that function* to its queue.\n\n3. `setNumber(42)`: React adds *\"replace with `42`\"* to its queue.\n\nDuring the next render, React goes through the state queue:\n\n|   queued update       | `n` | returns |","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2677":{"pageContent":"3. `setNumber(42)`: React adds *\"replace with `42`\"* to its queue.\n\nDuring the next render, React goes through the state queue:\n\n|   queued update       | `n` | returns |\n\n|--------------|---------|-----|\n\n| \"replace with `5`\" | `0` (unused) | `5` |\n\n| `n => n + 1` | `5` | `5 + 1 = 6` |\n\n| \"replace with `42`\" | `6` (unused) | `42` |\n\nThen React stores `42` as the final result and returns it from `useState`.\n\nTo summarize, here's how you can think of what you're passing to the `setNumber` state setter:\n\n**An updater function** (e.g. `n => n + 1`) gets added to the queue.\n\n**Any other value** (e.g. number `5`) adds \"replace with `5`\" to the queue, ignoring what's already queued.","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2678":{"pageContent":"**An updater function** (e.g. `n => n + 1`) gets added to the queue.\n\n**Any other value** (e.g. number `5`) adds \"replace with `5`\" to the queue, ignoring what's already queued.\n\nAfter the event handler completes, React will trigger a re-render. During the re-render, React will process the queue. Updater functions run during rendering, so **updater functions must be [pure](/learn/keeping-components-pure)** and only *return* the result. Don't try to set state from inside of them or run other side effects. In Strict Mode, React will run each updater function twice (but discard the second result) to help you find mistakes.\n\n### Naming conventions {/*naming-conventions*/}\n\nIt's common to name the updater function argument by the first letters of the corresponding state variable:\n\n```js\n\nsetEnabled(e => !e);\n\nsetLastName(ln => ln.reverse());\n\nsetFriendCount(fc => fc * 2);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2679":{"pageContent":"It's common to name the updater function argument by the first letters of the corresponding state variable:\n\n```js\n\nsetEnabled(e => !e);\n\nsetLastName(ln => ln.reverse());\n\nsetFriendCount(fc => fc * 2);\n\n```\n\nIf you prefer more verbose code, another common convention is to repeat the full state variable name, like `setEnabled(enabled => !enabled)`, or to use a prefix like `setEnabled(prevEnabled => !prevEnabled)`.\n\n<Recap>\n\nSetting state does not change the variable in the existing render, but it requests a new render.\n\nReact processes state updates after event handlers have finished running. This is called batching.\n\nTo update some state multiple times in one event, you can use `setNumber(n => n + 1)` updater function.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a request counter {/*fix-a-request-counter*/}","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2680":{"pageContent":"To update some state multiple times in one event, you can use `setNumber(n => n + 1)` updater function.\n\n</Recap>\n\n<Challenges>\n\n#### Fix a request counter {/*fix-a-request-counter*/}\n\nYou're working on an art marketplace app that lets the user submit multiple orders for an art item at the same time. Each time the user presses the \"Buy\" button, the \"Pending\" counter should increase by one. After three seconds, the \"Pending\" counter should decrease, and the \"Completed\" counter should increase.\n\nHowever, the \"Pending\" counter does not behave as intended. When you press \"Buy\", it decreases to `-1` (which should not be possible!). And if you click fast twice, both counters seem to behave unpredictably.\n\nWhy does this happen? Fix both counters.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n\nconst [pending, setPending] = useState(0);\n\nconst [completed, setCompleted] = useState(0);\n\nasync function handleClick() {\n\nsetPending(pending + 1);\n\nawait delay(3000);","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2681":{"pageContent":"const [pending, setPending] = useState(0);\n\nconst [completed, setCompleted] = useState(0);\n\nasync function handleClick() {\n\nsetPending(pending + 1);\n\nawait delay(3000);\n\nsetPending(pending - 1);\n\nsetCompleted(completed + 1);\n\n}\n\nreturn (\n\n<>\n\n<h3>\n\nPending: {pending}\n\n</h3>\n\n<h3>\n\nCompleted: {completed}\n\n</h3>\n\n<button onClick={handleClick}>\n\nBuy\n\n</button>\n\n</>\n\n);\n\n}\n\nfunction delay(ms) {\n\nreturn new Promise(resolve => {\n\nsetTimeout(resolve, ms);\n\n});\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nInside the `handleClick` event handler, the values of `pending` and `completed` correspond to what they were at the time of the click event. For the first render, `pending` was `0`, so `setPending(pending - 1)` becomes `setPending(-1)`, which is wrong. Since you want to *increment* or *decrement* the counters, rather than set them to a concrete value determined during the click, you can instead pass the updater functions:\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n\nconst [pending, setPending] = useState(0);","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2682":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n\nconst [pending, setPending] = useState(0);\n\nconst [completed, setCompleted] = useState(0);\n\nasync function handleClick() {\n\nsetPending(p => p + 1);\n\nawait delay(3000);\n\nsetPending(p => p - 1);\n\nsetCompleted(c => c + 1);\n\n}\n\nreturn (\n\n<>\n\n<h3>\n\nPending: {pending}\n\n</h3>\n\n<h3>\n\nCompleted: {completed}\n\n</h3>\n\n<button onClick={handleClick}>\n\nBuy\n\n</button>\n\n</>\n\n);\n\n}\n\nfunction delay(ms) {\n\nreturn new Promise(resolve => {\n\nsetTimeout(resolve, ms);\n\n});\n\n}\n\n```\n\n</Sandpack>\n\nThis ensures that when you increment or decrement a counter, you do it in relation to its *latest* state rather than what the state was at the time of the click.\n\n</Solution>\n\n#### Implement the state queue yourself {/*implement-the-state-queue-yourself*/}\n\nIn this challenge, you will reimplement a tiny part of React from scratch! It's not as hard as it sounds.","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2683":{"pageContent":"</Solution>\n\n#### Implement the state queue yourself {/*implement-the-state-queue-yourself*/}\n\nIn this challenge, you will reimplement a tiny part of React from scratch! It's not as hard as it sounds.\n\nScroll through the sandbox preview. Notice that it shows **four test cases.** They correspond to the examples you've seen earlier on this page. Your task is to implement the `getFinalState` function so that it returns the correct result for each of those cases. If you implement it correctly, all four tests should pass.\n\nYou will receive two arguments: `baseState` is the initial state (like `0`), and the `queue` is an array which contains a mix of numbers (like `5`) and updater functions (like `n => n + 1`) in the order they were added.\n\nYour task is to return the final state, just like the tables on this page show!\n\n<Hint>\n\nIf you're feeling stuck, start with this code structure:\n\n```js\n\nexport function getFinalState(baseState, queue) {\n\nlet finalState = baseState;\n\nfor (let update of queue) {","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2684":{"pageContent":"<Hint>\n\nIf you're feeling stuck, start with this code structure:\n\n```js\n\nexport function getFinalState(baseState, queue) {\n\nlet finalState = baseState;\n\nfor (let update of queue) {\n\nif (typeof update === 'function') {\n\n// TODO: apply the updater function\n\n} else {\n\n// TODO: replace the state\n\n}\n\n}\n\nreturn finalState;\n\n}\n\n```\n\nFill out the missing lines!\n\n</Hint>\n\n<Sandpack>\n\n```js processQueue.js active\n\nexport function getFinalState(baseState, queue) {\n\nlet finalState = baseState;\n\n// TODO: do something with the queue...\n\nreturn finalState;\n\n}\n\n```\n\n```js App.js\n\nimport { getFinalState } from './processQueue.js';\n\nfunction increment(n) {\n\nreturn n + 1;\n\n}\n\nincrement.toString = () => 'n => n+1';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<TestCase\n\nbaseState={0}\n\nqueue={[1, 1, 1]}\n\nexpected={1}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\nincrement,\n\nincrement,\n\nincrement\n\n]}\n\nexpected={3}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\n5,\n\nincrement,\n\n]}\n\nexpected={6}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\n5,\n\nincrement,\n\n42,\n\n]}\n\nexpected={42}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction TestCase({\n\nbaseState,\n\nqueue,","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2685":{"pageContent":"increment\n\n]}\n\nexpected={3}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\n5,\n\nincrement,\n\n]}\n\nexpected={6}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\n5,\n\nincrement,\n\n42,\n\n]}\n\nexpected={42}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction TestCase({\n\nbaseState,\n\nqueue,\n\nexpected\n\n}) {\n\nconst actual = getFinalState(baseState, queue);\n\nreturn (\n\n<>\n\n<p>Base state: <b>{baseState}</b></p>\n\n<p>Queue: <b>[{queue.join(', ')}]</b></p>\n\n<p>Expected result: <b>{expected}</b></p>\n\n<p style={{\n\ncolor: actual === expected ?\n\n'green' :\n\n'red'\n\n}}>\n\nYour result: <b>{actual}</b>\n\n{' '}\n\n({actual === expected ?\n\n'correct' :\n\n'wrong'\n\n})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<Solution>\n\nThis is the exact algorithm described on this page that React uses to calculate the final state:\n\n<Sandpack>\n\n```js processQueue.js active\n\nexport function getFinalState(baseState, queue) {\n\nlet finalState = baseState;\n\nfor (let update of queue) {\n\nif (typeof update === 'function') {\n\n// Apply the updater function.\n\nfinalState = update(finalState);\n\n} else {\n\n// Replace the next state.\n\nfinalState = update;\n\n}\n\n}\n\nreturn finalState;\n\n}\n\n```\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2686":{"pageContent":"if (typeof update === 'function') {\n\n// Apply the updater function.\n\nfinalState = update(finalState);\n\n} else {\n\n// Replace the next state.\n\nfinalState = update;\n\n}\n\n}\n\nreturn finalState;\n\n}\n\n```\n\n```js App.js\n\nimport { getFinalState } from './processQueue.js';\n\nfunction increment(n) {\n\nreturn n + 1;\n\n}\n\nincrement.toString = () => 'n => n+1';\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<TestCase\n\nbaseState={0}\n\nqueue={[1, 1, 1]}\n\nexpected={1}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\nincrement,\n\nincrement,\n\nincrement\n\n]}\n\nexpected={3}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\n5,\n\nincrement,\n\n]}\n\nexpected={6}\n\n/>\n\n<hr />\n\n<TestCase\n\nbaseState={0}\n\nqueue={[\n\n5,\n\nincrement,\n\n42,\n\n]}\n\nexpected={42}\n\n/>\n\n</>\n\n);\n\n}\n\nfunction TestCase({\n\nbaseState,\n\nqueue,\n\nexpected\n\n}) {\n\nconst actual = getFinalState(baseState, queue);\n\nreturn (\n\n<>\n\n<p>Base state: <b>{baseState}</b></p>\n\n<p>Queue: <b>[{queue.join(', ')}]</b></p>\n\n<p>Expected result: <b>{expected}</b></p>\n\n<p style={{\n\ncolor: actual === expected ?\n\n'green' :\n\n'red'\n\n}}>\n\nYour result: <b>{actual}</b>\n\n{' '}\n\n({actual === expected ?\n\n'correct' :\n\n'wrong'\n\n})\n\n</p>\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2687":{"pageContent":"<p>Expected result: <b>{expected}</b></p>\n\n<p style={{\n\ncolor: actual === expected ?\n\n'green' :\n\n'red'\n\n}}>\n\nYour result: <b>{actual}</b>\n\n{' '}\n\n({actual === expected ?\n\n'correct' :\n\n'wrong'\n\n})\n\n</p>\n\n</>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\nNow you know how this part of React works!\n\n</Solution>\n\n</Challenges>","metadata":{"source":"reactjs.org/beta/src/content/learn/queueing-a-series-of-state-updates.md"}},"2688":{"pageContent":"--\n\ntitle: cloneElement\n\n--\n\n<Pitfall>\n\nUsing `cloneElement` is uncommon and can lead to fragile code. [See common alternatives.](#alternatives)\n\n</Pitfall>\n\n<Intro>\n\n`cloneElement` lets you create a new React element using another element as a starting point.\n\n```js\n\nconst clonedElement = cloneElement(element, props, ...children)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `cloneElement(element, props, ...children)` {/*cloneelement*/}\n\nCall `cloneElement` to create a React element based on the `element`, but with different `props` and `children`:\n\n```js\n\nimport { cloneElement } from 'react';\n\n// ...\n\nconst clonedElement = cloneElement(\n\n<Row title=\"Cabbage\">\n\nHello\n\n</Row>,\n\n{ isHighlighted: true },\n\n'Goodbye'\n\n);\n\nconsole.log(clonedElement); // <Row title=\"Cabbage\">Goodbye</Row>\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2689":{"pageContent":"Hello\n\n</Row>,\n\n{ isHighlighted: true },\n\n'Goodbye'\n\n);\n\nconsole.log(clonedElement); // <Row title=\"Cabbage\">Goodbye</Row>\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`element`: The `element` argument must be a valid React element. For example, it could be a JSX node like `<Something />`, the result of calling [`createElement`](/reference/react/createElement), or the result of another `cloneElement` call.\n\n`props`: The `props` argument must either be an object or `null`. If you pass `null`, the cloned element will retain all of the original `element.props`. Otherwise, for every prop in the `props` object, the returned element will \"prefer\" the value from `props` over the value from `element.props`. The rest of the props will be filled from the original `element.props`. If you pass `props.key` or `props.ref`, they will replace the original ones.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2690":{"pageContent":"**optional** `...children`: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, [portals](/reference/react-dom/createPortal), empty nodes (`null`, `undefined`, `true`, and `false`), and arrays of React nodes. If you don't pass any `...children` arguments, the original `element.props.children` will be preserved.\n\n#### Returns {/*returns*/}\n\n`cloneElement` returns a React element object with a few properties:\n\n`type`: Same as `element.type`.\n\n`props`: The result of shallowly merging `element.props` with the overriding `props` you have passed.\n\n`ref`: The original `element.ref`, unless it was overridden by `props.ref`.\n\n`key`: The original `element.key`, unless it was overridden by `props.key`.\n\nUsually, you'll return the element from your component or make it a child of another element. Although you may read the element's properties, it's best to treat every element as opaque after it's created, and only render it.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2691":{"pageContent":"#### Caveats {/*caveats*/}\n\nCloning an element **does not modify the original element.**\n\nYou should only **pass children as multiple arguments to `cloneElement` if they are all statically known,** like `cloneElement(element, null, child1, child2, child3)`. If your children are dynamic, pass the entire array as the third argument: `cloneElement(element, null, listItems)`. This ensures that React will [warn you about missing `key`s](/learn/rendering-lists#keeping-list-items-in-order-with-key) for any dynamic lists. For static lists this is not necessary because they never reorder.\n\n`cloneElement` makes it harder to trace the data flow, so **try the [alternatives](/#alternatives) instead.**\n\n--\n\n## Usage {/*usage*/}\n\n### Overriding props of an element {/*overriding-props-of-an-element*/}\n\nTo override the props of some <CodeStep step={1}>React element</CodeStep>, pass it to `cloneElement` with the <CodeStep step={2}>props you want to override</CodeStep>:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2692":{"pageContent":"To override the props of some <CodeStep step={1}>React element</CodeStep>, pass it to `cloneElement` with the <CodeStep step={2}>props you want to override</CodeStep>:\n\n```js [[1, 5, \"<Row title=\\\\\"Cabbage\\\\\" />\"], [2, 6, \"{ isHighlighted: true }\"], [3, 4, \"clonedElement\"]]\n\nimport { cloneElement } from 'react';\n\n// ...\n\nconst clonedElement = cloneElement(\n\n<Row title=\"Cabbage\" />,\n\n{ isHighlighted: true }\n\n);\n\n```\n\nHere, the resulting <CodeStep step={3}>cloned element</CodeStep> will be `<Row title=\"Cabbage\" isHighlighted={true} />`.\n\n*Let's walk through an example to see when it's useful.**\n\nImagine a `List` component that renders its [`children`](/learn/passing-props-to-a-component#passing-jsx-as-children) as a list of selectable rows with a \"Next\" button that changes which row is selected. The `List` component needs to render the selected `Row` differently, so it clones every `<Row>` child that it has received, and adds an extra `isHighlighted: true` or `isHighlighted: false` prop:\n\n```js {6-8}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2693":{"pageContent":"```js {6-8}\n\nexport default function List({ children }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nreturn (\n\n<div className=\"List\">\n\n{Children.map(children, (child, index) =>\n\ncloneElement(child, {\n\nisHighlighted: index === selectedIndex\n\n})\n\n)}\n\n```\n\nLet's say the original JSX received by `List` looks like this:\n\n```js {2-4}\n\n<List>\n\n<Row title=\"Cabbage\" />\n\n<Row title=\"Garlic\" />\n\n<Row title=\"Apple\" />\n\n</List>\n\n```\n\nBy cloning its children, the `List` can pass extra information to every `Row` inside. The result looks like this:\n\n```js {4,8,12}\n\n<List>\n\n<Row\n\ntitle=\"Cabbage\"\n\nisHighlighted={true}\n\n/>\n\n<Row\n\ntitle=\"Garlic\"\n\nisHighlighted={false}\n\n/>\n\n<Row\n\ntitle=\"Apple\"\n\nisHighlighted={false}\n\n/>\n\n</List>\n\n```\n\nNotice how pressing \"Next\" updates the state of the `List`, and highlights a different row:\n\n<Sandpack>\n\n```js\n\nimport List from './List.js';\n\nimport Row from './Row.js';\n\nimport { products } from './data.js';\n\nexport default function App() {\n\nreturn (\n\n<List>\n\n{products.map(product =>\n\n<Row\n\nkey={product.id}\n\ntitle={product.title}\n\n/>\n\n)}\n\n</List>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2694":{"pageContent":"import Row from './Row.js';\n\nimport { products } from './data.js';\n\nexport default function App() {\n\nreturn (\n\n<List>\n\n{products.map(product =>\n\n<Row\n\nkey={product.id}\n\ntitle={product.title}\n\n/>\n\n)}\n\n</List>\n\n);\n\n}\n\n```\n\n```js List.js active\n\nimport { Children, cloneElement, useState } from 'react';\n\nexport default function List({ children }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nreturn (\n\n<div className=\"List\">\n\n{Children.map(children, (child, index) =>\n\ncloneElement(child, {\n\nisHighlighted: index === selectedIndex\n\n})\n\n)}\n\n<hr />\n\n<button onClick={() => {\n\nsetSelectedIndex(i =>\n\n(i + 1) % Children.count(children)\n\n);\n\n}}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```js Row.js\n\nexport default function Row({ title, isHighlighted }) {\n\nreturn (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{title}\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const products = [\n\n{ title: 'Cabbage', id: 1 },\n\n{ title: 'Garlic', id: 2 },\n\n{ title: 'Apple', id: 3 },\n\n];\n\n```\n\n```css\n\n.List {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2695":{"pageContent":"{ title: 'Cabbage', id: 1 },\n\n{ title: 'Garlic', id: 2 },\n\n{ title: 'Apple', id: 3 },\n\n];\n\n```\n\n```css\n\n.List {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n.RowHighlighted {\n\nbackground: #ffa;\n\n}\n\nbutton {\n\nheight: 40px;\n\nfont-size: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nTo summarize, the `List` cloned the `<Row />` elements it received and added an extra prop to them.\n\n<Pitfall>\n\nCloning children makes it hard to tell how the data flows through your app. Try one of the [alternatives.](#alternatives)\n\n</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Passing data with a render prop {/*passing-data-with-a-render-prop*/}\n\nInstead of using `cloneElement`, consider accepting a *render prop* like `renderItem`. Here, `List` receives `renderItem` as a prop. `List` calls `renderItem` for every item and passes `isHighlighted` as an argument:\n\n```js {1,7}\n\nexport default function List({ items, renderItem }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2696":{"pageContent":"```js {1,7}\n\nexport default function List({ items, renderItem }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nreturn (\n\n<div className=\"List\">\n\n{items.map((item, index) => {\n\nconst isHighlighted = index === selectedIndex;\n\nreturn renderItem(item, isHighlighted);\n\n})}\n\n```\n\nThe `renderItem` prop is called a \"render prop\" because it's a prop that specifies how to render something. For example, you can pass a `renderItem` implementation that renders a `<Row>` with the given `isHighlighted` value:\n\n```js {3,7}\n\n<List\n\nitems={products}\n\nrenderItem={(product, isHighlighted) =>\n\n<Row\n\nkey={product.id}\n\ntitle={product.title}\n\nisHighlighted={isHighlighted}\n\n/>\n\n}\n\n/>\n\n```\n\nThe end result is the same as with `cloneElement`:\n\n```js {4,8,12}\n\n<List>\n\n<Row\n\ntitle=\"Cabbage\"\n\nisHighlighted={true}\n\n/>\n\n<Row\n\ntitle=\"Garlic\"\n\nisHighlighted={false}\n\n/>\n\n<Row\n\ntitle=\"Apple\"\n\nisHighlighted={false}\n\n/>\n\n</List>\n\n```\n\nHowever, you can clearly trace where the `isHighlighted` value is coming from.\n\n<Sandpack>\n\n```js\n\nimport List from './List.js';\n\nimport Row from './Row.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2697":{"pageContent":"<Row\n\ntitle=\"Apple\"\n\nisHighlighted={false}\n\n/>\n\n</List>\n\n```\n\nHowever, you can clearly trace where the `isHighlighted` value is coming from.\n\n<Sandpack>\n\n```js\n\nimport List from './List.js';\n\nimport Row from './Row.js';\n\nimport { products } from './data.js';\n\nexport default function App() {\n\nreturn (\n\n<List\n\nitems={products}\n\nrenderItem={(product, isHighlighted) =>\n\n<Row\n\nkey={product.id}\n\ntitle={product.title}\n\nisHighlighted={isHighlighted}\n\n/>\n\n}\n\n/>\n\n);\n\n}\n\n```\n\n```js List.js active\n\nimport { useState } from 'react';\n\nexport default function List({ items, renderItem }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nreturn (\n\n<div className=\"List\">\n\n{items.map((item, index) => {\n\nconst isHighlighted = index === selectedIndex;\n\nreturn renderItem(item, isHighlighted);\n\n})}\n\n<hr />\n\n<button onClick={() => {\n\nsetSelectedIndex(i =>\n\n(i + 1) % items.length\n\n);\n\n}}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```js Row.js\n\nexport default function Row({ title, isHighlighted }) {\n\nreturn (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{title}\n\n</div>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2698":{"pageContent":");\n\n}}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```js Row.js\n\nexport default function Row({ title, isHighlighted }) {\n\nreturn (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{title}\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const products = [\n\n{ title: 'Cabbage', id: 1 },\n\n{ title: 'Garlic', id: 2 },\n\n{ title: 'Apple', id: 3 },\n\n];\n\n```\n\n```css\n\n.List {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n.RowHighlighted {\n\nbackground: #ffa;\n\n}\n\nbutton {\n\nheight: 40px;\n\nfont-size: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nThis pattern is preferred to `cloneElement` because it is more explicit.\n\n--\n\n### Passing data through context {/*passing-data-through-context*/}\n\nAnother alternative to `cloneElement` is to [pass data through context.](/learn/passing-data-deeply-with-context)\n\nFor example, you can call [`createContext`](/reference/react/createContext) to define a `HighlightContext`:\n\n```js\n\nexport const HighlightContext = createContext(false);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2699":{"pageContent":"For example, you can call [`createContext`](/reference/react/createContext) to define a `HighlightContext`:\n\n```js\n\nexport const HighlightContext = createContext(false);\n\n```\n\nYour `List` component can wrap every item it renders into a `HighlightContext` provider:\n\n```js {8,10}\n\nexport default function List({ items, renderItem }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nreturn (\n\n<div className=\"List\">\n\n{items.map((item, index) => {\n\nconst isHighlighted = index === selectedIndex;\n\nreturn (\n\n<HighlightContext.Provider key={item.id} value={isHighlighted}>\n\n{renderItem(item)}\n\n</HighlightContext.Provider>\n\n);\n\n})}\n\n```\n\nWith this approach, `Row` does not need to receive an `isHighlighted` prop at all. Instead, it reads the context:\n\n```js Row.js {2}\n\nexport default function Row({ title }) {\n\nconst isHighlighted = useContext(HighlightContext);\n\n// ...\n\n````\n\nThis allows the calling component to not know or worry about passing `isHighlighted` to `<Row>`:\n\n```js {4}\n\n<List\n\nitems={products}\n\nrenderItem={product =>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2700":{"pageContent":"// ...\n\n````\n\nThis allows the calling component to not know or worry about passing `isHighlighted` to `<Row>`:\n\n```js {4}\n\n<List\n\nitems={products}\n\nrenderItem={product =>\n\n<Row title={product.title} />\n\n}\n\n/>\n\n```\n\nInstead, `List` and `Row` coordinate the highlighting logic through context.\n\n<Sandpack>\n\n```js\n\nimport List from './List.js';\n\nimport Row from './Row.js';\n\nimport { products } from './data.js';\n\nexport default function App() {\n\nreturn (\n\n<List\n\nitems={products}\n\nrenderItem={(product) =>\n\n<Row title={product.title} />\n\n}\n\n/>\n\n);\n\n}\n\n```\n\n```js List.js active\n\nimport { useState } from 'react';\n\nimport { HighlightContext } from './HighlightContext.js';\n\nexport default function List({ items, renderItem }) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nreturn (\n\n<div className=\"List\">\n\n{items.map((item, index) => {\n\nconst isHighlighted = index === selectedIndex;\n\nreturn (\n\n<HighlightContext.Provider\n\nkey={item.id}\n\nvalue={isHighlighted}\n\n>\n\n{renderItem(item)}\n\n</HighlightContext.Provider>\n\n);\n\n})}\n\n<hr />\n\n<button onClick={() => {\n\nsetSelectedIndex(i =>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2701":{"pageContent":"return (\n\n<HighlightContext.Provider\n\nkey={item.id}\n\nvalue={isHighlighted}\n\n>\n\n{renderItem(item)}\n\n</HighlightContext.Provider>\n\n);\n\n})}\n\n<hr />\n\n<button onClick={() => {\n\nsetSelectedIndex(i =>\n\n(i + 1) % items.length\n\n);\n\n}}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```js Row.js\n\nimport { useContext } from 'react';\n\nimport { HighlightContext } from './HighlightContext.js';\n\nexport default function Row({ title }) {\n\nconst isHighlighted = useContext(HighlightContext);\n\nreturn (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{title}\n\n</div>\n\n);\n\n}\n\n```\n\n```js HighlightContext.js\n\nimport { createContext } from 'react';\n\nexport const HighlightContext = createContext(false);\n\n```\n\n```js data.js\n\nexport const products = [\n\n{ title: 'Cabbage', id: 1 },\n\n{ title: 'Garlic', id: 2 },\n\n{ title: 'Apple', id: 3 },\n\n];\n\n```\n\n```css\n\n.List {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n.RowHighlighted {\n\nbackground: #ffa;\n\n}\n\nbutton {\n\nheight: 40px;\n\nfont-size: 20px;\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2702":{"pageContent":"border: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n.RowHighlighted {\n\nbackground: #ffa;\n\n}\n\nbutton {\n\nheight: 40px;\n\nfont-size: 20px;\n\n}\n\n```\n\n</Sandpack>\n\n[Learn more about passing data through context.](/reference/react/useContext#passing-data-deeply-into-the-tree)\n\n--\n\n### Extracting logic into a custom Hook {/*extracting-logic-into-a-custom-hook*/}\n\nAnother approach you can try is to extract the \"non-visual\" logic into your own Hook, and use the information returned by your Hook to decide what to render. For example, you could write a `useList` custom Hook like this:\n\n```js\n\nimport { useState } from 'react';\n\nexport default function useList(items) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nfunction onNext() {\n\nsetSelectedIndex(i =>\n\n(i + 1) % items.length\n\n);\n\n}\n\nconst selected = items[selectedIndex];\n\nreturn [selected, onNext];\n\n}\n\n```\n\nThen you could use it like this:\n\n```js {2,9,13}\n\nexport default function App() {\n\nconst [selected, onNext] = useList(products);\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2703":{"pageContent":"}\n\nconst selected = items[selectedIndex];\n\nreturn [selected, onNext];\n\n}\n\n```\n\nThen you could use it like this:\n\n```js {2,9,13}\n\nexport default function App() {\n\nconst [selected, onNext] = useList(products);\n\nreturn (\n\n<div className=\"List\">\n\n{products.map(product =>\n\n<Row\n\nkey={product.id}\n\ntitle={product.title}\n\nisHighlighted={selected === product}\n\n/>\n\n)}\n\n<hr />\n\n<button onClick={onNext}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\nThe data flow is explicit, but the state is inside the `useList` custom Hook that you can use from any component:\n\n<Sandpack>\n\n```js\n\nimport Row from './Row.js';\n\nimport useList from './useList.js';\n\nimport { products } from './data.js';\n\nexport default function App() {\n\nconst [selected, onNext] = useList(products);\n\nreturn (\n\n<div className=\"List\">\n\n{products.map(product =>\n\n<Row\n\nkey={product.id}\n\ntitle={product.title}\n\nisHighlighted={selected === product}\n\n/>\n\n)}\n\n<hr />\n\n<button onClick={onNext}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```js useList.js\n\nimport { useState } from 'react';\n\nexport default function useList(items) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2704":{"pageContent":"isHighlighted={selected === product}\n\n/>\n\n)}\n\n<hr />\n\n<button onClick={onNext}>\n\nNext\n\n</button>\n\n</div>\n\n);\n\n}\n\n```\n\n```js useList.js\n\nimport { useState } from 'react';\n\nexport default function useList(items) {\n\nconst [selectedIndex, setSelectedIndex] = useState(0);\n\nfunction onNext() {\n\nsetSelectedIndex(i =>\n\n(i + 1) % items.length\n\n);\n\n}\n\nconst selected = items[selectedIndex];\n\nreturn [selected, onNext];\n\n}\n\n```\n\n```js Row.js\n\nexport default function Row({ title, isHighlighted }) {\n\nreturn (\n\n<div className={[\n\n'Row',\n\nisHighlighted ? 'RowHighlighted' : ''\n\n].join(' ')}>\n\n{title}\n\n</div>\n\n);\n\n}\n\n```\n\n```js data.js\n\nexport const products = [\n\n{ title: 'Cabbage', id: 1 },\n\n{ title: 'Garlic', id: 2 },\n\n{ title: 'Apple', id: 3 },\n\n];\n\n```\n\n```css\n\n.List {\n\ndisplay: flex;\n\nflex-direction: column;\n\nborder: 2px solid grey;\n\npadding: 5px;\n\n}\n\n.Row {\n\nborder: 2px dashed black;\n\npadding: 5px;\n\nmargin: 5px;\n\n}\n\n.RowHighlighted {\n\nbackground: #ffa;\n\n}\n\nbutton {\n\nheight: 40px;\n\nfont-size: 20px;\n\n}\n\n```\n\n</Sandpack>\n\nThis approach is particularly useful if you want to reuse this logic between different components.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/cloneElement.md"}},"2705":{"pageContent":"--\n\ntitle: <Fragment> (<>...</>)\n\n--\n\n<Intro>\n\n`<Fragment>`, often used via `<>...</>` syntax, lets you group elements without a wrapper node.\n\n```js\n\n<>\n\n<OneChild />\n\n<AnotherChild />\n\n</>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<Fragment>` {/*fragment*/}\n\nWrap elements in `<Fragment>` to group them together in situations where you need a single element. Grouping elements in `Fragment` has no effect on the resulting DOM; it is the same as if the elements were not grouped. The empty JSX tag `<></>` is shorthand for `<Fragment></Fragment>` in most cases.\n\n#### Props {/*props*/}\n\n**optional** `key`: Fragments declared with the explicit `<Fragment>` syntax may have [keys.](https://beta.reactjs.org/learn/rendering-lists#keeping-list-items-in-order-with-key)\n\n#### Caveats {/*caveats*/}\n\nIf you want to pass `key` to a Fragment, you can't use the `<>...</>` syntax. You have to explicitly import `Fragment` from `'react'` and render `<Fragment key={yourKey}>...</Fragment>`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2706":{"pageContent":"If you want to pass `key` to a Fragment, you can't use the `<>...</>` syntax. You have to explicitly import `Fragment` from `'react'` and render `<Fragment key={yourKey}>...</Fragment>`.\n\nReact does not [reset state](/learn/preserving-and-resetting-state) when you go from rendering `<><Child /></>` to `[<Child />]` or back, or when you go from rendering `<><Child /></>` to `<Child />` and back. This only works a single level deep: for example, going from `<><><Child /></></>` to `<Child />` resets the state. See the precise semantics [here.](https://gist.github.com/clemmy/b3ef00f9507909429d8aa0d3ee4f986b)\n\n--\n\n## Usage {/*usage*/}\n\n### Returning multiple elements {/*returning-multiple-elements*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2707":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Returning multiple elements {/*returning-multiple-elements*/}\n\nUse `Fragment`, or the equivalent `<>...</>` syntax, to group multiple elements together. You can use it to put multiple elements in any place where a single element can go. For example, a component can only return one element, but by using a Fragment you can group multiple elements together and then return them as a group:\n\n```js {3,6}\n\nfunction Post() {\n\nreturn (\n\n<>\n\n<PostTitle />\n\n<PostBody />\n\n</>\n\n);\n\n}\n\n```\n\nFragments are useful because grouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in some other container such as a DOM element. If you inspect this example with the browser tools, you'll see that all `<h1>` and `<p>` DOM nodes appear as siblings without wrappers around them:\n\n<Sandpack>\n\n```js\n\nexport default function Blog() {\n\nreturn (\n\n<>\n\n<Post title=\"An update\" body=\"It's been a while since I posted...\" />\n\n<Post title=\"My new blog\" body=\"I am starting a new blog!\" />","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2708":{"pageContent":"<Sandpack>\n\n```js\n\nexport default function Blog() {\n\nreturn (\n\n<>\n\n<Post title=\"An update\" body=\"It's been a while since I posted...\" />\n\n<Post title=\"My new blog\" body=\"I am starting a new blog!\" />\n\n</>\n\n)\n\n}\n\nfunction Post({ title, body }) {\n\nreturn (\n\n<>\n\n<PostTitle title={title} />\n\n<PostBody body={body} />\n\n</>\n\n);\n\n}\n\nfunction PostTitle({ title }) {\n\nreturn <h1>{title}</h1>\n\n}\n\nfunction PostBody({ body }) {\n\nreturn (\n\n<article>\n\n<p>{body}</p>\n\n</article>\n\n);\n\n}\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### How to write a Fragment without the special syntax? {/*how-to-write-a-fragment-without-the-special-syntax*/}\n\nThe example above is equivalent to importing `Fragment` from React:\n\n```js {1,5,8}\n\nimport { Fragment } from 'react';\n\nfunction Post() {\n\nreturn (\n\n<Fragment>\n\n<PostTitle />\n\n<PostBody />\n\n</Fragment>\n\n);\n\n}\n\n```\n\nUsually you won't need this unless you need to [pass a `key` to your `Fragment`.](#rendering-a-list-of-fragments)\n\n</DeepDive>\n\n--\n\n### Assigning multiple elements to a variable {/*assigning-multiple-elements-to-a-variable*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2709":{"pageContent":"</DeepDive>\n\n--\n\n### Assigning multiple elements to a variable {/*assigning-multiple-elements-to-a-variable*/}\n\nLike any other element, you can assign Fragment elements to variables, pass them as props, and so on:\n\n```js\n\nfunction CloseDialog() {\n\nconst buttons = (\n\n<>\n\n<OKButton />\n\n<CancelButton />\n\n</>\n\n);\n\nreturn (\n\n<AlertDialog buttons={buttons}>\n\nAre you sure you want to leave this page?\n\n</AlertDialog>\n\n);\n\n}\n\n```\n\n--\n\n### Grouping elements with text {/*grouping-elements-with-text*/}\n\nYou can use `Fragment` to group text together with components:\n\n```js\n\nfunction DateRangePicker({ start, end }) {\n\nreturn (\n\n<>\n\nFrom\n\n<DatePicker date={start} />\n\nto\n\n<DatePicker date={end} />\n\n</>\n\n);\n\n}\n\n```\n\n--\n\n### Rendering a list of Fragments {/*rendering-a-list-of-fragments*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2710":{"pageContent":"```js\n\nfunction DateRangePicker({ start, end }) {\n\nreturn (\n\n<>\n\nFrom\n\n<DatePicker date={start} />\n\nto\n\n<DatePicker date={end} />\n\n</>\n\n);\n\n}\n\n```\n\n--\n\n### Rendering a list of Fragments {/*rendering-a-list-of-fragments*/}\n\nHere's a situation where you need to write `Fragment` explicitly instead of using the `<></>` syntax. When you [render multiple elements in a loop](/learn/rendering-lists), you need to assign a `key` to each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide the `key` attribute:\n\n```js {3,6}\n\nfunction Blog() {\n\nreturn posts.map(post =>\n\n<Fragment key={post.id}>\n\n<PostTitle title={post.title} />\n\n<PostBody body={post.body} />\n\n</Fragment>\n\n);\n\n}\n\n```\n\nYou can inspect the DOM to verify that there are no wrapper elements around the Fragment children:\n\n<Sandpack>\n\n```js\n\nimport { Fragment } from 'react';\n\nconst posts = [\n\n{ id: 1, title: 'An update', body: \"It's been a while since I posted...\" },","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2711":{"pageContent":"<Sandpack>\n\n```js\n\nimport { Fragment } from 'react';\n\nconst posts = [\n\n{ id: 1, title: 'An update', body: \"It's been a while since I posted...\" },\n\n{ id: 2, title: 'My new blog', body: 'I am starting a new blog!' }\n\n];\n\nexport default function Blog() {\n\nreturn posts.map(post =>\n\n<Fragment key={post.id}>\n\n<PostTitle title={post.title} />\n\n<PostBody body={post.body} />\n\n</Fragment>\n\n);\n\n}\n\nfunction PostTitle({ title }) {\n\nreturn <h1>{title}</h1>\n\n}\n\nfunction PostBody({ body }) {\n\nreturn (\n\n<article>\n\n<p>{body}</p>\n\n</article>\n\n);\n\n}\n\n```\n\n</Sandpack>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Fragment.md"}},"2712":{"pageContent":"--\n\ntitle: \"Built-in React APIs\"\n\n--\n\n<Intro>\n\nIn addition to [Hooks](/reference/react) and [Components](/reference/react/components), the `react` package exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs.\n\n</Intro>\n\n--\n\n[`createContext`](/reference/react/createContext) lets you define and provide context to the child components. Used with [`useContext`.](/reference/react/useContext)\n\n[`forwardRef`](/reference/react/forwardRef) lets your component expose a DOM node as a ref to the parent. Used with [`useRef`.](/reference/react/useRef)\n\n[`lazy`](/reference/react/lazy) lets you defer loading a component's code until it's rendered for the first time.\n\n[`memo`](/reference/react/memo) lets your component skip re-renders with same props. Used with [`useMemo`](/reference/react/useMemo) and [`useCallback`.](/reference/react/useCallback)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/apis.md"}},"2713":{"pageContent":"[`memo`](/reference/react/memo) lets your component skip re-renders with same props. Used with [`useMemo`](/reference/react/useMemo) and [`useCallback`.](/reference/react/useCallback)\n\n[`startTransition`](/reference/react/startTransition) lets you mark a state update as non-urgent. Similar to [`useTransition`.](/reference/react/useTransition)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/apis.md"}},"2714":{"pageContent":"--\n\ntitle: useCallback\n\n--\n\n<Intro>\n\n`useCallback` is a React Hook that lets you cache a function definition between re-renders.\n\n```js\n\nconst cachedFn = useCallback(fn, dependencies)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useCallback(fn, dependencies)` {/*usecallback*/}\n\nCall `useCallback` at the top level of your component to cache a function definition between re-renders:\n\n```js {4,9}\n\nimport { useCallback } from 'react';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]);\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2715":{"pageContent":"post('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]);\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`fn`: The function value that you want to cache. It can take any arguments and return any values. React will return (not call!) your function back to you during the initial render. On subsequent renders, React will give you the same function again if the `dependencies` have not changed since the last render. Otherwise, it will give you the function that you have passed during the current render, and store it in case it can be reused later. React will not call your function. The function is returned to you so you can decide when and whether to call it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2716":{"pageContent":"`dependencies`: The list of all reactive values referenced inside of the `fn` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm.\n\n#### Returns {/*returns*/}\n\nOn the initial render, `useCallback` returns the `fn` function you have passed.\n\nDuring subsequent renders, it will either return an already stored `fn`  function from the last render (if the dependencies haven't changed), or return the `fn` function you have passed during this render.\n\n#### Caveats {/*caveats*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2717":{"pageContent":"#### Caveats {/*caveats*/}\n\n`useCallback` is a Hook, so you can only call it **at the top level of your component** or your own Hooks. You can't call it inside loops or conditions. If you need that, extract a new component and move the state into it.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2718":{"pageContent":"React **will not throw away the cached function unless there is a specific reason to do that.** For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache--for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should match your expectations if you rely on `useCallback` as a performance optimization. Otherwise, a [state variable](/reference/react/useState#im-trying-to-set-state-to-a-function-but-it-gets-called-instead) or a [ref](/reference/react/useRef#avoiding-recreating-the-ref-contents) may be more appropriate.\n\n--\n\n## Usage {/*usage*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2719":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Skipping re-rendering of components {/*skipping-re-rendering-of-components*/}\n\nWhen you optimize rendering performance, you will sometimes need to cache the functions that you pass to child components. Let's first look at the syntax for how to do this, and then see in which cases it's useful.\n\nTo cache a function between re-renders of your component, wrap its definition into the `useCallback` Hook:\n\n```js [[3, 4, \"handleSubmit\"], [2, 9, \"[productId, referrer]\"]]\n\nimport { useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer, theme }) {\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]);\n\n// ...\n\n```\n\nYou need to pass two things to `useCallback`:\n\n1. A function definition that you want to cache between re-renders.\n\n2. A <CodeStep step={2}>list of dependencies</CodeStep> including every value within your component that's used inside your function.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2720":{"pageContent":"1. A function definition that you want to cache between re-renders.\n\n2. A <CodeStep step={2}>list of dependencies</CodeStep> including every value within your component that's used inside your function.\n\nOn the initial render, the <CodeStep step={3}>returned function</CodeStep> you'll get from `useCallback` will be the function you passed.\n\nOn the following renders, React will compare the <CodeStep step={2}>dependencies</CodeStep> with the dependencies you passed during the previous render. If none of the dependencies have changed (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), `useCallback` will return the same function as before. Otherwise, `useCallback` will return the function you passed on *this* render.\n\nIn other words, `useCallback` caches a function between re-renders until its dependencies change.\n\n*Let's walk through an example to see when this is useful.**","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2721":{"pageContent":"In other words, `useCallback` caches a function between re-renders until its dependencies change.\n\n*Let's walk through an example to see when this is useful.**\n\nSay you're passing a `handleSubmit` function down from the `ProductPage` to the `ShippingForm` component:\n\n```js {5}\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n// ...\n\nreturn (\n\n<div className={theme}>\n\n<ShippingForm onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n```\n\nYou've noticed that toggling the `theme` prop freezes the app for a moment, but if you remove `<ShippingForm />` from your JSX, it feels fast. This tells you that it's worth trying to optimize the `ShippingForm` component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2722":{"pageContent":"*By default, when a component re-renders, React re-renders all of its children recursively.** This is why, when `ProductPage` re-renders with a different `theme`, the `ShippingForm` component *also* re-renders. This is fine for components that don't require much calculation to re-render. But if you've verified that a re-render is slow, you can tell `ShippingForm` to skip re-rendering when its props are the same as on last render by wrapping it in [`memo`:](/reference/react/memo)\n\n```js {3,5}\n\nimport { memo } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\n// ...\n\n});\n\n```\n\n*With this change, `ShippingForm` will skip re-rendering if all of its props are the *same* as on the last render.** This is where caching a function becomes important! Imagine that you defined `handleSubmit` without `useCallback`:\n\n```js {2,3,8,12-13}\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n// Every time the theme changes, this will be a different function...","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2723":{"pageContent":"```js {2,3,8,12-13}\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n// Every time the theme changes, this will be a different function...\n\nfunction handleSubmit(orderDetails) {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}\n\nreturn (\n\n<div className={theme}>\n\n{/* ... so ShippingForm's props will never be the same, and it will re-render every time */}\n\n<ShippingForm onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n}\n\n```\n\n*In JavaScript, a `function () {}` or `() => {}` always creates a _different_ function,** similar to how the `{}` object literal always creates a new object. Normally, this wouldn't be a problem, but it means that `ShippingForm` props will never be the same, and your [`memo`](/reference/react/memo) optimization won't work. This is where `useCallback` comes in handy:\n\n```js {2,3,8,12-13}\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n// Tell React to cache your function between re-renders...\n\nconst handleSubmit = useCallback((orderDetails) => {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2724":{"pageContent":"```js {2,3,8,12-13}\n\nfunction ProductPage({ productId, referrer, theme }) {\n\n// Tell React to cache your function between re-renders...\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]); // ...so as long as these dependencies don't change...\n\nreturn (\n\n<div className={theme}>\n\n{/* ...ShippingForm will receive the same props and can skip re-rendering */}\n\n<ShippingForm onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n}\n\n```\n\n*By wrapping `handleSubmit` in `useCallback`, you ensure that it's the *same* function between the re-renders** (until dependencies change). You don't *have to* wrap a function in `useCallback` unless you do it for some specific reason. In this example, the reason is that you pass it to a component wrapped in [`memo`,](/reference/react/memo) and this lets it skip re-rendering. There are a few other reasons you might need `useCallback` which are described further on this page.\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2725":{"pageContent":"<Note>\n\n*You should only rely on `useCallback` as a performance optimization.** If your code doesn't work without it, find the underlying problem and fix it first. Then you may add `useCallback` to improve performance.\n\n</Note>\n\n<DeepDive>\n\n#### How is useCallback related to useMemo? {/*how-is-usecallback-related-to-usememo*/}\n\nYou will often see [`useMemo`](/reference/react/useMemo) alongside `useCallback`. They are both useful when you're trying to optimize a child component. They let you [memoize](https://en.wikipedia.org/wiki/Memoization) (or, in other words, cache) something you're passing down:\n\n```js {6-8,10-15,19}\n\nimport { useMemo, useCallback } from 'react';\n\nfunction ProductPage({ productId, referrer }) {\n\nconst product = useData('/product/' + productId);\n\nconst requirements = useMemo(() => { // Calls your function and caches its result\n\nreturn computeRequirements(product);\n\n}, [product]);\n\nconst handleSubmit = useCallback((orderDetails) => { // Caches your function itself","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2726":{"pageContent":"return computeRequirements(product);\n\n}, [product]);\n\nconst handleSubmit = useCallback((orderDetails) => { // Caches your function itself\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]);\n\nreturn (\n\n<div className={theme}>\n\n<ShippingForm requirements={requirements} onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n}\n\n```\n\nThe difference is in *what* they're letting you cache:\n\n**[`useMemo`](/reference/react/useMemo) caches the *result* of calling your function.** In this example, it caches the result of calling `computeRequirements(product)` so that it doesn't change unless `product` has changed. This lets you pass the `requirements` object down without unnecessarily re-rendering `ShippingForm`. When necessary, React will call the function you've passed during rendering to calculate the result.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2727":{"pageContent":"**`useCallback` caches *the function itself.*** Unlike `useMemo`, it does not call the function you provide. Instead, it caches the function you provided so that `handleSubmit` *itself* doesn't change unless `productId` or `referrer` has changed. This lets you pass the `handleSubmit` function down without unnecessarily re-rendering `ShippingForm`. Your code won't be called until the user submits the form.\n\nIf you're already familiar with [`useMemo`,](/reference/react/useMemo) you might find it helpful to think of `useCallback` as this:\n\n```js\n\n// Simplified implementation (inside React)\n\nfunction useCallback(fn, dependencies) {\n\nreturn useMemo(() => fn, dependencies);\n\n}\n\n```\n\n[Read more about the difference between `useMemo` and `useCallback`.](/reference/react/useMemo#memoizing-a-function)\n\n</DeepDive>\n\n<DeepDive>\n\n#### Should you add useCallback everywhere? {/*should-you-add-usecallback-everywhere*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2728":{"pageContent":"</DeepDive>\n\n<DeepDive>\n\n#### Should you add useCallback everywhere? {/*should-you-add-usecallback-everywhere*/}\n\nIf your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful.\n\nCaching a function with `useCallback`  is only valuable in a few cases:\n\nYou pass it as a prop to a component wrapped in [`memo`.](/reference/react/memo) You want to skip re-rendering if the value hasn't changed. Memoization lets your component re-render only when dependencies aren't the same.\n\nThe function you're passing is later used as a dependency of some Hook. For example, another function wrapped in `useCallback` depends on it, or you depend on this function from [`useEffect.`](/reference/react/useEffect)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2729":{"pageContent":"There is no benefit to wrapping a function in `useCallback` in other cases. There is no significant harm to doing that either, so some teams choose to not think about individual cases, and memoize as much as possible. The downside of this approach is that code becomes less readable. Also, not all memoization is effective: a single value that's \"always new\" is enough to break memoization for an entire component.\n\nNote that `useCallback` does not prevent *creating* the function. You're always creating a function (and that's fine!), but React ignores it and gives you back a cached function if dependencies haven't changed.\n\n*In practice, you can make a lot of memoization unnecessary by following a few principles:**\n\n1. When a component visually wraps other components, let it [accept JSX as children.](/learn/passing-props-to-a-component#passing-jsx-as-children) This way, when the wrapper component updates its own state, React knows that its children don't need to re-render.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2730":{"pageContent":"1. Prefer local state and don't [lift state up](/learn/sharing-state-between-components) any further than necessary. For example, don't keep transient state like forms and whether an item is hovered at the top of your tree or in a global state library.\n\n1. Keep your [rendering logic pure.](/learn/keeping-components-pure) If re-rendering a component causes a problem or produces some noticeable visual artifact, it's a bug in your component! Fix the bug instead of adding memoization.\n\n1. Avoid [unnecessary Effects that update state.](/learn/you-might-not-need-an-effect) Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.\n\n1. Try to [remove unnecessary dependencies from your Effects.](/learn/removing-effect-dependencies) For example, instead of memoization, it's often simpler to move some object or a function inside an Effect or outside the component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2731":{"pageContent":"If a specific interaction still feels laggy, [use the React Developer Tools profiler](/blog/2018/09/10/introducing-the-react-profiler.html) to see which components would benefit the most from memoization, and add memoization where needed. These principles make your components easier to debug and understand, so it's good to follow them in any case. In the long term, we're researching [doing granular memoization automatically](https://www.youtube.com/watch?v=lGEMwh32soc) to solve this once and for all.\n\n</DeepDive>\n\n<Recipes titleText=\"The difference between useCallback and declaring a function directly\" titleId=\"examples-rerendering\">\n\n#### Skipping re-rendering with `useCallback` and `memo` {/*skipping-re-rendering-with-usecallback-and-memo*/}\n\nIn this example, the `ShippingForm` component is **artificially slowed down** so that you can see what happens when a React component you're rendering is genuinely slow. Try incrementing the counter and toggling the theme.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2732":{"pageContent":"Incrementing the counter feels slow because it forces the slowed down `ShippingForm` to re-render. That's expected because the counter has changed, and so you need to reflect the user's new choice on the screen.\n\nNext, try toggling the theme. **Thanks to `useCallback` together with [`memo`](/reference/react/memo), it’s fast despite the artificial slowdown!** `ShippingForm` skipped re-rendering because the `handleSubmit` function has not changed. The `handleSubmit` function has not changed because both `productId` and `referral` (your `useCallback` dependencies) haven't changed since last render.\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ProductPage from './ProductPage.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<ProductPage\n\nreferrerId=\"wizard_of_oz\"\n\nproductId={123}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2733":{"pageContent":"type=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<ProductPage\n\nreferrerId=\"wizard_of_oz\"\n\nproductId={123}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ProductPage.js active\n\nimport { useCallback } from 'react';\n\nimport ShippingForm from './ShippingForm.js';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]);\n\nreturn (\n\n<div className={theme}>\n\n<ShippingForm onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n}\n\nfunction post(url, data) {\n\n// Imagine this sends a request...\n\nconsole.log('POST /' + url);\n\nconsole.log(data);\n\n}\n\n```\n\n```js ShippingForm.js\n\nimport { memo, useState } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\nconst [count, setCount] = useState(1);\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering <ShippingForm />');\n\nlet startTime = performance.now();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2734":{"pageContent":"const ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\nconst [count, setCount] = useState(1);\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering <ShippingForm />');\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 500) {\n\n// Do nothing for 500 ms to emulate extremely slow code\n\n}\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nconst formData = new FormData(e.target);\n\nconst orderDetails = {\n\n...Object.fromEntries(formData),\n\ncount\n\n};\n\nonSubmit(orderDetails);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<p><b>Note: <code>ShippingForm</code> is artificially slowed down!</b></p>\n\n<label>\n\nNumber of items:\n\n<button type=\"button\" onClick={() => setCount(count - 1)}>–</button>\n\n{count}\n\n<button type=\"button\" onClick={() => setCount(count + 1)}>+</button>\n\n</label>\n\n<label>\n\nStreet:\n\n<input name=\"street\" />\n\n</label>\n\n<label>\n\nCity:\n\n<input name=\"city\" />\n\n</label>\n\n<label>\n\nPostal code:\n\n<input name=\"zipCode\" />\n\n</label>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n});\n\nexport default ShippingForm;\n\n```\n\n```css\n\nlabel {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2735":{"pageContent":"</label>\n\n<label>\n\nCity:\n\n<input name=\"city\" />\n\n</label>\n\n<label>\n\nPostal code:\n\n<input name=\"zipCode\" />\n\n</label>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n});\n\nexport default ShippingForm;\n\n```\n\n```css\n\nlabel {\n\ndisplay: block; margin-top: 10px;\n\n}\n\ninput {\n\nmargin-left: 5px;\n\n}\n\nbutton[type=\"button\"] {\n\nmargin: 5px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Always re-rendering a component {/*always-re-rendering-a-component*/}\n\nIn this example, the `ShoppingForm` implementation is also **artificially slowed down** so that you can see what happens when some React component you're rendering is genuinely slow. Try incrementing the counter and toggling the theme.\n\nUnlike in the previous example, toggling the theme is also slow now! This is because **there is no `useCallback` call in this version,** so `handleSubmit` is always a new function, and the slowed down `ShoppingForm` component can't skip re-rendering.\n\n<Sandpack>\n\n```js App.js","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2736":{"pageContent":"<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ProductPage from './ProductPage.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<ProductPage\n\nreferrerId=\"wizard_of_oz\"\n\nproductId={123}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ProductPage.js active\n\nimport ShippingForm from './ShippingForm.js';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\nfunction handleSubmit(orderDetails) {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}\n\nreturn (\n\n<div className={theme}>\n\n<ShippingForm onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n}\n\nfunction post(url, data) {\n\n// Imagine this sends a request...\n\nconsole.log('POST /' + url);\n\nconsole.log(data);\n\n}\n\n```\n\n```js ShippingForm.js\n\nimport { memo, useState } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\nconst [count, setCount] = useState(1);","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2737":{"pageContent":"console.log(data);\n\n}\n\n```\n\n```js ShippingForm.js\n\nimport { memo, useState } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\nconst [count, setCount] = useState(1);\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering <ShippingForm />');\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 500) {\n\n// Do nothing for 500 ms to emulate extremely slow code\n\n}\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nconst formData = new FormData(e.target);\n\nconst orderDetails = {\n\n...Object.fromEntries(formData),\n\ncount\n\n};\n\nonSubmit(orderDetails);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<p><b>Note: <code>ShippingForm</code> is artificially slowed down!</b></p>\n\n<label>\n\nNumber of items:\n\n<button type=\"button\" onClick={() => setCount(count - 1)}>–</button>\n\n{count}\n\n<button type=\"button\" onClick={() => setCount(count + 1)}>+</button>\n\n</label>\n\n<label>\n\nStreet:\n\n<input name=\"street\" />\n\n</label>\n\n<label>\n\nCity:\n\n<input name=\"city\" />\n\n</label>\n\n<label>\n\nPostal code:\n\n<input name=\"zipCode\" />\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2738":{"pageContent":"</label>\n\n<label>\n\nStreet:\n\n<input name=\"street\" />\n\n</label>\n\n<label>\n\nCity:\n\n<input name=\"city\" />\n\n</label>\n\n<label>\n\nPostal code:\n\n<input name=\"zipCode\" />\n\n</label>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n});\n\nexport default ShippingForm;\n\n```\n\n```css\n\nlabel {\n\ndisplay: block; margin-top: 10px;\n\n}\n\ninput {\n\nmargin-left: 5px;\n\n}\n\nbutton[type=\"button\"] {\n\nmargin: 5px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nHowever, here is the same code **with the artificial slowdown removed.** Does the lack of `useCallback` feel noticeable or not?\n\n<Sandpack>\n\n```js App.js\n\nimport { useState } from 'react';\n\nimport ProductPage from './ProductPage.js';\n\nexport default function App() {\n\nconst [isDark, setIsDark] = useState(false);\n\nreturn (\n\n<>\n\n<label>\n\n<input\n\ntype=\"checkbox\"\n\nchecked={isDark}\n\nonChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<ProductPage\n\nreferrerId=\"wizard_of_oz\"\n\nproductId={123}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ProductPage.js active","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2739":{"pageContent":"onChange={e => setIsDark(e.target.checked)}\n\n/>\n\nDark mode\n\n</label>\n\n<hr />\n\n<ProductPage\n\nreferrerId=\"wizard_of_oz\"\n\nproductId={123}\n\ntheme={isDark ? 'dark' : 'light'}\n\n/>\n\n</>\n\n);\n\n}\n\n```\n\n```js ProductPage.js active\n\nimport ShippingForm from './ShippingForm.js';\n\nexport default function ProductPage({ productId, referrer, theme }) {\n\nfunction handleSubmit(orderDetails) {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}\n\nreturn (\n\n<div className={theme}>\n\n<ShippingForm onSubmit={handleSubmit} />\n\n</div>\n\n);\n\n}\n\nfunction post(url, data) {\n\n// Imagine this sends a request...\n\nconsole.log('POST /' + url);\n\nconsole.log(data);\n\n}\n\n```\n\n```js ShippingForm.js\n\nimport { memo, useState } from 'react';\n\nconst ShippingForm = memo(function ShippingForm({ onSubmit }) {\n\nconst [count, setCount] = useState(1);\n\nconsole.log('Rendering <ShippingForm />');\n\nfunction handleSubmit(e) {\n\ne.preventDefault();\n\nconst formData = new FormData(e.target);\n\nconst orderDetails = {\n\n...Object.fromEntries(formData),\n\ncount\n\n};\n\nonSubmit(orderDetails);\n\n}\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2740":{"pageContent":"function handleSubmit(e) {\n\ne.preventDefault();\n\nconst formData = new FormData(e.target);\n\nconst orderDetails = {\n\n...Object.fromEntries(formData),\n\ncount\n\n};\n\nonSubmit(orderDetails);\n\n}\n\nreturn (\n\n<form onSubmit={handleSubmit}>\n\n<label>\n\nNumber of items:\n\n<button type=\"button\" onClick={() => setCount(count - 1)}>–</button>\n\n{count}\n\n<button type=\"button\" onClick={() => setCount(count + 1)}>+</button>\n\n</label>\n\n<label>\n\nStreet:\n\n<input name=\"street\" />\n\n</label>\n\n<label>\n\nCity:\n\n<input name=\"city\" />\n\n</label>\n\n<label>\n\nPostal code:\n\n<input name=\"zipCode\" />\n\n</label>\n\n<button type=\"submit\">Submit</button>\n\n</form>\n\n);\n\n});\n\nexport default ShippingForm;\n\n```\n\n```css\n\nlabel {\n\ndisplay: block; margin-top: 10px;\n\n}\n\ninput {\n\nmargin-left: 5px;\n\n}\n\nbutton[type=\"button\"] {\n\nmargin: 5px;\n\n}\n\n.dark {\n\nbackground-color: black;\n\ncolor: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nQuite often, code without memoization works fine. If your interactions are fast enough, you don't need memoization.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2741":{"pageContent":"color: white;\n\n}\n\n.light {\n\nbackground-color: white;\n\ncolor: black;\n\n}\n\n```\n\n</Sandpack>\n\nQuite often, code without memoization works fine. If your interactions are fast enough, you don't need memoization.\n\nKeep in mind that you need to run React in production mode, disable [React Developer Tools](/learn/react-developer-tools), and use devices similar to the ones your app's users have in order to get a realistic sense of what's actually slowing down your app.\n\n<Solution />\n\n</Recipes>\n\n--\n\n### Updating state from a memoized callback {/*updating-state-from-a-memoized-callback*/}\n\nSometimes, you might need to update state based on previous state from a memoized callback.\n\nThis `handleAddTodo` function specifies `todos` as a dependency because it computes the next todos from it:\n\n```js {6,7}\n\nfunction TodoList() {\n\nconst [todos, setTodos] = useState([]);\n\nconst handleAddTodo = useCallback((text) => {\n\nconst newTodo = { id: nextId++, text };\n\nsetTodos([...todos, newTodo]);\n\n}, [todos]);\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2742":{"pageContent":"function TodoList() {\n\nconst [todos, setTodos] = useState([]);\n\nconst handleAddTodo = useCallback((text) => {\n\nconst newTodo = { id: nextId++, text };\n\nsetTodos([...todos, newTodo]);\n\n}, [todos]);\n\n// ...\n\n```\n\nYou'll usually want your memoized functions to have as few dependencies as possible. When you read some state only to calculate the next state, you can remove that dependency by passing an [updater function](/reference/react/useState#updating-state-based-on-the-previous-state) instead:\n\n```js {6,7}\n\nfunction TodoList() {\n\nconst [todos, setTodos] = useState([]);\n\nconst handleAddTodo = useCallback((text) => {\n\nconst newTodo = { id: nextId++, text };\n\nsetTodos(todos => [...todos, newTodo]);\n\n}, []); // ✅ No need for the todos dependency\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2743":{"pageContent":"const handleAddTodo = useCallback((text) => {\n\nconst newTodo = { id: nextId++, text };\n\nsetTodos(todos => [...todos, newTodo]);\n\n}, []); // ✅ No need for the todos dependency\n\n// ...\n\n```\n\nHere, instead of making `todos` a dependency of your function and reading it there, you pass an instruction about *how* to update the state (`todos => [...todos, newTodo]`) to React. [Read more about updater functions.](/reference/react/useState#updating-state-based-on-the-previous-state)\n\n--\n\n### Preventing an Effect from firing too often {/*preventing-an-effect-from-firing-too-often*/}\n\nSometimes, you might want to call a function from inside an [Effect:](/learn/synchronizing-with-effects)\n\n```js {4-9,12}\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nfunction createOptions() {\n\nreturn {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\n}\n\nuseEffect(() => {\n\nconst options = createOptions();\n\nconst connection = createConnection();\n\nconnection.connect();\n\n// ...\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2744":{"pageContent":"return {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\n}\n\nuseEffect(() => {\n\nconst options = createOptions();\n\nconst connection = createConnection();\n\nconnection.connect();\n\n// ...\n\n```\n\nThis creates a problem. [Every reactive value must be declared as a dependency of your Effect.](/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency) However, if you declare `createOptions` as a dependency, it will cause your Effect to constantly reconnect to the chat room:\n\n```js {6}\n\nuseEffect(() => {\n\nconst options = createOptions();\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [createOptions]); // 🔴 Problem: This dependency changes on every render\n\n// ...\n\n```\n\nTo solve this, you can wrap the function you need to call from an Effect into `useCallback`:\n\n```js {4-9,16}\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nconst createOptions = useCallback(() => {\n\nreturn {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2745":{"pageContent":"```js {4-9,16}\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nconst createOptions = useCallback(() => {\n\nreturn {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\n}, [roomId]); // ✅ Only changes when roomId changes\n\nuseEffect(() => {\n\nconst options = createOptions();\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [createOptions]); // ✅ Only changes when createOptions changes\n\n// ...\n\n```\n\nThis ensures that the `createOptions` function is the same between re-renders if the `roomId` is the same. **However, it's even better to remove the need for a function dependency.** Move your function *inside* the Effect:\n\n```js {5-10,16}\n\nfunction ChatRoom({ roomId }) {\n\nconst [message, setMessage] = useState('');\n\nuseEffect(() => {\n\nfunction createOptions() { // ✅ No need for useCallback or function dependencies!\n\nreturn {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\n}\n\nconst options = createOptions();\n\nconst connection = createConnection();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2746":{"pageContent":"return {\n\nserverUrl: 'https://localhost:1234',\n\nroomId: roomId\n\n};\n\n}\n\nconst options = createOptions();\n\nconst connection = createConnection();\n\nconnection.connect();\n\nreturn () => connection.disconnect();\n\n}, [roomId]); // ✅ Only changes when roomId changes\n\n// ...\n\n```\n\nNow your code is simpler and doesn't need `useCallback`. [Learn more about removing Effect dependencies.](/learn/removing-effect-dependencies#move-dynamic-objects-and-functions-inside-your-effect)\n\n--\n\n### Optimizing a custom Hook {/*optimizing-a-custom-hook*/}\n\nIf you're writing a [custom Hook,](/learn/reusing-logic-with-custom-hooks) it's recommended to wrap any functions that it returns into `useCallback`:\n\n```js {4-6,8-10}\n\nfunction useRouter() {\n\nconst { dispatch } = useContext(RouterStateContext);\n\nconst navigate = useCallback((url) => {\n\ndispatch({ type: 'navigate', url });\n\n}, [dispatch]);\n\nconst goBack = useCallback(() => {\n\ndispatch({ type: 'back' });\n\n}, [dispatch]);\n\nreturn {\n\nnavigate,\n\ngoBack,\n\n};\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2747":{"pageContent":"const navigate = useCallback((url) => {\n\ndispatch({ type: 'navigate', url });\n\n}, [dispatch]);\n\nconst goBack = useCallback(() => {\n\ndispatch({ type: 'back' });\n\n}, [dispatch]);\n\nreturn {\n\nnavigate,\n\ngoBack,\n\n};\n\n}\n\n```\n\nThis ensures that the consumers of your Hook can optimize their own code when needed.\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### Every time my component renders, `useCallback` returns a different function {/*every-time-my-component-renders-usecallback-returns-a-different-function*/}\n\nMake sure you've specified the dependency array as a second argument!\n\nIf you forget the dependency array, `useCallback` will return a new function every time:\n\n```js {7}\n\nfunction ProductPage({ productId, referrer }) {\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}); // 🔴 Returns a new function every time: no dependency array\n\n// ...\n\n```\n\nThis is the corrected version passing the dependency array as a second argument:\n\n```js {7}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2748":{"pageContent":"referrer,\n\norderDetails,\n\n});\n\n}); // 🔴 Returns a new function every time: no dependency array\n\n// ...\n\n```\n\nThis is the corrected version passing the dependency array as a second argument:\n\n```js {7}\n\nfunction ProductPage({ productId, referrer }) {\n\nconst handleSubmit = useCallback((orderDetails) => {\n\npost('/product/' + productId + '/buy', {\n\nreferrer,\n\norderDetails,\n\n});\n\n}, [productId, referrer]); // ✅ Does not return a new function unnecessarily\n\n// ...\n\n```\n\nIf this doesn't help, then the problem is that at least one of your dependencies is different from the previous render. You can debug this problem by manually logging your dependencies to the console:\n\n```js {5}\n\nconst handleSubmit = useCallback((orderDetails) => {\n\n// ..\n\n}, [productId, referrer]);\n\nconsole.log([productId, referrer]);\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2749":{"pageContent":"```js {5}\n\nconst handleSubmit = useCallback((orderDetails) => {\n\n// ..\n\n}, [productId, referrer]);\n\nconsole.log([productId, referrer]);\n\n```\n\nYou can then right-click on the arrays from different re-renders in the console and select \"Store as a global variable\" for both of them. Assuming the first one got saved as `temp1` and the second one got saved as `temp2`, you can then use the browser console to check whether each dependency in both arrays is the same:\n\n```js\n\nObject.is(temp1[0], temp2[0]); // Is the first dependency the same between the arrays?\n\nObject.is(temp1[1], temp2[1]); // Is the second dependency the same between the arrays?\n\nObject.is(temp1[2], temp2[2]); // ... and so on for every dependency ...\n\n```\n\nWhen you find which dependency is breaking memoization, either find a way to remove it, or [memoize it as well.](/reference/react/useMemo#memoizing-a-dependency-of-another-hook)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2750":{"pageContent":"```\n\nWhen you find which dependency is breaking memoization, either find a way to remove it, or [memoize it as well.](/reference/react/useMemo#memoizing-a-dependency-of-another-hook)\n\n--\n\n### I need to call `useCallback` for each list item in a loop, but it's not allowed {/*i-need-to-call-usememo-for-each-list-item-in-a-loop-but-its-not-allowed*/}\n\nSuppose the `Chart` component is wrapped in [`memo`](/reference/react/memo). You want to skip re-rendering every `Chart` in the list when the `ReportList` component re-renders. However, you can't call `useCallback` in a loop:\n\n```js {5-14}\n\nfunction ReportList({ items }) {\n\nreturn (\n\n<article>\n\n{items.map(item => {\n\n// 🔴 You can't call useCallback in a loop like this:\n\nconst handleClick = useCallback(() => {\n\nsendReport(item)\n\n}, [item]);\n\nreturn (\n\n<figure key={item.id}>\n\n<Chart onClick={handleClick} />\n\n</figure>\n\n);\n\n})}\n\n</article>\n\n);\n\n}\n\n```\n\nInstead, extract a component for an individual item, and put `useCallback` there:\n\n```js {5,12-21}\n\nfunction ReportList({ items }) {\n\nreturn (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2751":{"pageContent":"<Chart onClick={handleClick} />\n\n</figure>\n\n);\n\n})}\n\n</article>\n\n);\n\n}\n\n```\n\nInstead, extract a component for an individual item, and put `useCallback` there:\n\n```js {5,12-21}\n\nfunction ReportList({ items }) {\n\nreturn (\n\n<article>\n\n{items.map(item =>\n\n<Report key={item.id} item={item} />\n\n)}\n\n</article>\n\n);\n\n}\n\nfunction Report({ item }) {\n\n// ✅ Call useCallback at the top level:\n\nconst handleClick = useCallback(() => {\n\nsendReport(item)\n\n}, [item]);\n\nreturn (\n\n<figure>\n\n<Chart onClick={handleClick} />\n\n</figure>\n\n);\n\n}\n\n```\n\nAlternatively, you could remove `useCallback` in the last snippet and instead wrap `Report` itself in [`memo`.](/reference/react/memo) If the `item` prop does not change, `Report` will skip re-rendering, so `Chart` will skip re-rendering too:\n\n```js {5,6-8,15}\n\nfunction ReportList({ items }) {\n\n// ...\n\n}\n\nconst Report = memo(function Report({ item }) {\n\nfunction handleClick() {\n\nsendReport(item);\n\n}\n\nreturn (\n\n<figure>\n\n<Chart data={data} />\n\n</figure>\n\n);\n\n});\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useCallback.md"}},"2752":{"pageContent":"--\n\ntitle: useDeferredValue\n\n--\n\n<Intro>\n\n`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.\n\n```js\n\nconst deferredValue = useDeferredValue(value)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useDeferredValue(value)` {/*usedeferredvalue*/}\n\nCall `useDeferredValue` at the top level of your component to get a deferred version of that value.\n\n```js\n\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\n// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`value`: The value you want to defer. It can have any type.\n\n#### Returns {/*returns*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2753":{"pageContent":"// ...\n\n}\n\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`value`: The value you want to defer. It can have any type.\n\n#### Returns {/*returns*/}\n\nDuring the initial render, the returned deferred value will be the same as the value you provided. During updates, React will first attempt a re-render with the old value (so the returned value will match the old value), and then try another re-render in background with the new value (so the returned value will match the updated value).\n\n#### Caveats {/*caveats*/}\n\nThe values you pass to `useDeferredValue` should either be primitive values (like strings and numbers) or objects created outside of rendering. If you create a new object during rendering and immediately pass it to `useDeferredValue`, it will be different on every render, causing unnecessary background re-renders.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2754":{"pageContent":"When `useDeferredValue` receives a different value (compared with [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), in addition to the current render (when it still uses the previous value), it schedules a re-render in the background with the new value. The background re-render is interruptible: if there's another update to the `value`, React will restart the background re-render from scratch. For example, if the user is typing into an input faster than a chart receiving its deferred value can re-render, the chart will only re-render after the user stops typing.\n\n`useDeferredValue` is integrated with [`<Suspense>`.](/reference/react/Suspense) If the background update caused by a new value suspends the UI, the user will not see the fallback. They will keep seeing the old deferred value until the data loads.\n\n`useDeferredValue` does not by itself prevent extra network requests.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2755":{"pageContent":"`useDeferredValue` does not by itself prevent extra network requests.\n\nThere is no fixed delay caused by `useDeferredValue` itself. As soon as React finishes the original re-render, React will immediately start working on the background re-render with the new deferred value. However, any updates caused by events (like typing) will interrupt the background re-render and get prioritized over it.\n\nThe background re-render caused by `useDeferredValue` does not fire Effects until it's committed to the screen. If the background re-render suspends, its Effects will run after the data loads and the UI updates.\n\n--\n\n## Usage {/*usage*/}\n\n### Showing stale content while fresh content is loading {/*showing-stale-content-while-fresh-content-is-loading*/}\n\nCall `useDeferredValue` at the top level of your component to defer updating some part of your UI.\n\n```js [[1, 5, \"query\"], [2, 5, \"deferredQuery\"]]\n\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2756":{"pageContent":"```js [[1, 5, \"query\"], [2, 5, \"deferredQuery\"]]\n\nimport { useState, useDeferredValue } from 'react';\n\nfunction SearchPage() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\n// ...\n\n}\n\n```\n\nDuring the initial render, the <CodeStep step={2}>deferred value</CodeStep> will be the same as the <CodeStep step={1}>value</CodeStep> you provided.\n\nDuring updates, the <CodeStep step={2}>deferred value</CodeStep> will \"lag behind\" the latest <CodeStep step={1}>value</CodeStep>. In particular, React will first re-render *without* updating the deferred value, and then try to re-render with the newly received value in background.\n\n*Let's walk through an example to see when this is useful.**\n\n<Note>\n\nThis example assumes you use one of Suspense-enabled data sources:\n\nData fetching with Suspense-enabled frameworks like [Relay](https://relay.dev/docs/guided-tour/rendering/loading-states/) and [Next.js](https://nextjs.org/docs/advanced-features/react-18)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2757":{"pageContent":"Data fetching with Suspense-enabled frameworks like [Relay](https://relay.dev/docs/guided-tour/rendering/loading-states/) and [Next.js](https://nextjs.org/docs/advanced-features/react-18)\n\nLazy-loading component code with [`lazy`](/reference/react/lazy)\n\n[Learn more about Suspense and its limitations.](/reference/react/Suspense)\n\n</Note>\n\nIn this example, the `SearchResults` component [suspends](/reference/react/Suspense#displaying-a-fallback-while-content-is-loading) while fetching the search results. Try typing `\"a\"`, waiting for the results, and then editing it to `\"ab\"`. The results for `\"a\"` will get replaced by the loading fallback.\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState } from 'react';\n\nimport SearchResults from './SearchResults.js';","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2758":{"pageContent":"\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState } from 'react';\n\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<SearchResults query={query} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchResults.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function SearchResults({ query }) {\n\nif (query === '') {\n\nreturn null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2759":{"pageContent":"if (query === '') {\n\nreturn null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2760":{"pageContent":"// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/search?q=')) {\n\nreturn await getSearchResults(url.slice('/search?q='.length));\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getSearchResults(query) {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2761":{"pageContent":"id: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\nconst lowerQuery = query.trim().toLowerCase();\n\nreturn allAlbums.filter(album => {\n\nconst lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css\n\ninput { margin: 10px; }\n\n```\n\n</Sandpack>\n\nA common alternative UI pattern is to *defer* updating the list of results and to keep showing the previous results until the new results are ready. The `useDeferredValue` Hook lets you pass a deferred version of the query down:\n\n```js {3,11}\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2762":{"pageContent":"```js {3,11}\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<SearchResults query={deferredQuery} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\nThe `query` will update immediately, so the input will display the new value. However, the `deferredQuery` will keep its previous value until the data has loaded, so `SearchResults` will show the stale results for a bit.\n\nEnter `\"a\"` in the example below, wait for the results to load, and then edit the input to `\"ab\"`. Notice how instead of the Suspense fallback, you now see the stale result list until the new results have loaded:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2763":{"pageContent":"{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useDeferredValue } from 'react';\n\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<SearchResults query={deferredQuery} />\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchResults.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2764":{"pageContent":"// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function SearchResults({ query }) {\n\nif (query === '') {\n\nreturn null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2765":{"pageContent":"} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/search?q=')) {\n\nreturn await getSearchResults(url.slice('/search?q='.length));\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getSearchResults(query) {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2766":{"pageContent":"setTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\nconst lowerQuery = query.trim().toLowerCase();\n\nreturn allAlbums.filter(album => {\n\nconst lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css\n\ninput { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2767":{"pageContent":"const lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css\n\ninput { margin: 10px; }\n\n```\n\n</Sandpack>\n\n<DeepDive>\n\n#### How does deferring a value work under the hood? {/*how-does-deferring-a-value-work-under-the-hood*/}\n\nYou can think of it as happening in two steps:\n\n1. **First, React re-renders with the new `query` (`\"ab\"`) but with the old `deferredQuery` (still `\"a\")`.** The `deferredQuery` value, which you pass to the result list, is *deferred:* it \"lags behind\" the `query` value.\n\n2. **In background, React tries to re-render with *both* `query` and `deferredQuery` updated to `\"ab\"`.** If this re-render completes, React will show it on the screen. However, if it suspends (the results for `\"ab\"` have not loaded yet), React will abandon this rendering attempt, and retry this re-render again after the data has loaded. The user will keep seeing the stale deferred value until the data is ready.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2768":{"pageContent":"The deferred \"background\" rendering is interruptible. For example, if you type into the input again, React will abandon it and restart with the new value. React will always use the latest provided value.\n\nNote that there is still a network request per each keystroke. What's being deferred here is displaying results (until they're ready), not the network requests themselves. Even if the user continues typing, responses for each keystroke get cached, so pressing Backspace is instant and doesn't fetch again.\n\n</DeepDive>\n\n--\n\n### Indicating that the content is stale {/*indicating-that-the-content-is-stale*/}\n\nIn the example above, there is no indication that the result list for the latest query is still loading. This can be confusing to the user if the new results take a while to load. To make it more obvious to the user that the result list does not match the latest query, you can add a visual indication when the stale result list is displayed:\n\n```js {2}\n\n<div style={{","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2769":{"pageContent":"```js {2}\n\n<div style={{\n\nopacity: query !== deferredQuery ? 0.5 : 1,\n\n}}>\n\n<SearchResults query={deferredQuery} />\n\n</div>\n\n```\n\nWith this change, as soon as you start typing, the stale result list gets slightly dimmed until the new result list loads. You can also add a CSS transition to delay dimming so that it feels gradual, like in the example below:\n\n<Sandpack>\n\n```json package.json hidden\n\n{\n\n\"dependencies\": {\n\n\"react\": \"experimental\",\n\n\"react-dom\": \"experimental\"\n\n},\n\n\"scripts\": {\n\n\"start\": \"react-scripts start\",\n\n\"build\": \"react-scripts build\",\n\n\"test\": \"react-scripts test --env=jsdom\",\n\n\"eject\": \"react-scripts eject\"\n\n}\n\n}\n\n```\n\n```js App.js\n\nimport { Suspense, useState, useDeferredValue } from 'react';\n\nimport SearchResults from './SearchResults.js';\n\nexport default function App() {\n\nconst [query, setQuery] = useState('');\n\nconst deferredQuery = useDeferredValue(query);\n\nconst isStale = query !== deferredQuery;\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2770":{"pageContent":"const deferredQuery = useDeferredValue(query);\n\nconst isStale = query !== deferredQuery;\n\nreturn (\n\n<>\n\n<label>\n\nSearch albums:\n\n<input value={query} onChange={e => setQuery(e.target.value)} />\n\n</label>\n\n<Suspense fallback={<h2>Loading...</h2>}>\n\n<div style={{\n\nopacity: isStale ? 0.5 : 1,\n\ntransition: isStale ? 'opacity 0.2s 0.2s linear' : 'opacity 0s 0s linear'\n\n}}>\n\n<SearchResults query={deferredQuery} />\n\n</div>\n\n</Suspense>\n\n</>\n\n);\n\n}\n\n```\n\n```js SearchResults.js hidden\n\nimport { fetchData } from './data.js';\n\n// Note: this component is written using an experimental API\n\n// that's not yet available in stable versions of React.\n\n// For a realistic example you can follow today, try a framework\n\n// that's integrated with Suspense, like Relay or Next.js.\n\nexport default function SearchResults({ query }) {\n\nif (query === '') {\n\nreturn null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2771":{"pageContent":"return null;\n\n}\n\nconst albums = use(fetchData(`/search?q=${query}`));\n\nif (albums.length === 0) {\n\nreturn <p>No matches for <i>\"{query}\"</i></p>;\n\n}\n\nreturn (\n\n<ul>\n\n{albums.map(album => (\n\n<li key={album.id}>\n\n{album.title} ({album.year})\n\n</li>\n\n))}\n\n</ul>\n\n);\n\n}\n\n// This is a workaround for a bug to get the demo running.\n\n// TODO: replace with real implementation when the bug is fixed.\n\nfunction use(promise) {\n\nif (promise.status === 'fulfilled') {\n\nreturn promise.value;\n\n} else if (promise.status === 'rejected') {\n\nthrow promise.reason;\n\n} else if (promise.status === 'pending') {\n\nthrow promise;\n\n} else {\n\npromise.status = 'pending';\n\npromise.then(\n\nresult => {\n\npromise.status = 'fulfilled';\n\npromise.value = result;\n\n},\n\nreason => {\n\npromise.status = 'rejected';\n\npromise.reason = reason;\n\n},\n\n);\n\nthrow promise;\n\n}\n\n}\n\n```\n\n```js data.js hidden\n\n// Note: the way you would do data fetching depends on\n\n// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2772":{"pageContent":"// the framework that you use together with Suspense.\n\n// Normally, the caching logic would be inside a framework.\n\nlet cache = new Map();\n\nexport function fetchData(url) {\n\nif (!cache.has(url)) {\n\ncache.set(url, getData(url));\n\n}\n\nreturn cache.get(url);\n\n}\n\nasync function getData(url) {\n\nif (url.startsWith('/search?q=')) {\n\nreturn await getSearchResults(url.slice('/search?q='.length));\n\n} else {\n\nthrow Error('Not implemented');\n\n}\n\n}\n\nasync function getSearchResults(query) {\n\n// Add a fake delay to make waiting noticeable.\n\nawait new Promise(resolve => {\n\nsetTimeout(resolve, 500);\n\n});\n\nconst allAlbums = [{\n\nid: 13,\n\ntitle: 'Let It Be',\n\nyear: 1970\n\n}, {\n\nid: 12,\n\ntitle: 'Abbey Road',\n\nyear: 1969\n\n}, {\n\nid: 11,\n\ntitle: 'Yellow Submarine',\n\nyear: 1969\n\n}, {\n\nid: 10,\n\ntitle: 'The Beatles',\n\nyear: 1968\n\n}, {\n\nid: 9,\n\ntitle: 'Magical Mystery Tour',\n\nyear: 1967\n\n}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2773":{"pageContent":"}, {\n\nid: 8,\n\ntitle: 'Sgt. Pepper\\'s Lonely Hearts Club Band',\n\nyear: 1967\n\n}, {\n\nid: 7,\n\ntitle: 'Revolver',\n\nyear: 1966\n\n}, {\n\nid: 6,\n\ntitle: 'Rubber Soul',\n\nyear: 1965\n\n}, {\n\nid: 5,\n\ntitle: 'Help!',\n\nyear: 1965\n\n}, {\n\nid: 4,\n\ntitle: 'Beatles For Sale',\n\nyear: 1964\n\n}, {\n\nid: 3,\n\ntitle: 'A Hard Day\\'s Night',\n\nyear: 1964\n\n}, {\n\nid: 2,\n\ntitle: 'With The Beatles',\n\nyear: 1963\n\n}, {\n\nid: 1,\n\ntitle: 'Please Please Me',\n\nyear: 1963\n\n}];\n\nconst lowerQuery = query.trim().toLowerCase();\n\nreturn allAlbums.filter(album => {\n\nconst lowerTitle = album.title.toLowerCase();\n\nreturn (\n\nlowerTitle.startsWith(lowerQuery) ||\n\nlowerTitle.indexOf(' ' + lowerQuery) !== -1\n\n)\n\n});\n\n}\n\n```\n\n```css\n\ninput { margin: 10px; }\n\n```\n\n</Sandpack>\n\n--\n\n### Deferring re-rendering for a part of the UI {/*deferring-re-rendering-for-a-part-of-the-ui*/}\n\nYou can also apply `useDeferredValue` as a performance optimization. It is useful when a part of your UI is slow to re-render, there's no easy way to optimize it, and you want to prevent it from blocking the rest of the UI.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2774":{"pageContent":"Imagine you have a text field and a component (like a chart or a long list) that re-renders on every keystroke:\n\n```js\n\nfunction App() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<SlowList text={text} />\n\n</>\n\n);\n\n}\n\n```\n\nFirst, optimize `SlowList` to skip re-rendering when its props are the same. To do this, [wrap it in `memo`:](/reference/react/memo#skipping-re-rendering-when-props-are-unchanged)\n\n```js {1,3}\n\nconst SlowList = memo(function SlowList({ text }) {\n\n// ...\n\n});\n\n```\n\nHowever, this only helps if the `SlowList` props are *the same* as during the previous render. The problem you're facing now is that it's slow when they're *different,* and when you actually need to show different visual output.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2775":{"pageContent":"Concretely, the main performance problem is that whenever you type into the input, the `SlowList` receives new props, and re-rendering its entire tree makes the typing feel janky. In this case, `useDeferredValue` lets you prioritize updating the input (which must be fast) over updating the result list (which is allowed to be slower):\n\n```js {3,7}\n\nfunction App() {\n\nconst [text, setText] = useState('');\n\nconst deferredText = useDeferredValue(text);\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<SlowList text={deferredText} />\n\n</>\n\n);\n\n}\n\n```\n\nThis does not make re-rendering of the `SlowList` faster. However, it tells React that re-rendering the list can be deprioritized so that it doesn't block the keystrokes. The list will \"lag behind\" the input and then \"catch up\". Like before, React will attempt to update the list as soon as possible, but it will not block the user from typing again.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2776":{"pageContent":"<Recipes titleText=\"The difference between useDeferredValue and unoptimized re-rendering\" titleId=\"examples\">\n\n#### Deferred re-rendering of the list {/*deferred-re-rendering-of-the-list*/}\n\nIn this example, each item in the `SlowList` component is **artificially slowed down** so that you can see how `useDeferredValue` lets you keep the input responsive. Type into the input and notice that typing feels snappy while the list \"lags behind\" it.\n\n<Sandpack>\n\n```js\n\nimport { useState, useDeferredValue } from 'react';\n\nimport SlowList from './SlowList.js';\n\nexport default function App() {\n\nconst [text, setText] = useState('');\n\nconst deferredText = useDeferredValue(text);\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<SlowList text={deferredText} />\n\n</>\n\n);\n\n}\n\n```\n\n```js SlowList.js\n\nimport { memo } from 'react';\n\nconst SlowList = memo(function SlowList({ text }) {\n\n// Log once. The actual slowdown is inside SlowItem.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 250 <SlowItem />');\n\nlet items = [];","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2777":{"pageContent":"const SlowList = memo(function SlowList({ text }) {\n\n// Log once. The actual slowdown is inside SlowItem.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 250 <SlowItem />');\n\nlet items = [];\n\nfor (let i = 0; i < 250; i++) {\n\nitems.push(<SlowItem key={i} text={text} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowItem({ text }) {\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 1) {\n\n// Do nothing for 1 ms per item to emulate extremely slow code\n\n}\n\nreturn (\n\n<li className=\"item\">\n\nText: {text}\n\n</li>\n\n)\n\n}\n\nexport default SlowList;\n\n```\n\n```css\n\n.items {\n\npadding: 0;\n\n}\n\n.item {\n\nlist-style: none;\n\ndisplay: block;\n\nheight: 40px;\n\npadding: 5px;\n\nmargin-top: 10px;\n\nborder-radius: 4px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n#### Unoptimized re-rendering of the list {/*unoptimized-re-rendering-of-the-list*/}\n\nIn this example, each item in the `SlowList` component is **artificially slowed down**, but there is no `useDeferredValue`.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2778":{"pageContent":"In this example, each item in the `SlowList` component is **artificially slowed down**, but there is no `useDeferredValue`.\n\nNotice how typing into the input feels very janky. This is because without `useDeferredValue`, each keystroke forces the entire list to re-render immediately in a non-interruptible way.\n\n<Sandpack>\n\n```js\n\nimport { useState } from 'react';\n\nimport SlowList from './SlowList.js';\n\nexport default function App() {\n\nconst [text, setText] = useState('');\n\nreturn (\n\n<>\n\n<input value={text} onChange={e => setText(e.target.value)} />\n\n<SlowList text={text} />\n\n</>\n\n);\n\n}\n\n```\n\n```js SlowList.js\n\nimport { memo } from 'react';\n\nconst SlowList = memo(function SlowList({ text }) {\n\n// Log once. The actual slowdown is inside SlowItem.\n\nconsole.log('[ARTIFICIALLY SLOW] Rendering 250 <SlowItem />');\n\nlet items = [];\n\nfor (let i = 0; i < 250; i++) {\n\nitems.push(<SlowItem key={i} text={text} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowItem({ text }) {\n\nlet startTime = performance.now();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2779":{"pageContent":"for (let i = 0; i < 250; i++) {\n\nitems.push(<SlowItem key={i} text={text} />);\n\n}\n\nreturn (\n\n<ul className=\"items\">\n\n{items}\n\n</ul>\n\n);\n\n});\n\nfunction SlowItem({ text }) {\n\nlet startTime = performance.now();\n\nwhile (performance.now() - startTime < 1) {\n\n// Do nothing for 1 ms per item to emulate extremely slow code\n\n}\n\nreturn (\n\n<li className=\"item\">\n\nText: {text}\n\n</li>\n\n)\n\n}\n\nexport default SlowList;\n\n```\n\n```css\n\n.items {\n\npadding: 0;\n\n}\n\n.item {\n\nlist-style: none;\n\ndisplay: block;\n\nheight: 40px;\n\npadding: 5px;\n\nmargin-top: 10px;\n\nborder-radius: 4px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n<Pitfall>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2780":{"pageContent":"```\n\n```css\n\n.items {\n\npadding: 0;\n\n}\n\n.item {\n\nlist-style: none;\n\ndisplay: block;\n\nheight: 40px;\n\npadding: 5px;\n\nmargin-top: 10px;\n\nborder-radius: 4px;\n\nborder: 1px solid #aaa;\n\n}\n\n```\n\n</Sandpack>\n\n<Solution />\n\n</Recipes>\n\n<Pitfall>\n\nThis optimization requires `SlowList` to be wrapped in [`memo`.](/reference/react/memo) This is because whenever the `text` changes, React needs to be able to re-render the parent component quickly. During that re-render, `deferredText` still has its previous value, so `SlowList` is able to skip re-rendering (its props have not changed). Without [`memo`,](/reference/react/memo) it would have to re-render anyway, defeating the point of the optimization.\n\n</Pitfall>\n\n<DeepDive>\n\n#### How is deferring a value different from debouncing and throttling? {/*how-is-deferring-a-value-different-from-debouncing-and-throttling*/}\n\nThere are two common optimization techniques you might have used before in this scenario:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2781":{"pageContent":"There are two common optimization techniques you might have used before in this scenario:\n\n*Debouncing* means you'd wait for the user to stop typing (e.g. for a second) before updating the list.\n\n*Throttling* means you'd update the list every once in a while (e.g. at most once a second).\n\nWhile these techniques are helpful in some cases, `useDeferredValue` is better suited to optimizing rendering because it is deeply integrated with React itself and adapts to the user's device.\n\nUnlike debouncing or throttling, it doesn't require choosing any fixed delay. If the user's device is fast (e.g. powerful laptop), the deferred re-render would happen almost immediately and wouldn't be noticeable. If the user's device is slow, the list would \"lag behind\" the input proportionally to how slow the device is.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2782":{"pageContent":"Also, unlike with debouncing or throttling, deferred re-renders done by `useDeferredValue` are interruptible by default. This means that if React is in the middle of re-rendering a large list, but the user makes another keystroke, React will abandon that re-render, handle the keystroke, and then start rendering in background again. By contrast, debouncing and throttling still produce a janky experience because they're *blocking:* they merely postpone the moment when rendering blocks the keystroke.\n\nIf the work you're optimizing doesn't happen during rendering, debouncing and throttling are still useful. For example, they can let you fire fewer network requests. You can also use these techniques together.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useDeferredValue.md"}},"2783":{"pageContent":"--\n\ntitle: \"Built-in React Components\"\n\n--\n\n<Intro>\n\nReact exposes a few built-in components that you can use in your JSX.\n\n</Intro>\n\n--\n\n## Built-in components {/*built-in-components*/}\n\n[`<Fragment>`](/reference/react/Fragment), alternatively written as `<>...</>`, lets you group multiple JSX nodes together.\n\n[`<Profiler>`](/reference/react/Profiler) lets you measure rendering performance of a React tree programmatically.\n\n[`<Suspense>`](/reference/react/Suspense) lets you display a fallback while the child components are loading.\n\n[`<StrictMode>`](/reference/react/StrictMode) enables extra development-only checks that help you find bugs early.\n\n--\n\n## Your own components {/*your-own-components*/}\n\nYou can also [define your own components](/learn/your-first-component) as JavaScript functions.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/components.md"}},"2784":{"pageContent":"--\n\ntitle: PureComponent\n\n--\n\n<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#alternatives)\n\n</Pitfall>\n\n<Intro>\n\n`PureComponent` is similar to [`Component`](/reference/react/Component) but it skips re-renders for same props and state. Class components are still supported by React, but we don't recommend using them in new code.\n\n```js\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `PureComponent` {/*purecomponent*/}\n\nTo skip re-rendering a class component for same props and state, extend `PureComponent` instead of [`Component`:](/reference/react/Component)\n\n```js\n\nimport { PureComponent } from 'react';\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2785":{"pageContent":"```js\n\nimport { PureComponent } from 'react';\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\n`PureComponent` is a subclass of `Component` and supports [all the `Component` APIs.](/reference/react/Component#reference) Extending `PureComponent` is equivalent to defining a custom [`shouldComponentUpdate`](/reference/react/Component#shouldcomponentupdate) method that shallowly compares props and state.\n\n[See more examples below.](#usage)\n\n--\n\n## Usage {/*usage*/}\n\n### Skipping unnecessary re-renders for class components {/*skipping-unnecessary-re-renders-for-class-components*/}\n\nReact normally re-renders a component whenever its parent re-renders. As an optimization, you can create a component that React will not re-render when its parent re-renders so long as its new props and state are the same as the old props and state. [Class components](/reference/react/Component) can opt into this behavior by extending `PureComponent`:\n\n```js {1}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2786":{"pageContent":"```js {1}\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nreturn <h1>Hello, {this.props.name}!</h1>;\n\n}\n\n}\n\n```\n\nA React component should always have [pure rendering logic.](/learn/keeping-components-pure) This means that it must return the same output if its props, state, and context haven't changed. By using `PureComponent`, you are telling React that your component complies with this requirement, so React doesn't need to re-render as long as its props and state haven't changed. However, your component will still re-render if a context that it's using changes.\n\nIn this example, notice that the `Greeting` component re-renders whenever `name` is changed (because that's one of its props), but not when `address` is changed (because it's not passed to `Greeting` as a prop):\n\n<Sandpack>\n\n```js\n\nimport { PureComponent, useState } from 'react';\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nconsole.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2787":{"pageContent":"<Sandpack>\n\n```js\n\nimport { PureComponent, useState } from 'react';\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nconsole.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n\nreturn <h3>Hello{this.props.name && ', '}{this.props.name}!</h3>;\n\n}\n\n}\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}\n\n<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>\n\n<Greeting name={name} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-bottom: 16px;\n\n}\n\n```\n\n</Sandpack>\n\n<Pitfall>\n\nWe recommend to define components as functions instead of classes. [See how to migrate.](#alternatives)\n\n</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Migrating from a `PureComponent` class component to a function {/*migrating-from-a-purecomponent-class-component-to-a-function*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2788":{"pageContent":"</Pitfall>\n\n--\n\n## Alternatives {/*alternatives*/}\n\n### Migrating from a `PureComponent` class component to a function {/*migrating-from-a-purecomponent-class-component-to-a-function*/}\n\nWe recommend to use function components instead of [class components](/reference/react/Component) in the new code. If you have some existing class components using `PureComponent`, here is how you can convert them. This is the original code:\n\n<Sandpack>\n\n```js\n\nimport { PureComponent, useState } from 'react';\n\nclass Greeting extends PureComponent {\n\nrender() {\n\nconsole.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n\nreturn <h3>Hello{this.props.name && ', '}{this.props.name}!</h3>;\n\n}\n\n}\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}\n\n<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2789":{"pageContent":"return (\n\n<>\n\n<label>\n\nName{': '}\n\n<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>\n\n<Greeting name={name} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-bottom: 16px;\n\n}\n\n```\n\n</Sandpack>\n\nWhen you [convert this component from a class to a function,](/reference/react/Component#alternatives) wrap it in [`memo`:](/reference/react/memo)\n\n<Sandpack>\n\n```js\n\nimport { memo, useState } from 'react';\n\nconst Greeting = memo(function Greeting({ name }) {\n\nconsole.log(\"Greeting was rendered at\", new Date().toLocaleTimeString());\n\nreturn <h3>Hello{name && ', '}{name}!</h3>;\n\n});\n\nexport default function MyApp() {\n\nconst [name, setName] = useState('');\n\nconst [address, setAddress] = useState('');\n\nreturn (\n\n<>\n\n<label>\n\nName{': '}\n\n<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>\n\n<Greeting name={name} />\n\n</>\n\n);\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2790":{"pageContent":"<input value={name} onChange={e => setName(e.target.value)} />\n\n</label>\n\n<label>\n\nAddress{': '}\n\n<input value={address} onChange={e => setAddress(e.target.value)} />\n\n</label>\n\n<Greeting name={name} />\n\n</>\n\n);\n\n}\n\n```\n\n```css\n\nlabel {\n\ndisplay: block;\n\nmargin-bottom: 16px;\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\nUnlike `PureComponent`, [`memo`](/reference/react/memo) does not compare the new and the old state. In function components, calling the [`set` function](/reference/react/useState#setstate) with the same state [already prevents re-renders by default,](/reference/react/memo#updating-a-memoized-component-using-state) even without `memo`.\n\n</Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/PureComponent.md"}},"2791":{"pageContent":"--\n\ntitle: useSyncExternalStore\n\n--\n\n<Intro>\n\n`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.\n\n```js\n\nconst snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)` {/*usesyncexternalstore*/}\n\nCall `useSyncExternalStore` at the top level of your component to read a value from an external data store.\n\n```js\n\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\nconst todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n// ...\n\n}\n\n```\n\nIt returns the snapshot of the data in the store. You need to pass two functions as arguments:\n\n1. The `subscribe` function should subscribe to the store and return a function that unsubscribes.\n\n2. The `getSnapshot` function should read a snapshot of the data from the store.\n\n[See more examples below.](#usage)","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2792":{"pageContent":"2. The `getSnapshot` function should read a snapshot of the data from the store.\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}\n\n`subscribe`: A function that takes a single `callback` argument and subscribes it to the store. When the store changes, it should invoke the provided `callback`. This will cause the component to re-render. The `subscribe` function should return a function that cleans up the subscription.\n\n`getSnapshot`: A function that returns a snapshot of the data in the store that's needed by the component. While the store has not changed, repeated calls to `getSnapshot` must return the same value. If the store changes and the returned value is different (as compared by [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)), React will re-render the component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2793":{"pageContent":"**optional** `getServerSnapshot`: A function that returns the initial snapshot of the data in the store. It will be used only during server rendering and during hydration of server-rendered content on the client. The server snapshot must be the same between the client and the server, and is usually serialized and passed from the server to the client. If this function is not provided, rendering the component on the server will throw an error.\n\n#### Returns {/*returns*/}\n\nThe current snapshot of the store which you can use in your rendering logic.\n\n#### Caveats {/*caveats*/}\n\nThe store snapshot returned by `getSnapshot` must be immutable. If the underlying store has mutable data, return a new immutable snapshot if the data has changed. Otherwise, return a cached last snapshot.\n\nIf a different `subscribe` function is passed during a re-render, React will re-subscribe to the store using the newly passed `subscribe` function. You can prevent this by declaring `subscribe` outside the component.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2794":{"pageContent":"--\n\n## Usage {/*usage*/}\n\n### Subscribing to an external store {/*subscribing-to-an-external-store*/}\n\nMost of your React components will only read data from their [props,](/learn/passing-props-to-a-component) [state,](/reference/react/useState) and [context.](/reference/react/useContext) However, sometimes a component needs to read some data from some store outside of React that changes over time. This includes:\n\nThird-party state management libraries that hold state outside of React.\n\nBrowser APIs that expose a mutable value and events to subscribe to its changes.\n\nCall `useSyncExternalStore` at the top level of your component to read a value from an external data store.\n\n```js [[1, 5, \"todosStore.subscribe\"], [2, 5, \"todosStore.getSnapshot\"], [3, 5, \"todos\", 0]]\n\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\nconst todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2795":{"pageContent":"import { todosStore } from './todoStore.js';\n\nfunction TodosApp() {\n\nconst todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\n// ...\n\n}\n\n```\n\nIt returns the <CodeStep step={3}>snapshot</CodeStep> of the data in the store. You need to pass two functions as arguments:\n\n1. The <CodeStep step={1}>`subscribe` function</CodeStep> should subscribe to the store and return a function that unsubscribes.\n\n2. The <CodeStep step={2}>`getSnapshot` function</CodeStep> should read a snapshot of the data from the store.\n\nReact will use these functions to keep your component subscribed to the store and re-render it on changes.\n\nFor example, in the sandbox below, `todosStore` is implemented as an external store that stores data outside of React. The `TodosApp` component connects to that external store with the `useSyncExternalStore` Hook.\n\n<Sandpack>\n\n```js\n\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nexport default function TodosApp() {","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2796":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useSyncExternalStore } from 'react';\n\nimport { todosStore } from './todoStore.js';\n\nexport default function TodosApp() {\n\nconst todos = useSyncExternalStore(todosStore.subscribe, todosStore.getSnapshot);\n\nreturn (\n\n<>\n\n<button onClick={() => todosStore.addTodo()}>Add todo</button>\n\n<hr />\n\n<ul>\n\n{todos.map(todo => (\n\n<li key={todo.id}>{todo.text}</li>\n\n))}\n\n</ul>\n\n</>\n\n);\n\n}\n\n```\n\n```js todoStore.js\n\n// This is an example of a third-party store\n\n// that you might need to integrate with React.\n\n// If your app is fully built with React,\n\n// we recommend using React state instead.\n\nlet nextId = 0;\n\nlet todos = [{ id: nextId++, text: 'Todo #1' }];\n\nlet listeners = [];\n\nexport const todosStore = {\n\naddTodo() {\n\ntodos = [...todos, { id: nextId++, text: 'Todo #' + nextId }]\n\nemitChange();\n\n},\n\nsubscribe(listener) {\n\nlisteners = [...listeners, listener];\n\nreturn () => {\n\nlisteners = listeners.filter(l => l !== listener);\n\n};\n\n},\n\ngetSnapshot() {\n\nreturn todos;\n\n}\n\n};\n\nfunction emitChange() {\n\nfor (let listener of listeners) {\n\nlistener();\n\n}\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2797":{"pageContent":"return () => {\n\nlisteners = listeners.filter(l => l !== listener);\n\n};\n\n},\n\ngetSnapshot() {\n\nreturn todos;\n\n}\n\n};\n\nfunction emitChange() {\n\nfor (let listener of listeners) {\n\nlistener();\n\n}\n\n}\n\n```\n\n</Sandpack>\n\n<Note>\n\nWhen possible, we recommend to use the built-in React state with [`useState`](/reference/react/useState) and [`useReducer`](/reference/react/useReducer) instead. The `useSyncExternalStore` API is mostly useful if you need to integrate with existing non-React code.\n\n</Note>\n\n--\n\n### Subscribing to a browser API {/*subscribing-to-a-browser-api*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2798":{"pageContent":"</Note>\n\n--\n\n### Subscribing to a browser API {/*subscribing-to-a-browser-api*/}\n\nAnother reason to add `useSyncExternalStore` is when you want to subscribe to some value exposed by the browser that changes over time. For example, suppose that you want your component to display whether the network connection is active. The browser exposes this information via a property called [`navigator.onLine`.](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine) This value can change over time without React's knowledge, so you need to read it with `useSyncExternalStore`.\n\n```js\n\nimport { useSyncExternalStore } from 'react';\n\nfunction ChatIndicator() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n// ...\n\n}\n\n```\n\nTo implement the `getSnapshot` function, read the current value from the browser API:\n\n```js\n\nfunction getSnapshot() {\n\nreturn navigator.onLine;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2799":{"pageContent":"// ...\n\n}\n\n```\n\nTo implement the `getSnapshot` function, read the current value from the browser API:\n\n```js\n\nfunction getSnapshot() {\n\nreturn navigator.onLine;\n\n}\n\n```\n\nNext, you need to implement the `subscribe` function. For example, when `navigator.onLine` changes, the browser fires the [`online`](https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event) and [`offline`](https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event) events on the `window` object. You need to subscribe the `callback` argument to the corresponding events, and then return a function that cleans up the subscriptions:\n\n```js\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2800":{"pageContent":"window.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```\n\nNow React knows how to read the value from the external `navigator.onLine` API and how to subscribe to its changes. Try to disconnect your device from the network and notice that the component re-renders in response:\n\n<Sandpack>\n\n```js\n\nimport { useSyncExternalStore } from 'react';\n\nexport default function ChatIndicator() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nfunction getSnapshot() {\n\nreturn navigator.onLine;\n\n}\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Extracting the logic to a custom Hook {/*extracting-the-logic-to-a-custom-hook*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2801":{"pageContent":"window.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Extracting the logic to a custom Hook {/*extracting-the-logic-to-a-custom-hook*/}\n\nUsually you won't write `useSyncExternalStore` directly in your components. Instead, you'll typically call it from your own custom Hook. This lets you use the same external store from different components.\n\nFor example, this custom `useOnlineStatus` Hook tracks whether the network is online:\n\n```js {3,6}\n\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\nreturn isOnline;\n\n}\n\nfunction getSnapshot() {\n\n// ...\n\n}\n\nfunction subscribe(callback) {\n\n// ...\n\n}\n\n```\n\nNow different components can call `useOnlineStatus` without repeating the underlying implementation:\n\n<Sandpack>\n\n```js\n\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2802":{"pageContent":"<Sandpack>\n\n```js\n\nimport { useOnlineStatus } from './useOnlineStatus.js';\n\nfunction StatusBar() {\n\nconst isOnline = useOnlineStatus();\n\nreturn <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\n\n}\n\nfunction SaveButton() {\n\nconst isOnline = useOnlineStatus();\n\nfunction handleSaveClick() {\n\nconsole.log('✅ Progress saved');\n\n}\n\nreturn (\n\n<button disabled={!isOnline} onClick={handleSaveClick}>\n\n{isOnline ? 'Save progress' : 'Reconnecting...'}\n\n</button>\n\n);\n\n}\n\nexport default function App() {\n\nreturn (\n\n<>\n\n<SaveButton />\n\n<StatusBar />\n\n</>\n\n);\n\n}\n\n```\n\n```js useOnlineStatus.js\n\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\nreturn isOnline;\n\n}\n\nfunction getSnapshot() {\n\nreturn navigator.onLine;\n\n}\n\nfunction subscribe(callback) {\n\nwindow.addEventListener('online', callback);\n\nwindow.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```\n\n</Sandpack>\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2803":{"pageContent":"window.addEventListener('offline', callback);\n\nreturn () => {\n\nwindow.removeEventListener('online', callback);\n\nwindow.removeEventListener('offline', callback);\n\n};\n\n}\n\n```\n\n</Sandpack>\n\n--\n\n### Adding support for server rendering {/*adding-support-for-server-rendering*/}\n\nIf your React app uses [server rendering,](/reference/react-dom/server) your React components will also run outside the browser environment to generate the initial HTML. This creates a few challenges when connecting to an external store:\n\nIf you're connecting to a browser-only API, it won't work because it does not exist on the server.\n\nIf you're connecting to a third-party data store, you'll need its data to match between the server and client.\n\nTo solve these issues, pass a `getServerSnapshot` function as the third argument to `useSyncExternalStore`:\n\n```js {4,12-14}\n\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\nreturn isOnline;\n\n}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2804":{"pageContent":"```js {4,12-14}\n\nimport { useSyncExternalStore } from 'react';\n\nexport function useOnlineStatus() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n\nreturn isOnline;\n\n}\n\nfunction getSnapshot() {\n\nreturn navigator.onLine;\n\n}\n\nfunction getServerSnapshot() {\n\nreturn true; // Always show \"Online\" for server-generated HTML\n\n}\n\nfunction subscribe(callback) {\n\n// ...\n\n}\n\n```\n\nThe `getServerSnapshot` function is similar to `getSnapshot`, but it runs only in two situations:\n\nIt runs on the server when generating the HTML.\n\nIt runs on the client during [hydration](/reference/react-dom/client/hydrateRoot), i.e. when React takes the server HTML and makes it interactive.\n\nThis lets you provide the initial snapshot value which will be used before the app becomes interactive. If there is no meaningful initial value for the server rendering, you can [force the component to render only on the client.](/reference/react/Suspense#providing-a-fallback-for-server-errors-and-server-only-content)\n\n<Note>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2805":{"pageContent":"<Note>\n\nMake sure that `getServerSnapshot` returns the same exact data on the initial client render as it returned on the server. For example, if `getServerSnapshot` returned some prepopulated store content on the server, you need to transfer this content to the client. One common way to do this is to emit a `<script>` tag that sets a global like `window.MY_STORE_DATA` during server rendering, and then read from that global on the client in `getServerSnapshot`. Your external store should provide instructions on how to do that.\n\n</Note>\n\n--\n\n## Troubleshooting {/*troubleshooting*/}\n\n### I'm getting an error: \"The result of `getSnapshot` should be cached\" {/*im-getting-an-error-the-result-of-getsnapshot-should-be-cached*/}\n\nIf you get this error, it means your `getSnapshot` function returns a new object every time it's called, for example:\n\n```js {2-5}\n\nfunction getSnapshot() {\n\n// 🔴 Do not return always different objects from getSnapshot\n\nreturn {\n\ntodos: myStore.todos\n\n};\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2806":{"pageContent":"```js {2-5}\n\nfunction getSnapshot() {\n\n// 🔴 Do not return always different objects from getSnapshot\n\nreturn {\n\ntodos: myStore.todos\n\n};\n\n}\n\n```\n\nReact will re-render the component if `getSnapshot` return value is different from the last time. This is why, if you always return a different value, you will enter an infinite loop and get this error.\n\nYour `getSnapshot` object should only return a different object if something has actually changed. If your store contains immutable data, you can return that data directly:\n\n```js {2-3}\n\nfunction getSnapshot() {\n\n// ✅ You can return immutable data\n\nreturn myStore.todos;\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2807":{"pageContent":"```js {2-3}\n\nfunction getSnapshot() {\n\n// ✅ You can return immutable data\n\nreturn myStore.todos;\n\n}\n\n```\n\nIf your store data is mutable, your `getSnapshot` function should return an immutable snapshot of it. This means it *does* need to create new objects, but it shouldn't do this for every single call. Instead, it should store the last calculated snapshot, and return the same snapshot as the last time if the data in the store has not changed. How you determine whether mutable data has changed depends on how your mutable store is implemented.\n\n--\n\n### My `subscribe` function gets called after every re-render {/*my-subscribe-function-gets-called-after-every-re-render*/}\n\nThis `subscribe` function is defined *inside* a component so it is different on every re-render:\n\n```js {4-7}\n\nfunction ChatIndicator() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n// 🚩 Always a different function, so React will resubscribe on every re-render\n\nfunction subscribe() {\n\n// ...\n\n}\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2808":{"pageContent":"const isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n// 🚩 Always a different function, so React will resubscribe on every re-render\n\nfunction subscribe() {\n\n// ...\n\n}\n\n// ...\n\n}\n\n```\n\nReact will resubscribe to your store if you pass a different `subscribe` function between re-renders. If this causes performance issues and you'd like to avoid resubscribing to the store, move the `subscribe` function outside:\n\n```js {6-9}\n\nfunction ChatIndicator() {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n// ...\n\n}\n\n// ✅ Always the same function, so React won't need to resubscribe\n\nfunction subscribe() {\n\n// ...\n\n}\n\n```\n\nAlternatively, wrap `subscribe` into [`useCallback`](/reference/react/useCallback) to only resubscribe when some argument changes:\n\n```js {4-8}\n\nfunction ChatIndicator({ userId }) {\n\nconst isOnline = useSyncExternalStore(subscribe, getSnapshot);\n\n// ✅ Same function as long as userId doesn't change\n\nconst subscribe = useCallback(() => {\n\n// ...\n\n}, [userId]);\n\n// ...\n\n}\n\n```","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useSyncExternalStore.md"}},"2809":{"pageContent":"--\ntitle: useInsertionEffect\n---\n\n\n\n`useInsertionEffect` is aimed at CSS-in-JS library authors. Unless you are working on a CSS-in-JS library and need a place to inject the styles, you probably want [`useEffect`](/reference/react/useEffect) or [`useLayoutEffect`](/reference/react/useLayoutEffect) instead.\n\n\n\n\n\n`useInsertionEffect` is a version of [`useEffect`](/reference/react/useEffect) that fires before any DOM mutations.\n\n```js\nuseInsertionEffect(setup, dependencies?)\n```\n\n\n\n\n\n---\n\n## Reference {/*reference*/}\n\n### `useInsertionEffect(setup, dependencies?)` {/*useinsertioneffect*/}\n\nCall `useInsertionEffect` to insert the styles before any DOM mutations:\n\n```js\nimport { useInsertionEffect } from 'react';\n\n// Inside your CSS-in-JS library\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // ... inject  tags here ...\n  });\n  return rule;\n}\n```\n\n[See more examples below.](#usage)\n\n#### Parameters {/*parameters*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2810":{"pageContent":"* `setup`: The function with your Effect's logic. Your setup function may also optionally return a *cleanup* function. Before your component is first added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. Before your component is removed from the DOM, React will run your cleanup function one last time.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2811":{"pageContent":"* **optional** `dependencies`: The list of all reactive values referenced inside of the `setup` code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter is [configured for React](/learn/editor-setup#linting), it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like `[dep1, dep2, dep3]`. React will compare each dependency with its previous value using the [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) comparison algorithm. If you don't specify the dependencies at all, your Effect will re-run after every re-render of the component.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2812":{"pageContent":"#### Returns {/*returns*/}\n\n`useInsertionEffect` returns `undefined`.\n\n#### Caveats {/*caveats*/}\n\n* Effects only run on the client. They don't run during server rendering.\n* You can't update state from inside `useInsertionEffect`.\n* By the time `useInsertionEffect` runs, refs are not attached yet, and DOM is not yet updated.\n\n---\n\n## Usage {/*usage*/}\n\n### Injecting dynamic styles from CSS-in-JS libraries {/*injecting-dynamic-styles-from-css-in-js-libraries*/}\n\nTraditionally, you would style React components using plain CSS.\n\n```js\n// In your JS file:\n<button className=\"success\" />\n\n// In your CSS file:\n.success { color: green; }\n```\n\nSome teams prefer to author styles directly in JavaScript code instead of writing CSS files. This usually requires using a CSS-in-JS library or a tool. There are three common approaches to CSS-in-JS you might encounter:\n\n1. Static extraction to CSS files with a compiler\n2. Inline styles, e.g. `<div style={{ opacity: 1 }}>`\n3. Runtime injection of `<style>` tags","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2813":{"pageContent":"1. Static extraction to CSS files with a compiler\n2. Inline styles, e.g. `<div style={{ opacity: 1 }}>`\n3. Runtime injection of `<style>` tags\n\nIf you use CSS-in-JS, we recommend a combination of the first two approaches (CSS files for static styles, inline styles for dynamic styles). **We don't recommend runtime `<style>` tag injection for two reasons:**\n\n1. Runtime injection forces the browser to recalculate the styles a lot more often.\n2. Runtime injection can be very slow if it happens at the wrong time in the React lifecycle.\n\nThe first problem is not solvable, but `useInsertionEffect` helps you solve the second problem.\n\nCall `useInsertionEffect` to insert the styles before any DOM mutations:","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2814":{"pageContent":"The first problem is not solvable, but `useInsertionEffect` helps you solve the second problem.\n\nCall `useInsertionEffect` to insert the styles before any DOM mutations:\n\n```js {4-11}\n// Inside your CSS-in-JS library\nlet isInserted = new Set();\nfunction useCSS(rule) {\n  useInsertionEffect(() => {\n    // As explained earlier, we don't recommend runtime injection of <style> tags.\n    // But if you have to do it, then it's important to do in useInsertionEffect.\n    if (!isInserted.has(rule)) {\n      isInserted.add(rule);\n      document.head.appendChild(getStyleForRule(rule));\n    }\n  });\n  return rule;\n}\n\nfunction Button() {\n  const className = useCSS('...');\n  return <div className={className} />;\n}\n```\n\nSimilarly to `useEffect`, `useInsertionEffect` does not run on the server. If you need to collect which CSS rules have been used on the server, you can do it during rendering:\n\n```js {1,4-6}\nlet collectedRulesSet = new Set();","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2815":{"pageContent":"```js {1,4-6}\nlet collectedRulesSet = new Set();\n\nfunction useCSS(rule) {\n  if (typeof window === 'undefined') {\n    collectedRulesSet.add(rule);\n  }\n  useInsertionEffect(() => {\n    // ...\n  });\n  return rule;\n}\n```\n\n[Read more about upgrading CSS-in-JS libraries with runtime injection to `useInsertionEffect`.](https://github.com/reactwg/react-18/discussions/110)\n\n<DeepDive>\n\n#### How is this better than injecting styles during rendering or useLayoutEffect? {/*how-is-this-better-than-injecting-styles-during-rendering-or-uselayouteffect*/}\n\nIf you insert styles during rendering and React is processing a [non-blocking update,](/reference/react/useTransition#marking-a-state-update-as-a-non-blocking-transition) the browser will recalculate the styles every single frame while rendering a component tree, which can be **extremely slow.**","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2816":{"pageContent":"`useInsertionEffect` is better than inserting styles during [`useLayoutEffect`](/reference/react/useLayoutEffect) or [`useEffect`](/reference/react/useEffect) because it ensures that by the time other Effects run in your components, the `<style>` tags have already been inserted. Otherwise, layout calculations in regular Effects would be wrong due to outdated styles.\n\n</DeepDive>","metadata":{"source":"reactjs.org/beta/src/content/reference/react/useInsertionEffect.md"}},"2817":{"pageContent":"--\n\ntitle: <Profiler>\n\n--\n\n<Intro>\n\n`<Profiler>` lets you measure rendering performance of a React tree programmatically.\n\n```js\n\n<Profiler id=\"App\" onRender={onRender}>\n\n<App />\n\n</Profiler>\n\n```\n\n</Intro>\n\n<InlineToc />\n\n--\n\n## Reference {/*reference*/}\n\n### `<Profiler>` {/*profiler*/}\n\nWrap a component tree in a `<Profiler>` to measure its rendering performance.\n\n```js\n\n<Profiler id=\"App\" onRender={onRender}>\n\n<App />\n\n</Profiler>\n\n```\n\n#### Props {/*props*/}\n\n`id`: A string identifying the part of the UI you are measuring.\n\n`onRender`: An [`onRender` callback](#onrender-callback) that React calls it every time components within the profiled tree update. It receives information about what was rendered and how much time it took.\n\n#### Caveats {/*caveats*/}\n\nProfiling adds some additional overhead, so **it is disabled in the production build by default.** To opt into production profiling, you need to enable a [special production build with profiling enabled.](https://fb.me/react-profiling)\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Profiler.md"}},"2818":{"pageContent":"--\n\n### `onRender` callback {/*onrender-callback*/}\n\nReact will call your `onRender` callback with information about what was rendered.\n\n```js\n\nfunction onRender(id, phase, actualDuration, baseDuration, startTime, commitTime) {\n\n// Aggregate or log render timings...\n\n}\n\n```\n\n#### Parameters {/*onrender-parameters*/}\n\n`id`: The string `id` prop of the `<Profiler>` tree that has just committed. This lets you identify which part of the tree was committed if you are using multiple profilers.\n\n`phase`: `\"mount\"`, `\"update\"` or `\"nested-update\"`. This lets you know whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Profiler.md"}},"2819":{"pageContent":"`phase`: `\"mount\"`, `\"update\"` or `\"nested-update\"`. This lets you know whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.\n\n`actualDuration`: The number of milliseconds spent rendering the `<Profiler>` and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g. [`memo`](/reference/react/memo) and [`useMemo`](/reference/react/useMemo)). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Profiler.md"}},"2820":{"pageContent":"`baseDuration`: The number of milliseconds estimating how much time it would take to re-render the entire `<Profiler>` subtree without any optimizations. It is calculated by summing up the most recent render durations of each component in the tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization). Compare `actualDuration` against it to see if memoization is working.\n\n`startTime`: A numeric timestamp for when React began rendering the current update.\n\n`endTime`: A numeric timestamp for when React committed the current update. This value is shared between all profilers in a commit, enabling them to be grouped if desirable.\n\n--\n\n## Usage {/*usage*/}\n\n### Measuring rendering performance programmatically {/*measuring-rendering-performance-programmatically*/}\n\nWrap the `<Profiler>` component around a React tree to measure its rendering performance.\n\n```js {2,4}\n\n<App>\n\n<Profiler id=\"Sidebar\" onRender={onRender}>\n\n<Sidebar />\n\n</Profiler>\n\n<PageContent />","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Profiler.md"}},"2821":{"pageContent":"Wrap the `<Profiler>` component around a React tree to measure its rendering performance.\n\n```js {2,4}\n\n<App>\n\n<Profiler id=\"Sidebar\" onRender={onRender}>\n\n<Sidebar />\n\n</Profiler>\n\n<PageContent />\n\n</App>\n\n```\n\nIt requires two props: an `id` (string) and an `onRender` callback (function) which React calls any time a component within the tree \"commits\" an update.\n\n<Pitfall>\n\nProfiling adds some additional overhead, so **it is disabled in the production build by default.** To opt into production profiling, you need to enable a [special production build with profiling enabled.](https://fb.me/react-profiling)\n\n</Pitfall>\n\n<Note>\n\n`<Profiler>` lets you gather measurements programmatically. If you're looking for an interactive profiler, try the Profiler tab in [React Developer Tools](/learn/react-developer-tools). It exposes similar functionality as a browser extension.\n\n</Note>\n\n--\n\n### Measuring different parts of the application {/*measuring-different-parts-of-the-application*/}","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Profiler.md"}},"2822":{"pageContent":"</Note>\n\n--\n\n### Measuring different parts of the application {/*measuring-different-parts-of-the-application*/}\n\nYou can use multiple `<Profiler>` components to measure different parts of your application:\n\n```js {5,7}\n\n<App>\n\n<Profiler id=\"Sidebar\" onRender={onRender}>\n\n<Sidebar />\n\n</Profiler>\n\n<Profiler id=\"Content\" onRender={onRender}>\n\n<Content />\n\n</Profiler>\n\n</App>\n\n```\n\nYou can also nest `<Profiler>` components:\n\n```js {5,7,9,12}\n\n<App>\n\n<Profiler id=\"Sidebar\" onRender={onRender}>\n\n<Sidebar />\n\n</Profiler>\n\n<Profiler id=\"Content\" onRender={onRender}>\n\n<Content>\n\n<Profiler id=\"Editor\" onRender={onRender}>\n\n<Editor />\n\n</Profiler>\n\n<Preview />\n\n</Content>\n\n</Profiler>\n\n</App>\n\n```\n\nAlthough `<Profiler>` is a lightweight component, it should be used only when necessary. Each use adds some CPU and memory overhead to an application.\n\n--","metadata":{"source":"reactjs.org/beta/src/content/reference/react/Profiler.md"}}}